-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 5 <= a <= 5
-- 8 <= b <= 8
-- 2 <= c <= 125
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   5 ^ x + 8 = 2 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 2 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 8 = 3 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 3 ^ y,
if x >= 2, 3 ^ y = 8 (mod 25).
So y = 9 (mod 20), 
which implies y = 9 (mod 10).
Therefore, 3 ^ y = 41 (mod 61).
So 5 ^ x = 33 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 3 ^ y is impossible.
-/
theorem diophantine1_5_8_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ y % 61) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [33]) [
    {prop := List.Mem (3 ^ y % 61) [41], proof := h10},
    {prop := 5 ^ x + 8 = 3 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 3 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 4 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 4 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 5 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 5 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 5 ^ y is impossible.
-/
theorem diophantine1_5_8_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 5 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 6 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 6 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 7 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 7 ^ y,
if x >= 2, 7 ^ y = 8 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 7 ^ y is impossible.
-/
theorem diophantine1_5_8_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 25 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 7 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 8 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 8 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 9 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 9 ^ y,
if x >= 1, 9 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 9 ^ y is impossible.
-/
theorem diophantine1_5_8_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 9 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 10 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 10 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 11 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 11 ^ y,
if x >= 1, 11 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 11 ^ y is impossible.
-/
theorem diophantine1_5_8_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 11 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 12 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 12 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 401...
-- Trying prime 601...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 601)   5 ^ x + 8 = 13 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 13 ^ y,
if x >= 3, 13 ^ y = 8 (mod 125).
So y = 77 (mod 100), 
which implies y = 17 (mod 20).
Therefore, 13 ^ y = 90 (mod 601).
So 5 ^ x = 82 (mod 601), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_5_8_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 13 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 125 = 8 := by omega
  have h9 := Claim (y % 100 = 77) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 125 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 601) [90]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 100 = 77, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 601) [82]) [
    {prop := List.Mem (13 ^ y % 601) [90], proof := h10},
    {prop := 5 ^ x + 8 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 601) [82], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 13 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 14 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 14 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 15 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 15 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 15 ^ y is impossible.
-/
theorem diophantine1_5_8_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 15 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 16 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 16 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 8 = 17 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 17 ^ y,
if x >= 2, 17 ^ y = 8 (mod 25).
So y = 11 (mod 20), 
which implies y = 11, 31 (mod 40).
Therefore, 17 ^ y = 11, 30 (mod 41).
So 5 ^ x = 3, 22 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 17 ^ y is impossible.
-/
theorem diophantine1_5_8_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 41) [11, 30]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [3, 22]) [
    {prop := List.Mem (17 ^ y % 41) [11, 30], proof := h10},
    {prop := 5 ^ x + 8 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [3, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 18 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 18 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 19 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 19 ^ y,
if x >= 1, 19 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 19 ^ y is impossible.
-/
theorem diophantine1_5_8_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 19 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 20 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 20 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 21 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 21 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 21 ^ y,
if x >= 1, 21 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 21 ^ y is impossible.
-/
theorem diophantine1_5_8_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 21 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 21 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 21 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 22 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 22 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 67)   5 ^ x + 8 = 23 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 23 ^ y,
if y >= 1, 5 ^ x = 15 (mod 23).
So x = 17 (mod 22).
Therefore, 5 ^ x = 53 (mod 67).
So 23 ^ y = 61 (mod 67), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 8 = 23 ^ y is impossible.
-/
theorem diophantine1_5_8_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 17) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 67) [53]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 67) [61]) [
    {prop := List.Mem (5 ^ x % 67) [53], proof := h10},
    {prop := 5 ^ x + 8 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 67) [61], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 24 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 24 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 25 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 25 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 25 ^ y is impossible.
-/
theorem diophantine1_5_8_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 25 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 26 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 26 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 27 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 8 = 27 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 27 ^ y,
if x >= 2, 27 ^ y = 8 (mod 25).
So y = 3 (mod 20), 
which implies y = 3 (mod 10).
Therefore, 27 ^ y = 41 (mod 61).
So 5 ^ x = 33 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 27 ^ y is impossible.
-/
theorem diophantine1_5_8_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 27 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (27 ^ y % 61) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [33]) [
    {prop := List.Mem (27 ^ y % 61) [41], proof := h10},
    {prop := 5 ^ x + 8 = 27 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 27 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 28 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 28 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 29 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 29 ^ y,
if x >= 1, 29 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 29 ^ y is impossible.
-/
theorem diophantine1_5_8_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 29 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 30 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 30 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 31 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 31 ^ y,
if x >= 1, 31 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 31 ^ y is impossible.
-/
theorem diophantine1_5_8_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 32 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 32 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 33 ...
-- Trying to disprove y >= 3 with prime factor 3 of 33 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   5 ^ x + 8 = 33 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 33 ^ y,
if y >= 3, 5 ^ x = 19 (mod 27).
So x = 6 (mod 18), 
which implies x = 6, 15, 24 (mod 27).
Therefore, 5 ^ x = 38, 105, 75 (mod 109).
So 33 ^ y = 46, 4, 83 (mod 109), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_5_8_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 33 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (33 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 19 := by omega
  have h9 := Claim (x % 18 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 19, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 109) [38, 105, 75]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (33 ^ y % 109) [46, 4, 83]) [
    {prop := List.Mem (5 ^ x % 109) [38, 105, 75], proof := h10},
    {prop := 5 ^ x + 8 = 33 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (33 ^ y % 109) [46, 4, 83], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 33 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 34 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 34 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 35 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 35 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 35 ^ y is impossible.
-/
theorem diophantine1_5_8_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 35 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 36 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 36 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   5 ^ x + 8 = 37 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 37 ^ y,
if y >= 1, 5 ^ x = 29 (mod 37).
So x = 15 (mod 36), 
which implies x = 15, 51 (mod 72).
Therefore, 5 ^ x = 30, 43 (mod 73).
So 37 ^ y = 38, 51 (mod 73), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 8 = 37 ^ y is impossible.
-/
theorem diophantine1_5_8_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 37 = 29 := by omega
  have h9 := Claim (x % 36 = 15) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 73) [30, 43]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 36 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (37 ^ y % 73) [38, 51]) [
    {prop := List.Mem (5 ^ x % 73) [30, 43], proof := h10},
    {prop := 5 ^ x + 8 = 37 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (37 ^ y % 73) [38, 51], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 38 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 38 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 39 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 39 ^ y,
if x >= 1, 39 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 39 ^ y is impossible.
-/
theorem diophantine1_5_8_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 39 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 39 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 40 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 40 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 41 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 41 ^ y,
if x >= 1, 41 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 41 ^ y is impossible.
-/
theorem diophantine1_5_8_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 41 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 42 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 42 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 43 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 43 ^ y,
if x >= 2, 43 ^ y = 8 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 43 ^ y is impossible.
-/
theorem diophantine1_5_8_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 25 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 43 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 44 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 44 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 45 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 45 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 45 ^ y is impossible.
-/
theorem diophantine1_5_8_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 45 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 46 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 46 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 8 = 47 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 47 ^ y,
if x >= 2, 47 ^ y = 8 (mod 25).
So y = 19 (mod 20), 
which implies y = 19, 39 (mod 40).
Therefore, 47 ^ y = 41, 200 (mod 241).
So 5 ^ x = 33, 192 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 47 ^ y is impossible.
-/
theorem diophantine1_5_8_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 19) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 241) [41, 200]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [33, 192]) [
    {prop := List.Mem (47 ^ y % 241) [41, 200], proof := h10},
    {prop := 5 ^ x + 8 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [33, 192], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 47 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 48 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 48 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 49 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 49 ^ y,
if x >= 1, 49 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 49 ^ y is impossible.
-/
theorem diophantine1_5_8_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 49 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 50 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 50 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 51 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 51 ^ y,
if x >= 1, 51 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 51 ^ y is impossible.
-/
theorem diophantine1_5_8_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 51 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 51 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 52 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 52 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 8 = 53 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 53 ^ y,
if x >= 2, 53 ^ y = 8 (mod 25).
So y = 9 (mod 20), 
which implies y = 9, 29 (mod 40).
Therefore, 53 ^ y = 11, 30 (mod 41).
So 5 ^ x = 3, 22 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 53 ^ y is impossible.
-/
theorem diophantine1_5_8_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 41) [11, 30]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [3, 22]) [
    {prop := List.Mem (53 ^ y % 41) [11, 30], proof := h10},
    {prop := 5 ^ x + 8 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [3, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 54 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 54 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 55 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 55 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 55 ^ y is impossible.
-/
theorem diophantine1_5_8_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (55 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 55 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 56 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 56 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 57 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 57 ...
-- Trying to disprove y >= 1 with prime factor 19 of 57 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 57 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 57 ^ y,
if x >= 2, 57 ^ y = 8 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 57 ^ y is impossible.
-/
theorem diophantine1_5_8_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 57 ^ y % 25 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 57 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 57 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 58 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 58 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 59 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 59 ^ y,
if x >= 1, 59 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 59 ^ y is impossible.
-/
theorem diophantine1_5_8_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 59 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 60 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 60 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 61 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 61 ^ y,
if x >= 1, 61 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 61 ^ y is impossible.
-/
theorem diophantine1_5_8_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 62 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 62 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 63 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 63 ...
-- Trying to disprove y >= 2 with prime factor 3 of 63 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 8 = 63 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 63 ^ y,
if x >= 2, 63 ^ y = 8 (mod 25).
So y = 17 (mod 20), 
which implies y = 17, 37, 57, 77, 97 (mod 100).
Therefore, 63 ^ y = 51, 18, 42, 98, 94 (mod 101).
So 5 ^ x = 43, 10, 34, 90, 86 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 63 ^ y is impossible.
-/
theorem diophantine1_5_8_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 63 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 63 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (63 ^ y % 101) [51, 18, 42, 98, 94]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [43, 10, 34, 90, 86]) [
    {prop := List.Mem (63 ^ y % 101) [51, 18, 42, 98, 94], proof := h10},
    {prop := 5 ^ x + 8 = 63 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [43, 10, 34, 90, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 63 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 64 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 64 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 65 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 65 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 65 ^ y is impossible.
-/
theorem diophantine1_5_8_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 65 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 66 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 66 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 8 = 67 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 67 ^ y,
if x >= 2, 67 ^ y = 8 (mod 25).
So y = 11 (mod 20), 
which implies y = 11, 31, 51, 71, 91 (mod 100).
Therefore, 67 ^ y = 29, 28, 34, 99, 12 (mod 101).
So 5 ^ x = 21, 20, 26, 91, 4 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 67 ^ y is impossible.
-/
theorem diophantine1_5_8_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 101) [29, 28, 34, 99, 12]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [21, 20, 26, 91, 4]) [
    {prop := List.Mem (67 ^ y % 101) [29, 28, 34, 99, 12], proof := h10},
    {prop := 5 ^ x + 8 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [21, 20, 26, 91, 4], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 68 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 68 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 69 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 69 ^ y,
if x >= 1, 69 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 69 ^ y is impossible.
-/
theorem diophantine1_5_8_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 69 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 69 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 69 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 70 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 70 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 71 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 71 ^ y,
if x >= 1, 71 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 71 ^ y is impossible.
-/
theorem diophantine1_5_8_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 71 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 72 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 72 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 8 = 73 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 73 ^ y,
if x >= 2, 73 ^ y = 8 (mod 25).
So y = 13 (mod 20), 
which implies y = 1 (mod 4).
Therefore, 73 ^ y = 32 (mod 41).
So 5 ^ x = 24 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 73 ^ y is impossible.
-/
theorem diophantine1_5_8_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 41) [32]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [24]) [
    {prop := List.Mem (73 ^ y % 41) [32], proof := h10},
    {prop := 5 ^ x + 8 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [24], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 74 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 74 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 75 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 75 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 75 ^ y is impossible.
-/
theorem diophantine1_5_8_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 75 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 76 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 76 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Trying to disprove y >= 1 with prime factor 11 of 77 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 2 with prime factor 7 of 77 ...
-- Trying prime 43...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   5 ^ x + 8 = 77 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 77 ^ y,
if y >= 2, 5 ^ x = 41 (mod 49).
So x = 15 (mod 42).
Therefore, 5 ^ x = 95 (mod 127).
So 77 ^ y = 103 (mod 127), but this is impossible.
Therefore, y < 2.
Further examination shows that 5 ^ x + 8 = 77 ^ y is impossible.
-/
theorem diophantine1_5_8_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (77 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 49 = 41 := by omega
  have h9 := Claim (x % 42 = 15) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 49 = 41, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 127) [95]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (77 ^ y % 127) [103]) [
    {prop := List.Mem (5 ^ x % 127) [95], proof := h10},
    {prop := 5 ^ x + 8 = 77 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (77 ^ y % 127) [103], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 77 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 78 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 78 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 79 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 79 ^ y,
if x >= 1, 79 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 79 ^ y is impossible.
-/
theorem diophantine1_5_8_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 80 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 80 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 81 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 81 ^ y,
if x >= 1, 81 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 81 ^ y is impossible.
-/
theorem diophantine1_5_8_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 81 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 81 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 82 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 82 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 8 = 83 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 83 ^ y,
if x >= 2, 83 ^ y = 8 (mod 25).
So y = 1 (mod 20), 
which implies y = 1, 21, 41, 61, 81 (mod 100).
Therefore, 83 ^ y = 83, 3, 50, 59, 7 (mod 101).
So 5 ^ x = 75, 96, 42, 51, 100 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 83 ^ y is impossible.
-/
theorem diophantine1_5_8_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 101) [83, 3, 50, 59, 7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [75, 96, 42, 51, 100]) [
    {prop := List.Mem (83 ^ y % 101) [83, 3, 50, 59, 7], proof := h10},
    {prop := 5 ^ x + 8 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [75, 96, 42, 51, 100], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 84 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 84 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 85 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 85 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 85 ^ y is impossible.
-/
theorem diophantine1_5_8_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 85 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 86 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 86 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 87 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 8 = 87 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 87 ^ y,
if x >= 2, 87 ^ y = 8 (mod 25).
So y = 7 (mod 20), 
Therefore, 87 ^ y = 20 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 87 ^ y is impossible.
-/
theorem diophantine1_5_8_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 87 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 87 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (87 ^ y % 41) [20]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (87 ^ y % 41) [20], proof := h10},
    {prop := 5 ^ x + 8 = 87 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 87 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 88 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 88 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 89 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 89 ^ y,
if x >= 1, 89 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 89 ^ y is impossible.
-/
theorem diophantine1_5_8_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 89 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 90 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 90 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 91 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 91 ^ y,
if x >= 1, 91 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 91 ^ y is impossible.
-/
theorem diophantine1_5_8_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 91 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 91 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 92 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 92 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 93 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 93 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 93 ^ y,
if x >= 2, 93 ^ y = 8 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 93 ^ y is impossible.
-/
theorem diophantine1_5_8_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 93 ^ y % 25 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 93 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 93 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 94 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 94 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 95 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 95 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 95 ^ y is impossible.
-/
theorem diophantine1_5_8_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 95 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 96 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 96 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 8 = 97 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 97 ^ y,
if x >= 2, 97 ^ y = 8 (mod 25).
So y = 19 (mod 20), 
which implies y = 19, 39 (mod 40).
Therefore, 97 ^ y = 30, 11 (mod 41).
So 5 ^ x = 22, 3 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 97 ^ y is impossible.
-/
theorem diophantine1_5_8_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 19) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 41) [30, 11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [22, 3]) [
    {prop := List.Mem (97 ^ y % 41) [30, 11], proof := h10},
    {prop := 5 ^ x + 8 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [22, 3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 98 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 98 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 99 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 99 ^ y,
if x >= 1, 99 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 99 ^ y is impossible.
-/
theorem diophantine1_5_8_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 99 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 99 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 99 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 100 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 100 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 101 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 101 ^ y,
if x >= 1, 101 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 101 ^ y is impossible.
-/
theorem diophantine1_5_8_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 101 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 102 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 102 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 8 = 103 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 103 ^ y,
if x >= 2, 103 ^ y = 8 (mod 25).
So y = 9 (mod 20), 
which implies y = 9, 29, 49, 69, 89 (mod 100).
Therefore, 103 ^ y = 7, 59, 50, 3, 83 (mod 101).
So 5 ^ x = 100, 51, 42, 96, 75 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 103 ^ y is impossible.
-/
theorem diophantine1_5_8_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 101) [7, 59, 50, 3, 83]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [100, 51, 42, 96, 75]) [
    {prop := List.Mem (103 ^ y % 101) [7, 59, 50, 3, 83], proof := h10},
    {prop := 5 ^ x + 8 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [100, 51, 42, 96, 75], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 104 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 104 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (104 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 105 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 105 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 105 ^ y is impossible.
-/
theorem diophantine1_5_8_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 105 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 106 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 106 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 107 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 107 ^ y,
if x >= 2, 107 ^ y = 8 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 107 ^ y is impossible.
-/
theorem diophantine1_5_8_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 25 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 108 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 108 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 109 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 109 ^ y,
if x >= 1, 109 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 109 ^ y is impossible.
-/
theorem diophantine1_5_8_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 110 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 110 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (110 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 111 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 111 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 111 ^ y,
if x >= 1, 111 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 111 ^ y is impossible.
-/
theorem diophantine1_5_8_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 111 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 111 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 111 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 112 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 112 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (112 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 8 = 113 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 113 ^ y,
if x >= 2, 113 ^ y = 8 (mod 25).
So y = 17 (mod 20), 
which implies y = 7 (mod 10).
Therefore, 113 ^ y = 23 (mod 41).
So 5 ^ x = 15 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 113 ^ y is impossible.
-/
theorem diophantine1_5_8_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 41) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [15]) [
    {prop := List.Mem (113 ^ y % 41) [23], proof := h10},
    {prop := 5 ^ x + 8 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 113 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 114 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 114 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 115 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 115 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 115 ^ y is impossible.
-/
theorem diophantine1_5_8_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (115 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 115 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 116 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 116 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (116 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 117 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 117 ...
-- Trying to disprove y >= 1 with prime factor 13 of 117 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 8 = 117 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 117 ^ y,
if x >= 2, 117 ^ y = 8 (mod 25).
So y = 11 (mod 20), 
which implies y = 1, 6, 11 (mod 15).
Therefore, 117 ^ y = 117, 59, 5 (mod 181).
So 5 ^ x = 109, 51, 178 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 8 = 117 ^ y is impossible.
-/
theorem diophantine1_5_8_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 117 ^ y % 25 = 8 := by omega
  have h9 := Claim (y % 20 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 117 ^ y % 25 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (117 ^ y % 181) [117, 59, 5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [109, 51, 178]) [
    {prop := List.Mem (117 ^ y % 181) [117, 59, 5], proof := h10},
    {prop := 5 ^ x + 8 = 117 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [109, 51, 178], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 117 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 118 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 118 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 119 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 119 ^ y,
if x >= 1, 119 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 119 ^ y is impossible.
-/
theorem diophantine1_5_8_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 119 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 119 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 119 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 120 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 120 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 8).
-/
theorem diophantine1_5_8_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 8 = 121 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 121 ^ y,
if x >= 1, 121 ^ y = 3 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 8 = 121 ^ y is impossible.
-/
theorem diophantine1_5_8_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 122 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 122 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_8_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 123 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 123 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying to disprove y >= 3 with prime factor 3 of 123 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   5 ^ x + 8 = 123 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 123 ^ y,
if y >= 3, 5 ^ x = 19 (mod 27).
So x = 6 (mod 18), 
which implies x = 6 (mod 9).
Therefore, 5 ^ x = 7 (mod 19).
So 123 ^ y = 15 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 8 = 123 ^ y is impossible.
-/
theorem diophantine1_5_8_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (123 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 19 := by omega
  have h9 := Claim (x % 18 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 19, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 19) [7]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (123 ^ y % 19) [15]) [
    {prop := List.Mem (5 ^ x % 19) [7], proof := h10},
    {prop := 5 ^ x + 8 = 123 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (123 ^ y % 19) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 123 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 8 = 124 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 124 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 4).
-/
theorem diophantine1_5_8_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (124 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 8 = 125 ^ y
For positive integers x, y satisfying 5 ^ x + 8 = 125 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 8 = 125 ^ y is impossible.
-/
theorem diophantine1_5_8_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 8 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 8 = 125 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
