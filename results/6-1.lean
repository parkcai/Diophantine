-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 6 <= a <= 6
-- 1 <= b <= 1
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   6 ^ x + 1 = 2 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 2 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 2 ^ y is impossible.
-/
theorem diophantine1_6_1_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 2 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 3 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 3 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 3 ^ y is impossible.
-/
theorem diophantine1_6_1_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 3 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 4 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 4 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 4 ^ y is impossible.
-/
theorem diophantine1_6_1_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 4 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 5 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 5 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 5 ^ y is impossible.
-/
theorem diophantine1_6_1_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (5 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 5 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 6 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 6 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 6 ^ y is impossible.
-/
theorem diophantine1_6_1_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 6 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove y >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 29)   6 ^ x + 1 = 7 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 7 ^ y,
if y >= 2, 6 ^ x = 48 (mod 49).
So x = 7 (mod 14).
Therefore, 6 ^ x = 28 (mod 29).
So 7 ^ y = 0 (mod 29), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_6_1_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 7 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (7 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 14 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 29) [28]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 14 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ y % 29) [0]) [
    {prop := List.Mem (6 ^ x % 29) [28], proof := h10},
    {prop := 6 ^ x + 1 = 7 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (7 ^ y % 29) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 7 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 8 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 8 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 8 ^ y is impossible.
-/
theorem diophantine1_6_1_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 8 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 9 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 9 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 9 ^ y is impossible.
-/
theorem diophantine1_6_1_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 9 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 10 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 10 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 10 ^ y is impossible.
-/
theorem diophantine1_6_1_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 10 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   6 ^ x + 1 = 11 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 11 ^ y,
if y >= 1, 6 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 6 ^ x = 29, 50, 21, 32, 11, 40 (mod 61).
So 11 ^ y = 30, 51, 22, 33, 12, 41 (mod 61), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 11 ^ y is impossible.
-/
theorem diophantine1_6_1_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 61) [29, 50, 21, 32, 11, 40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (11 ^ y % 61) [30, 51, 22, 33, 12, 41]) [
    {prop := List.Mem (6 ^ x % 61) [29, 50, 21, 32, 11, 40], proof := h10},
    {prop := 6 ^ x + 1 = 11 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (11 ^ y % 61) [30, 51, 22, 33, 12, 41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 12 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 12 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 12 ^ y is impossible.
-/
theorem diophantine1_6_1_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 12 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   6 ^ x + 1 = 13 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 13 ^ y,
if y >= 1, 6 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 2 (mod 4).
Therefore, 6 ^ x = 36 (mod 37).
So 13 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 13 ^ y is impossible.
-/
theorem diophantine1_6_1_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (13 ^ y % 37) [0]) [
    {prop := List.Mem (6 ^ x % 37) [36], proof := h10},
    {prop := 6 ^ x + 1 = 13 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (13 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 14 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 14 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 14 ^ y is impossible.
-/
theorem diophantine1_6_1_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 14 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 15 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 15 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 15 ^ y is impossible.
-/
theorem diophantine1_6_1_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 15 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 16 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 16 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 16 ^ y is impossible.
-/
theorem diophantine1_6_1_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 16 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   6 ^ x + 1 = 17 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 17 ^ y,
if y >= 1, 6 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 0, 4, 8, 12, 16 (mod 20).
Therefore, 6 ^ x = 1, 91, 87, 205, 98 (mod 241).
So 17 ^ y = 2, 92, 88, 206, 99 (mod 241), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 17 ^ y is impossible.
-/
theorem diophantine1_6_1_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (17 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 241) [1, 91, 87, 205, 98]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (17 ^ y % 241) [2, 92, 88, 206, 99]) [
    {prop := List.Mem (6 ^ x % 241) [1, 91, 87, 205, 98], proof := h10},
    {prop := 6 ^ x + 1 = 17 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (17 ^ y % 241) [2, 92, 88, 206, 99], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 17 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 18 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 18 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 18 ^ y is impossible.
-/
theorem diophantine1_6_1_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 19 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 19 ^ y,
if y >= 1, 6 ^ x = 18 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 19 ^ y is impossible.
-/
theorem diophantine1_6_1_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 19 = 18 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 20 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 20 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 20 ^ y is impossible.
-/
theorem diophantine1_6_1_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 20 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 21 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 21 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 21 ^ y is impossible.
-/
theorem diophantine1_6_1_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 21 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 22 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 22 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 22 ^ y is impossible.
-/
theorem diophantine1_6_1_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 22 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 23 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 23 ^ y,
if y >= 1, 6 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 23 ^ y is impossible.
-/
theorem diophantine1_6_1_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 24 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 24 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 24 ^ y is impossible.
-/
theorem diophantine1_6_1_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 25 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 25 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 25 ^ y is impossible.
-/
theorem diophantine1_6_1_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (25 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 25 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 26 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 26 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 26 ^ y is impossible.
-/
theorem diophantine1_6_1_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 26 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 27 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 27 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 27 ^ y is impossible.
-/
theorem diophantine1_6_1_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 27 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 28 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 28 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 28 ^ y is impossible.
-/
theorem diophantine1_6_1_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 28 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 29 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 29 ^ y,
if x >= 3, 29 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 29 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 29 ^ y is impossible.
-/
theorem diophantine1_6_1_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (29 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 30 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 30 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 30 ^ y is impossible.
-/
theorem diophantine1_6_1_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 30 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   6 ^ x + 1 = 31 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 31 ^ y,
if x >= 4, 31 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27 (mod 54).
Therefore, 31 ^ y = 1, 162 (mod 163).
So 6 ^ x = 0, 161 (mod 163), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 31 ^ y is impossible.
-/
theorem diophantine1_6_1_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (31 ^ y % 163) [1, 162]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 163) [0, 161]) [
    {prop := List.Mem (31 ^ y % 163) [1, 162], proof := h10},
    {prop := 6 ^ x + 1 = 31 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 163) [0, 161], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 31 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 32 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 32 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 32 ^ y is impossible.
-/
theorem diophantine1_6_1_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 32 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 33 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 33 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 33 ^ y is impossible.
-/
theorem diophantine1_6_1_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 33 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 34 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 34 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 34 ^ y is impossible.
-/
theorem diophantine1_6_1_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 34 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 35 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 35 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 35 ^ y is impossible.
-/
theorem diophantine1_6_1_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 36 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 36 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 36 ^ y is impossible.
-/
theorem diophantine1_6_1_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 37 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 37 ^ y,
if x >= 6, 37 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 37 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_6_1_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 37 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (37 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 37 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 38 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 38 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 38 ^ y is impossible.
-/
theorem diophantine1_6_1_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 38 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 39 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 39 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 39 ^ y is impossible.
-/
theorem diophantine1_6_1_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 39 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 40 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 40 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 40 ^ y is impossible.
-/
theorem diophantine1_6_1_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 40 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 41 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 41 ^ y,
if x >= 3, 41 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 41 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 41 ^ y is impossible.
-/
theorem diophantine1_6_1_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (41 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 42 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 42 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 42 ^ y is impossible.
-/
theorem diophantine1_6_1_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 43 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 43 ^ y,
if y >= 1, 6 ^ x = 42 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 43 ^ y is impossible.
-/
theorem diophantine1_6_1_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 43 = 42 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 43 = 42, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 44 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 44 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 44 ^ y is impossible.
-/
theorem diophantine1_6_1_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 44 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 45 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 45 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 45 ^ y is impossible.
-/
theorem diophantine1_6_1_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 46 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 46 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 46 ^ y is impossible.
-/
theorem diophantine1_6_1_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 46 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 47 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 47 ^ y,
if x >= 3, 47 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 47 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 47 ^ y is impossible.
-/
theorem diophantine1_6_1_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (47 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 48 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 48 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 48 ^ y is impossible.
-/
theorem diophantine1_6_1_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove y >= 2 with prime factor 7 of 49 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 29)   6 ^ x + 1 = 49 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 49 ^ y,
if y >= 2, 6 ^ x = 48 (mod 49).
So x = 7 (mod 14).
Therefore, 6 ^ x = 28 (mod 29).
So 49 ^ y = 0 (mod 29), but this is impossible.
Therefore, y < 2.
Further examination shows that 6 ^ x + 1 = 49 ^ y is impossible.
-/
theorem diophantine1_6_1_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (49 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 14 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 29) [28]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 14 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (49 ^ y % 29) [0]) [
    {prop := List.Mem (6 ^ x % 29) [28], proof := h10},
    {prop := 6 ^ x + 1 = 49 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (49 ^ y % 29) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 49 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 50 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 50 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 50 ^ y is impossible.
-/
theorem diophantine1_6_1_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 50 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 51 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 51 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 51 ^ y is impossible.
-/
theorem diophantine1_6_1_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 51 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 52 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 52 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 52 ^ y is impossible.
-/
theorem diophantine1_6_1_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 52 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 53 of 53 ...
-- Trying prime 79...
-- Trying prime 131...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 131)   6 ^ x + 1 = 53 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 53 ^ y,
if y >= 1, 6 ^ x = 52 (mod 53).
So x = 13 (mod 26), 
which implies x = 13, 39, 65, 91, 117 (mod 130).
Therefore, 6 ^ x = 42, 73, 130, 70, 78 (mod 131).
So 53 ^ y = 43, 74, 0, 71, 79 (mod 131), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 53 ^ y is impossible.
-/
theorem diophantine1_6_1_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 53 = 52 := by omega
  have h9 := Claim (x % 26 = 13) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 53 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 131) [42, 73, 130, 70, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 26 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 131) [43, 74, 0, 71, 79]) [
    {prop := List.Mem (6 ^ x % 131) [42, 73, 130, 70, 78], proof := h10},
    {prop := 6 ^ x + 1 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 131) [43, 74, 0, 71, 79], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 54 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 54 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 54 ^ y is impossible.
-/
theorem diophantine1_6_1_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 55 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 55 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 55 ^ y is impossible.
-/
theorem diophantine1_6_1_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 56 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 56 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 56 ^ y is impossible.
-/
theorem diophantine1_6_1_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 56 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 57 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 57 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 57 ^ y is impossible.
-/
theorem diophantine1_6_1_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 57 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 58 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 58 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 58 ^ y is impossible.
-/
theorem diophantine1_6_1_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 58 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 59 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 59 ^ y,
if x >= 3, 59 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 59 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 59 ^ y is impossible.
-/
theorem diophantine1_6_1_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (59 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 60 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 60 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 60 ^ y is impossible.
-/
theorem diophantine1_6_1_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 60 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   6 ^ x + 1 = 61 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 61 ^ y,
if y >= 1, 6 ^ x = 60 (mod 61).
So x = 30 (mod 60).
Therefore, 6 ^ x = 180 (mod 181).
So 61 ^ y = 0 (mod 181), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 61 ^ y is impossible.
-/
theorem diophantine1_6_1_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 61 = 60 := by omega
  have h9 := Claim (x % 60 = 30) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 61 = 60, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 181) [180]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 181) [0]) [
    {prop := List.Mem (6 ^ x % 181) [180], proof := h10},
    {prop := 6 ^ x + 1 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 181) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 62 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 62 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 62 ^ y is impossible.
-/
theorem diophantine1_6_1_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 62 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 63 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 63 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 63 ^ y is impossible.
-/
theorem diophantine1_6_1_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 63 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 64 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 64 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 64 ^ y is impossible.
-/
theorem diophantine1_6_1_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 64 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 65 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 65 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 65 ^ y is impossible.
-/
theorem diophantine1_6_1_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 66 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 66 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 66 ^ y is impossible.
-/
theorem diophantine1_6_1_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 66 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 67 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 67 ^ y,
if x >= 6, 67 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 2).
Therefore, 67 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 67 ^ y is impossible.
-/
theorem diophantine1_6_1_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (67 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 67 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 68 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 68 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 68 ^ y is impossible.
-/
theorem diophantine1_6_1_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 68 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 69 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 69 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 69 ^ y is impossible.
-/
theorem diophantine1_6_1_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 69 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 70 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 70 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 70 ^ y is impossible.
-/
theorem diophantine1_6_1_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 70 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 71 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 71 ^ y,
if y >= 1, 6 ^ x = 70 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 71 ^ y is impossible.
-/
theorem diophantine1_6_1_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 71 = 70 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 71 = 70, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 72 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 72 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 72 ^ y is impossible.
-/
theorem diophantine1_6_1_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 73 of 73 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   6 ^ x + 1 = 73 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 73 ^ y,
if y >= 1, 6 ^ x = 72 (mod 73).
So x = 18 (mod 36), 
which implies x = 2 (mod 4).
Therefore, 6 ^ x = 36 (mod 37).
So 73 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 73 ^ y is impossible.
-/
theorem diophantine1_6_1_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (73 ^ y % 73 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 73 = 72 := by omega
  have h9 := Claim (x % 36 = 18) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 73 = 72, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 36 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (73 ^ y % 37) [0]) [
    {prop := List.Mem (6 ^ x % 37) [36], proof := h10},
    {prop := 6 ^ x + 1 = 73 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (73 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 73 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 74 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 74 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 74 ^ y is impossible.
-/
theorem diophantine1_6_1_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 74 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 75 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 75 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 75 ^ y is impossible.
-/
theorem diophantine1_6_1_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 75 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 76 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 76 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 76 ^ y is impossible.
-/
theorem diophantine1_6_1_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 76 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 11 of 77 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   6 ^ x + 1 = 77 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 77 ^ y,
if y >= 1, 6 ^ x = 10 (mod 11).
So x = 5 (mod 10).
Therefore, 6 ^ x = 100 (mod 101).
So 77 ^ y = 0 (mod 101), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 77 ^ y is impossible.
-/
theorem diophantine1_6_1_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 101) [100]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (77 ^ y % 101) [0]) [
    {prop := List.Mem (6 ^ x % 101) [100], proof := h10},
    {prop := 6 ^ x + 1 = 77 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (77 ^ y % 101) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 78 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 78 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 78 ^ y is impossible.
-/
theorem diophantine1_6_1_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 78 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 79 of 79 ...
-- Trying prime 157...
-- Trying prime 313...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 313)   6 ^ x + 1 = 79 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 79 ^ y,
if y >= 1, 6 ^ x = 78 (mod 79).
So x = 39 (mod 78), 
which implies x = 13, 39 (mod 52).
Therefore, 6 ^ x = 288, 25 (mod 313).
So 79 ^ y = 289, 26 (mod 313), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 79 ^ y is impossible.
-/
theorem diophantine1_6_1_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (79 ^ y % 79 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 79 = 78 := by omega
  have h9 := Claim (x % 78 = 39) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 79 = 78, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 313) [288, 25]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 78 = 39, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (79 ^ y % 313) [289, 26]) [
    {prop := List.Mem (6 ^ x % 313) [288, 25], proof := h10},
    {prop := 6 ^ x + 1 = 79 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (79 ^ y % 313) [289, 26], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 79 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 80 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 80 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 80 ^ y is impossible.
-/
theorem diophantine1_6_1_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 80 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 81 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 81 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 81 ^ y is impossible.
-/
theorem diophantine1_6_1_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 81 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 82 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 82 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 82 ^ y is impossible.
-/
theorem diophantine1_6_1_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 82 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 83 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 83 ^ y,
if x >= 3, 83 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 83 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 83 ^ y is impossible.
-/
theorem diophantine1_6_1_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (83 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 84 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 84 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 84 ^ y is impossible.
-/
theorem diophantine1_6_1_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 85 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 85 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 85 ^ y is impossible.
-/
theorem diophantine1_6_1_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (85 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 85 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 86 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 86 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 86 ^ y is impossible.
-/
theorem diophantine1_6_1_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 86 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 87 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 87 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 87 ^ y is impossible.
-/
theorem diophantine1_6_1_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 87 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 88 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 88 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 88 ^ y is impossible.
-/
theorem diophantine1_6_1_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 88 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 89 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 89 ^ y,
if x >= 4, 89 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
Therefore, 89 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 89 ^ y is impossible.
-/
theorem diophantine1_6_1_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (89 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 89 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 90 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 90 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 90 ^ y is impossible.
-/
theorem diophantine1_6_1_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 90 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 13 of 91 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   6 ^ x + 1 = 91 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 91 ^ y,
if y >= 1, 6 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 2 (mod 4).
Therefore, 6 ^ x = 36 (mod 37).
So 91 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 91 ^ y is impossible.
-/
theorem diophantine1_6_1_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (91 ^ y % 37) [0]) [
    {prop := List.Mem (6 ^ x % 37) [36], proof := h10},
    {prop := 6 ^ x + 1 = 91 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (91 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 92 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 92 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 92 ^ y is impossible.
-/
theorem diophantine1_6_1_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 92 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 93 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 93 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 93 ^ y is impossible.
-/
theorem diophantine1_6_1_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 93 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 94 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 94 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 94 ^ y is impossible.
-/
theorem diophantine1_6_1_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 94 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 95 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 95 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 95 ^ y is impossible.
-/
theorem diophantine1_6_1_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 96 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 96 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 96 ^ y is impossible.
-/
theorem diophantine1_6_1_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   6 ^ x + 1 = 97 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 97 ^ y,
if x >= 4, 97 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 97 ^ y = 1 (mod 109).
So 6 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 97 ^ y is impossible.
-/
theorem diophantine1_6_1_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 109) [0]) [
    {prop := List.Mem (97 ^ y % 109) [1], proof := h10},
    {prop := 6 ^ x + 1 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 98 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 98 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 98 ^ y is impossible.
-/
theorem diophantine1_6_1_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 98 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 99 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 99 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 99 ^ y is impossible.
-/
theorem diophantine1_6_1_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 99 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 100 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 100 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 100 ^ y is impossible.
-/
theorem diophantine1_6_1_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 100 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 101 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 101 ^ y,
if x >= 3, 101 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 101 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 101 ^ y is impossible.
-/
theorem diophantine1_6_1_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (101 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 102 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 102 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 102 ^ y is impossible.
-/
theorem diophantine1_6_1_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 102 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove y >= 1 with prime factor 103 of 103 ...
-- Trying prime 307...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 307)   6 ^ x + 1 = 103 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 103 ^ y,
if y >= 1, 6 ^ x = 102 (mod 103).
So x = 51 (mod 102), 
which implies x = 0 (mod 51).
Therefore, 6 ^ x = 1 (mod 307).
So 103 ^ y = 2 (mod 307), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 103 ^ y is impossible.
-/
theorem diophantine1_6_1_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (103 ^ y % 103 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 103 = 102 := by omega
  have h9 := Claim (x % 102 = 51) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 103 = 102, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 307) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 102 = 51, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (103 ^ y % 307) [2]) [
    {prop := List.Mem (6 ^ x % 307) [1], proof := h10},
    {prop := 6 ^ x + 1 = 103 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (103 ^ y % 307) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 103 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 104 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 104 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 104 ^ y is impossible.
-/
theorem diophantine1_6_1_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 104 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 105 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 105 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 105 ^ y is impossible.
-/
theorem diophantine1_6_1_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 105 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 106 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 106 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 106 ^ y is impossible.
-/
theorem diophantine1_6_1_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 106 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 107 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 107 ^ y,
if x >= 6, 107 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 107 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 107 ^ y is impossible.
-/
theorem diophantine1_6_1_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (107 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 107 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 108 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 108 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 108 ^ y is impossible.
-/
theorem diophantine1_6_1_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 108 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 109 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 109 ^ y,
if x >= 6, 109 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 109 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 109 ^ y is impossible.
-/
theorem diophantine1_6_1_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (109 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 109 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 110 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 110 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 110 ^ y is impossible.
-/
theorem diophantine1_6_1_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 110 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 111 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 111 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 111 ^ y is impossible.
-/
theorem diophantine1_6_1_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 111 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 112 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 112 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 112 ^ y is impossible.
-/
theorem diophantine1_6_1_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 112 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 113 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 113 ^ y,
if x >= 3, 113 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 2).
Therefore, 113 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 113 ^ y is impossible.
-/
theorem diophantine1_6_1_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (113 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 114 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 114 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 114 ^ y is impossible.
-/
theorem diophantine1_6_1_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 114 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 115 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 115 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 115 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 115 ^ y is impossible.
-/
theorem diophantine1_6_1_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 116 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 116 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 116 ^ y is impossible.
-/
theorem diophantine1_6_1_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 116 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 117 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 117 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 117 ^ y is impossible.
-/
theorem diophantine1_6_1_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (117 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 117 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 118 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 118 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 118 ^ y is impossible.
-/
theorem diophantine1_6_1_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 118 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 17 of 119 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   6 ^ x + 1 = 119 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 119 ^ y,
if y >= 1, 6 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 0, 4, 8 (mod 12).
Therefore, 6 ^ x = 1, 35, 61 (mod 97).
So 119 ^ y = 2, 36, 62 (mod 97), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 119 ^ y is impossible.
-/
theorem diophantine1_6_1_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 97) [1, 35, 61]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (119 ^ y % 97) [2, 36, 62]) [
    {prop := List.Mem (6 ^ x % 97) [1, 35, 61], proof := h10},
    {prop := 6 ^ x + 1 = 119 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (119 ^ y % 97) [2, 36, 62], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 120 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 120 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 120 ^ y is impossible.
-/
theorem diophantine1_6_1_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 120 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   6 ^ x + 1 = 121 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 121 ^ y,
if y >= 1, 6 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 6 ^ x = 29, 50, 21, 32, 11, 40 (mod 61).
So 121 ^ y = 30, 51, 22, 33, 12, 41 (mod 61), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 121 ^ y is impossible.
-/
theorem diophantine1_6_1_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (121 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 61) [29, 50, 21, 32, 11, 40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 61) [30, 51, 22, 33, 12, 41]) [
    {prop := List.Mem (6 ^ x % 61) [29, 50, 21, 32, 11, 40], proof := h10},
    {prop := 6 ^ x + 1 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 61) [30, 51, 22, 33, 12, 41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 121 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 122 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 122 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 122 ^ y is impossible.
-/
theorem diophantine1_6_1_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 122 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 123 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 123 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 123 ^ y is impossible.
-/
theorem diophantine1_6_1_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 123 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 124 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 124 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 124 ^ y is impossible.
-/
theorem diophantine1_6_1_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 124 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 125 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 125 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 125 ^ y is impossible.
-/
theorem diophantine1_6_1_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (125 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 125 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 126 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 126 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 126 ^ y is impossible.
-/
theorem diophantine1_6_1_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (126 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 126 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 127 of 127 ...
-- Trying prime 379...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 379)   6 ^ x + 1 = 127 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 127 ^ y,
if y >= 1, 6 ^ x = 126 (mod 127).
So x = 63 (mod 126), 
which implies x = 0 (mod 63).
Therefore, 6 ^ x = 1 (mod 379).
So 127 ^ y = 2 (mod 379), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 127 ^ y is impossible.
-/
theorem diophantine1_6_1_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (127 ^ y % 127 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 127 = 126 := by omega
  have h9 := Claim (x % 126 = 63) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 127 = 126, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 379) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 126 = 63, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (127 ^ y % 379) [2]) [
    {prop := List.Mem (6 ^ x % 379) [1], proof := h10},
    {prop := 6 ^ x + 1 = 127 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (127 ^ y % 379) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 127 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 128 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 128 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 128 ^ y is impossible.
-/
theorem diophantine1_6_1_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 128 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 129 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 129 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 129 ^ y is impossible.
-/
theorem diophantine1_6_1_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 129 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 130 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 130 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 130 ^ y is impossible.
-/
theorem diophantine1_6_1_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 130 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 131 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 131 ^ y,
if x >= 3, 131 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 131 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 131 ^ y is impossible.
-/
theorem diophantine1_6_1_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (131 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 131 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 132 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 132 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 132 ^ y is impossible.
-/
theorem diophantine1_6_1_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (132 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 132 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 133 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 19 of 133 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 133 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 133 ^ y,
if y >= 1, 6 ^ x = 18 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 133 ^ y is impossible.
-/
theorem diophantine1_6_1_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 19 = 18 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 134 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 134 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 134 ^ y is impossible.
-/
theorem diophantine1_6_1_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 134 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 135 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 135 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 135 ^ y is impossible.
-/
theorem diophantine1_6_1_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (135 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 135 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 136 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 136 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 136 ^ y is impossible.
-/
theorem diophantine1_6_1_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 136 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 137 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 137 ^ y,
if x >= 3, 137 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 137 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 137 ^ y is impossible.
-/
theorem diophantine1_6_1_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (137 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 137 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 138 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 138 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 138 ^ y is impossible.
-/
theorem diophantine1_6_1_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (138 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 138 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 139 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 139 ^ y,
if x >= 6, 139 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 139 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 139 ^ y is impossible.
-/
theorem diophantine1_6_1_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (139 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 139 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 140 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 140 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 140 ^ y is impossible.
-/
theorem diophantine1_6_1_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (140 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 140 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 141 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 141 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 141 ^ y is impossible.
-/
theorem diophantine1_6_1_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 141 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 142 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 142 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 142 ^ y is impossible.
-/
theorem diophantine1_6_1_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 142 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   6 ^ x + 1 = 143 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 143 ^ y,
if y >= 1, 6 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 6 ^ x = 29, 50, 21, 32, 11, 40 (mod 61).
So 143 ^ y = 30, 51, 22, 33, 12, 41 (mod 61), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 143 ^ y is impossible.
-/
theorem diophantine1_6_1_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 61) [29, 50, 21, 32, 11, 40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (143 ^ y % 61) [30, 51, 22, 33, 12, 41]) [
    {prop := List.Mem (6 ^ x % 61) [29, 50, 21, 32, 11, 40], proof := h10},
    {prop := 6 ^ x + 1 = 143 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (143 ^ y % 61) [30, 51, 22, 33, 12, 41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 144 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 144 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 144 ^ y is impossible.
-/
theorem diophantine1_6_1_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (144 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 144 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 145 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 145 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 145 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 145 ^ y is impossible.
-/
theorem diophantine1_6_1_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (145 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 145 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 146 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 146 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 146 ^ y is impossible.
-/
theorem diophantine1_6_1_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 146 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 147 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 147 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 147 ^ y is impossible.
-/
theorem diophantine1_6_1_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 147 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 148 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 148 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 148 ^ y is impossible.
-/
theorem diophantine1_6_1_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 148 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 149 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 149 ^ y,
if x >= 3, 149 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 149 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 149 ^ y is impossible.
-/
theorem diophantine1_6_1_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (149 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 149 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 150 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 150 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 150 ^ y is impossible.
-/
theorem diophantine1_6_1_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (150 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 150 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   6 ^ x + 1 = 151 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 151 ^ y,
if x >= 4, 151 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27, 54 (mod 81).
Therefore, 151 ^ y = 1, 58, 104 (mod 163).
So 6 ^ x = 0, 57, 103 (mod 163), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 151 ^ y is impossible.
-/
theorem diophantine1_6_1_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (151 ^ y % 163) [1, 58, 104]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 163) [0, 57, 103]) [
    {prop := List.Mem (151 ^ y % 163) [1, 58, 104], proof := h10},
    {prop := 6 ^ x + 1 = 151 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 163) [0, 57, 103], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 151 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 152 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 152 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 152 ^ y is impossible.
-/
theorem diophantine1_6_1_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 152 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 153 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 153 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 153 ^ y is impossible.
-/
theorem diophantine1_6_1_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (153 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 153 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 154 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 154 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 154 ^ y is impossible.
-/
theorem diophantine1_6_1_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 154 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 155 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 155 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 155 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 155 ^ y is impossible.
-/
theorem diophantine1_6_1_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (155 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 155 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 156 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 156 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 156 ^ y is impossible.
-/
theorem diophantine1_6_1_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (156 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 156 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 157 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 157 ^ y,
if x >= 6, 157 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 157 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 157 ^ y is impossible.
-/
theorem diophantine1_6_1_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (157 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 157 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 158 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 158 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 158 ^ y is impossible.
-/
theorem diophantine1_6_1_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 158 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 159 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 159 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 159 ^ y is impossible.
-/
theorem diophantine1_6_1_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 159 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 160 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 160 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 160 ^ y is impossible.
-/
theorem diophantine1_6_1_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 160 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 23 of 161 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 161 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 161 ^ y,
if y >= 1, 6 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 161 ^ y is impossible.
-/
theorem diophantine1_6_1_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 162 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 162 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 162 ^ y is impossible.
-/
theorem diophantine1_6_1_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (162 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 162 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 163 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 163 ^ y,
if x >= 6, 163 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 163 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 163 ^ y is impossible.
-/
theorem diophantine1_6_1_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (163 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 163 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 164 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 164 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 164 ^ y is impossible.
-/
theorem diophantine1_6_1_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 164 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 165 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 165 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 165 ^ y is impossible.
-/
theorem diophantine1_6_1_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 165 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 166 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 166 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 166 ^ y is impossible.
-/
theorem diophantine1_6_1_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 166 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 167 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 167 ^ y,
if x >= 3, 167 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 167 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 167 ^ y is impossible.
-/
theorem diophantine1_6_1_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (167 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 167 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 168 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 168 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 168 ^ y is impossible.
-/
theorem diophantine1_6_1_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (168 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 168 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   6 ^ x + 1 = 169 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 169 ^ y,
if y >= 1, 6 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 2 (mod 4).
Therefore, 6 ^ x = 36 (mod 37).
So 169 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 169 ^ y is impossible.
-/
theorem diophantine1_6_1_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (169 ^ y % 37) [0]) [
    {prop := List.Mem (6 ^ x % 37) [36], proof := h10},
    {prop := 6 ^ x + 1 = 169 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (169 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 170 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 170 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 170 ^ y is impossible.
-/
theorem diophantine1_6_1_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 170 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 171 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 171 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 171 ^ y is impossible.
-/
theorem diophantine1_6_1_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (171 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 171 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 172 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 172 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 172 ^ y is impossible.
-/
theorem diophantine1_6_1_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 172 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 173 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 173 ^ y,
if x >= 3, 173 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 173 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 173 ^ y is impossible.
-/
theorem diophantine1_6_1_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (173 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 173 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 174 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 174 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 174 ^ y is impossible.
-/
theorem diophantine1_6_1_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (174 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 174 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 175 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 175 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 175 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 175 ^ y is impossible.
-/
theorem diophantine1_6_1_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (175 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 175 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 176 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 176 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 176 ^ y is impossible.
-/
theorem diophantine1_6_1_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 176 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 177 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 177 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 177 ^ y is impossible.
-/
theorem diophantine1_6_1_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 177 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 178 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 178 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 178 ^ y is impossible.
-/
theorem diophantine1_6_1_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 178 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 179 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 179 ^ y,
if x >= 6, 179 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 179 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 179 ^ y is impossible.
-/
theorem diophantine1_6_1_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (179 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 179 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 180 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 180 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 180 ^ y is impossible.
-/
theorem diophantine1_6_1_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (180 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 180 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 181 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 181 ^ y,
if x >= 6, 181 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 181 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 181 ^ y is impossible.
-/
theorem diophantine1_6_1_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (181 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 181 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 182 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 182 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 182 ^ y is impossible.
-/
theorem diophantine1_6_1_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 182 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 183 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 183 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 183 ^ y is impossible.
-/
theorem diophantine1_6_1_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 183 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 184 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 184 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 184 ^ y is impossible.
-/
theorem diophantine1_6_1_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 184 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 185 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 185 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 185 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 185 ^ y is impossible.
-/
theorem diophantine1_6_1_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (185 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 185 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 186 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 186 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 186 ^ y is impossible.
-/
theorem diophantine1_6_1_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (186 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 186 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   6 ^ x + 1 = 187 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 187 ^ y,
if y >= 1, 6 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 1, 3, 5 (mod 6).
Therefore, 6 ^ x = 6, 30, 26 (mod 31).
So 187 ^ y = 7, 0, 27 (mod 31), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 187 ^ y is impossible.
-/
theorem diophantine1_6_1_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 31) [6, 30, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 31) [7, 0, 27]) [
    {prop := List.Mem (6 ^ x % 31) [6, 30, 26], proof := h10},
    {prop := 6 ^ x + 1 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 31) [7, 0, 27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 188 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 188 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 188 ^ y is impossible.
-/
theorem diophantine1_6_1_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 188 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 189 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 189 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 189 ^ y is impossible.
-/
theorem diophantine1_6_1_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (189 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 189 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 190 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 190 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 190 ^ y is impossible.
-/
theorem diophantine1_6_1_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 190 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 1 = 191 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 191 ^ y,
if x >= 3, 191 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0, 2 (mod 4).
Therefore, 191 ^ y = 1, 36 (mod 37).
So 6 ^ x = 0, 35 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 191 ^ y is impossible.
-/
theorem diophantine1_6_1_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 37) [1, 36]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [0, 35]) [
    {prop := List.Mem (191 ^ y % 37) [1, 36], proof := h10},
    {prop := 6 ^ x + 1 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [0, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 192 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 192 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 192 ^ y is impossible.
-/
theorem diophantine1_6_1_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (192 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 192 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   6 ^ x + 1 = 193 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 193 ^ y,
if x >= 4, 193 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 9 (mod 18).
Therefore, 193 ^ y = 1, 162 (mod 163).
So 6 ^ x = 0, 161 (mod 163), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 193 ^ y is impossible.
-/
theorem diophantine1_6_1_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (193 ^ y % 163) [1, 162]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 163) [0, 161]) [
    {prop := List.Mem (193 ^ y % 163) [1, 162], proof := h10},
    {prop := 6 ^ x + 1 = 193 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 163) [0, 161], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 193 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 194 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 194 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 194 ^ y is impossible.
-/
theorem diophantine1_6_1_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 194 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 195 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 195 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 195 ^ y is impossible.
-/
theorem diophantine1_6_1_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 195 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 196 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 196 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 196 ^ y is impossible.
-/
theorem diophantine1_6_1_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 196 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 197 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 197 ^ y,
if x >= 6, 197 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 197 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 197 ^ y is impossible.
-/
theorem diophantine1_6_1_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (197 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 197 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 198 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 198 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 198 ^ y is impossible.
-/
theorem diophantine1_6_1_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (198 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 198 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying to disprove x >= 7 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 199 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 199 ^ y,
if x >= 7, 199 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 199 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 6 ^ x + 1 = 199 ^ y is impossible.
-/
theorem diophantine1_6_1_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (6 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (199 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (199 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 199 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 199 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 200 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 200 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 200 ^ y is impossible.
-/
theorem diophantine1_6_1_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 200 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 201 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 201 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 201 ^ y is impossible.
-/
theorem diophantine1_6_1_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 201 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 202 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 202 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 202 ^ y is impossible.
-/
theorem diophantine1_6_1_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 202 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 203 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 203 ^ y,
if x >= 3, 203 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 203 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 203 ^ y is impossible.
-/
theorem diophantine1_6_1_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 203 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (203 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (203 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 203 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 203 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 204 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 204 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 204 ^ y is impossible.
-/
theorem diophantine1_6_1_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (204 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 204 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 205 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 205 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 205 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 205 ^ y is impossible.
-/
theorem diophantine1_6_1_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (205 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 205 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 206 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 206 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 206 ^ y is impossible.
-/
theorem diophantine1_6_1_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 206 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 207 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 207 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 207 ^ y is impossible.
-/
theorem diophantine1_6_1_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (207 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 207 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 208 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 208 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 208 ^ y is impossible.
-/
theorem diophantine1_6_1_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 208 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   6 ^ x + 1 = 209 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 209 ^ y,
if y >= 1, 6 ^ x = 10 (mod 11).
So x = 5 (mod 10).
Therefore, 6 ^ x = 100 (mod 101).
So 209 ^ y = 0 (mod 101), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 209 ^ y is impossible.
-/
theorem diophantine1_6_1_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 101) [100]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 101) [0]) [
    {prop := List.Mem (6 ^ x % 101) [100], proof := h10},
    {prop := 6 ^ x + 1 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 101) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 210 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 210 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 210 ^ y is impossible.
-/
theorem diophantine1_6_1_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (210 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 210 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 211 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 211 ^ y,
if x >= 6, 211 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 211 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 211 ^ y is impossible.
-/
theorem diophantine1_6_1_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (211 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 211 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 212 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 212 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 212 ^ y is impossible.
-/
theorem diophantine1_6_1_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 212 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 213 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 213 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 213 ^ y is impossible.
-/
theorem diophantine1_6_1_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 213 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 214 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 214 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 214 ^ y is impossible.
-/
theorem diophantine1_6_1_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 214 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 215 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 215 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 215 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 215 ^ y is impossible.
-/
theorem diophantine1_6_1_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (215 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 215 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 216 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 216 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 216 ^ y is impossible.
-/
theorem diophantine1_6_1_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (216 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 216 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove y >= 2 with prime factor 7 of 217 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 29)   6 ^ x + 1 = 217 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 217 ^ y,
if y >= 2, 6 ^ x = 48 (mod 49).
So x = 7 (mod 14).
Therefore, 6 ^ x = 28 (mod 29).
So 217 ^ y = 0 (mod 29), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_6_1_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 217 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (217 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 14 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 29) [28]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 14 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (217 ^ y % 29) [0]) [
    {prop := List.Mem (6 ^ x % 29) [28], proof := h10},
    {prop := 6 ^ x + 1 = 217 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (217 ^ y % 29) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 217 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 218 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 218 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 218 ^ y is impossible.
-/
theorem diophantine1_6_1_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 218 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 219 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 219 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 219 ^ y is impossible.
-/
theorem diophantine1_6_1_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 219 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 220 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 220 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 220 ^ y is impossible.
-/
theorem diophantine1_6_1_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 220 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   6 ^ x + 1 = 221 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 221 ^ y,
if y >= 1, 6 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 2 (mod 4).
Therefore, 6 ^ x = 36 (mod 37).
So 221 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 221 ^ y is impossible.
-/
theorem diophantine1_6_1_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (221 ^ y % 37) [0]) [
    {prop := List.Mem (6 ^ x % 37) [36], proof := h10},
    {prop := 6 ^ x + 1 = 221 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (221 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 222 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 222 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 222 ^ y is impossible.
-/
theorem diophantine1_6_1_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (222 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 222 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   6 ^ x + 1 = 223 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 223 ^ y,
if x >= 4, 223 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 223 ^ y = 1 (mod 109).
So 6 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 223 ^ y is impossible.
-/
theorem diophantine1_6_1_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 109) [0]) [
    {prop := List.Mem (223 ^ y % 109) [1], proof := h10},
    {prop := 6 ^ x + 1 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 223 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 224 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 224 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 224 ^ y is impossible.
-/
theorem diophantine1_6_1_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 224 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 225 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 225 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 225 ^ y is impossible.
-/
theorem diophantine1_6_1_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (225 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 225 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 226 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 226 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 226 ^ y is impossible.
-/
theorem diophantine1_6_1_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 226 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 227 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 227 ^ y,
if x >= 3, 227 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 2).
Therefore, 227 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 227 ^ y is impossible.
-/
theorem diophantine1_6_1_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (227 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 227 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 228 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 228 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 228 ^ y is impossible.
-/
theorem diophantine1_6_1_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (228 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 228 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   6 ^ x + 1 = 229 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 229 ^ y,
if x >= 6, 229 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 229 ^ y = 1 (mod 17).
So 6 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 6 ^ x + 1 = 229 ^ y is impossible.
-/
theorem diophantine1_6_1_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 17) [0]) [
    {prop := List.Mem (229 ^ y % 17) [1], proof := h10},
    {prop := 6 ^ x + 1 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 229 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 230 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 230 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 230 ^ y is impossible.
-/
theorem diophantine1_6_1_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 230 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 231 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 231 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 231 ^ y is impossible.
-/
theorem diophantine1_6_1_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 231 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 232 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 232 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 232 ^ y is impossible.
-/
theorem diophantine1_6_1_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 232 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 233 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 233 ^ y,
if x >= 4, 233 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 233 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 233 ^ y is impossible.
-/
theorem diophantine1_6_1_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (233 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 233 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 234 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 234 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 234 ^ y is impossible.
-/
theorem diophantine1_6_1_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (234 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 234 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 235 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 235 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 235 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 235 ^ y is impossible.
-/
theorem diophantine1_6_1_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (235 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 235 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 236 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 236 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 236 ^ y is impossible.
-/
theorem diophantine1_6_1_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 236 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 237 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 237 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 237 ^ y is impossible.
-/
theorem diophantine1_6_1_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 237 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 238 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 238 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 238 ^ y is impossible.
-/
theorem diophantine1_6_1_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 238 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 1 = 239 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 239 ^ y,
if x >= 3, 239 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 239 ^ y = 1 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 1 = 239 ^ y is impossible.
-/
theorem diophantine1_6_1_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (239 ^ y % 19) [1], proof := h10},
    {prop := 6 ^ x + 1 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 240 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 240 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 240 ^ y is impossible.
-/
theorem diophantine1_6_1_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (240 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 240 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying to disprove x >= 4 with prime factor 3 of 6 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   6 ^ x + 1 = 241 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 241 ^ y,
if x >= 4, 241 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 9 (mod 18).
Therefore, 241 ^ y = 1, 162 (mod 163).
So 6 ^ x = 0, 161 (mod 163), but this is impossible.
Therefore, x < 4.
Further examination shows that 6 ^ x + 1 = 241 ^ y is impossible.
-/
theorem diophantine1_6_1_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (6 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (241 ^ y % 163) [1, 162]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 163) [0, 161]) [
    {prop := List.Mem (241 ^ y % 163) [1, 162], proof := h10},
    {prop := 6 ^ x + 1 = 241 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 163) [0, 161], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 241 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 242 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 242 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 242 ^ y is impossible.
-/
theorem diophantine1_6_1_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 242 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 243 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 243 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 243 ^ y is impossible.
-/
theorem diophantine1_6_1_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (243 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 243 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 244 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 244 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 244 ^ y is impossible.
-/
theorem diophantine1_6_1_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 244 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 5 of 245 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 1 = 245 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 245 ^ y,
if y >= 1, 6 ^ x = 4 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 245 ^ y is impossible.
-/
theorem diophantine1_6_1_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (245 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 245 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 246 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 246 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 246 ^ y is impossible.
-/
theorem diophantine1_6_1_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (246 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 246 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   6 ^ x + 1 = 247 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 247 ^ y,
if y >= 1, 6 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 2 (mod 4).
Therefore, 6 ^ x = 36 (mod 37).
So 247 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 6 ^ x + 1 = 247 ^ y is impossible.
-/
theorem diophantine1_6_1_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (6 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (247 ^ y % 37) [0]) [
    {prop := List.Mem (6 ^ x % 37) [36], proof := h10},
    {prop := 6 ^ x + 1 = 247 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (247 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 248 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 248 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 248 ^ y is impossible.
-/
theorem diophantine1_6_1_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 248 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 249 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 249 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 249 ^ y is impossible.
-/
theorem diophantine1_6_1_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 249 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 1 = 250 ^ y
For positive integers x, y satisfying 6 ^ x + 1 = 250 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 1 = 250 ^ y is impossible.
-/
theorem diophantine1_6_1_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 1 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 1 = 250 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
