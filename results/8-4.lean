-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 8 <= a <= 8
-- 4 <= b <= 4
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   8 ^ x + 4 = 2 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 2 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 2 ^ y is impossible.
-/
theorem diophantine1_8_4_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 2 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 3 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 3 ^ y,
this is impossible, because it implies that 3 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 3 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 4 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 4 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 4 ^ y is impossible.
-/
theorem diophantine1_8_4_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 4 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 5 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 5 ^ y,
this is impossible, because it implies that 5 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 5 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 6 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 6 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 6 ^ y is impossible.
-/
theorem diophantine1_8_4_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 6 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 7 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 7 ^ y,
this is impossible, because it implies that 7 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 8 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 8 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 8 ^ y is impossible.
-/
theorem diophantine1_8_4_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 8 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 9 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 9 ^ y,
this is impossible, because it implies that 9 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 10 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 10 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 10 ^ y is impossible.
-/
theorem diophantine1_8_4_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 10 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 11 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 11 ^ y,
this is impossible, because it implies that 11 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 11 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 12 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 12 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_8_4_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 12 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 12 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 13 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 13 ^ y,
this is impossible, because it implies that 13 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 13 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 14 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 14 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 14 ^ y is impossible.
-/
theorem diophantine1_8_4_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 14 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 15 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 15 ^ y,
this is impossible, because it implies that 15 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 15 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 15 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 16 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 16 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 16 ^ y is impossible.
-/
theorem diophantine1_8_4_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 16 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 17 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 17 ^ y,
this is impossible, because it implies that 17 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 17 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 18 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 18 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 18 ^ y is impossible.
-/
theorem diophantine1_8_4_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 18 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 19 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 19 ^ y,
this is impossible, because it implies that 19 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 19 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 20 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 20 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 20 ^ y is impossible.
-/
theorem diophantine1_8_4_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 20 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 21 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 21 ^ y,
this is impossible, because it implies that 21 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 21 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 21 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 22 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 22 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 22 ^ y is impossible.
-/
theorem diophantine1_8_4_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 22 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 23 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 23 ^ y,
this is impossible, because it implies that 23 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 23 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 24 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 24 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 24 ^ y is impossible.
-/
theorem diophantine1_8_4_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 25 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 25 ^ y,
this is impossible, because it implies that 25 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 25 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 26 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 26 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 26 ^ y is impossible.
-/
theorem diophantine1_8_4_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 26 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 27 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 27 ^ y,
this is impossible, because it implies that 27 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 27 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 28 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 28 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 28 ^ y is impossible.
-/
theorem diophantine1_8_4_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 28 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 29 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 29 ^ y,
this is impossible, because it implies that 29 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 29 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 30 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 30 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 30 ^ y is impossible.
-/
theorem diophantine1_8_4_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 30 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 31 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 31 ^ y,
this is impossible, because it implies that 31 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 31 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 32 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 32 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 32 ^ y is impossible.
-/
theorem diophantine1_8_4_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 32 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 33 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 33 ^ y,
this is impossible, because it implies that 33 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 33 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 34 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 34 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 34 ^ y is impossible.
-/
theorem diophantine1_8_4_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 34 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 35 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 35 ^ y,
this is impossible, because it implies that 35 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 35 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 35 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 36 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 36 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 36 ^ y is impossible.
-/
theorem diophantine1_8_4_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 36 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 37 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 37 ^ y,
this is impossible, because it implies that 37 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 37 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 38 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 38 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 38 ^ y is impossible.
-/
theorem diophantine1_8_4_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 38 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 39 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 39 ^ y,
this is impossible, because it implies that 39 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 39 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 40 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 40 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 40 ^ y is impossible.
-/
theorem diophantine1_8_4_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 40 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 41 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 41 ^ y,
this is impossible, because it implies that 41 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 41 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 42 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 42 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 42 ^ y is impossible.
-/
theorem diophantine1_8_4_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 42 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 43 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 43 ^ y,
this is impossible, because it implies that 43 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 43 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 44 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 44 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 44 ^ y is impossible.
-/
theorem diophantine1_8_4_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 44 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 45 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 45 ^ y,
this is impossible, because it implies that 45 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 45 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 45 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 46 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 46 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 46 ^ y is impossible.
-/
theorem diophantine1_8_4_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 46 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 47 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 47 ^ y,
this is impossible, because it implies that 47 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 47 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 48 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 48 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 48 ^ y is impossible.
-/
theorem diophantine1_8_4_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 49 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 49 ^ y,
this is impossible, because it implies that 49 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 49 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 50 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 50 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 50 ^ y is impossible.
-/
theorem diophantine1_8_4_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 50 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 51 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 51 ^ y,
this is impossible, because it implies that 51 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 51 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 52 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 52 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 52 ^ y is impossible.
-/
theorem diophantine1_8_4_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 52 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 53 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 53 ^ y,
this is impossible, because it implies that 53 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 53 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 54 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 54 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 54 ^ y is impossible.
-/
theorem diophantine1_8_4_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 54 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 55 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 55 ^ y,
this is impossible, because it implies that 55 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 55 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 56 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 56 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 56 ^ y is impossible.
-/
theorem diophantine1_8_4_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 56 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 57 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 57 ^ y,
this is impossible, because it implies that 57 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 57 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 57 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 58 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 58 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 58 ^ y is impossible.
-/
theorem diophantine1_8_4_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 58 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 59 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 59 ^ y,
this is impossible, because it implies that 59 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 59 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 60 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 60 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 60 ^ y is impossible.
-/
theorem diophantine1_8_4_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 60 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 61 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 61 ^ y,
this is impossible, because it implies that 61 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 61 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 62 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 62 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 62 ^ y is impossible.
-/
theorem diophantine1_8_4_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 62 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 63 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 63 ^ y,
this is impossible, because it implies that 63 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 63 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 63 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 64 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 64 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 64 ^ y is impossible.
-/
theorem diophantine1_8_4_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 64 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 65 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 65 ^ y,
this is impossible, because it implies that 65 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 65 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 65 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 66 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 66 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 66 ^ y is impossible.
-/
theorem diophantine1_8_4_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 66 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 67 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 67 ^ y,
this is impossible, because it implies that 67 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 67 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 68 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 68 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_8_4_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 68 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 68 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 69 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 69 ^ y,
this is impossible, because it implies that 69 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 69 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 69 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 70 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 70 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 70 ^ y is impossible.
-/
theorem diophantine1_8_4_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 70 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 71 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 71 ^ y,
this is impossible, because it implies that 71 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 71 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 72 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 72 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 72 ^ y is impossible.
-/
theorem diophantine1_8_4_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 73 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 73 ^ y,
this is impossible, because it implies that 73 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 73 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 74 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 74 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 74 ^ y is impossible.
-/
theorem diophantine1_8_4_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 74 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 75 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 75 ^ y,
this is impossible, because it implies that 75 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 75 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 75 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 76 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 76 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 76 ^ y is impossible.
-/
theorem diophantine1_8_4_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 76 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 77 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 77 ^ y,
this is impossible, because it implies that 77 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 77 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 78 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 78 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 78 ^ y is impossible.
-/
theorem diophantine1_8_4_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 78 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 79 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 79 ^ y,
this is impossible, because it implies that 79 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 79 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 80 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 80 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 80 ^ y is impossible.
-/
theorem diophantine1_8_4_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 80 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 81 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 81 ^ y,
this is impossible, because it implies that 81 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 81 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 82 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 82 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 82 ^ y is impossible.
-/
theorem diophantine1_8_4_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 82 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 83 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 83 ^ y,
this is impossible, because it implies that 83 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 83 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 84 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 84 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 84 ^ y is impossible.
-/
theorem diophantine1_8_4_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 84 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 85 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 85 ^ y,
this is impossible, because it implies that 85 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 85 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 86 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 86 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 86 ^ y is impossible.
-/
theorem diophantine1_8_4_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 86 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 87 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 87 ^ y,
this is impossible, because it implies that 87 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 87 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 87 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 88 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 88 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 88 ^ y is impossible.
-/
theorem diophantine1_8_4_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 88 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 89 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 89 ^ y,
this is impossible, because it implies that 89 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 89 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 90 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 90 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 90 ^ y is impossible.
-/
theorem diophantine1_8_4_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 90 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 91 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 91 ^ y,
this is impossible, because it implies that 91 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 91 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 92 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 92 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 92 ^ y is impossible.
-/
theorem diophantine1_8_4_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 92 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 93 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 93 ^ y,
this is impossible, because it implies that 93 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 93 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 93 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 94 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 94 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 94 ^ y is impossible.
-/
theorem diophantine1_8_4_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 94 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 95 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 95 ^ y,
this is impossible, because it implies that 95 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 95 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 96 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 96 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 8), which is impossible.
Therefore, x < 1 or y < 1.
So 8 ^ x + 4 = 96 ^ y is impossible.
-/
theorem diophantine1_8_4_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 97 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 97 ^ y,
this is impossible, because it implies that 97 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 97 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 98 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 98 ^ y,
if x >= 3 and y >= 3,
4 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 8 ^ x + 4 = 98 ^ y is impossible.
-/
theorem diophantine1_8_4_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 98 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 4 = 99 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 99 ^ y,
this is impossible, because it implies that 99 ^ y = 0 (mod 4).
-/
theorem diophantine1_8_4_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 4 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 99 ^ y % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 99 ^ y % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 4 = 100 ^ y
For positive integers x, y satisfying 8 ^ x + 4 = 100 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 4 = 100 ^ y is impossible.
-/
theorem diophantine1_8_4_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 4 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 4 = 100 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
