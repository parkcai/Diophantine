-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 8 <= a <= 8
-- 9 <= b <= 9
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class II, Front Mode, with magic prime 61)   8 ^ x + 9 = 5 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 5 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 20 (mod 61).
So 5 ^ y = 29 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 5 ^ y is impossible.
-/
theorem diophantine1_8_9_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 61) [20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ y % 61) [29]) [
    {prop := List.Mem (8 ^ x % 61) [20], proof := h10},
    {prop := 8 ^ x + 9 = 5 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (5 ^ y % 61) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 7 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 7 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 7 ^ y is impossible.
-/
theorem diophantine1_8_9_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 7 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   8 ^ x + 9 = 11 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 11 ^ y,
if y >= 1, 8 ^ x = 2 (mod 11).
So x = 7 (mod 10), 
which implies x = 7, 17 (mod 20).
Therefore, 8 ^ x = 33, 28 (mod 61).
So 11 ^ y = 42, 37 (mod 61), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 11 ^ y is impossible.
-/
theorem diophantine1_8_9_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 61) [33, 28]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (11 ^ y % 61) [42, 37]) [
    {prop := List.Mem (8 ^ x % 61) [33, 28], proof := h10},
    {prop := 8 ^ x + 9 = 11 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (11 ^ y % 61) [42, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 13 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 13 ^ y,
if y >= 1, 8 ^ x = 4 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 13 ^ y is impossible.
-/
theorem diophantine1_8_9_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 13 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 17 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 17 ^ y,
if x >= 6, 17 ^ y = 9 (mod 64).
However, this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_8_9_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 17 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 64 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 17 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 19 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 19 ^ y,
if y >= 1, 8 ^ x = 10 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 19 ^ y is impossible.
-/
theorem diophantine1_8_9_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 19 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 19 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 23 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 23 ^ y,
if x >= 4, 23 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 23 ^ y is impossible.
-/
theorem diophantine1_8_9_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 23 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   8 ^ x + 9 = 25 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 25 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 20 (mod 61).
So 25 ^ y = 29 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 25 ^ y is impossible.
-/
theorem diophantine1_8_9_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 61) [20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 61) [29]) [
    {prop := List.Mem (8 ^ x % 61) [20], proof := h10},
    {prop := 8 ^ x + 9 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 61) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 421)   8 ^ x + 9 = 29 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 29 ^ y,
if y >= 1, 8 ^ x = 20 (mod 29).
So x = 8 (mod 28), 
which implies x = 8, 36, 64, 92, 120 (mod 140).
Therefore, 8 ^ x = 366, 232, 315, 317, 33 (mod 421).
So 29 ^ y = 375, 241, 324, 326, 42 (mod 421), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 29 ^ y is impossible.
-/
theorem diophantine1_8_9_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 29 = 20 := by omega
  have h9 := Claim (x % 28 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 29 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 421) [366, 232, 315, 317, 33]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (29 ^ y % 421) [375, 241, 324, 326, 42]) [
    {prop := List.Mem (8 ^ x % 421) [366, 232, 315, 317, 33], proof := h10},
    {prop := 8 ^ x + 9 = 29 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (29 ^ y % 421) [375, 241, 324, 326, 42], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 31 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 31 ^ y,
if x >= 4, 31 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 31 ^ y is impossible.
-/
theorem diophantine1_8_9_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 31 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 35 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 35 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 35 ^ y is impossible.
-/
theorem diophantine1_8_9_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 37 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 37 ^ y,
if y >= 1, 8 ^ x = 28 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 37 ^ y is impossible.
-/
theorem diophantine1_8_9_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 37 = 28 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 37 = 28, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   8 ^ x + 9 = 41 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 41 ^ y,
if y >= 1, 8 ^ x = 32 (mod 41).
So x = 15 (mod 20).
Therefore, 8 ^ x = 50 (mod 61).
So 41 ^ y = 59 (mod 61), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 41 ^ y is impossible.
-/
theorem diophantine1_8_9_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 41 = 32 := by omega
  have h9 := Claim (x % 20 = 15) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 41 = 32, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 61) [50]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (41 ^ y % 61) [59]) [
    {prop := List.Mem (8 ^ x % 61) [50], proof := h10},
    {prop := 8 ^ x + 9 = 41 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (41 ^ y % 61) [59], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 43 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 43 ^ y,
if y >= 1, 8 ^ x = 34 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 43 ^ y is impossible.
-/
theorem diophantine1_8_9_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 43 = 34 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 43 = 34, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 47 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 47 ^ y,
if x >= 4, 47 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 47 ^ y is impossible.
-/
theorem diophantine1_8_9_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 47 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 49 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 49 ^ y,
if x >= 4, 49 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 49 ^ y is impossible.
-/
theorem diophantine1_8_9_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 49 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 313)   8 ^ x + 9 = 53 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 53 ^ y,
if y >= 1, 8 ^ x = 44 (mod 53).
So x = 20 (mod 52).
Therefore, 8 ^ x = 48 (mod 313).
So 53 ^ y = 57 (mod 313), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 53 ^ y is impossible.
-/
theorem diophantine1_8_9_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 53 = 44 := by omega
  have h9 := Claim (x % 52 = 20) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 53 = 44, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 313) [48]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 52 = 20, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 313) [57]) [
    {prop := List.Mem (8 ^ x % 313) [48], proof := h10},
    {prop := 8 ^ x + 9 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 313) [57], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   8 ^ x + 9 = 55 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 55 ^ y,
if y >= 1, 8 ^ x = 2 (mod 11).
So x = 7 (mod 10), 
which implies x = 7, 17 (mod 20).
Therefore, 8 ^ x = 2, 39 (mod 41).
So 55 ^ y = 11, 7 (mod 41), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 55 ^ y is impossible.
-/
theorem diophantine1_8_9_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 41) [2, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [11, 7]) [
    {prop := List.Mem (8 ^ x % 41) [2, 39], proof := h10},
    {prop := 8 ^ x + 9 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [11, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 523)   8 ^ x + 9 = 59 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 59 ^ y,
if y >= 1, 8 ^ x = 50 (mod 59).
So x = 43 (mod 58), 
which implies x = 43, 101, 159 (mod 174).
Therefore, 8 ^ x = 14, 192, 317 (mod 523).
So 59 ^ y = 23, 201, 326 (mod 523), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 59 ^ y is impossible.
-/
theorem diophantine1_8_9_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (59 ^ y % 59 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 59 = 50 := by omega
  have h9 := Claim (x % 58 = 43) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 59 = 50, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 523) [14, 192, 317]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 58 = 43, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (59 ^ y % 523) [23, 201, 326]) [
    {prop := List.Mem (8 ^ x % 523) [14, 192, 317], proof := h10},
    {prop := 8 ^ x + 9 = 59 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (59 ^ y % 523) [23, 201, 326], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 59 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   8 ^ x + 9 = 61 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 61 ^ y,
if y >= 1, 8 ^ x = 52 (mod 61).
So x = 14 (mod 20).
Therefore, 8 ^ x = 4 (mod 41).
So 61 ^ y = 13 (mod 41), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 61 ^ y is impossible.
-/
theorem diophantine1_8_9_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 61 = 52 := by omega
  have h9 := Claim (x % 20 = 14) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 61 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 41) [4]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 41) [13]) [
    {prop := List.Mem (8 ^ x % 41) [4], proof := h10},
    {prop := 8 ^ x + 9 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 41) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 65 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 65 ^ y,
if y >= 1, 8 ^ x = 4 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 65 ^ y is impossible.
-/
theorem diophantine1_8_9_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 13 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 193)   8 ^ x + 9 = 67 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 67 ^ y,
if x >= 6, 67 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
which implies y = 2, 18 (mod 32).
Therefore, 67 ^ y = 50, 143 (mod 193).
So 8 ^ x = 41, 134 (mod 193), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 67 ^ y is impossible.
-/
theorem diophantine1_8_9_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 193) [50, 143]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 193) [41, 134]) [
    {prop := List.Mem (67 ^ y % 193) [50, 143], proof := h10},
    {prop := 8 ^ x + 9 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 193) [41, 134], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 67 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 71 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 71 ^ y,
if x >= 4, 71 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 71 ^ y is impossible.
-/
theorem diophantine1_8_9_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 71 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 257)   8 ^ x + 9 = 73 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 73 ^ y,
if x >= 9, 73 ^ y = 9 (mod 512).
So y = 25 (mod 64), 
Therefore, 73 ^ y = 46 (mod 257).
So 8 ^ x = 37 (mod 257), but this is impossible.
Therefore, x < 9.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_8_9_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 73 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 9
  have h7 := Claim (8 ^ x % 512 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 9, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 512 = 9 := by omega
  have h9 := Claim (y % 64 = 25) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 512 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 257) [46]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 64 = 25, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 257) [37]) [
    {prop := List.Mem (73 ^ y % 257) [46], proof := h10},
    {prop := 8 ^ x + 9 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 257) [37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 8 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 73 ^ y, proof := h3},
    {prop := x <= 8, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 77 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 77 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 77 ^ y is impossible.
-/
theorem diophantine1_8_9_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 79 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 79 ^ y,
if x >= 4, 79 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 79 ^ y is impossible.
-/
theorem diophantine1_8_9_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 79 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 83 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 83 ^ y,
if x >= 6, 83 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 83 ^ y = 4 (mod 17).
So 8 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 83 ^ y is impossible.
-/
theorem diophantine1_8_9_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [12]) [
    {prop := List.Mem (83 ^ y % 17) [4], proof := h10},
    {prop := 8 ^ x + 9 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 83 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   8 ^ x + 9 = 85 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 85 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 16 (mod 41).
So 85 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 85 ^ y is impossible.
-/
theorem diophantine1_8_9_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 41) [25]) [
    {prop := List.Mem (8 ^ x % 41) [16], proof := h10},
    {prop := 8 ^ x + 9 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 85 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 89 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 89 ^ y,
if y >= 1, 8 ^ x = 80 (mod 89).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 89 ^ y is impossible.
-/
theorem diophantine1_8_9_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (89 ^ y % 89 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 89 = 80 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 89 = 80, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 89 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 91 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 91 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 91 ^ y is impossible.
-/
theorem diophantine1_8_9_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 95 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 95 ^ y,
if x >= 4, 95 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 95 ^ y is impossible.
-/
theorem diophantine1_8_9_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 95 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 95 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 97 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 97 ^ y,
if x >= 4, 97 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 97 ^ y is impossible.
-/
theorem diophantine1_8_9_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 97)   8 ^ x + 9 = 101 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 101 ^ y,
if x >= 6, 101 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6, 14, 22 (mod 24).
Therefore, 101 ^ y = 22, 81, 91 (mod 97).
So 8 ^ x = 13, 72, 82 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 101 ^ y is impossible.
-/
theorem diophantine1_8_9_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 97) [22, 81, 91]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 97) [13, 72, 82]) [
    {prop := List.Mem (101 ^ y % 97) [22, 81, 91], proof := h10},
    {prop := 8 ^ x + 9 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 97) [13, 72, 82], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 101 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 103 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 103 ^ y,
if x >= 4, 103 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 103 ^ y is impossible.
-/
theorem diophantine1_8_9_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 103 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 107 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 107 ^ y,
if x >= 6, 107 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 107 ^ y = 15 (mod 17).
So 8 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 107 ^ y is impossible.
-/
theorem diophantine1_8_9_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [6]) [
    {prop := List.Mem (107 ^ y % 17) [15], proof := h10},
    {prop := 8 ^ x + 9 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 107 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 109 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 109 ^ y,
if x >= 6, 109 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 109 ^ y = 2 (mod 17).
So 8 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 109 ^ y is impossible.
-/
theorem diophantine1_8_9_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [10]) [
    {prop := List.Mem (109 ^ y % 17) [2], proof := h10},
    {prop := 8 ^ x + 9 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 109 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 113 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 113 ^ y,
if x >= 4, 113 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 113 ^ y is impossible.
-/
theorem diophantine1_8_9_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 113 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 115 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 115 ^ y,
if y >= 1, 8 ^ x = 14 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 115 ^ y is impossible.
-/
theorem diophantine1_8_9_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 23 = 14 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 23 = 14, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 119 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 119 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 119 ^ y is impossible.
-/
theorem diophantine1_8_9_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 661)   8 ^ x + 9 = 121 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 121 ^ y,
if y >= 2, 8 ^ x = 112 (mod 121).
So x = 77 (mod 110), 
which implies x = 77, 187 (mod 220).
Therefore, 8 ^ x = 71, 590 (mod 661).
So 121 ^ y = 80, 599 (mod 661), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 121 ^ y is impossible.
-/
theorem diophantine1_8_9_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (121 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 121 = 112 := by omega
  have h9 := Claim (x % 110 = 77) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 121 = 112, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 661) [71, 590]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 110 = 77, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 661) [80, 599]) [
    {prop := List.Mem (8 ^ x % 661) [71, 590], proof := h10},
    {prop := 8 ^ x + 9 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 661) [80, 599], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 121 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 125 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 125 ^ y,
if x >= 6, 125 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 125 ^ y = 2 (mod 17).
So 8 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 125 ^ y is impossible.
-/
theorem diophantine1_8_9_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 125 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 125 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (125 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [10]) [
    {prop := List.Mem (125 ^ y % 17) [2], proof := h10},
    {prop := 8 ^ x + 9 = 125 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 125 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 127 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 127 ^ y,
if x >= 4, 127 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 127 ^ y is impossible.
-/
theorem diophantine1_8_9_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 127 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 113)   8 ^ x + 9 = 131 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 131 ^ y,
if x >= 6, 131 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 131 ^ y = 98 (mod 113).
So 8 ^ x = 89 (mod 113), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 131 ^ y is impossible.
-/
theorem diophantine1_8_9_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 113) [98]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 113) [89]) [
    {prop := List.Mem (131 ^ y % 113) [98], proof := h10},
    {prop := 8 ^ x + 9 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 113) [89], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 131 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 133 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 133 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 133 ^ y is impossible.
-/
theorem diophantine1_8_9_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 241)   8 ^ x + 9 = 137 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 137 ^ y,
if x >= 7, 137 ^ y = 9 (mod 128).
So y = 1 (mod 16), 
which implies y = 1, 17, 33, 49, 65, 81, 97, 113, 129, 145, 161, 177, 193, 209, 225 (mod 240).
Therefore, 137 ^ y = 137, 155, 105, 110, 230, 218, 171, 7, 168, 176, 127, 156, 129, 204, 76 (mod 241).
So 8 ^ x = 128, 146, 96, 101, 221, 209, 162, 239, 159, 167, 118, 147, 120, 195, 67 (mod 241), but this is impossible.
Therefore, x < 7.
Further examination shows that 8 ^ x + 9 = 137 ^ y is impossible.
-/
theorem diophantine1_8_9_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (8 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 241) [137, 155, 105, 110, 230, 218, 171, 7, 168, 176, 127, 156, 129, 204, 76]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 241) [128, 146, 96, 101, 221, 209, 162, 239, 159, 167, 118, 147, 120, 195, 67]) [
    {prop := List.Mem (137 ^ y % 241) [137, 155, 105, 110, 230, 218, 171, 7, 168, 176, 127, 156, 129, 204, 76], proof := h10},
    {prop := 8 ^ x + 9 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 241) [128, 146, 96, 101, 221, 209, 162, 239, 159, 167, 118, 147, 120, 195, 67], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 137 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 139 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 139 ^ y,
if x >= 6, 139 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 139 ^ y = 2 (mod 17).
So 8 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 139 ^ y is impossible.
-/
theorem diophantine1_8_9_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [10]) [
    {prop := List.Mem (139 ^ y % 17) [2], proof := h10},
    {prop := 8 ^ x + 9 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 139 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 31)   8 ^ x + 9 = 143 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 143 ^ y,
if y >= 1, 8 ^ x = 2 (mod 11).
So x = 7 (mod 10), 
which implies x = 2 (mod 5).
Therefore, 8 ^ x = 2 (mod 31).
So 143 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 143 ^ y is impossible.
-/
theorem diophantine1_8_9_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (143 ^ y % 31) [11]) [
    {prop := List.Mem (8 ^ x % 31) [2], proof := h10},
    {prop := 8 ^ x + 9 = 143 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (143 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 145 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 145 ^ y,
if x >= 4, 145 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 145 ^ y is impossible.
-/
theorem diophantine1_8_9_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 145 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 145 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 145 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 149 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 149 ^ y,
if x >= 6, 149 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 149 ^ y = 16 (mod 17).
So 8 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 149 ^ y is impossible.
-/
theorem diophantine1_8_9_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [7]) [
    {prop := List.Mem (149 ^ y % 17) [16], proof := h10},
    {prop := 8 ^ x + 9 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 149 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 151 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 151 ^ y,
if x >= 4, 151 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 151 ^ y is impossible.
-/
theorem diophantine1_8_9_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 151 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   8 ^ x + 9 = 155 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 155 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 16 (mod 41).
So 155 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 155 ^ y is impossible.
-/
theorem diophantine1_8_9_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (155 ^ y % 41) [25]) [
    {prop := List.Mem (8 ^ x % 41) [16], proof := h10},
    {prop := 8 ^ x + 9 = 155 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (155 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 157 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 157 ^ y,
if x >= 6, 157 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 157 ^ y = 16 (mod 17).
So 8 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 157 ^ y is impossible.
-/
theorem diophantine1_8_9_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [7]) [
    {prop := List.Mem (157 ^ y % 17) [16], proof := h10},
    {prop := 8 ^ x + 9 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 157 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 161 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 161 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 161 ^ y is impossible.
-/
theorem diophantine1_8_9_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 163 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 163 ^ y,
if x >= 6, 163 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 163 ^ y = 15 (mod 17).
So 8 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 163 ^ y is impossible.
-/
theorem diophantine1_8_9_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [6]) [
    {prop := List.Mem (163 ^ y % 17) [15], proof := h10},
    {prop := 8 ^ x + 9 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 163 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 167 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 167 ^ y,
if x >= 4, 167 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 167 ^ y is impossible.
-/
theorem diophantine1_8_9_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 167 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 169 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 169 ^ y,
if x >= 7, 169 ^ y = 9 (mod 128).
So y = 13 (mod 16), 
which implies y = 1 (mod 2).
Therefore, 169 ^ y = 16 (mod 17).
So 8 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 8 ^ x + 9 = 169 ^ y is impossible.
-/
theorem diophantine1_8_9_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (8 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (169 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [7]) [
    {prop := List.Mem (169 ^ y % 17) [16], proof := h10},
    {prop := 8 ^ x + 9 = 169 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 169 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 241)   8 ^ x + 9 = 173 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 173 ^ y,
if x >= 6, 173 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234 (mod 240).
Therefore, 173 ^ y = 209, 174, 48, 221, 169, 30, 108, 196, 79, 188, 2, 200, 238, 182, 125 (mod 241).
So 8 ^ x = 200, 165, 39, 212, 160, 21, 99, 187, 70, 179, 234, 191, 229, 173, 116 (mod 241), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 173 ^ y is impossible.
-/
theorem diophantine1_8_9_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 241) [209, 174, 48, 221, 169, 30, 108, 196, 79, 188, 2, 200, 238, 182, 125]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 241) [200, 165, 39, 212, 160, 21, 99, 187, 70, 179, 234, 191, 229, 173, 116]) [
    {prop := List.Mem (173 ^ y % 241) [209, 174, 48, 221, 169, 30, 108, 196, 79, 188, 2, 200, 238, 182, 125], proof := h10},
    {prop := 8 ^ x + 9 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 241) [200, 165, 39, 212, 160, 21, 99, 187, 70, 179, 234, 191, 229, 173, 116], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 173 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 175 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 175 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 175 ^ y is impossible.
-/
theorem diophantine1_8_9_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (175 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 175 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 193)   8 ^ x + 9 = 179 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 179 ^ y,
if x >= 6, 179 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 10, 26 (mod 32).
Therefore, 179 ^ y = 50, 143 (mod 193).
So 8 ^ x = 41, 134 (mod 193), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 179 ^ y is impossible.
-/
theorem diophantine1_8_9_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 193) [50, 143]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 193) [41, 134]) [
    {prop := List.Mem (179 ^ y % 193) [50, 143], proof := h10},
    {prop := 8 ^ x + 9 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 193) [41, 134], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 179 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 181 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 181 ^ y,
if x >= 6, 181 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 181 ^ y = 9 (mod 17).
So 8 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 181 ^ y is impossible.
-/
theorem diophantine1_8_9_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [0]) [
    {prop := List.Mem (181 ^ y % 17) [9], proof := h10},
    {prop := 8 ^ x + 9 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 181 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 101)   8 ^ x + 9 = 185 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 185 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20), 
which implies x = 8, 28, 48, 68, 88 (mod 100).
Therefore, 8 ^ x = 5, 31, 71, 16, 79 (mod 101).
So 185 ^ y = 14, 40, 80, 25, 88 (mod 101), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 185 ^ y is impossible.
-/
theorem diophantine1_8_9_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 101) [5, 31, 71, 16, 79]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (185 ^ y % 101) [14, 40, 80, 25, 88]) [
    {prop := List.Mem (8 ^ x % 101) [5, 31, 71, 16, 79], proof := h10},
    {prop := 8 ^ x + 9 = 185 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (185 ^ y % 101) [14, 40, 80, 25, 88], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 31)   8 ^ x + 9 = 187 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 187 ^ y,
if y >= 1, 8 ^ x = 2 (mod 11).
So x = 7 (mod 10), 
which implies x = 2 (mod 5).
Therefore, 8 ^ x = 2 (mod 31).
So 187 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 187 ^ y is impossible.
-/
theorem diophantine1_8_9_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 31) [11]) [
    {prop := List.Mem (8 ^ x % 31) [2], proof := h10},
    {prop := 8 ^ x + 9 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 191 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 191 ^ y,
if x >= 4, 191 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 191 ^ y is impossible.
-/
theorem diophantine1_8_9_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 191 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 193 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 193 ^ y,
if x >= 4, 193 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 193 ^ y is impossible.
-/
theorem diophantine1_8_9_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 193 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 197 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 197 ^ y,
if x >= 6, 197 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 197 ^ y = 9 (mod 17).
So 8 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 197 ^ y is impossible.
-/
theorem diophantine1_8_9_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [0]) [
    {prop := List.Mem (197 ^ y % 17) [9], proof := h10},
    {prop := 8 ^ x + 9 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 197 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 199 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 199 ^ y,
if x >= 4, 199 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 199 ^ y is impossible.
-/
theorem diophantine1_8_9_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 199 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 203 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 203 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 203 ^ y is impossible.
-/
theorem diophantine1_8_9_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 203 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   8 ^ x + 9 = 205 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 205 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 20 (mod 61).
So 205 ^ y = 29 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 205 ^ y is impossible.
-/
theorem diophantine1_8_9_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 61) [20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (205 ^ y % 61) [29]) [
    {prop := List.Mem (8 ^ x % 61) [20], proof := h10},
    {prop := 8 ^ x + 9 = 205 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (205 ^ y % 61) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 205 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 31)   8 ^ x + 9 = 209 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 209 ^ y,
if y >= 1, 8 ^ x = 2 (mod 11).
So x = 7 (mod 10), 
which implies x = 2 (mod 5).
Therefore, 8 ^ x = 2 (mod 31).
So 209 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 209 ^ y is impossible.
-/
theorem diophantine1_8_9_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 31) [11]) [
    {prop := List.Mem (8 ^ x % 31) [2], proof := h10},
    {prop := 8 ^ x + 9 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 211 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 211 ^ y,
if x >= 6, 211 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 211 ^ y = 2 (mod 17).
So 8 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 211 ^ y is impossible.
-/
theorem diophantine1_8_9_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [10]) [
    {prop := List.Mem (211 ^ y % 17) [2], proof := h10},
    {prop := 8 ^ x + 9 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 211 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 215 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 215 ^ y,
if x >= 4, 215 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 215 ^ y is impossible.
-/
theorem diophantine1_8_9_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 215 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 215 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 215 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 217 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 217 ^ y,
if y >= 1, 8 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 217 ^ y is impossible.
-/
theorem diophantine1_8_9_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (217 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 217 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 221 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 221 ^ y,
if y >= 1, 8 ^ x = 4 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 221 ^ y is impossible.
-/
theorem diophantine1_8_9_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 13 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 223 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 223 ^ y,
if x >= 4, 223 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 223 ^ y is impossible.
-/
theorem diophantine1_8_9_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 223 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 227 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 227 ^ y,
if x >= 6, 227 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 227 ^ y = 2 (mod 17).
So 8 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 227 ^ y is impossible.
-/
theorem diophantine1_8_9_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [10]) [
    {prop := List.Mem (227 ^ y % 17) [2], proof := h10},
    {prop := 8 ^ x + 9 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 227 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 229 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 229 ^ y,
if x >= 6, 229 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6 (mod 8).
Therefore, 229 ^ y = 4 (mod 17).
So 8 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 8 ^ x + 9 = 229 ^ y is impossible.
-/
theorem diophantine1_8_9_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [12]) [
    {prop := List.Mem (229 ^ y % 17) [4], proof := h10},
    {prop := 8 ^ x + 9 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 229 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 17)   8 ^ x + 9 = 233 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 233 ^ y,
if x >= 7, 233 ^ y = 9 (mod 128).
So y = 5 (mod 16), 
Therefore, 233 ^ y = 3 (mod 17).
So 8 ^ x = 11 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 8 ^ x + 9 = 233 ^ y is impossible.
-/
theorem diophantine1_8_9_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (8 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 17) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (8 ^ x % 17) [11]) [
    {prop := List.Mem (233 ^ y % 17) [3], proof := h10},
    {prop := 8 ^ x + 9 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (8 ^ x % 17) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 233 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   8 ^ x + 9 = 235 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 235 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 20 (mod 61).
So 235 ^ y = 29 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 235 ^ y is impossible.
-/
theorem diophantine1_8_9_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 61) [20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (235 ^ y % 61) [29]) [
    {prop := List.Mem (8 ^ x % 61) [20], proof := h10},
    {prop := 8 ^ x + 9 = 235 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (235 ^ y % 61) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 235 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 239 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 239 ^ y,
if x >= 4, 239 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 239 ^ y is impossible.
-/
theorem diophantine1_8_9_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 239 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   8 ^ x + 9 = 241 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 241 ^ y,
if x >= 4, 241 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 8 ^ x + 9 = 241 ^ y is impossible.
-/
theorem diophantine1_8_9_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 241 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   8 ^ x + 9 = 245 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 245 ^ y,
if y >= 2, 8 ^ x = 16 (mod 25).
So x = 8 (mod 20).
Therefore, 8 ^ x = 16 (mod 41).
So 245 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 8 ^ x + 9 = 245 ^ y is impossible.
-/
theorem diophantine1_8_9_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (245 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (245 ^ y % 41) [25]) [
    {prop := List.Mem (8 ^ x % 41) [16], proof := h10},
    {prop := 8 ^ x + 9 = 245 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (245 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 245 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   8 ^ x + 9 = 247 ^ y
For positive integers x, y satisfying 8 ^ x + 9 = 247 ^ y,
if y >= 1, 8 ^ x = 4 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 8 ^ x + 9 = 247 ^ y is impossible.
-/
theorem diophantine1_8_9_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 9 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ x % 13 = 4 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 8 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 9 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
