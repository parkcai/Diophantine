-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 7 <= a <= 7
-- 5 <= b <= 5
-- 2 <= c <= 125
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 2 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 2 ^ y,
if x >= 1, 2 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 2 ^ y is impossible.
-/
theorem diophantine1_7_5_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 2 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 2 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 3 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 3 ^ y,
if x >= 2, 3 ^ y = 5 (mod 49).
So y = 29 (mod 42), 
Therefore, 3 ^ y = 18 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 3 ^ y is impossible.
-/
theorem diophantine1_7_5_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 29) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ y % 43) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 29, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (3 ^ y % 43) [18], proof := h10},
    {prop := 7 ^ x + 5 = 3 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 3 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 4 ...
-- Trying to disprove y >= 2 with prime factor 2 of 4 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 4 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 4 ^ y,
if x >= 1, 4 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 4 ^ y is impossible.
-/
theorem diophantine1_7_5_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 4 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 4 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 4 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 5 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 5 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 3 of 6 ...
-- Trying to disprove y >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 6 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 6 ^ y,
if x >= 1, 6 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 6 ^ y is impossible.
-/
theorem diophantine1_7_5_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 6 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 6 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 7 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 7 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 7 ^ y is impossible.
-/
theorem diophantine1_7_5_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 7 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 8 ...
-- Trying to disprove y >= 2 with prime factor 2 of 8 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 8 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 8 ^ y,
if x >= 1, 8 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 8 ^ y is impossible.
-/
theorem diophantine1_7_5_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 8 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 8 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 9 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 9 ^ y,
if x >= 1, 9 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 9 ^ y is impossible.
-/
theorem diophantine1_7_5_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 9 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 10 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 10 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 11 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 11 ^ y,
if x >= 1, 11 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 11 ^ y is impossible.
-/
theorem diophantine1_7_5_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 11 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 12 ...
-- Trying to disprove y >= 3 with prime factor 2 of 12 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 12 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 12 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_7_5_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 12 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (12 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 12 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 13 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 13 ^ y,
if x >= 1, 13 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 13 ^ y is impossible.
-/
theorem diophantine1_7_5_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 13 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 14 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 14 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 14 ^ y is impossible.
-/
theorem diophantine1_7_5_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 14 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 15 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 15 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 16 ...
-- Trying to disprove y >= 2 with prime factor 2 of 16 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 16 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 16 ^ y,
if x >= 1, 16 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 16 ^ y is impossible.
-/
theorem diophantine1_7_5_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 16 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 16 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 16 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 17 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 17 ^ y,
if x >= 2, 17 ^ y = 5 (mod 49).
So y = 23 (mod 42), 
which implies y = 2 (mod 21).
Therefore, 17 ^ y = 31 (mod 43).
So 7 ^ x = 26 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 17 ^ y is impossible.
-/
theorem diophantine1_7_5_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 23) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 43) [31]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 23, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [26]) [
    {prop := List.Mem (17 ^ y % 43) [31], proof := h10},
    {prop := 7 ^ x + 5 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [26], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 18 ...
-- Trying to disprove y >= 1 with prime factor 3 of 18 ...
-- Trying to disprove y >= 2 with prime factor 2 of 18 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 18 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 18 ^ y,
if x >= 1, 18 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 18 ^ y is impossible.
-/
theorem diophantine1_7_5_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 18 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 18 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 18 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 19 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 19 ^ y,
if y >= 1, 7 ^ x = 14 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 5 = 19 ^ y is impossible.
-/
theorem diophantine1_7_5_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 19 = 14 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 19 = 14, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 20 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 20 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 21 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 21 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 21 ^ y is impossible.
-/
theorem diophantine1_7_5_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 21 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 22 ...
-- Trying to disprove y >= 2 with prime factor 2 of 22 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 22 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 22 ^ y,
if x >= 1, 22 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 22 ^ y is impossible.
-/
theorem diophantine1_7_5_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 22 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 22 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 22 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 23 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 23 ^ y,
if x >= 1, 23 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 23 ^ y is impossible.
-/
theorem diophantine1_7_5_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 23 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 24 ...
-- Trying to disprove y >= 1 with prime factor 3 of 24 ...
-- Trying to disprove y >= 2 with prime factor 2 of 24 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 24 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 24 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 24 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 24 ^ y is impossible.
-/
theorem diophantine1_7_5_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (24 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 24 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 25 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 25 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (25 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 26 ...
-- Trying to disprove y >= 2 with prime factor 2 of 26 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 26 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 26 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 26 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 26 ^ y is impossible.
-/
theorem diophantine1_7_5_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (26 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 26 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 27 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 27 ^ y,
if x >= 1, 27 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 27 ^ y is impossible.
-/
theorem diophantine1_7_5_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 27 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 27 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 28 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 28 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 28 ^ y is impossible.
-/
theorem diophantine1_7_5_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 28 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 29 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 29 ^ y,
if x >= 1, 29 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 29 ^ y is impossible.
-/
theorem diophantine1_7_5_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 29 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 30 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 30 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 31 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 31 ^ y,
if y >= 1, 7 ^ x = 26 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 5 = 31 ^ y is impossible.
-/
theorem diophantine1_7_5_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 26 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 26, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 32 ...
-- Trying to disprove y >= 2 with prime factor 2 of 32 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 32 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 32 ^ y,
if x >= 1, 32 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 32 ^ y is impossible.
-/
theorem diophantine1_7_5_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 32 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 32 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 32 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 33 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 33 ...
-- Trying to disprove y >= 1 with prime factor 11 of 33 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying to disprove y >= 3 with prime factor 3 of 33 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 33 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 33 ^ y,
if x >= 2, 33 ^ y = 5 (mod 49).
So y = 13 (mod 42), 
Therefore, 33 ^ y = 5 (mod 43).
So 7 ^ x = 0 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 33 ^ y is impossible.
-/
theorem diophantine1_7_5_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 33 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (33 ^ y % 43) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [0]) [
    {prop := List.Mem (33 ^ y % 43) [5], proof := h10},
    {prop := 7 ^ x + 5 = 33 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 33 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 34 ...
-- Trying to disprove y >= 2 with prime factor 2 of 34 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 34 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 34 ^ y,
if x >= 1, 34 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 34 ^ y is impossible.
-/
theorem diophantine1_7_5_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 34 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 34 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 34 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 35 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 35 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (35 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 36 ...
-- Trying to disprove y >= 1 with prime factor 3 of 36 ...
-- Trying to disprove y >= 2 with prime factor 2 of 36 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 36 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 36 ^ y,
if x >= 1, 36 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 36 ^ y is impossible.
-/
theorem diophantine1_7_5_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 36 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 36 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 36 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 37 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 37 ^ y,
if x >= 1, 37 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 37 ^ y is impossible.
-/
theorem diophantine1_7_5_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 37 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 38 ...
-- Trying to disprove y >= 2 with prime factor 2 of 38 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 38 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 38 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 38 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 38 ^ y is impossible.
-/
theorem diophantine1_7_5_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (38 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 38 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 39 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 39 ^ y,
if x >= 1, 39 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 39 ^ y is impossible.
-/
theorem diophantine1_7_5_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 39 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 39 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 40 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 40 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 41 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 41 ^ y,
if x >= 1, 41 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 41 ^ y is impossible.
-/
theorem diophantine1_7_5_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 41 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 42 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 42 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 42 ^ y is impossible.
-/
theorem diophantine1_7_5_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 43 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 43 ^ y,
if x >= 1, 43 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 43 ^ y is impossible.
-/
theorem diophantine1_7_5_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 43 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 44 ...
-- Trying to disprove y >= 2 with prime factor 2 of 44 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 44 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 44 ^ y,
if x >= 1, 44 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 44 ^ y is impossible.
-/
theorem diophantine1_7_5_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 44 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 44 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 44 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 45 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 45 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 46 ...
-- Trying to disprove y >= 2 with prime factor 2 of 46 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 46 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 46 ^ y,
if x >= 1, 46 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 46 ^ y is impossible.
-/
theorem diophantine1_7_5_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 46 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 46 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 46 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 47 of 47 ...
-- Trying prime 139...
-- Trying prime 277...
-- Trying prime 461...
-- Trying prime 599...
-- Trying prime 691...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 47 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 47 ^ y,
if x >= 2, 47 ^ y = 5 (mod 49).
So y = 31 (mod 42), 
which implies y = 3 (mod 7).
Therefore, 47 ^ y = 21 (mod 43).
So 7 ^ x = 16 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 47 ^ y is impossible.
-/
theorem diophantine1_7_5_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 31) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 31, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [16]) [
    {prop := List.Mem (47 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 5 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [16], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 47 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 48 ...
-- Trying to disprove y >= 1 with prime factor 3 of 48 ...
-- Trying to disprove y >= 2 with prime factor 2 of 48 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 48 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 48 ^ y,
if x >= 1, 48 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 48 ^ y is impossible.
-/
theorem diophantine1_7_5_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 48 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 48 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 48 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 49 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 49 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 49 ^ y is impossible.
-/
theorem diophantine1_7_5_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 49 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 50 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 50 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 51 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 51 ^ y,
if x >= 1, 51 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 51 ^ y is impossible.
-/
theorem diophantine1_7_5_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 51 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 51 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 52 ...
-- Trying to disprove y >= 2 with prime factor 2 of 52 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 52 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 52 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 52 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 52 ^ y is impossible.
-/
theorem diophantine1_7_5_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (52 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 52 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 53 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 53 ^ y,
if x >= 1, 53 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 53 ^ y is impossible.
-/
theorem diophantine1_7_5_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 53 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 54 ...
-- Trying to disprove y >= 3 with prime factor 2 of 54 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 54 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 54 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_7_5_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 54 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (54 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 54 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 55 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 55 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (55 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 56 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 56 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 56 ^ y is impossible.
-/
theorem diophantine1_7_5_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 56 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 57 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 57 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 57 ^ y,
if x >= 1, 57 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 57 ^ y is impossible.
-/
theorem diophantine1_7_5_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 57 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 57 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 57 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 58 ...
-- Trying to disprove y >= 2 with prime factor 2 of 58 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 58 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 58 ^ y,
if x >= 1, 58 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 58 ^ y is impossible.
-/
theorem diophantine1_7_5_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 58 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 58 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 58 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 59 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 59 ^ y,
if x >= 2, 59 ^ y = 5 (mod 49).
So y = 41 (mod 42), 
which implies y = 6 (mod 7).
Therefore, 59 ^ y = 35 (mod 43).
So 7 ^ x = 30 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 59 ^ y is impossible.
-/
theorem diophantine1_7_5_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 41) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 41, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [30]) [
    {prop := List.Mem (59 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 5 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 60 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 60 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 61 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 61 ^ y,
if x >= 2, 61 ^ y = 5 (mod 49).
So y = 37 (mod 42), 
Therefore, 61 ^ y = 34 (mod 43).
So 7 ^ x = 29 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 61 ^ y is impossible.
-/
theorem diophantine1_7_5_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 37) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (61 ^ y % 43) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 37, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [29]) [
    {prop := List.Mem (61 ^ y % 43) [34], proof := h10},
    {prop := 7 ^ x + 5 = 61 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 61 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 62 ...
-- Trying to disprove y >= 2 with prime factor 2 of 62 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 62 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 62 ^ y,
if x >= 1, 62 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 62 ^ y is impossible.
-/
theorem diophantine1_7_5_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 62 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 62 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 62 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 63 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 63 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 63 ^ y is impossible.
-/
theorem diophantine1_7_5_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 63 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 64 ...
-- Trying to disprove y >= 2 with prime factor 2 of 64 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 64 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 64 ^ y,
if x >= 1, 64 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 64 ^ y is impossible.
-/
theorem diophantine1_7_5_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 64 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 64 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 64 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 65 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 65 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (65 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 66 ...
-- Trying to disprove y >= 1 with prime factor 3 of 66 ...
-- Trying to disprove y >= 2 with prime factor 2 of 66 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 66 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 66 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 66 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 66 ^ y is impossible.
-/
theorem diophantine1_7_5_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (66 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 66 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 67 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 67 ^ y,
if x >= 1, 67 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 67 ^ y is impossible.
-/
theorem diophantine1_7_5_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 67 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 68 ...
-- Trying to disprove y >= 2 with prime factor 2 of 68 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 68 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 68 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 68 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 68 ^ y is impossible.
-/
theorem diophantine1_7_5_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (68 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 68 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 69 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 69 ^ y,
if x >= 1, 69 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 69 ^ y is impossible.
-/
theorem diophantine1_7_5_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 69 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 69 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 69 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 70 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 70 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 71 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 71 ^ y,
if x >= 1, 71 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 71 ^ y is impossible.
-/
theorem diophantine1_7_5_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 71 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 72 ...
-- Trying to disprove y >= 1 with prime factor 3 of 72 ...
-- Trying to disprove y >= 2 with prime factor 2 of 72 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 72 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 72 ^ y,
if x >= 1, 72 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 72 ^ y is impossible.
-/
theorem diophantine1_7_5_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 72 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 72 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 72 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 73 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 73 ^ y,
if x >= 2, 73 ^ y = 5 (mod 49).
So y = 11 (mod 42), 
Therefore, 73 ^ y = 20 (mod 43).
So 7 ^ x = 15 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 73 ^ y is impossible.
-/
theorem diophantine1_7_5_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 43) [20]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [15]) [
    {prop := List.Mem (73 ^ y % 43) [20], proof := h10},
    {prop := 7 ^ x + 5 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 74 ...
-- Trying to disprove y >= 2 with prime factor 2 of 74 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 74 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 74 ^ y,
if x >= 1, 74 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 74 ^ y is impossible.
-/
theorem diophantine1_7_5_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 74 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 74 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 74 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 75 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 75 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 76 ...
-- Trying to disprove y >= 2 with prime factor 2 of 76 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 76 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 76 ^ y,
if x >= 1, 76 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 76 ^ y is impossible.
-/
theorem diophantine1_7_5_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 76 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 76 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 76 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 77 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 77 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 77 ^ y is impossible.
-/
theorem diophantine1_7_5_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 77 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 78 ...
-- Trying to disprove y >= 1 with prime factor 3 of 78 ...
-- Trying to disprove y >= 2 with prime factor 2 of 78 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 78 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 78 ^ y,
if x >= 1, 78 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 78 ^ y is impossible.
-/
theorem diophantine1_7_5_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 78 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 78 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 78 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 79 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 79 ^ y,
if x >= 1, 79 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 79 ^ y is impossible.
-/
theorem diophantine1_7_5_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 80 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 80 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 81 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 81 ^ y,
if x >= 1, 81 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 81 ^ y is impossible.
-/
theorem diophantine1_7_5_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 81 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 81 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 82 ...
-- Trying to disprove y >= 2 with prime factor 2 of 82 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 82 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 82 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 82 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 82 ^ y is impossible.
-/
theorem diophantine1_7_5_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (82 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 82 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 83 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 83 ^ y,
if x >= 1, 83 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 83 ^ y is impossible.
-/
theorem diophantine1_7_5_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 83 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 84 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 84 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 84 ^ y is impossible.
-/
theorem diophantine1_7_5_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 85 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 85 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (85 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 86 ...
-- Trying to disprove y >= 2 with prime factor 2 of 86 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 86 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 86 ^ y,
if x >= 1, 86 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 86 ^ y is impossible.
-/
theorem diophantine1_7_5_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 86 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 86 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 86 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 87 ...
-- Trying to disprove y >= 3 with prime factor 3 of 87 ...
-- Trying to disprove y >= 1 with prime factor 29 of 87 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying to disprove y >= 4 with prime factor 3 of 87 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   7 ^ x + 5 = 87 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 87 ^ y,
if y >= 4, 7 ^ x = 76 (mod 81).
So x = 20 (mod 27).
Therefore, 7 ^ x = 25 (mod 109).
So 87 ^ y = 30 (mod 109), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 5 = 87 ^ y is impossible.
-/
theorem diophantine1_7_5_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (87 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 76 := by omega
  have h9 := Claim (x % 27 = 20) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 76, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 109) [25]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 20, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (87 ^ y % 109) [30]) [
    {prop := List.Mem (7 ^ x % 109) [25], proof := h10},
    {prop := 7 ^ x + 5 = 87 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (87 ^ y % 109) [30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 87 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 88 ...
-- Trying to disprove y >= 2 with prime factor 2 of 88 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 88 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 88 ^ y,
if x >= 1, 88 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 88 ^ y is impossible.
-/
theorem diophantine1_7_5_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 88 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 88 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 88 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 89 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 89 ^ y,
if x >= 2, 89 ^ y = 5 (mod 49).
So y = 25 (mod 42), 
Therefore, 89 ^ y = 5 (mod 43).
So 7 ^ x = 0 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 89 ^ y is impossible.
-/
theorem diophantine1_7_5_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 25) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 43) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 25, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [0]) [
    {prop := List.Mem (89 ^ y % 43) [5], proof := h10},
    {prop := 7 ^ x + 5 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 90 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 90 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 91 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 91 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 91 ^ y is impossible.
-/
theorem diophantine1_7_5_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 91 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 92 ...
-- Trying to disprove y >= 2 with prime factor 2 of 92 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 92 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 92 ^ y,
if x >= 1, 92 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 92 ^ y is impossible.
-/
theorem diophantine1_7_5_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 92 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 92 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 92 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 93 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 93 ^ y,
if x >= 1, 93 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 93 ^ y is impossible.
-/
theorem diophantine1_7_5_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 93 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 93 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 93 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 94 ...
-- Trying to disprove y >= 2 with prime factor 2 of 94 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 94 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 94 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 94 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 94 ^ y is impossible.
-/
theorem diophantine1_7_5_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (94 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 94 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 95 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 95 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (95 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 96 ...
-- Trying to disprove y >= 1 with prime factor 3 of 96 ...
-- Trying to disprove y >= 2 with prime factor 2 of 96 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 96 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 96 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 96 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 96 ^ y is impossible.
-/
theorem diophantine1_7_5_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (96 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 96 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 97 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 97 ^ y,
if x >= 1, 97 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 97 ^ y is impossible.
-/
theorem diophantine1_7_5_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 97 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 98 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 98 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 98 ^ y is impossible.
-/
theorem diophantine1_7_5_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 98 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 99 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 99 ^ y,
if x >= 1, 99 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 99 ^ y is impossible.
-/
theorem diophantine1_7_5_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 99 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 99 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 99 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 100 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 100 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 101 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 101 ^ y,
if x >= 2, 101 ^ y = 5 (mod 49).
So y = 29 (mod 42), 
which implies y = 8 (mod 21).
Therefore, 101 ^ y = 24 (mod 43).
So 7 ^ x = 19 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 101 ^ y is impossible.
-/
theorem diophantine1_7_5_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 29) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 43) [24]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 29, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [19]) [
    {prop := List.Mem (101 ^ y % 43) [24], proof := h10},
    {prop := 7 ^ x + 5 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 101 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 102 ...
-- Trying to disprove y >= 1 with prime factor 3 of 102 ...
-- Trying to disprove y >= 2 with prime factor 2 of 102 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 102 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 102 ^ y,
if x >= 1, 102 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 102 ^ y is impossible.
-/
theorem diophantine1_7_5_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 102 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 102 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 102 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 5 = 103 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 103 ^ y,
if x >= 2, 103 ^ y = 5 (mod 49).
So y = 1 (mod 42), 
which implies y = 1 (mod 21).
Therefore, 103 ^ y = 17 (mod 43).
So 7 ^ x = 12 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 103 ^ y is impossible.
-/
theorem diophantine1_7_5_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 49 = 5 := by omega
  have h9 := Claim (y % 42 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 43) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [12]) [
    {prop := List.Mem (103 ^ y % 43) [17], proof := h10},
    {prop := 7 ^ x + 5 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 104 ...
-- Trying to disprove y >= 2 with prime factor 2 of 104 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 104 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 104 ^ y,
if x >= 1, 104 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 104 ^ y is impossible.
-/
theorem diophantine1_7_5_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 104 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 104 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 104 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 105 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 105 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 106 ...
-- Trying to disprove y >= 2 with prime factor 2 of 106 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 106 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 106 ^ y,
if x >= 1, 106 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 106 ^ y is impossible.
-/
theorem diophantine1_7_5_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 106 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 106 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 106 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 107 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 107 ^ y,
if x >= 1, 107 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 107 ^ y is impossible.
-/
theorem diophantine1_7_5_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 107 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 108 ...
-- Trying to disprove y >= 1 with prime factor 3 of 108 ...
-- Trying to disprove y >= 2 with prime factor 2 of 108 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 108 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 108 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 108 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 108 ^ y is impossible.
-/
theorem diophantine1_7_5_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (108 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 108 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 109 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 109 ^ y,
if x >= 1, 109 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 109 ^ y is impossible.
-/
theorem diophantine1_7_5_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 110 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 110 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (110 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 111 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 111 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 111 ^ y,
if x >= 1, 111 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 111 ^ y is impossible.
-/
theorem diophantine1_7_5_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 111 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 111 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 111 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 112 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 112 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 112 ^ y is impossible.
-/
theorem diophantine1_7_5_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 112 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 113 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 113 ^ y,
if x >= 1, 113 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 113 ^ y is impossible.
-/
theorem diophantine1_7_5_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 113 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 114 ...
-- Trying to disprove y >= 1 with prime factor 3 of 114 ...
-- Trying to disprove y >= 2 with prime factor 2 of 114 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 114 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 114 ^ y,
if x >= 1, 114 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 114 ^ y is impossible.
-/
theorem diophantine1_7_5_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 114 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 114 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 114 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 115 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 115 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (115 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 116 ...
-- Trying to disprove y >= 2 with prime factor 2 of 116 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 116 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 116 ^ y,
if x >= 1, 116 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 116 ^ y is impossible.
-/
theorem diophantine1_7_5_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 116 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 116 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 116 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 117 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 117 ...
-- Trying to disprove y >= 1 with prime factor 13 of 117 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying to disprove y >= 3 with prime factor 3 of 117 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 117 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 117 ^ y,
if x >= 2, 117 ^ y = 5 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 5 = 117 ^ y is impossible.
-/
theorem diophantine1_7_5_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 117 ^ y % 49 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 117 ^ y % 49 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 117 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 118 ...
-- Trying to disprove y >= 2 with prime factor 2 of 118 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 118 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 118 ^ y,
if x >= 1, 118 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 118 ^ y is impossible.
-/
theorem diophantine1_7_5_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 118 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 118 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 118 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 5 = 119 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 119 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 5 = 119 ^ y is impossible.
-/
theorem diophantine1_7_5_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 119 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 120 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 120 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 121 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 121 ^ y,
if x >= 1, 121 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 121 ^ y is impossible.
-/
theorem diophantine1_7_5_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 122 ...
-- Trying to disprove y >= 2 with prime factor 2 of 122 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 122 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 122 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 122 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 122 ^ y is impossible.
-/
theorem diophantine1_7_5_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (122 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 122 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 123 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 5 = 123 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 123 ^ y,
if x >= 1, 123 ^ y = 5 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 5 = 123 ^ y is impossible.
-/
theorem diophantine1_7_5_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 123 ^ y % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 123 ^ y % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 123 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 124 ...
-- Trying to disprove y >= 2 with prime factor 2 of 124 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 3 with prime factor 2 of 124 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 5 = 124 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 124 ^ y,
if y >= 3, 7 ^ x = 3 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 7 ^ x + 5 = 124 ^ y is impossible.
-/
theorem diophantine1_7_5_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (124 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 8 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 5 = 124 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 5 = 125 ^ y
For positive integers x, y satisfying 7 ^ x + 5 = 125 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 5).
-/
theorem diophantine1_7_5_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 5 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (125 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
