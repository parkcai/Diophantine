-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 9 <= a <= 9
-- 7 <= b <= 7
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 7 = 2 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 2 ^ y,
if x >= 3, 2 ^ y = 7 (mod 27).
So y = 16 (mod 18), 
which implies y = 16, 34 (mod 36).
Therefore, 2 ^ y = 9, 28 (mod 37).
So 9 ^ x = 2, 21 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (1, 4).
-/
theorem diophantine1_9_7_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 2 ^ y) :
  List.Mem (x, y) [(1, 4)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 2 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ y % 37) [9, 28]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [2, 21]) [
    {prop := List.Mem (2 ^ y % 37) [9, 28], proof := h10},
    {prop := 9 ^ x + 7 = 2 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [2, 21], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 4)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 2 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 3 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 3 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 3 ^ y is impossible.
-/
theorem diophantine1_9_7_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 3 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 3 with prime factor 2 of 4 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 4 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 5 with prime factor 2 of 4 ...
-- Trying to disprove y >= 6 with prime factor 2 of 4 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 271)   9 ^ x + 7 = 4 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 4 ^ y,
if x >= 4, 4 ^ y = 7 (mod 81).
So y = 8 (mod 27), 
which implies y = 8, 35, 62, 89, 116 (mod 135).
Therefore, 4 ^ y = 225, 158, 70, 7, 82 (mod 271).
So 9 ^ x = 218, 151, 63, 0, 75 (mod 271), but this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (1, 2).
-/
theorem diophantine1_9_7_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 4 ^ y) :
  List.Mem (x, y) [(1, 2)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 4 ^ y % 81 = 7 := by omega
  have h9 := Claim (y % 27 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 4 ^ y % 81 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (4 ^ y % 271) [225, 158, 70, 7, 82]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 271) [218, 151, 63, 0, 75]) [
    {prop := List.Mem (4 ^ y % 271) [225, 158, 70, 7, 82], proof := h10},
    {prop := 9 ^ x + 7 = 4 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 271) [218, 151, 63, 0, 75], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 2)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 4 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 5 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 5 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 5 ^ y is impossible.
-/
theorem diophantine1_9_7_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (5 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 5 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 6 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 6 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 6 ^ y is impossible.
-/
theorem diophantine1_9_7_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 6 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 7 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 7 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 8 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 8 ...
-- Trying to disprove y >= 3 with prime factor 2 of 8 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 8 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 8 ^ y,
if x >= 2, 8 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 8 ^ y is impossible.
-/
theorem diophantine1_9_7_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 8 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 8 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 9 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 9 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 9 ^ y is impossible.
-/
theorem diophantine1_9_7_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 9 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 10 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 10 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 10 ^ y is impossible.
-/
theorem diophantine1_9_7_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (10 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 10 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 7 = 11 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 11 ^ y,
if x >= 3, 11 ^ y = 7 (mod 27).
So y = 4 (mod 18), 
which implies y = 4 (mod 6).
Therefore, 11 ^ y = 26 (mod 37).
So 9 ^ x = 19 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 11 ^ y is impossible.
-/
theorem diophantine1_9_7_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 37) [26]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [19]) [
    {prop := List.Mem (11 ^ y % 37) [26], proof := h10},
    {prop := 9 ^ x + 7 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 11 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 12 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 12 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 12 ^ y is impossible.
-/
theorem diophantine1_9_7_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 12 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 13 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 13 ^ y,
if y >= 1, 9 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 13 ^ y is impossible.
-/
theorem diophantine1_9_7_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 14 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 14 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 15 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 15 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 15 ^ y is impossible.
-/
theorem diophantine1_9_7_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 15 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 16 ...
-- Trying to disprove y >= 3 with prime factor 2 of 16 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 16 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 5 with prime factor 2 of 16 ...
-- Trying to disprove y >= 6 with prime factor 2 of 16 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 7 = 16 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 16 ^ y,
if x >= 4, 16 ^ y = 7 (mod 81).
So y = 4 (mod 27), 
which implies y = 4 (mod 9).
Therefore, 16 ^ y = 27 (mod 109).
So 9 ^ x = 20 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_9_7_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 16 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 16 ^ y % 81 = 7 := by omega
  have h9 := Claim (y % 27 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 16 ^ y % 81 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (16 ^ y % 109) [27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [20]) [
    {prop := List.Mem (16 ^ y % 109) [27], proof := h10},
    {prop := 9 ^ x + 7 = 16 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [20], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 16 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 17 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 17 ^ y,
if x >= 2, 17 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 17 ^ y is impossible.
-/
theorem diophantine1_9_7_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 18 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 18 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 18 ^ y is impossible.
-/
theorem diophantine1_9_7_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 19 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 19 ^ y,
if x >= 2, 19 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 19 ^ y is impossible.
-/
theorem diophantine1_9_7_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 19 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 20 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 20 ...
-- Trying to disprove y >= 1 with prime factor 5 of 20 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 20 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 20 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 20 ^ y is impossible.
-/
theorem diophantine1_9_7_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (20 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 20 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 21 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 21 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 22 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 22 ...
-- Trying to disprove y >= 3 with prime factor 2 of 22 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 22 ...
-- Trying to disprove y >= 4 with prime factor 2 of 22 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 5 with prime factor 2 of 22 ...
-- Trying to disprove y >= 6 with prime factor 2 of 22 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 271)   9 ^ x + 7 = 22 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 22 ^ y,
if x >= 4, 22 ^ y = 7 (mod 81).
So y = 5 (mod 27), 
which implies y = 5, 32, 59, 86, 113 (mod 135).
Therefore, 22 ^ y = 25, 250, 61, 68, 138 (mod 271).
So 9 ^ x = 18, 243, 54, 61, 131 (mod 271), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 7 = 22 ^ y is impossible.
-/
theorem diophantine1_9_7_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 22 ^ y % 81 = 7 := by omega
  have h9 := Claim (y % 27 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 22 ^ y % 81 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (22 ^ y % 271) [25, 250, 61, 68, 138]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 271) [18, 243, 54, 61, 131]) [
    {prop := List.Mem (22 ^ y % 271) [25, 250, 61, 68, 138], proof := h10},
    {prop := 9 ^ x + 7 = 22 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 271) [18, 243, 54, 61, 131], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 22 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 67)   9 ^ x + 7 = 23 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 23 ^ y,
if y >= 1, 9 ^ x = 16 (mod 23).
So x = 3 (mod 11).
Therefore, 9 ^ x = 59 (mod 67).
So 23 ^ y = 66 (mod 67), but this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 23 ^ y is impossible.
-/
theorem diophantine1_9_7_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 11 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 67) [59]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 11 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 67) [66]) [
    {prop := List.Mem (9 ^ x % 67) [59], proof := h10},
    {prop := 9 ^ x + 7 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 67) [66], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 24 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 24 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 24 ^ y is impossible.
-/
theorem diophantine1_9_7_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 24 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 25 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 25 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 25 ^ y is impossible.
-/
theorem diophantine1_9_7_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (25 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 25 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 26 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 26 ...
-- Trying to disprove y >= 3 with prime factor 2 of 26 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 26 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 26 ^ y,
if x >= 2, 26 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 26 ^ y is impossible.
-/
theorem diophantine1_9_7_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 26 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 26 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 26 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 27 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 27 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 27 ^ y is impossible.
-/
theorem diophantine1_9_7_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 27 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 28 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 28 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 7 = 29 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 29 ^ y,
if x >= 3, 29 ^ y = 7 (mod 27).
So y = 16 (mod 18), 
which implies y = 4, 10 (mod 12).
Therefore, 29 ^ y = 26, 11 (mod 37).
So 9 ^ x = 19, 4 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 29 ^ y is impossible.
-/
theorem diophantine1_9_7_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 37) [26, 11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [19, 4]) [
    {prop := List.Mem (29 ^ y % 37) [26, 11], proof := h10},
    {prop := 9 ^ x + 7 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [19, 4], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 30 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 30 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 30 ^ y is impossible.
-/
theorem diophantine1_9_7_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 30 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 31 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 31 ^ y,
if y >= 1, 9 ^ x = 24 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 31 ^ y is impossible.
-/
theorem diophantine1_9_7_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 31 = 24 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 31 = 24, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 32 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 32 ...
-- Trying to disprove y >= 3 with prime factor 2 of 32 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 32 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 7 = 32 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 32 ^ y,
if x >= 3, 32 ^ y = 7 (mod 27).
So y = 14 (mod 18), 
which implies y = 14, 32 (mod 36).
Therefore, 32 ^ y = 28, 9 (mod 37).
So 9 ^ x = 21, 2 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 32 ^ y is impossible.
-/
theorem diophantine1_9_7_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 32 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 32 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (32 ^ y % 37) [28, 9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [21, 2]) [
    {prop := List.Mem (32 ^ y % 37) [28, 9], proof := h10},
    {prop := 9 ^ x + 7 = 32 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [21, 2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 32 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 33 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 33 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 33 ^ y is impossible.
-/
theorem diophantine1_9_7_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 33 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 34 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 34 ...
-- Trying to disprove y >= 3 with prime factor 2 of 34 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 34 ...
-- Trying to disprove y >= 1 with prime factor 17 of 34 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 34 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 34 ^ y,
if y >= 1, 9 ^ x = 10 (mod 17).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 34 ^ y is impossible.
-/
theorem diophantine1_9_7_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (34 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 17 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 34 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 35 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 35 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 36 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 36 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 36 ^ y is impossible.
-/
theorem diophantine1_9_7_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 37 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 37 ^ y,
if x >= 2, 37 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 37 ^ y is impossible.
-/
theorem diophantine1_9_7_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 38 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 38 ...
-- Trying to disprove y >= 3 with prime factor 2 of 38 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 38 ...
-- Trying to disprove y >= 1 with prime factor 19 of 38 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 38 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 38 ^ y,
if y >= 1, 9 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 38 ^ y is impossible.
-/
theorem diophantine1_9_7_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (38 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 38 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 39 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 39 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 39 ^ y is impossible.
-/
theorem diophantine1_9_7_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 39 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 40 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 40 ...
-- Trying to disprove y >= 1 with prime factor 5 of 40 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 40 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 40 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 40 ^ y is impossible.
-/
theorem diophantine1_9_7_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (40 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 40 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 7 = 41 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 41 ^ y,
if x >= 3, 41 ^ y = 7 (mod 27).
So y = 2 (mod 18), 
Therefore, 41 ^ y = 9 (mod 19).
So 9 ^ x = 2 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 41 ^ y is impossible.
-/
theorem diophantine1_9_7_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 19) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [2]) [
    {prop := List.Mem (41 ^ y % 19) [9], proof := h10},
    {prop := 9 ^ x + 7 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 42 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 42 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   9 ^ x + 7 = 43 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 43 ^ y,
if x >= 4, 43 ^ y = 7 (mod 81).
So y = 13 (mod 27), 
which implies y = 13, 40, 67 (mod 81).
Therefore, 43 ^ y = 93, 55, 15 (mod 163).
So 9 ^ x = 86, 48, 8 (mod 163), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 7 = 43 ^ y is impossible.
-/
theorem diophantine1_9_7_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 81 = 7 := by omega
  have h9 := Claim (y % 27 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 81 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (43 ^ y % 163) [93, 55, 15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 163) [86, 48, 8]) [
    {prop := List.Mem (43 ^ y % 163) [93, 55, 15], proof := h10},
    {prop := 9 ^ x + 7 = 43 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 163) [86, 48, 8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 43 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 44 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 44 ...
-- Trying to disprove y >= 3 with prime factor 2 of 44 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 44 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 44 ^ y,
if x >= 2, 44 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 44 ^ y is impossible.
-/
theorem diophantine1_9_7_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 44 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 44 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 44 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 45 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 45 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 45 ^ y is impossible.
-/
theorem diophantine1_9_7_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 46 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 46 ...
-- Trying to disprove y >= 3 with prime factor 2 of 46 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 46 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 46 ^ y,
if x >= 2, 46 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 46 ^ y is impossible.
-/
theorem diophantine1_9_7_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 46 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 46 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 46 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 7 = 47 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 47 ^ y,
if x >= 3, 47 ^ y = 7 (mod 27).
So y = 10 (mod 18), 
which implies y = 1 (mod 9).
Therefore, 47 ^ y = 9 (mod 19).
So 9 ^ x = 2 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 47 ^ y is impossible.
-/
theorem diophantine1_9_7_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 19) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [2]) [
    {prop := List.Mem (47 ^ y % 19) [9], proof := h10},
    {prop := 9 ^ x + 7 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 48 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 48 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 48 ^ y is impossible.
-/
theorem diophantine1_9_7_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 48 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 49 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 49 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 50 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 50 ...
-- Trying to disprove y >= 1 with prime factor 5 of 50 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 50 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 50 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 50 ^ y is impossible.
-/
theorem diophantine1_9_7_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (50 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 50 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 51 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 51 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 51 ^ y is impossible.
-/
theorem diophantine1_9_7_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 51 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 52 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 52 ...
-- Trying to disprove y >= 3 with prime factor 2 of 52 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 13 of 52 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 52 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 52 ^ y,
if y >= 1, 9 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 52 ^ y is impossible.
-/
theorem diophantine1_9_7_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (52 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 52 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 53 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 53 ^ y,
if x >= 2, 53 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 53 ^ y is impossible.
-/
theorem diophantine1_9_7_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 54 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 54 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 54 ^ y is impossible.
-/
theorem diophantine1_9_7_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 55 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 55 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 55 ^ y is impossible.
-/
theorem diophantine1_9_7_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 56 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 56 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 57 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 57 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 57 ^ y is impossible.
-/
theorem diophantine1_9_7_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 57 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 58 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 58 ...
-- Trying to disprove y >= 3 with prime factor 2 of 58 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 58 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 29 of 58 ...
-- Trying prime 43...
-- Trying prime 71...
-- Trying prime 113...
-- Trying prime 127...
-- Trying prime 197...
-- Trying to disprove y >= 5 with prime factor 2 of 58 ...
-- Trying to disprove y >= 6 with prime factor 2 of 58 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 7 = 58 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 58 ^ y,
if x >= 4, 58 ^ y = 7 (mod 81).
So y = 26 (mod 27), 
which implies y = 26, 53, 80, 107 (mod 108).
Therefore, 58 ^ y = 84, 62, 25, 47 (mod 109).
So 9 ^ x = 77, 55, 18, 40 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 7 = 58 ^ y is impossible.
-/
theorem diophantine1_9_7_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 58 ^ y % 81 = 7 := by omega
  have h9 := Claim (y % 27 = 26) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 58 ^ y % 81 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (58 ^ y % 109) [84, 62, 25, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 26, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [77, 55, 18, 40]) [
    {prop := List.Mem (58 ^ y % 109) [84, 62, 25, 47], proof := h10},
    {prop := 9 ^ x + 7 = 58 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [77, 55, 18, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 58 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 7 = 59 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 59 ^ y,
if x >= 3, 59 ^ y = 7 (mod 27).
So y = 14 (mod 18), 
Therefore, 59 ^ y = 6 (mod 19).
So 9 ^ x = 18 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 59 ^ y is impossible.
-/
theorem diophantine1_9_7_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 19) [6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [18]) [
    {prop := List.Mem (59 ^ y % 19) [6], proof := h10},
    {prop := 9 ^ x + 7 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 60 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 60 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 60 ^ y is impossible.
-/
theorem diophantine1_9_7_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 60 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 61 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 61 ^ y,
if y >= 1, 9 ^ x = 54 (mod 61).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 61 ^ y is impossible.
-/
theorem diophantine1_9_7_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 61 = 54 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 61 = 54, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 62 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 62 ...
-- Trying to disprove y >= 3 with prime factor 2 of 62 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 62 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 62 ^ y,
if x >= 2, 62 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 62 ^ y is impossible.
-/
theorem diophantine1_9_7_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 62 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 62 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 62 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 63 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 63 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 64 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 64 ...
-- Trying to disprove y >= 3 with prime factor 2 of 64 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 64 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 64 ^ y,
if x >= 2, 64 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 64 ^ y is impossible.
-/
theorem diophantine1_9_7_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 64 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 64 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 64 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 65 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 65 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 65 ^ y is impossible.
-/
theorem diophantine1_9_7_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 66 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 66 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 66 ^ y is impossible.
-/
theorem diophantine1_9_7_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 66 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 67 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 67 ^ y,
if y >= 1, 9 ^ x = 60 (mod 67).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 67 ^ y is impossible.
-/
theorem diophantine1_9_7_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (67 ^ y % 67 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 67 = 60 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 67 = 60, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 67 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 68 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 68 ...
-- Trying to disprove y >= 3 with prime factor 2 of 68 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 68 ...
-- Trying to disprove y >= 1 with prime factor 17 of 68 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 68 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 68 ^ y,
if y >= 1, 9 ^ x = 10 (mod 17).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 68 ^ y is impossible.
-/
theorem diophantine1_9_7_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (68 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 17 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 68 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 69 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 69 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 69 ^ y is impossible.
-/
theorem diophantine1_9_7_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 69 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 70 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 70 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 71 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 71 ^ y,
if x >= 2, 71 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 71 ^ y is impossible.
-/
theorem diophantine1_9_7_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 71 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 72 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 72 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 72 ^ y is impossible.
-/
theorem diophantine1_9_7_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 73 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 73 ^ y,
if x >= 2, 73 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 73 ^ y is impossible.
-/
theorem diophantine1_9_7_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 74 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 74 ...
-- Trying to disprove y >= 3 with prime factor 2 of 74 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 74 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 7 = 74 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 74 ^ y,
if x >= 3, 74 ^ y = 7 (mod 27).
So y = 10 (mod 18), 
which implies y = 1 (mod 9).
Therefore, 74 ^ y = 17 (mod 19).
So 9 ^ x = 10 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 74 ^ y is impossible.
-/
theorem diophantine1_9_7_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 74 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 74 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (74 ^ y % 19) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [10]) [
    {prop := List.Mem (74 ^ y % 19) [17], proof := h10},
    {prop := 9 ^ x + 7 = 74 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 74 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 75 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 75 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 75 ^ y is impossible.
-/
theorem diophantine1_9_7_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 75 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 76 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 76 ...
-- Trying to disprove y >= 3 with prime factor 2 of 76 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 76 ...
-- Trying to disprove y >= 1 with prime factor 19 of 76 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 76 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 76 ^ y,
if y >= 1, 9 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 76 ^ y is impossible.
-/
theorem diophantine1_9_7_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (76 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 76 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 77 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 77 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 78 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 78 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 78 ^ y is impossible.
-/
theorem diophantine1_9_7_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 78 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 79 of 79 ...
-- Trying prime 157...
-- Trying prime 313...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 313)   9 ^ x + 7 = 79 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 79 ^ y,
if y >= 1, 9 ^ x = 72 (mod 79).
So x = 7 (mod 39).
Therefore, 9 ^ x = 16 (mod 313).
So 79 ^ y = 23 (mod 313), but this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 79 ^ y is impossible.
-/
theorem diophantine1_9_7_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (79 ^ y % 79 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 79 = 72 := by omega
  have h9 := Claim (x % 39 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 79 = 72, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 313) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 39 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (79 ^ y % 313) [23]) [
    {prop := List.Mem (9 ^ x % 313) [16], proof := h10},
    {prop := 9 ^ x + 7 = 79 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (79 ^ y % 313) [23], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 79 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 80 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 80 ...
-- Trying to disprove y >= 1 with prime factor 5 of 80 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 80 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 80 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 80 ^ y is impossible.
-/
theorem diophantine1_9_7_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (80 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 80 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 81 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 81 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 81 ^ y is impossible.
-/
theorem diophantine1_9_7_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 81 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 82 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 82 ...
-- Trying to disprove y >= 3 with prime factor 2 of 82 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 82 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 82 ^ y,
if x >= 2, 82 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 82 ^ y is impossible.
-/
theorem diophantine1_9_7_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 82 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 82 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 82 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 7 = 83 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 83 ^ y,
if x >= 3, 83 ^ y = 7 (mod 27).
So y = 16 (mod 18), 
which implies y = 1 (mod 3).
Therefore, 83 ^ y = 7 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 83 ^ y is impossible.
-/
theorem diophantine1_9_7_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 19) [7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (83 ^ y % 19) [7], proof := h10},
    {prop := 9 ^ x + 7 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 84 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 84 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 85 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 85 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 85 ^ y is impossible.
-/
theorem diophantine1_9_7_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (85 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 85 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 86 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 86 ...
-- Trying to disprove y >= 3 with prime factor 2 of 86 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 86 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 7 = 86 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 86 ^ y,
if x >= 3, 86 ^ y = 7 (mod 27).
So y = 14 (mod 18), 
which implies y = 5 (mod 9).
Therefore, 86 ^ y = 7 (mod 37).
So 9 ^ x = 0 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 7 = 86 ^ y is impossible.
-/
theorem diophantine1_9_7_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 86 ^ y % 27 = 7 := by omega
  have h9 := Claim (y % 18 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 86 ^ y % 27 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (86 ^ y % 37) [7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [0]) [
    {prop := List.Mem (86 ^ y % 37) [7], proof := h10},
    {prop := 9 ^ x + 7 = 86 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 86 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 87 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 87 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 87 ^ y is impossible.
-/
theorem diophantine1_9_7_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 87 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 88 ...
-- Trying to disprove y >= 3 with prime factor 2 of 88 ...
-- Trying to disprove y >= 4 with prime factor 2 of 88 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 5 with prime factor 2 of 88 ...
-- Trying to disprove y >= 6 with prime factor 2 of 88 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove y >= 2 with prime factor 11 of 88 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 88 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 88 ^ y,
if y >= 2, 9 ^ x = 114 (mod 121).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_9_7_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 88 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (88 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 121 = 114 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 121 = 114, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 88 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 7 = 89 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 89 ^ y,
if x >= 2, 89 ^ y = 7 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 7 = 89 ^ y is impossible.
-/
theorem diophantine1_9_7_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 9 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 9 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 90 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 90 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 90 ^ y is impossible.
-/
theorem diophantine1_9_7_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 90 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 91 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 91 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 92 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 92 ...
-- Trying to disprove y >= 3 with prime factor 2 of 92 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 92 ...
-- Trying to disprove y >= 1 with prime factor 23 of 92 ...
-- Trying prime 67...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 67)   9 ^ x + 7 = 92 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 92 ^ y,
if y >= 1, 9 ^ x = 16 (mod 23).
So x = 3 (mod 11).
Therefore, 9 ^ x = 59 (mod 67).
So 92 ^ y = 66 (mod 67), but this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 92 ^ y is impossible.
-/
theorem diophantine1_9_7_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (92 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 11 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 67) [59]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 11 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (92 ^ y % 67) [66]) [
    {prop := List.Mem (9 ^ x % 67) [59], proof := h10},
    {prop := 9 ^ x + 7 = 92 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (92 ^ y % 67) [66], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 92 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 93 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 93 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 93 ^ y is impossible.
-/
theorem diophantine1_9_7_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 93 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 94 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 94 ...
-- Trying to disprove y >= 3 with prime factor 2 of 94 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 4 with prime factor 2 of 94 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 5 with prime factor 2 of 94 ...
-- Trying to disprove y >= 1 with prime factor 47 of 94 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 94 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 94 ^ y,
if y >= 1, 9 ^ x = 40 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 94 ^ y is impossible.
-/
theorem diophantine1_9_7_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (94 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 47 = 40 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 47 = 40, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 94 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 95 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 95 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 95 ^ y is impossible.
-/
theorem diophantine1_9_7_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 96 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 96 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 7 = 96 ^ y is impossible.
-/
theorem diophantine1_9_7_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 96 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 7 = 97 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 97 ^ y,
if x >= 4, 97 ^ y = 7 (mod 81).
So y = 4 (mod 27), 
Therefore, 97 ^ y = 26 (mod 109).
So 9 ^ x = 19 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 7 = 97 ^ y is impossible.
-/
theorem diophantine1_9_7_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 81 = 7 := by omega
  have h9 := Claim (y % 27 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 81 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 109) [26]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [19]) [
    {prop := List.Mem (97 ^ y % 109) [26], proof := h10},
    {prop := 9 ^ x + 7 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 7 = 98 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 98 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 7).
-/
theorem diophantine1_9_7_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 7 = 99 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 99 ^ y,
if x >= 1 and y >= 1,
7 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 7 = 99 ^ y is impossible.
-/
theorem diophantine1_9_7_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 99 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 100 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 100 ...
-- Trying to disprove y >= 1 with prime factor 5 of 100 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 7 = 100 ^ y
For positive integers x, y satisfying 9 ^ x + 7 = 100 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 7 = 100 ^ y is impossible.
-/
theorem diophantine1_9_7_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 7 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (100 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 7 = 100 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
