-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 7 <= a <= 7
-- 6 <= b <= 6
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   7 ^ x + 6 = 2 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 2 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 3 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 3 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 4 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 4 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 6 = 5 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 5 ^ y,
if y >= 2, 7 ^ x = 19 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 6 = 5 ^ y is impossible.
-/
theorem diophantine1_7_6_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 19 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 19, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 6 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 6 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 6 = 7 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 7 ^ y,
if x >= 1 and y >= 1,
6 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 6 = 7 ^ y is impossible.
-/
theorem diophantine1_7_6_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 7 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 8 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 8 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 9 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 9 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (9 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 10 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 10 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 11 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 11 ^ y,
if x >= 1, 11 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 11 ^ y is impossible.
-/
theorem diophantine1_7_6_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 11 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 12 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 12 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 6 = 13 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 13 ^ y,
if x >= 2, 13 ^ y = 6 (mod 49).
So y = 11 (mod 14), 
Therefore, 13 ^ y = 4 (mod 29).
So 7 ^ x = 27 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_7_6_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 13 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 49 = 6 := by omega
  have h9 := Claim (y % 14 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 29) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [27]) [
    {prop := List.Mem (13 ^ y % 29) [4], proof := h10},
    {prop := 7 ^ x + 6 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 13 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 14 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 14 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 15 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 15 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 16 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 16 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 257)   7 ^ x + 6 = 17 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 17 ^ y,
if y >= 1, 7 ^ x = 11 (mod 17).
So x = 5 (mod 16), 
which implies x = 5, 21, 37, 53, 69, 85, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245 (mod 256).
Therefore, 7 ^ x = 102, 206, 154, 180, 167, 45, 106, 204, 155, 51, 103, 77, 90, 212, 151, 53 (mod 257).
So 17 ^ y = 108, 212, 160, 186, 173, 51, 112, 210, 161, 57, 109, 83, 96, 218, 157, 59 (mod 257), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 6 = 17 ^ y is impossible.
-/
theorem diophantine1_7_6_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (17 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 257) [102, 206, 154, 180, 167, 45, 106, 204, 155, 51, 103, 77, 90, 212, 151, 53]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (17 ^ y % 257) [108, 212, 160, 186, 173, 51, 112, 210, 161, 57, 109, 83, 96, 218, 157, 59]) [
    {prop := List.Mem (7 ^ x % 257) [102, 206, 154, 180, 167, 45, 106, 204, 155, 51, 103, 77, 90, 212, 151, 53], proof := h10},
    {prop := 7 ^ x + 6 = 17 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (17 ^ y % 257) [108, 212, 160, 186, 173, 51, 112, 210, 161, 57, 109, 83, 96, 218, 157, 59], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 17 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 18 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 18 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 6 = 19 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 19 ^ y,
if y >= 1, 7 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 6 = 19 ^ y is impossible.
-/
theorem diophantine1_7_6_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 20 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 20 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 21 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 21 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 22 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 22 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 23 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 23 ^ y,
if x >= 1, 23 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 23 ^ y is impossible.
-/
theorem diophantine1_7_6_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 23 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 24 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 24 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 25 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 25 ^ y,
if x >= 1, 25 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 25 ^ y is impossible.
-/
theorem diophantine1_7_6_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 25 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 25 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 26 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 26 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 27 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 27 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (27 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 28 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 28 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 29 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 29 ^ y,
if x >= 1, 29 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 29 ^ y is impossible.
-/
theorem diophantine1_7_6_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 29 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 30 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 30 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Trying prime 61...
-- Trying prime 151...
-- Trying prime 181...
-- Trying prime 211...
-- Trying prime 241...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 31 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 31 ^ y,
if x >= 2, 31 ^ y = 6 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 31 ^ y is impossible.
-/
theorem diophantine1_7_6_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 49 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 31 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 32 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 32 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 33 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 33 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 34 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 34 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 6 = 35 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 35 ^ y,
if x >= 1 and y >= 1,
6 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 6 = 35 ^ y is impossible.
-/
theorem diophantine1_7_6_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 35 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 36 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 36 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 37 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 37 ^ y,
if x >= 1, 37 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 37 ^ y is impossible.
-/
theorem diophantine1_7_6_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 37 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 38 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 38 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 39 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 39 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 40 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 40 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 41 of 41 ...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 401)   7 ^ x + 6 = 41 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 41 ^ y,
if y >= 1, 7 ^ x = 35 (mod 41).
So x = 19 (mod 40), 
which implies x = 19, 59, 99, 139, 179 (mod 200).
Therefore, 7 ^ x = 241, 109, 229, 47, 176 (mod 401).
So 41 ^ y = 247, 115, 235, 53, 182 (mod 401), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 6 = 41 ^ y is impossible.
-/
theorem diophantine1_7_6_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 41 = 35 := by omega
  have h9 := Claim (x % 40 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 41 = 35, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 401) [241, 109, 229, 47, 176]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 40 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (41 ^ y % 401) [247, 115, 235, 53, 182]) [
    {prop := List.Mem (7 ^ x % 401) [241, 109, 229, 47, 176], proof := h10},
    {prop := 7 ^ x + 6 = 41 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (41 ^ y % 401) [247, 115, 235, 53, 182], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 42 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 42 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 43 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 43 ^ y,
if x >= 1, 43 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 43 ^ y is impossible.
-/
theorem diophantine1_7_6_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 43 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 44 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 44 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 45 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 45 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 46 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 46 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 47 of 47 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 6 = 47 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 47 ^ y,
if y >= 1, 7 ^ x = 41 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 6 = 47 ^ y is impossible.
-/
theorem diophantine1_7_6_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (47 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 41 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 41, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 47 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 48 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 48 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 6 = 49 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 49 ^ y,
if x >= 1 and y >= 1,
6 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 6 = 49 ^ y is impossible.
-/
theorem diophantine1_7_6_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 49 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 50 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 50 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 51 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 51 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 52 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 52 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 53 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 53 ^ y,
if x >= 1, 53 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 53 ^ y is impossible.
-/
theorem diophantine1_7_6_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 53 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 54 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 54 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 5 of 55 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 6 = 55 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 55 ^ y,
if y >= 2, 7 ^ x = 19 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_7_6_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 55 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (55 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 19 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 19, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 55 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 56 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 56 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 57 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 57 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 58 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 58 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 6 = 59 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 59 ^ y,
if x >= 2, 59 ^ y = 6 (mod 49).
So y = 15 (mod 42), 
which implies y = 1 (mod 7).
Therefore, 59 ^ y = 16 (mod 43).
So 7 ^ x = 10 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 59 ^ y is impossible.
-/
theorem diophantine1_7_6_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 49 = 6 := by omega
  have h9 := Claim (y % 42 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [10]) [
    {prop := List.Mem (59 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 6 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 60 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 60 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 6 = 61 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 61 ^ y,
if x >= 2, 61 ^ y = 6 (mod 49).
So y = 33 (mod 42), 
Therefore, 61 ^ y = 39 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 61 ^ y is impossible.
-/
theorem diophantine1_7_6_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 49 = 6 := by omega
  have h9 := Claim (y % 42 = 33) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (61 ^ y % 43) [39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 33, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (61 ^ y % 43) [39], proof := h10},
    {prop := 7 ^ x + 6 = 61 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 61 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 62 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 62 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 63 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 63 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 64 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 64 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 65 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 65 ^ y,
if x >= 1, 65 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 65 ^ y is impossible.
-/
theorem diophantine1_7_6_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 65 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 65 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 65 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 66 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 66 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 67 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 67 ^ y,
if x >= 1, 67 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 67 ^ y is impossible.
-/
theorem diophantine1_7_6_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 67 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 68 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 68 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 69 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 69 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 70 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 70 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 71 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 71 ^ y,
if x >= 1, 71 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 71 ^ y is impossible.
-/
theorem diophantine1_7_6_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 71 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 72 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 72 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 6 = 73 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 73 ^ y,
if x >= 2, 73 ^ y = 6 (mod 49).
So y = 3 (mod 42), 
Therefore, 73 ^ y = 39 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 73 ^ y is impossible.
-/
theorem diophantine1_7_6_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 49 = 6 := by omega
  have h9 := Claim (y % 42 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 43) [39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (73 ^ y % 43) [39], proof := h10},
    {prop := 7 ^ x + 6 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 74 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 74 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 75 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 75 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 76 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 76 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 6 = 77 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 77 ^ y,
if x >= 1 and y >= 1,
6 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 6 = 77 ^ y is impossible.
-/
theorem diophantine1_7_6_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 77 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 78 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 78 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 79 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 79 ^ y,
if x >= 1, 79 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 79 ^ y is impossible.
-/
theorem diophantine1_7_6_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 80 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 80 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 81 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 81 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (81 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 82 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 82 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 6 = 83 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 83 ^ y,
if x >= 2, 83 ^ y = 6 (mod 49).
So y = 3 (mod 14), 
which implies y = 3 (mod 7).
Therefore, 83 ^ y = 23 (mod 29).
So 7 ^ x = 17 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 83 ^ y is impossible.
-/
theorem diophantine1_7_6_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 49 = 6 := by omega
  have h9 := Claim (y % 14 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 29) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [17]) [
    {prop := List.Mem (83 ^ y % 29) [23], proof := h10},
    {prop := 7 ^ x + 6 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 84 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 84 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 85 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 85 ^ y,
if x >= 1, 85 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 85 ^ y is impossible.
-/
theorem diophantine1_7_6_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 85 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 85 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 86 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 86 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 87 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 87 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 88 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 88 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 6 = 89 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 89 ^ y,
if x >= 2, 89 ^ y = 6 (mod 49).
So y = 3 (mod 42), 
Therefore, 89 ^ y = 27 (mod 43).
So 7 ^ x = 21 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 89 ^ y is impossible.
-/
theorem diophantine1_7_6_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 49 = 6 := by omega
  have h9 := Claim (y % 42 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 43) [27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [21]) [
    {prop := List.Mem (89 ^ y % 43) [27], proof := h10},
    {prop := 7 ^ x + 6 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [21], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 90 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 90 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 6 = 91 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 91 ^ y,
if x >= 1 and y >= 1,
6 = 0 (mod 7), which is impossible.
Therefore, x < 1 or y < 1.
So 7 ^ x + 6 = 91 ^ y is impossible.
-/
theorem diophantine1_7_6_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 91 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 92 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 92 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 93 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 93 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 94 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 94 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 95 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 95 ^ y,
if x >= 1, 95 ^ y = 6 (mod 7).
However, this is impossible.
Therefore, x < 1.
So 7 ^ x + 6 = 95 ^ y is impossible.
-/
theorem diophantine1_7_6_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (7 ^ x % 7 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 95 ^ y % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 95 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 96 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 96 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 6).
-/
theorem diophantine1_7_6_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 6 = 97 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 97 ^ y,
if x >= 2, 97 ^ y = 6 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 6 = 97 ^ y is impossible.
-/
theorem diophantine1_7_6_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 49 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 49 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 6 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 98 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 98 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 99 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 99 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 3).
-/
theorem diophantine1_7_6_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (99 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   7 ^ x + 6 = 100 ^ y
For positive integers x, y satisfying 7 ^ x + 6 = 100 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_6_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 6 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
