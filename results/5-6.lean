-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 5 <= a <= 5
-- 6 <= b <= 6
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 7 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 7 ^ y,
if x >= 2, 7 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 7 ^ y is impossible.
-/
theorem diophantine1_5_6_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 7 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 661)   5 ^ x + 6 = 11 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 11 ^ y,
if y >= 2, 5 ^ x = 115 (mod 121).
So x = 51 (mod 55), 
which implies x = 51, 106, 161, 216, 271, 326 (mod 330).
Therefore, 5 ^ x = 157, 359, 202, 504, 302, 459 (mod 661).
So 11 ^ y = 163, 365, 208, 510, 308, 465 (mod 661), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_5_6_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (11 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 121 = 115 := by omega
  have h9 := Claim (x % 55 = 51) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 121 = 115, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 55 = 51, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (11 ^ y % 661) [163, 365, 208, 510, 308, 465]) [
    {prop := List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459], proof := h10},
    {prop := 5 ^ x + 6 = 11 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (11 ^ y % 661) [163, 365, 208, 510, 308, 465], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 11 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 13 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 13 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 13 ^ y is impossible.
-/
theorem diophantine1_5_6_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 769)   5 ^ x + 6 = 17 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 17 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91, 107, 123 (mod 128).
Therefore, 5 ^ x = 470, 425, 687, 204, 299, 344, 82, 565 (mod 769).
So 17 ^ y = 476, 431, 693, 210, 305, 350, 88, 571 (mod 769), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 17 ^ y is impossible.
-/
theorem diophantine1_5_6_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (17 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 769) [470, 425, 687, 204, 299, 344, 82, 565]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (17 ^ y % 769) [476, 431, 693, 210, 305, 350, 88, 571]) [
    {prop := List.Mem (5 ^ x % 769) [470, 425, 687, 204, 299, 344, 82, 565], proof := h10},
    {prop := 5 ^ x + 6 = 17 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (17 ^ y % 769) [476, 431, 693, 210, 305, 350, 88, 571], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 17 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 19 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 19 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 19 ^ y is impossible.
-/
theorem diophantine1_5_6_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 23 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 23 ^ y,
if x >= 2, 23 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8, 28, 48, 68, 88, 108, 128, 148, 168 (mod 180).
Therefore, 23 ^ y = 44, 81, 145, 16, 13, 135, 121, 87, 82 (mod 181).
So 5 ^ x = 38, 75, 139, 10, 7, 129, 115, 81, 76 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 23 ^ y is impossible.
-/
theorem diophantine1_5_6_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (23 ^ y % 181) [44, 81, 145, 16, 13, 135, 121, 87, 82]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [38, 75, 139, 10, 7, 129, 115, 81, 76]) [
    {prop := List.Mem (23 ^ y % 181) [44, 81, 145, 16, 13, 135, 121, 87, 82], proof := h10},
    {prop := 5 ^ x + 6 = 23 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [38, 75, 139, 10, 7, 129, 115, 81, 76], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 23 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 29 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 29 ^ y,
if x >= 2, 29 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
Therefore, 29 ^ y = 3 (mod 11).
So 5 ^ x = 8 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 29 ^ y is impossible.
-/
theorem diophantine1_5_6_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 11) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [8]) [
    {prop := List.Mem (29 ^ y % 11) [3], proof := h10},
    {prop := 5 ^ x + 6 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 29 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 31 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 31 ^ y,
if x >= 3, 31 ^ y = 6 (mod 125).
So y = 21 (mod 25), 
Therefore, 31 ^ y = 79 (mod 101).
So 5 ^ x = 73 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_5_6_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 31 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 21) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (31 ^ y % 101) [79]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [73]) [
    {prop := List.Mem (31 ^ y % 101) [79], proof := h10},
    {prop := 5 ^ x + 6 = 31 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [73], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 31 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 37 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 37 ^ y,
if x >= 2, 37 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
Therefore, 37 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 37 ^ y is impossible.
-/
theorem diophantine1_5_6_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (37 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 41 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 41 ^ y,
if y >= 1, 5 ^ x = 35 (mod 41).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 41 ^ y is impossible.
-/
theorem diophantine1_5_6_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 41 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 41 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 43 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 43 ^ y,
if x >= 2, 43 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 43 ^ y is impossible.
-/
theorem diophantine1_5_6_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 43 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 47 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 47 ^ y,
if x >= 2, 47 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 47 ^ y = 102, 25, 15, 9, 114, 177, 70, 42, 170 (mod 181).
So 5 ^ x = 96, 19, 9, 3, 108, 171, 64, 36, 164 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 47 ^ y is impossible.
-/
theorem diophantine1_5_6_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 181) [102, 25, 15, 9, 114, 177, 70, 42, 170]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [96, 19, 9, 3, 108, 171, 64, 36, 164]) [
    {prop := List.Mem (47 ^ y % 181) [102, 25, 15, 9, 114, 177, 70, 42, 170], proof := h10},
    {prop := 5 ^ x + 6 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [96, 19, 9, 3, 108, 171, 64, 36, 164], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 47 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 49 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 49 ^ y,
if x >= 2, 49 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 49 ^ y is impossible.
-/
theorem diophantine1_5_6_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 49 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 53 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 53 ^ y,
if x >= 2, 53 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 53 ^ y = 148, 27, 126, 45, 29, 75, 169, 125, 161 (mod 181).
So 5 ^ x = 142, 21, 120, 39, 23, 69, 163, 119, 155 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 53 ^ y is impossible.
-/
theorem diophantine1_5_6_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 181) [148, 27, 126, 45, 29, 75, 169, 125, 161]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [142, 21, 120, 39, 23, 69, 163, 119, 155]) [
    {prop := List.Mem (53 ^ y % 181) [148, 27, 126, 45, 29, 75, 169, 125, 161], proof := h10},
    {prop := 5 ^ x + 6 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [142, 21, 120, 39, 23, 69, 163, 119, 155], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 59 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 59 ^ y,
if x >= 2, 59 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
which implies y = 2 (mod 5).
Therefore, 59 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 59 ^ y is impossible.
-/
theorem diophantine1_5_6_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (59 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 61 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 61 ^ y,
if y >= 1, 5 ^ x = 55 (mod 61).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 61 ^ y is impossible.
-/
theorem diophantine1_5_6_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 61 = 55 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 61 = 55, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 67 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 67 ^ y,
if x >= 2, 67 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 6, 16, 26 (mod 30).
Therefore, 67 ^ y = 42, 114, 25 (mod 181).
So 5 ^ x = 36, 108, 19 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 67 ^ y is impossible.
-/
theorem diophantine1_5_6_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 181) [42, 114, 25]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36, 108, 19]) [
    {prop := List.Mem (67 ^ y % 181) [42, 114, 25], proof := h10},
    {prop := 5 ^ x + 6 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36, 108, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 71 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 71 ^ y,
if y >= 1, 5 ^ x = 65 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 71 ^ y is impossible.
-/
theorem diophantine1_5_6_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 71 = 65 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 71 = 65, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 401)   5 ^ x + 6 = 73 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 73 ^ y,
if x >= 2, 73 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8, 28, 48, 68, 88, 108, 128, 148, 168, 188 (mod 200).
Therefore, 73 ^ y = 5, 206, 387, 145, 360, 396, 195, 14, 256, 41 (mod 401).
So 5 ^ x = 400, 200, 381, 139, 354, 390, 189, 8, 250, 35 (mod 401), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 73 ^ y is impossible.
-/
theorem diophantine1_5_6_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 401) [5, 206, 387, 145, 360, 396, 195, 14, 256, 41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 401) [400, 200, 381, 139, 354, 390, 189, 8, 250, 35]) [
    {prop := List.Mem (73 ^ y % 401) [5, 206, 387, 145, 360, 396, 195, 14, 256, 41], proof := h10},
    {prop := 5 ^ x + 6 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 401) [400, 200, 381, 139, 354, 390, 189, 8, 250, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 77 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 77 ^ y,
if x >= 2, 77 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
Therefore, 77 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 77 ^ y is impossible.
-/
theorem diophantine1_5_6_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 77 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (77 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (77 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 77 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 77 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 79 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 79 ^ y,
if x >= 2, 79 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
Therefore, 79 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 79 ^ y is impossible.
-/
theorem diophantine1_5_6_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (79 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (79 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 79 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 79 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 83 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 83 ^ y,
if x >= 2, 83 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36, 56, 76, 96, 116, 136, 156, 176 (mod 180).
Therefore, 83 ^ y = 38, 59, 144, 14, 117, 34, 129, 5, 3 (mod 181).
So 5 ^ x = 32, 53, 138, 8, 111, 28, 123, 180, 178 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 83 ^ y is impossible.
-/
theorem diophantine1_5_6_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 181) [38, 59, 144, 14, 117, 34, 129, 5, 3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [32, 53, 138, 8, 111, 28, 123, 180, 178]) [
    {prop := List.Mem (83 ^ y % 181) [38, 59, 144, 14, 117, 34, 129, 5, 3], proof := h10},
    {prop := 5 ^ x + 6 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [32, 53, 138, 8, 111, 28, 123, 180, 178], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 89 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 89 ^ y,
if x >= 2, 89 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
Therefore, 89 ^ y = 2 (mod 31).
So 5 ^ x = 27 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 89 ^ y is impossible.
-/
theorem diophantine1_5_6_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 31) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [27]) [
    {prop := List.Mem (89 ^ y % 31) [2], proof := h10},
    {prop := 5 ^ x + 6 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 91 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 91 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 91 ^ y is impossible.
-/
theorem diophantine1_5_6_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 97 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 97 ^ y,
if x >= 2, 97 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 97 ^ y = 9, 25, 170, 70, 114, 15, 102, 42, 177 (mod 181).
So 5 ^ x = 3, 19, 164, 64, 108, 9, 96, 36, 171 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 97 ^ y is impossible.
-/
theorem diophantine1_5_6_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 181) [9, 25, 170, 70, 114, 15, 102, 42, 177]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [3, 19, 164, 64, 108, 9, 96, 36, 171]) [
    {prop := List.Mem (97 ^ y % 181) [9, 25, 170, 70, 114, 15, 102, 42, 177], proof := h10},
    {prop := 5 ^ x + 6 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [3, 19, 164, 64, 108, 9, 96, 36, 171], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 101 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 101 ^ y,
if x >= 2, 101 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 101 ^ y is impossible.
-/
theorem diophantine1_5_6_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 101 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 103 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 103 ^ y,
if x >= 2, 103 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
Therefore, 103 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 103 ^ y is impossible.
-/
theorem diophantine1_5_6_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (103 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 107 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 107 ^ y,
if x >= 2, 107 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 107 ^ y is impossible.
-/
theorem diophantine1_5_6_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 109 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 109 ^ y,
if x >= 2, 109 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
which implies y = 0 (mod 2).
Therefore, 109 ^ y = 1 (mod 11).
So 5 ^ x = 6 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 109 ^ y is impossible.
-/
theorem diophantine1_5_6_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [6]) [
    {prop := List.Mem (109 ^ y % 11) [1], proof := h10},
    {prop := 5 ^ x + 6 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 109 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 113 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 113 ^ y,
if x >= 2, 113 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2 (mod 10).
Therefore, 113 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 113 ^ y is impossible.
-/
theorem diophantine1_5_6_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (113 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 113 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 97)   5 ^ x + 6 = 119 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 119 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91 (mod 96).
Therefore, 5 ^ x = 71, 34, 60, 26, 63, 37 (mod 97).
So 119 ^ y = 77, 40, 66, 32, 69, 43 (mod 97), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 119 ^ y is impossible.
-/
theorem diophantine1_5_6_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 97) [71, 34, 60, 26, 63, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (119 ^ y % 97) [77, 40, 66, 32, 69, 43]) [
    {prop := List.Mem (5 ^ x % 97) [71, 34, 60, 26, 63, 37], proof := h10},
    {prop := 5 ^ x + 6 = 119 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (119 ^ y % 97) [77, 40, 66, 32, 69, 43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 661)   5 ^ x + 6 = 121 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 121 ^ y,
if y >= 2, 5 ^ x = 115 (mod 121).
So x = 51 (mod 55), 
which implies x = 51, 106, 161, 216, 271, 326 (mod 330).
Therefore, 5 ^ x = 157, 359, 202, 504, 302, 459 (mod 661).
So 121 ^ y = 163, 365, 208, 510, 308, 465 (mod 661), but this is impossible.
Therefore, y < 2.
Further examination shows that 5 ^ x + 6 = 121 ^ y is impossible.
-/
theorem diophantine1_5_6_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (121 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 121 = 115 := by omega
  have h9 := Claim (x % 55 = 51) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 121 = 115, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 55 = 51, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 661) [163, 365, 208, 510, 308, 465]) [
    {prop := List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459], proof := h10},
    {prop := 5 ^ x + 6 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 661) [163, 365, 208, 510, 308, 465], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 121 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 127 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 127 ^ y,
if x >= 2, 127 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8 (mod 10).
Therefore, 127 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 127 ^ y is impossible.
-/
theorem diophantine1_5_6_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (127 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (127 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 127 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 127 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 131 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 131 ^ y,
if x >= 4, 131 ^ y = 6 (mod 625).
So y = 101 (mod 125), 
Therefore, 131 ^ y = 110 (mod 251).
So 5 ^ x = 104 (mod 251), but this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_5_6_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 131 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (5 ^ x % 625 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 625 = 6 := by omega
  have h9 := Claim (y % 125 = 101) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 625 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 251) [110]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 125 = 101, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [104]) [
    {prop := List.Mem (131 ^ y % 251) [110], proof := h10},
    {prop := 5 ^ x + 6 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [104], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 131 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 133 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 133 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 133 ^ y is impossible.
-/
theorem diophantine1_5_6_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 137 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 137 ^ y,
if x >= 2, 137 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2, 12, 22, 32, 42, 52, 62, 72, 82 (mod 90).
Therefore, 137 ^ y = 126, 29, 169, 161, 27, 45, 75, 125, 148 (mod 181).
So 5 ^ x = 120, 23, 163, 155, 21, 39, 69, 119, 142 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 137 ^ y is impossible.
-/
theorem diophantine1_5_6_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 181) [126, 29, 169, 161, 27, 45, 75, 125, 148]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [120, 23, 163, 155, 21, 39, 69, 119, 142]) [
    {prop := List.Mem (137 ^ y % 181) [126, 29, 169, 161, 27, 45, 75, 125, 148], proof := h10},
    {prop := 5 ^ x + 6 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [120, 23, 163, 155, 21, 39, 69, 119, 142], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 137 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 139 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 139 ^ y,
if x >= 2, 139 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
Therefore, 139 ^ y = 4 (mod 31).
So 5 ^ x = 29 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 139 ^ y is impossible.
-/
theorem diophantine1_5_6_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 31) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [29]) [
    {prop := List.Mem (139 ^ y % 31) [4], proof := h10},
    {prop := 5 ^ x + 6 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 139 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 143 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 143 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 143 ^ y is impossible.
-/
theorem diophantine1_5_6_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 149 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 149 ^ y,
if x >= 2, 149 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 149 ^ y is impossible.
-/
theorem diophantine1_5_6_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 149 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 151 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 151 ^ y,
if x >= 2, 151 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 151 ^ y is impossible.
-/
theorem diophantine1_5_6_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 151 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 157 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 157 ^ y,
if x >= 2, 157 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 157 ^ y is impossible.
-/
theorem diophantine1_5_6_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 157 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 127)   5 ^ x + 6 = 161 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 161 ^ y,
if y >= 2, 5 ^ x = 43 (mod 49).
So x = 6 (mod 42).
Therefore, 5 ^ x = 4 (mod 127).
So 161 ^ y = 10 (mod 127), but this is impossible.
Therefore, y < 2.
Further examination shows that 5 ^ x + 6 = 161 ^ y is impossible.
-/
theorem diophantine1_5_6_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (161 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 49 = 43 := by omega
  have h9 := Claim (x % 42 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 49 = 43, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 127) [4]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (161 ^ y % 127) [10]) [
    {prop := List.Mem (5 ^ x % 127) [4], proof := h10},
    {prop := 5 ^ x + 6 = 161 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (161 ^ y % 127) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 161 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 163 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 163 ^ y,
if x >= 2, 163 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2 (mod 10).
Therefore, 163 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 163 ^ y is impossible.
-/
theorem diophantine1_5_6_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (163 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 163 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 167 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 167 ^ y,
if x >= 2, 167 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 6, 16, 26, 36, 46, 56, 66, 76, 86 (mod 90).
Therefore, 167 ^ y = 117, 129, 3, 59, 14, 34, 5, 38, 144 (mod 181).
So 5 ^ x = 111, 123, 178, 53, 8, 28, 180, 32, 138 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 167 ^ y is impossible.
-/
theorem diophantine1_5_6_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 181) [117, 129, 3, 59, 14, 34, 5, 38, 144]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [111, 123, 178, 53, 8, 28, 180, 32, 138]) [
    {prop := List.Mem (167 ^ y % 181) [117, 129, 3, 59, 14, 34, 5, 38, 144], proof := h10},
    {prop := 5 ^ x + 6 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [111, 123, 178, 53, 8, 28, 180, 32, 138], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 167 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 169 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 169 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 169 ^ y is impossible.
-/
theorem diophantine1_5_6_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 173 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 173 ^ y,
if x >= 2, 173 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8, 28, 48 (mod 60).
Therefore, 173 ^ y = 145, 82, 135 (mod 181).
So 5 ^ x = 139, 76, 129 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 173 ^ y is impossible.
-/
theorem diophantine1_5_6_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 181) [145, 82, 135]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [139, 76, 129]) [
    {prop := List.Mem (173 ^ y % 181) [145, 82, 135], proof := h10},
    {prop := 5 ^ x + 6 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [139, 76, 129], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 173 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 179 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 179 ^ y,
if x >= 2, 179 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
which implies y = 4, 14, 24 (mod 30).
Therefore, 179 ^ y = 14, 9, 8 (mod 31).
So 5 ^ x = 8, 3, 2 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 179 ^ y is impossible.
-/
theorem diophantine1_5_6_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 31) [14, 9, 8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [8, 3, 2]) [
    {prop := List.Mem (179 ^ y % 31) [14, 9, 8], proof := h10},
    {prop := 5 ^ x + 6 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [8, 3, 2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 179 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 181 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 181 ^ y,
if x >= 3, 181 ^ y = 6 (mod 125).
So y = 16 (mod 25), 
which implies y = 16, 41, 66, 91, 116 (mod 125).
Therefore, 181 ^ y = 173, 175, 222, 197, 237 (mod 251).
So 5 ^ x = 167, 169, 216, 191, 231 (mod 251), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 181 ^ y is impossible.
-/
theorem diophantine1_5_6_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 251) [173, 175, 222, 197, 237]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [167, 169, 216, 191, 231]) [
    {prop := List.Mem (181 ^ y % 251) [173, 175, 222, 197, 237], proof := h10},
    {prop := 5 ^ x + 6 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [167, 169, 216, 191, 231], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 181 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 353)   5 ^ x + 6 = 187 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 187 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251, 267, 283, 299, 315, 331, 347 (mod 352).
Therefore, 5 ^ x = 106, 296, 14, 139, 195, 45, 119, 299, 69, 206, 129, 247, 57, 339, 214, 158, 308, 234, 54, 284, 147, 224 (mod 353).
So 187 ^ y = 112, 302, 20, 145, 201, 51, 125, 305, 75, 212, 135, 253, 63, 345, 220, 164, 314, 240, 60, 290, 153, 230 (mod 353), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 187 ^ y is impossible.
-/
theorem diophantine1_5_6_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 353) [106, 296, 14, 139, 195, 45, 119, 299, 69, 206, 129, 247, 57, 339, 214, 158, 308, 234, 54, 284, 147, 224]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 353) [112, 302, 20, 145, 201, 51, 125, 305, 75, 212, 135, 253, 63, 345, 220, 164, 314, 240, 60, 290, 153, 230]) [
    {prop := List.Mem (5 ^ x % 353) [106, 296, 14, 139, 195, 45, 119, 299, 69, 206, 129, 247, 57, 339, 214, 158, 308, 234, 54, 284, 147, 224], proof := h10},
    {prop := 5 ^ x + 6 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 353) [112, 302, 20, 145, 201, 51, 125, 305, 75, 212, 135, 253, 63, 345, 220, 164, 314, 240, 60, 290, 153, 230], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 601)   5 ^ x + 6 = 191 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 191 ^ y,
if x >= 3, 191 ^ y = 6 (mod 125).
So y = 12 (mod 25), 
which implies y = 12, 37, 62, 87, 112, 137, 162, 187 (mod 200).
Therefore, 191 ^ y = 599, 275, 351, 118, 2, 326, 250, 483 (mod 601).
So 5 ^ x = 593, 269, 345, 112, 597, 320, 244, 477 (mod 601), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 191 ^ y is impossible.
-/
theorem diophantine1_5_6_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 601) [599, 275, 351, 118, 2, 326, 250, 483]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 601) [593, 269, 345, 112, 597, 320, 244, 477]) [
    {prop := List.Mem (191 ^ y % 601) [599, 275, 351, 118, 2, 326, 250, 483], proof := h10},
    {prop := 5 ^ x + 6 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 601) [593, 269, 345, 112, 597, 320, 244, 477], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 193 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 193 ^ y,
if x >= 2, 193 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 193 ^ y is impossible.
-/
theorem diophantine1_5_6_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 193 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 197 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 197 ^ y,
if x >= 2, 197 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 9, 14, 19, 24, 29, 34, 39, 44 (mod 45).
Therefore, 197 ^ y = 14, 59, 3, 129, 117, 144, 38, 5, 34 (mod 181).
So 5 ^ x = 8, 53, 178, 123, 111, 138, 32, 180, 28 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 197 ^ y is impossible.
-/
theorem diophantine1_5_6_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 181) [14, 59, 3, 129, 117, 144, 38, 5, 34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [8, 53, 178, 123, 111, 138, 32, 180, 28]) [
    {prop := List.Mem (197 ^ y % 181) [14, 59, 3, 129, 117, 144, 38, 5, 34], proof := h10},
    {prop := 5 ^ x + 6 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [8, 53, 178, 123, 111, 138, 32, 180, 28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 199 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 199 ^ y,
if x >= 2, 199 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 199 ^ y is impossible.
-/
theorem diophantine1_5_6_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 199 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 203 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 203 ^ y,
if x >= 2, 203 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
Therefore, 203 ^ y = 42 (mod 181).
So 5 ^ x = 36 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 203 ^ y is impossible.
-/
theorem diophantine1_5_6_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 203 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (203 ^ y % 181) [42]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36]) [
    {prop := List.Mem (203 ^ y % 181) [42], proof := h10},
    {prop := 5 ^ x + 6 = 203 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 203 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 209 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 209 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 209 ^ y is impossible.
-/
theorem diophantine1_5_6_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 211 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 211 ^ y,
if x >= 3, 211 ^ y = 6 (mod 125).
So y = 23 (mod 25), 
which implies y = 23, 48 (mod 50).
Therefore, 211 ^ y = 96, 5 (mod 101).
So 5 ^ x = 90, 100 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 211 ^ y is impossible.
-/
theorem diophantine1_5_6_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 23) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 101) [96, 5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 23, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [90, 100]) [
    {prop := List.Mem (211 ^ y % 101) [96, 5], proof := h10},
    {prop := 5 ^ x + 6 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [90, 100], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 211 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 217 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 217 ^ y,
if x >= 2, 217 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 1 (mod 5).
Therefore, 217 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 217 ^ y is impossible.
-/
theorem diophantine1_5_6_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (217 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (217 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 217 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 217 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 221 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 221 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 221 ^ y is impossible.
-/
theorem diophantine1_5_6_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 223 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 223 ^ y,
if x >= 2, 223 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 3 (mod 5).
Therefore, 223 ^ y = 59 (mod 181).
So 5 ^ x = 53 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 223 ^ y is impossible.
-/
theorem diophantine1_5_6_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 181) [59]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [53]) [
    {prop := List.Mem (223 ^ y % 181) [59], proof := h10},
    {prop := 5 ^ x + 6 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 223 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 227 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 227 ^ y,
if x >= 2, 227 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8 (mod 10).
Therefore, 227 ^ y = 42 (mod 181).
So 5 ^ x = 36 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 227 ^ y is impossible.
-/
theorem diophantine1_5_6_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 181) [42]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36]) [
    {prop := List.Mem (227 ^ y % 181) [42], proof := h10},
    {prop := 5 ^ x + 6 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 227 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 229 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 229 ^ y,
if x >= 2, 229 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
which implies y = 4 (mod 5).
Therefore, 229 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 229 ^ y is impossible.
-/
theorem diophantine1_5_6_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (229 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 229 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 233 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 233 ^ y,
if x >= 2, 233 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36 (mod 40).
Therefore, 233 ^ y = 18, 23 (mod 41).
So 5 ^ x = 12, 17 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 233 ^ y is impossible.
-/
theorem diophantine1_5_6_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 41) [18, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12, 17]) [
    {prop := List.Mem (233 ^ y % 41) [18, 23], proof := h10},
    {prop := 5 ^ x + 6 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 239 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 239 ^ y,
if x >= 2, 239 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
Therefore, 239 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 239 ^ y is impossible.
-/
theorem diophantine1_5_6_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (239 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 239 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 241 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 241 ^ y,
if x >= 3, 241 ^ y = 6 (mod 125).
So y = 22 (mod 25), 
Therefore, 241 ^ y = 63 (mod 251).
So 5 ^ x = 57 (mod 251), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 241 ^ y is impossible.
-/
theorem diophantine1_5_6_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 22) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (241 ^ y % 251) [63]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [57]) [
    {prop := List.Mem (241 ^ y % 251) [63], proof := h10},
    {prop := 5 ^ x + 6 = 241 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [57], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 241 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 247 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 247 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 247 ^ y is impossible.
-/
theorem diophantine1_5_6_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
