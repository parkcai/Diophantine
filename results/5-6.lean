-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 5 <= a <= 5
-- 6 <= b <= 6
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   5 ^ x + 6 = 2 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 2 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 3 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 3 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 4 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 4 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 5 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 5 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 5 ^ y is impossible.
-/
theorem diophantine1_5_6_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 5 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 6 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 6 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 7 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 7 ^ y,
if x >= 2, 7 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 7 ^ y is impossible.
-/
theorem diophantine1_5_6_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 7 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 8 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 8 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 9 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 9 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (9 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 10 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 10 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 11 of 11 ...
-- Trying prime 331...
-- Trying prime 661...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 661)   5 ^ x + 6 = 11 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 11 ^ y,
if y >= 2, 5 ^ x = 115 (mod 121).
So x = 51 (mod 55), 
which implies x = 51, 106, 161, 216, 271, 326 (mod 330).
Therefore, 5 ^ x = 157, 359, 202, 504, 302, 459 (mod 661).
So 11 ^ y = 163, 365, 208, 510, 308, 465 (mod 661), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_5_6_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (11 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 121 = 115 := by omega
  have h9 := Claim (x % 55 = 51) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 121 = 115, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 55 = 51, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (11 ^ y % 661) [163, 365, 208, 510, 308, 465]) [
    {prop := List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459], proof := h10},
    {prop := 5 ^ x + 6 = 11 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (11 ^ y % 661) [163, 365, 208, 510, 308, 465], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 11 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 12 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 12 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 13 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 13 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 13 ^ y is impossible.
-/
theorem diophantine1_5_6_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 14 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 14 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 15 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 15 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 16 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 16 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 6 = 17 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 17 ^ y,
if x >= 2, 17 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36, 56, 76 (mod 80).
Therefore, 17 ^ y = 87, 216, 154, 25 (mod 241).
So 5 ^ x = 81, 210, 148, 19 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 17 ^ y is impossible.
-/
theorem diophantine1_5_6_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 241) [87, 216, 154, 25]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [81, 210, 148, 19]) [
    {prop := List.Mem (17 ^ y % 241) [87, 216, 154, 25], proof := h10},
    {prop := 5 ^ x + 6 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [81, 210, 148, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 18 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 18 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 19 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 19 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 19 ^ y is impossible.
-/
theorem diophantine1_5_6_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 20 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 20 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 21 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 21 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 22 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 22 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 23 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 23 ^ y,
if x >= 2, 23 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8, 28, 48, 68, 88, 108, 128, 148, 168 (mod 180).
Therefore, 23 ^ y = 44, 81, 145, 16, 13, 135, 121, 87, 82 (mod 181).
So 5 ^ x = 38, 75, 139, 10, 7, 129, 115, 81, 76 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 23 ^ y is impossible.
-/
theorem diophantine1_5_6_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (23 ^ y % 181) [44, 81, 145, 16, 13, 135, 121, 87, 82]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [38, 75, 139, 10, 7, 129, 115, 81, 76]) [
    {prop := List.Mem (23 ^ y % 181) [44, 81, 145, 16, 13, 135, 121, 87, 82], proof := h10},
    {prop := 5 ^ x + 6 = 23 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [38, 75, 139, 10, 7, 129, 115, 81, 76], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 23 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 24 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 24 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 25 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 25 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 25 ^ y is impossible.
-/
theorem diophantine1_5_6_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 25 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 26 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 26 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 27 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 27 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (27 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 28 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 28 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 29 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 29 ^ y,
if x >= 2, 29 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
Therefore, 29 ^ y = 3 (mod 11).
So 5 ^ x = 8 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 29 ^ y is impossible.
-/
theorem diophantine1_5_6_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 11) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [8]) [
    {prop := List.Mem (29 ^ y % 11) [3], proof := h10},
    {prop := 5 ^ x + 6 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 29 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 30 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 30 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 31 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 31 ^ y,
if x >= 3, 31 ^ y = 6 (mod 125).
So y = 21 (mod 25), 
Therefore, 31 ^ y = 79 (mod 101).
So 5 ^ x = 73 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_5_6_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 31 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 21) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (31 ^ y % 101) [79]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [73]) [
    {prop := List.Mem (31 ^ y % 101) [79], proof := h10},
    {prop := 5 ^ x + 6 = 31 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [73], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 31 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 32 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 32 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 33 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 33 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 34 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 34 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 35 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 35 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 35 ^ y is impossible.
-/
theorem diophantine1_5_6_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 35 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 36 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 36 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 37 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 37 ^ y,
if x >= 2, 37 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
Therefore, 37 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 37 ^ y is impossible.
-/
theorem diophantine1_5_6_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (37 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 38 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 38 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 39 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 39 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 40 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 40 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 41 of 41 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 41 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 41 ^ y,
if y >= 1, 5 ^ x = 35 (mod 41).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 41 ^ y is impossible.
-/
theorem diophantine1_5_6_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 41 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 41 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 42 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 42 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 43 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 43 ^ y,
if x >= 2, 43 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 43 ^ y is impossible.
-/
theorem diophantine1_5_6_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 43 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 44 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 44 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 45 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 45 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 46 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 46 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 47 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 47 ^ y,
if x >= 2, 47 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 47 ^ y = 102, 25, 15, 9, 114, 177, 70, 42, 170 (mod 181).
So 5 ^ x = 96, 19, 9, 3, 108, 171, 64, 36, 164 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 47 ^ y is impossible.
-/
theorem diophantine1_5_6_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 181) [102, 25, 15, 9, 114, 177, 70, 42, 170]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [96, 19, 9, 3, 108, 171, 64, 36, 164]) [
    {prop := List.Mem (47 ^ y % 181) [102, 25, 15, 9, 114, 177, 70, 42, 170], proof := h10},
    {prop := 5 ^ x + 6 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [96, 19, 9, 3, 108, 171, 64, 36, 164], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 47 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 48 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 48 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 49 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 49 ^ y,
if x >= 2, 49 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 49 ^ y is impossible.
-/
theorem diophantine1_5_6_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 49 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 50 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 50 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 51 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 51 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 52 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 52 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 53 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 53 ^ y,
if x >= 2, 53 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 53 ^ y = 148, 27, 126, 45, 29, 75, 169, 125, 161 (mod 181).
So 5 ^ x = 142, 21, 120, 39, 23, 69, 163, 119, 155 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 53 ^ y is impossible.
-/
theorem diophantine1_5_6_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 181) [148, 27, 126, 45, 29, 75, 169, 125, 161]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [142, 21, 120, 39, 23, 69, 163, 119, 155]) [
    {prop := List.Mem (53 ^ y % 181) [148, 27, 126, 45, 29, 75, 169, 125, 161], proof := h10},
    {prop := 5 ^ x + 6 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [142, 21, 120, 39, 23, 69, 163, 119, 155], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 54 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 54 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 55 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 55 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 55 ^ y is impossible.
-/
theorem diophantine1_5_6_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (55 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 55 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 56 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 56 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 57 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 57 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 58 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 58 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 59 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 59 ^ y,
if x >= 2, 59 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
which implies y = 2 (mod 5).
Therefore, 59 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 59 ^ y is impossible.
-/
theorem diophantine1_5_6_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (59 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 60 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 60 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 61 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 61 ^ y,
if y >= 1, 5 ^ x = 55 (mod 61).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 61 ^ y is impossible.
-/
theorem diophantine1_5_6_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 61 = 55 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 61 = 55, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 62 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 62 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 63 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 63 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 64 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 64 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 65 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 65 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 65 ^ y is impossible.
-/
theorem diophantine1_5_6_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 65 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 66 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 66 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 67 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 67 ^ y,
if x >= 2, 67 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 6, 16, 26 (mod 30).
Therefore, 67 ^ y = 42, 114, 25 (mod 181).
So 5 ^ x = 36, 108, 19 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 67 ^ y is impossible.
-/
theorem diophantine1_5_6_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 181) [42, 114, 25]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36, 108, 19]) [
    {prop := List.Mem (67 ^ y % 181) [42, 114, 25], proof := h10},
    {prop := 5 ^ x + 6 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36, 108, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 68 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 68 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 69 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 69 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 70 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 70 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 71 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 71 ^ y,
if y >= 1, 5 ^ x = 65 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 71 ^ y is impossible.
-/
theorem diophantine1_5_6_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 71 = 65 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 71 = 65, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 72 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 72 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 73 of 73 ...
-- Trying prime 433...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 433)   5 ^ x + 6 = 73 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 73 ^ y,
if y >= 1, 5 ^ x = 67 (mod 73).
So x = 50 (mod 72), 
which implies x = 50, 122, 194, 266, 338, 410 (mod 432).
Therefore, 5 ^ x = 286, 191, 338, 147, 242, 95 (mod 433).
So 73 ^ y = 292, 197, 344, 153, 248, 101 (mod 433), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 73 ^ y is impossible.
-/
theorem diophantine1_5_6_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (73 ^ y % 73 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 73 = 67 := by omega
  have h9 := Claim (x % 72 = 50) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 73 = 67, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 433) [286, 191, 338, 147, 242, 95]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 72 = 50, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (73 ^ y % 433) [292, 197, 344, 153, 248, 101]) [
    {prop := List.Mem (5 ^ x % 433) [286, 191, 338, 147, 242, 95], proof := h10},
    {prop := 5 ^ x + 6 = 73 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (73 ^ y % 433) [292, 197, 344, 153, 248, 101], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 73 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 74 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 74 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 75 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 75 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 76 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 76 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Trying to disprove y >= 1 with prime factor 11 of 77 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 77 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 77 ^ y,
if x >= 2, 77 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
Therefore, 77 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 77 ^ y is impossible.
-/
theorem diophantine1_5_6_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 77 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (77 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (77 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 77 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 77 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 78 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 78 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 79 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 79 ^ y,
if x >= 2, 79 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
Therefore, 79 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 79 ^ y is impossible.
-/
theorem diophantine1_5_6_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (79 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (79 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 79 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 79 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 80 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 80 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 81 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 81 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (81 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 82 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 82 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 83 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 83 ^ y,
if x >= 2, 83 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36, 56, 76, 96, 116, 136, 156, 176 (mod 180).
Therefore, 83 ^ y = 38, 59, 144, 14, 117, 34, 129, 5, 3 (mod 181).
So 5 ^ x = 32, 53, 138, 8, 111, 28, 123, 180, 178 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 83 ^ y is impossible.
-/
theorem diophantine1_5_6_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 181) [38, 59, 144, 14, 117, 34, 129, 5, 3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [32, 53, 138, 8, 111, 28, 123, 180, 178]) [
    {prop := List.Mem (83 ^ y % 181) [38, 59, 144, 14, 117, 34, 129, 5, 3], proof := h10},
    {prop := 5 ^ x + 6 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [32, 53, 138, 8, 111, 28, 123, 180, 178], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 84 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 84 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 85 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 85 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 85 ^ y is impossible.
-/
theorem diophantine1_5_6_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 85 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 86 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 86 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 87 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 87 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 88 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 88 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 89 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 89 ^ y,
if x >= 2, 89 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
Therefore, 89 ^ y = 2 (mod 31).
So 5 ^ x = 27 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 89 ^ y is impossible.
-/
theorem diophantine1_5_6_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 31) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [27]) [
    {prop := List.Mem (89 ^ y % 31) [2], proof := h10},
    {prop := 5 ^ x + 6 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 90 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 90 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Trying to disprove y >= 1 with prime factor 13 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 91 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 91 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 91 ^ y is impossible.
-/
theorem diophantine1_5_6_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 92 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 92 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 93 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 93 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 94 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 94 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 95 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 95 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 95 ^ y is impossible.
-/
theorem diophantine1_5_6_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 95 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 96 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 96 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 97 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 97 ^ y,
if x >= 2, 97 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 97 ^ y = 9, 25, 170, 70, 114, 15, 102, 42, 177 (mod 181).
So 5 ^ x = 3, 19, 164, 64, 108, 9, 96, 36, 171 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 97 ^ y is impossible.
-/
theorem diophantine1_5_6_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 181) [9, 25, 170, 70, 114, 15, 102, 42, 177]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [3, 19, 164, 64, 108, 9, 96, 36, 171]) [
    {prop := List.Mem (97 ^ y % 181) [9, 25, 170, 70, 114, 15, 102, 42, 177], proof := h10},
    {prop := 5 ^ x + 6 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [3, 19, 164, 64, 108, 9, 96, 36, 171], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 98 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 98 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 99 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 99 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (99 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 100 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 100 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 101 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 101 ^ y,
if x >= 2, 101 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 101 ^ y is impossible.
-/
theorem diophantine1_5_6_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 101 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 102 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 102 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 103 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 103 ^ y,
if x >= 2, 103 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
Therefore, 103 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 103 ^ y is impossible.
-/
theorem diophantine1_5_6_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (103 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 104 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 104 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (104 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 105 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 105 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 106 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 106 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 107 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 107 ^ y,
if x >= 2, 107 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 107 ^ y is impossible.
-/
theorem diophantine1_5_6_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 108 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 108 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 109 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 109 ^ y,
if x >= 2, 109 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
which implies y = 0 (mod 2).
Therefore, 109 ^ y = 1 (mod 11).
So 5 ^ x = 6 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 109 ^ y is impossible.
-/
theorem diophantine1_5_6_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [6]) [
    {prop := List.Mem (109 ^ y % 11) [1], proof := h10},
    {prop := 5 ^ x + 6 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 109 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 110 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 110 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (110 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 111 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 111 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 112 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 112 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (112 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 113 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 113 ^ y,
if x >= 2, 113 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2 (mod 10).
Therefore, 113 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 113 ^ y is impossible.
-/
theorem diophantine1_5_6_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (113 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 113 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 114 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 114 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 115 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 115 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 115 ^ y is impossible.
-/
theorem diophantine1_5_6_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (115 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 115 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 116 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 116 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (116 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 117 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 117 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (117 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 118 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 118 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Trying to disprove y >= 1 with prime factor 17 of 119 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   5 ^ x + 6 = 119 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 119 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91 (mod 96).
Therefore, 5 ^ x = 71, 34, 60, 26, 63, 37 (mod 97).
So 119 ^ y = 77, 40, 66, 32, 69, 43 (mod 97), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 119 ^ y is impossible.
-/
theorem diophantine1_5_6_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 97) [71, 34, 60, 26, 63, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (119 ^ y % 97) [77, 40, 66, 32, 69, 43]) [
    {prop := List.Mem (5 ^ x % 97) [71, 34, 60, 26, 63, 37], proof := h10},
    {prop := 5 ^ x + 6 = 119 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (119 ^ y % 97) [77, 40, 66, 32, 69, 43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 120 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 120 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 11 of 121 ...
-- Trying prime 331...
-- Trying prime 661...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 661)   5 ^ x + 6 = 121 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 121 ^ y,
if y >= 2, 5 ^ x = 115 (mod 121).
So x = 51 (mod 55), 
which implies x = 51, 106, 161, 216, 271, 326 (mod 330).
Therefore, 5 ^ x = 157, 359, 202, 504, 302, 459 (mod 661).
So 121 ^ y = 163, 365, 208, 510, 308, 465 (mod 661), but this is impossible.
Therefore, y < 2.
Further examination shows that 5 ^ x + 6 = 121 ^ y is impossible.
-/
theorem diophantine1_5_6_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (121 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 121 = 115 := by omega
  have h9 := Claim (x % 55 = 51) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 121 = 115, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 55 = 51, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 661) [163, 365, 208, 510, 308, 465]) [
    {prop := List.Mem (5 ^ x % 661) [157, 359, 202, 504, 302, 459], proof := h10},
    {prop := 5 ^ x + 6 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 661) [163, 365, 208, 510, 308, 465], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 121 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 122 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 122 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 123 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 123 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 124 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 124 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (124 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 125 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 125 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 125 ^ y is impossible.
-/
theorem diophantine1_5_6_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 125 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 126 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 126 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 127 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 127 ^ y,
if x >= 2, 127 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8 (mod 10).
Therefore, 127 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 127 ^ y is impossible.
-/
theorem diophantine1_5_6_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (127 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (127 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 127 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 127 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 128 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 128 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (128 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 129 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 129 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 130 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 130 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (130 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 4 with prime factor 5 of 5 ...
-- Trying prime 251...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 131 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 131 ^ y,
if x >= 4, 131 ^ y = 6 (mod 625).
So y = 101 (mod 125), 
Therefore, 131 ^ y = 110 (mod 251).
So 5 ^ x = 104 (mod 251), but this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_5_6_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 131 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (5 ^ x % 625 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 625 = 6 := by omega
  have h9 := Claim (y % 125 = 101) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 625 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 251) [110]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 125 = 101, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [104]) [
    {prop := List.Mem (131 ^ y % 251) [110], proof := h10},
    {prop := 5 ^ x + 6 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [104], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 131 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 132 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 132 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (132 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 133 ...
-- Trying to disprove y >= 1 with prime factor 19 of 133 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 133 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 133 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 133 ^ y is impossible.
-/
theorem diophantine1_5_6_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 134 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 134 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (134 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 135 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 135 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (135 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 136 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 136 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (136 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 137 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 137 ^ y,
if x >= 2, 137 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2, 12, 22, 32, 42, 52, 62, 72, 82 (mod 90).
Therefore, 137 ^ y = 126, 29, 169, 161, 27, 45, 75, 125, 148 (mod 181).
So 5 ^ x = 120, 23, 163, 155, 21, 39, 69, 119, 142 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 137 ^ y is impossible.
-/
theorem diophantine1_5_6_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 181) [126, 29, 169, 161, 27, 45, 75, 125, 148]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [120, 23, 163, 155, 21, 39, 69, 119, 142]) [
    {prop := List.Mem (137 ^ y % 181) [126, 29, 169, 161, 27, 45, 75, 125, 148], proof := h10},
    {prop := 5 ^ x + 6 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [120, 23, 163, 155, 21, 39, 69, 119, 142], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 137 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 138 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 138 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (138 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 139 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 139 ^ y,
if x >= 2, 139 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
Therefore, 139 ^ y = 4 (mod 31).
So 5 ^ x = 29 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 139 ^ y is impossible.
-/
theorem diophantine1_5_6_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 31) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [29]) [
    {prop := List.Mem (139 ^ y % 31) [4], proof := h10},
    {prop := 5 ^ x + 6 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 139 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 140 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 140 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (140 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 141 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 141 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 142 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 142 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (142 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Trying to disprove y >= 1 with prime factor 13 of 143 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 143 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 143 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 143 ^ y is impossible.
-/
theorem diophantine1_5_6_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 144 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 144 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (144 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 145 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 145 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 145 ^ y is impossible.
-/
theorem diophantine1_5_6_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 145 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 146 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 146 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (146 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 147 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 147 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 148 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 148 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (148 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 149 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 149 ^ y,
if x >= 2, 149 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 149 ^ y is impossible.
-/
theorem diophantine1_5_6_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 149 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 150 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 150 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 151 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 151 ^ y,
if x >= 2, 151 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 151 ^ y is impossible.
-/
theorem diophantine1_5_6_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 151 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 152 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 152 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (152 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 153 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 153 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (153 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 154 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 154 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (154 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 155 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 155 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 155 ^ y is impossible.
-/
theorem diophantine1_5_6_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 155 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 156 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 156 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (156 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 157 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 157 ^ y,
if x >= 2, 157 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 157 ^ y is impossible.
-/
theorem diophantine1_5_6_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 157 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 158 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 158 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (158 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 159 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 159 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 160 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 160 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (160 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Trying to disprove y >= 1 with prime factor 23 of 161 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Trying prime 397...
-- Trying prime 419...
-- Trying prime 463...
-- Trying prime 617...
-- Trying prime 661...
-- Trying prime 683...
-- Trying prime 727...
-- Trying prime 859...
-- Trying prime 881...
-- Trying prime 947...
-- Trying prime 991...
-- Trying prime 1013...
-- Trying prime 1123...
-- Trying prime 1277...
-- Trying prime 1321...
-- Trying prime 1409...
-- Trying prime 1453...
-- Trying prime 1607...
-- Trying prime 1783...
-- Trying prime 1871...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 7 of 161 ...
-- Trying prime 43...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   5 ^ x + 6 = 161 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 161 ^ y,
if y >= 2, 5 ^ x = 43 (mod 49).
So x = 6 (mod 42).
Therefore, 5 ^ x = 4 (mod 127).
So 161 ^ y = 10 (mod 127), but this is impossible.
Therefore, y < 2.
Further examination shows that 5 ^ x + 6 = 161 ^ y is impossible.
-/
theorem diophantine1_5_6_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (161 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 49 = 43 := by omega
  have h9 := Claim (x % 42 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 49 = 43, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 127) [4]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (161 ^ y % 127) [10]) [
    {prop := List.Mem (5 ^ x % 127) [4], proof := h10},
    {prop := 5 ^ x + 6 = 161 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (161 ^ y % 127) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 161 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 162 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 162 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (162 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 163 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 163 ^ y,
if x >= 2, 163 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2 (mod 10).
Therefore, 163 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 163 ^ y is impossible.
-/
theorem diophantine1_5_6_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (163 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 163 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 164 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 164 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (164 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 165 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 165 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 166 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 166 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (166 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 167 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 167 ^ y,
if x >= 2, 167 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 6, 16, 26, 36, 46, 56, 66, 76, 86 (mod 90).
Therefore, 167 ^ y = 117, 129, 3, 59, 14, 34, 5, 38, 144 (mod 181).
So 5 ^ x = 111, 123, 178, 53, 8, 28, 180, 32, 138 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 167 ^ y is impossible.
-/
theorem diophantine1_5_6_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 181) [117, 129, 3, 59, 14, 34, 5, 38, 144]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [111, 123, 178, 53, 8, 28, 180, 32, 138]) [
    {prop := List.Mem (167 ^ y % 181) [117, 129, 3, 59, 14, 34, 5, 38, 144], proof := h10},
    {prop := 5 ^ x + 6 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [111, 123, 178, 53, 8, 28, 180, 32, 138], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 167 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 168 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 168 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 169 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 169 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 169 ^ y is impossible.
-/
theorem diophantine1_5_6_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 170 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 170 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (170 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 171 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 171 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (171 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 172 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 172 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (172 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 173 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 173 ^ y,
if x >= 2, 173 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8, 28, 48 (mod 60).
Therefore, 173 ^ y = 145, 82, 135 (mod 181).
So 5 ^ x = 139, 76, 129 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 173 ^ y is impossible.
-/
theorem diophantine1_5_6_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 181) [145, 82, 135]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [139, 76, 129]) [
    {prop := List.Mem (173 ^ y % 181) [145, 82, 135], proof := h10},
    {prop := 5 ^ x + 6 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [139, 76, 129], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 173 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 174 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 174 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (174 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 175 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 175 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 175 ^ y is impossible.
-/
theorem diophantine1_5_6_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (175 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 175 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 176 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 176 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (176 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 177 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 177 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 178 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 178 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (178 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 179 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 179 ^ y,
if x >= 2, 179 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
which implies y = 4, 14, 24 (mod 30).
Therefore, 179 ^ y = 14, 9, 8 (mod 31).
So 5 ^ x = 8, 3, 2 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 179 ^ y is impossible.
-/
theorem diophantine1_5_6_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 31) [14, 9, 8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [8, 3, 2]) [
    {prop := List.Mem (179 ^ y % 31) [14, 9, 8], proof := h10},
    {prop := 5 ^ x + 6 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [8, 3, 2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 179 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 180 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 180 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 151...
-- Trying prime 251...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 181 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 181 ^ y,
if x >= 3, 181 ^ y = 6 (mod 125).
So y = 16 (mod 25), 
which implies y = 16, 41, 66, 91, 116 (mod 125).
Therefore, 181 ^ y = 173, 175, 222, 197, 237 (mod 251).
So 5 ^ x = 167, 169, 216, 191, 231 (mod 251), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 181 ^ y is impossible.
-/
theorem diophantine1_5_6_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 251) [173, 175, 222, 197, 237]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [167, 169, 216, 191, 231]) [
    {prop := List.Mem (181 ^ y % 251) [173, 175, 222, 197, 237], proof := h10},
    {prop := 5 ^ x + 6 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [167, 169, 216, 191, 231], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 181 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 182 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 182 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (182 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 183 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 183 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 184 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 184 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (184 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 185 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 185 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 185 ^ y is impossible.
-/
theorem diophantine1_5_6_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 185 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 186 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 186 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (186 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Trying to disprove y >= 1 with prime factor 17 of 187 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 353)   5 ^ x + 6 = 187 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 187 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251, 267, 283, 299, 315, 331, 347 (mod 352).
Therefore, 5 ^ x = 106, 296, 14, 139, 195, 45, 119, 299, 69, 206, 129, 247, 57, 339, 214, 158, 308, 234, 54, 284, 147, 224 (mod 353).
So 187 ^ y = 112, 302, 20, 145, 201, 51, 125, 305, 75, 212, 135, 253, 63, 345, 220, 164, 314, 240, 60, 290, 153, 230 (mod 353), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 187 ^ y is impossible.
-/
theorem diophantine1_5_6_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 353) [106, 296, 14, 139, 195, 45, 119, 299, 69, 206, 129, 247, 57, 339, 214, 158, 308, 234, 54, 284, 147, 224]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 353) [112, 302, 20, 145, 201, 51, 125, 305, 75, 212, 135, 253, 63, 345, 220, 164, 314, 240, 60, 290, 153, 230]) [
    {prop := List.Mem (5 ^ x % 353) [106, 296, 14, 139, 195, 45, 119, 299, 69, 206, 129, 247, 57, 339, 214, 158, 308, 234, 54, 284, 147, 224], proof := h10},
    {prop := 5 ^ x + 6 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 353) [112, 302, 20, 145, 201, 51, 125, 305, 75, 212, 135, 253, 63, 345, 220, 164, 314, 240, 60, 290, 153, 230], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 188 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 188 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (188 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 189 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 189 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (189 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 190 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 190 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (190 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 151...
-- Trying prime 251...
-- Trying prime 401...
-- Trying prime 601...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 601)   5 ^ x + 6 = 191 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 191 ^ y,
if x >= 3, 191 ^ y = 6 (mod 125).
So y = 12 (mod 25), 
which implies y = 12, 37, 62, 87, 112, 137, 162, 187 (mod 200).
Therefore, 191 ^ y = 599, 275, 351, 118, 2, 326, 250, 483 (mod 601).
So 5 ^ x = 593, 269, 345, 112, 597, 320, 244, 477 (mod 601), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 191 ^ y is impossible.
-/
theorem diophantine1_5_6_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 601) [599, 275, 351, 118, 2, 326, 250, 483]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 601) [593, 269, 345, 112, 597, 320, 244, 477]) [
    {prop := List.Mem (191 ^ y % 601) [599, 275, 351, 118, 2, 326, 250, 483], proof := h10},
    {prop := 5 ^ x + 6 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 601) [593, 269, 345, 112, 597, 320, 244, 477], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 192 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 192 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (192 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 193 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 193 ^ y,
if x >= 2, 193 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 193 ^ y is impossible.
-/
theorem diophantine1_5_6_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 193 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 194 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 194 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (194 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 195 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 195 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 196 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 196 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (196 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 197 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 197 ^ y,
if x >= 2, 197 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 9, 14, 19, 24, 29, 34, 39, 44 (mod 45).
Therefore, 197 ^ y = 14, 59, 3, 129, 117, 144, 38, 5, 34 (mod 181).
So 5 ^ x = 8, 53, 178, 123, 111, 138, 32, 180, 28 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 197 ^ y is impossible.
-/
theorem diophantine1_5_6_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 181) [14, 59, 3, 129, 117, 144, 38, 5, 34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [8, 53, 178, 123, 111, 138, 32, 180, 28]) [
    {prop := List.Mem (197 ^ y % 181) [14, 59, 3, 129, 117, 144, 38, 5, 34], proof := h10},
    {prop := 5 ^ x + 6 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [8, 53, 178, 123, 111, 138, 32, 180, 28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 198 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 198 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (198 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 199 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 199 ^ y,
if x >= 2, 199 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 199 ^ y is impossible.
-/
theorem diophantine1_5_6_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 199 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 200 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 200 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (200 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 201 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 201 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 202 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 202 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (202 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 203 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 203 ^ y,
if x >= 2, 203 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
Therefore, 203 ^ y = 42 (mod 181).
So 5 ^ x = 36 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 203 ^ y is impossible.
-/
theorem diophantine1_5_6_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 203 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (203 ^ y % 181) [42]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36]) [
    {prop := List.Mem (203 ^ y % 181) [42], proof := h10},
    {prop := 5 ^ x + 6 = 203 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 203 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 204 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 204 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (204 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 205 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 205 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 205 ^ y is impossible.
-/
theorem diophantine1_5_6_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 205 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 206 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 206 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (206 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 207 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 207 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (207 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 208 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 208 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (208 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Trying to disprove y >= 1 with prime factor 19 of 209 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 209 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 209 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 209 ^ y is impossible.
-/
theorem diophantine1_5_6_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 210 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 210 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 211 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 211 ^ y,
if x >= 3, 211 ^ y = 6 (mod 125).
So y = 23 (mod 25), 
which implies y = 23, 48 (mod 50).
Therefore, 211 ^ y = 96, 5 (mod 101).
So 5 ^ x = 90, 100 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 211 ^ y is impossible.
-/
theorem diophantine1_5_6_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 23) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 101) [96, 5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 23, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [90, 100]) [
    {prop := List.Mem (211 ^ y % 101) [96, 5], proof := h10},
    {prop := 5 ^ x + 6 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [90, 100], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 211 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 212 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 212 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (212 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 213 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 213 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 214 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 214 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (214 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 215 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 215 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 215 ^ y is impossible.
-/
theorem diophantine1_5_6_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 215 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 216 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 216 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (216 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 217 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 217 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 217 ^ y,
if x >= 2, 217 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 1 (mod 5).
Therefore, 217 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 217 ^ y is impossible.
-/
theorem diophantine1_5_6_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (217 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (217 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 217 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 217 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 218 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 218 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (218 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 219 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 219 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 220 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 220 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (220 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 221 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 221 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 221 ^ y is impossible.
-/
theorem diophantine1_5_6_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 222 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 222 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (222 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 223 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 223 ^ y,
if x >= 2, 223 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 3 (mod 5).
Therefore, 223 ^ y = 59 (mod 181).
So 5 ^ x = 53 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 223 ^ y is impossible.
-/
theorem diophantine1_5_6_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 181) [59]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [53]) [
    {prop := List.Mem (223 ^ y % 181) [59], proof := h10},
    {prop := 5 ^ x + 6 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 223 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 224 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 224 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (224 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 225 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 225 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (225 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 226 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 226 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (226 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 227 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 227 ^ y,
if x >= 2, 227 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8 (mod 10).
Therefore, 227 ^ y = 42 (mod 181).
So 5 ^ x = 36 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 227 ^ y is impossible.
-/
theorem diophantine1_5_6_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 181) [42]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36]) [
    {prop := List.Mem (227 ^ y % 181) [42], proof := h10},
    {prop := 5 ^ x + 6 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 227 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 228 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 228 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (228 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 229 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 229 ^ y,
if x >= 2, 229 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
which implies y = 4 (mod 5).
Therefore, 229 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 229 ^ y is impossible.
-/
theorem diophantine1_5_6_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (229 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 229 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 230 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 230 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (230 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 231 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 231 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 232 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 232 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (232 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 233 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 233 ^ y,
if x >= 2, 233 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36 (mod 40).
Therefore, 233 ^ y = 18, 23 (mod 41).
So 5 ^ x = 12, 17 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 233 ^ y is impossible.
-/
theorem diophantine1_5_6_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 41) [18, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12, 17]) [
    {prop := List.Mem (233 ^ y % 41) [18, 23], proof := h10},
    {prop := 5 ^ x + 6 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 234 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 234 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (234 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 235 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 235 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 235 ^ y is impossible.
-/
theorem diophantine1_5_6_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 235 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 236 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 236 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (236 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 237 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 237 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 238 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 238 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (238 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 239 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 239 ^ y,
if x >= 2, 239 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
Therefore, 239 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 239 ^ y is impossible.
-/
theorem diophantine1_5_6_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (239 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 239 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 240 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 240 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 151...
-- Trying prime 251...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 241 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 241 ^ y,
if x >= 3, 241 ^ y = 6 (mod 125).
So y = 22 (mod 25), 
Therefore, 241 ^ y = 63 (mod 251).
So 5 ^ x = 57 (mod 251), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 241 ^ y is impossible.
-/
theorem diophantine1_5_6_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 22) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (241 ^ y % 251) [63]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [57]) [
    {prop := List.Mem (241 ^ y % 251) [63], proof := h10},
    {prop := 5 ^ x + 6 = 241 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [57], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 241 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 242 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 242 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (242 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 243 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 243 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (243 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 244 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 244 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (244 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 245 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 245 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 245 ^ y is impossible.
-/
theorem diophantine1_5_6_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (245 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 245 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 246 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 246 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (246 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 247 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 247 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 247 ^ y is impossible.
-/
theorem diophantine1_5_6_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 248 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 248 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (248 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 249 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 249 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 250 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 250 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (250 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 251 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 251 ^ y,
if x >= 2, 251 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 251 ^ y is impossible.
-/
theorem diophantine1_5_6_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 251 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 252 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 252 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (252 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 253 ...
-- Trying to disprove y >= 1 with prime factor 23 of 253 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 353)   5 ^ x + 6 = 253 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 253 ^ y,
if y >= 1, 5 ^ x = 17 (mod 23).
So x = 7 (mod 22), 
which implies x = 7, 29, 51, 73, 95, 117, 139, 161, 183, 205, 227, 249, 271, 293, 315, 337 (mod 352).
Therefore, 5 ^ x = 112, 340, 74, 149, 238, 193, 69, 96, 241, 13, 279, 204, 115, 160, 284, 257 (mod 353).
So 253 ^ y = 118, 346, 80, 155, 244, 199, 75, 102, 247, 19, 285, 210, 121, 166, 290, 263 (mod 353), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 253 ^ y is impossible.
-/
theorem diophantine1_5_6_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (253 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 17 := by omega
  have h9 := Claim (x % 22 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 353) [112, 340, 74, 149, 238, 193, 69, 96, 241, 13, 279, 204, 115, 160, 284, 257]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (253 ^ y % 353) [118, 346, 80, 155, 244, 199, 75, 102, 247, 19, 285, 210, 121, 166, 290, 263]) [
    {prop := List.Mem (5 ^ x % 353) [112, 340, 74, 149, 238, 193, 69, 96, 241, 13, 279, 204, 115, 160, 284, 257], proof := h10},
    {prop := 5 ^ x + 6 = 253 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (253 ^ y % 353) [118, 346, 80, 155, 244, 199, 75, 102, 247, 19, 285, 210, 121, 166, 290, 263], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 253 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 254 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 254 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (254 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 255 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 255 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (255 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 256 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 256 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (256 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 257 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 257 ^ y,
if x >= 2, 257 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 257 ^ y is impossible.
-/
theorem diophantine1_5_6_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 257 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 258 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 258 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (258 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 259 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 259 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 259 ^ y,
if x >= 2, 259 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
Therefore, 259 ^ y = 3 (mod 11).
So 5 ^ x = 8 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 259 ^ y is impossible.
-/
theorem diophantine1_5_6_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 259 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 259 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (259 ^ y % 11) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [8]) [
    {prop := List.Mem (259 ^ y % 11) [3], proof := h10},
    {prop := 5 ^ x + 6 = 259 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 259 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 260 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 260 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (260 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 261 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 261 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (261 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 262 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 262 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (262 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 263 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 263 ^ y,
if x >= 2, 263 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 12, 32 (mod 40).
Therefore, 263 ^ y = 23, 18 (mod 41).
So 5 ^ x = 17, 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 263 ^ y is impossible.
-/
theorem diophantine1_5_6_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (263 ^ y % 41) [23, 18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [17, 12]) [
    {prop := List.Mem (263 ^ y % 41) [23, 18], proof := h10},
    {prop := 5 ^ x + 6 = 263 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [17, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 263 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 264 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 264 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (264 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 265 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 265 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 265 ^ y is impossible.
-/
theorem diophantine1_5_6_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (265 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 265 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 266 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 266 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (266 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 267 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 267 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (267 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 268 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 268 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (268 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 269 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 269 ^ y,
if x >= 2, 269 ^ y = 6 (mod 25).
So y = 6 (mod 10), 
which implies y = 1 (mod 5).
Therefore, 269 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 269 ^ y is impossible.
-/
theorem diophantine1_5_6_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (269 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (269 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 269 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 269 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 270 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 270 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (270 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 151...
-- Trying prime 251...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 251)   5 ^ x + 6 = 271 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 271 ^ y,
if x >= 3, 271 ^ y = 6 (mod 125).
So y = 24 (mod 25), 
which implies y = 4 (mod 5).
Therefore, 271 ^ y = 113 (mod 251).
So 5 ^ x = 107 (mod 251), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 271 ^ y is impossible.
-/
theorem diophantine1_5_6_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 271 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (271 ^ y % 251) [113]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 251) [107]) [
    {prop := List.Mem (271 ^ y % 251) [113], proof := h10},
    {prop := 5 ^ x + 6 = 271 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 251) [107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 271 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 272 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 272 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (272 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 273 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 273 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (273 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 274 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 274 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (274 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 275 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 275 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 275 ^ y is impossible.
-/
theorem diophantine1_5_6_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (275 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 275 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 276 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 276 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (276 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 277 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 277 ^ y,
if x >= 2, 277 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
Therefore, 277 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 277 ^ y is impossible.
-/
theorem diophantine1_5_6_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (277 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (277 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 277 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 277 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 278 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 278 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (278 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 279 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 279 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (279 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 280 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 280 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (280 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 281 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 281 ^ y,
if x >= 3, 281 ^ y = 6 (mod 125).
So y = 21 (mod 25), 
Therefore, 281 ^ y = 71 (mod 101).
So 5 ^ x = 65 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 281 ^ y is impossible.
-/
theorem diophantine1_5_6_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 281 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 21) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (281 ^ y % 101) [71]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [65]) [
    {prop := List.Mem (281 ^ y % 101) [71], proof := h10},
    {prop := 5 ^ x + 6 = 281 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [65], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 281 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 282 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 282 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (282 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 283 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 283 ^ y,
if x >= 2, 283 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 1, 6, 11, 16, 21, 26, 31, 36, 41 (mod 45).
Therefore, 283 ^ y = 102, 25, 15, 9, 114, 177, 70, 42, 170 (mod 181).
So 5 ^ x = 96, 19, 9, 3, 108, 171, 64, 36, 164 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 283 ^ y is impossible.
-/
theorem diophantine1_5_6_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (283 ^ y % 181) [102, 25, 15, 9, 114, 177, 70, 42, 170]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [96, 19, 9, 3, 108, 171, 64, 36, 164]) [
    {prop := List.Mem (283 ^ y % 181) [102, 25, 15, 9, 114, 177, 70, 42, 170], proof := h10},
    {prop := 5 ^ x + 6 = 283 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [96, 19, 9, 3, 108, 171, 64, 36, 164], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 283 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 284 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 284 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (284 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 285 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 285 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (285 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 286 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 286 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (286 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 287 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 287 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 287 ^ y,
if x >= 2, 287 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2, 12, 22, 32, 42, 52, 62, 72, 82 (mod 90).
Therefore, 287 ^ y = 14, 117, 34, 129, 5, 3, 38, 59, 144 (mod 181).
So 5 ^ x = 8, 111, 28, 123, 180, 178, 32, 53, 138 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 287 ^ y is impossible.
-/
theorem diophantine1_5_6_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 287 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 287 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (287 ^ y % 181) [14, 117, 34, 129, 5, 3, 38, 59, 144]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [8, 111, 28, 123, 180, 178, 32, 53, 138]) [
    {prop := List.Mem (287 ^ y % 181) [14, 117, 34, 129, 5, 3, 38, 59, 144], proof := h10},
    {prop := 5 ^ x + 6 = 287 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [8, 111, 28, 123, 180, 178, 32, 53, 138], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 287 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 288 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 288 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (288 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 289 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Trying prime 593...
-- Trying prime 641...
-- Trying prime 673...
-- Trying prime 769...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 769)   5 ^ x + 6 = 289 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 289 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91, 107, 123 (mod 128).
Therefore, 5 ^ x = 470, 425, 687, 204, 299, 344, 82, 565 (mod 769).
So 289 ^ y = 476, 431, 693, 210, 305, 350, 88, 571 (mod 769), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 289 ^ y is impossible.
-/
theorem diophantine1_5_6_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (289 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 769) [470, 425, 687, 204, 299, 344, 82, 565]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (289 ^ y % 769) [476, 431, 693, 210, 305, 350, 88, 571]) [
    {prop := List.Mem (5 ^ x % 769) [470, 425, 687, 204, 299, 344, 82, 565], proof := h10},
    {prop := 5 ^ x + 6 = 289 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (289 ^ y % 769) [476, 431, 693, 210, 305, 350, 88, 571], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 289 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 290 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 290 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (290 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 291 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 291 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (291 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 292 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 292 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (292 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 293 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 293 ^ y,
if x >= 2, 293 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 293 ^ y is impossible.
-/
theorem diophantine1_5_6_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 293 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 294 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 294 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (294 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 295 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 295 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 295 ^ y is impossible.
-/
theorem diophantine1_5_6_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (295 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 295 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 296 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 296 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (296 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 297 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 297 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (297 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 298 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 298 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (298 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 299 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 299 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 299 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 299 ^ y is impossible.
-/
theorem diophantine1_5_6_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (299 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 299 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 300 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 300 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (300 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 301 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 301 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 301 ^ y,
if x >= 2, 301 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 301 ^ y is impossible.
-/
theorem diophantine1_5_6_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 301 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 301 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 301 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 302 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 302 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (302 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 303 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 303 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (303 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 304 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 304 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (304 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 305 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 305 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 305 ^ y is impossible.
-/
theorem diophantine1_5_6_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (305 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 305 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 306 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 306 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (306 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 307 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 307 ^ y,
if x >= 2, 307 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 307 ^ y is impossible.
-/
theorem diophantine1_5_6_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 307 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 308 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 308 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (308 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 309 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 309 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (309 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 310 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 310 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (310 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 151...
-- Trying prime 251...
-- Trying prime 401...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 401)   5 ^ x + 6 = 311 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 311 ^ y,
if x >= 3, 311 ^ y = 6 (mod 125).
So y = 18 (mod 25), 
which implies y = 18, 43, 68, 93 (mod 100).
Therefore, 311 ^ y = 206, 110, 195, 291 (mod 401).
So 5 ^ x = 200, 104, 189, 285 (mod 401), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 311 ^ y is impossible.
-/
theorem diophantine1_5_6_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (311 ^ y % 401) [206, 110, 195, 291]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 401) [200, 104, 189, 285]) [
    {prop := List.Mem (311 ^ y % 401) [206, 110, 195, 291], proof := h10},
    {prop := 5 ^ x + 6 = 311 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 401) [200, 104, 189, 285], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 311 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 312 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 312 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (312 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 313 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 313 ^ y,
if x >= 2, 313 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 0 (mod 4).
Therefore, 313 ^ y = 1 (mod 101).
So 5 ^ x = 96 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 313 ^ y is impossible.
-/
theorem diophantine1_5_6_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (313 ^ y % 101) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [96]) [
    {prop := List.Mem (313 ^ y % 101) [1], proof := h10},
    {prop := 5 ^ x + 6 = 313 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [96], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 313 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 314 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 314 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (314 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 315 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 315 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (315 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 316 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 316 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (316 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 317 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 317 ^ y,
if x >= 2, 317 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 6, 16, 26, 36, 46, 56, 66, 76, 86 (mod 90).
Therefore, 317 ^ y = 27, 169, 126, 125, 45, 161, 29, 148, 75 (mod 181).
So 5 ^ x = 21, 163, 120, 119, 39, 155, 23, 142, 69 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 317 ^ y is impossible.
-/
theorem diophantine1_5_6_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 181) [27, 169, 126, 125, 45, 161, 29, 148, 75]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [21, 163, 120, 119, 39, 155, 23, 142, 69]) [
    {prop := List.Mem (317 ^ y % 181) [27, 169, 126, 125, 45, 161, 29, 148, 75], proof := h10},
    {prop := 5 ^ x + 6 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [21, 163, 120, 119, 39, 155, 23, 142, 69], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 317 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 318 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 318 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (318 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 319 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 319 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 319 ^ y,
if x >= 2, 319 ^ y = 6 (mod 25).
So y = 6 (mod 10), 
which implies y = 1, 6, 11 (mod 15).
Therefore, 319 ^ y = 9, 8, 14 (mod 31).
So 5 ^ x = 3, 2, 8 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 319 ^ y is impossible.
-/
theorem diophantine1_5_6_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 319 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 319 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (319 ^ y % 31) [9, 8, 14]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [3, 2, 8]) [
    {prop := List.Mem (319 ^ y % 31) [9, 8, 14], proof := h10},
    {prop := 5 ^ x + 6 = 319 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [3, 2, 8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 319 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 320 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 320 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (320 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 321 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 321 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (321 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 322 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 322 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (322 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 323 ...
-- Trying prime 97...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 113)   5 ^ x + 6 = 323 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 323 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91, 107 (mod 112).
Therefore, 5 ^ x = 34, 3, 90, 101, 92, 48, 84 (mod 113).
So 323 ^ y = 40, 9, 96, 107, 98, 54, 90 (mod 113), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 323 ^ y is impossible.
-/
theorem diophantine1_5_6_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (323 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 113) [34, 3, 90, 101, 92, 48, 84]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (323 ^ y % 113) [40, 9, 96, 107, 98, 54, 90]) [
    {prop := List.Mem (5 ^ x % 113) [34, 3, 90, 101, 92, 48, 84], proof := h10},
    {prop := 5 ^ x + 6 = 323 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (323 ^ y % 113) [40, 9, 96, 107, 98, 54, 90], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 323 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 324 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 324 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (324 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 325 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 325 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 325 ^ y is impossible.
-/
theorem diophantine1_5_6_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (325 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 325 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 326 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 326 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (326 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 327 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 327 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (327 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 328 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 328 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (328 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 329 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 329 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 329 ^ y,
if x >= 2, 329 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
which implies y = 0 (mod 2).
Therefore, 329 ^ y = 1 (mod 11).
So 5 ^ x = 6 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 329 ^ y is impossible.
-/
theorem diophantine1_5_6_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 329 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 329 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (329 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [6]) [
    {prop := List.Mem (329 ^ y % 11) [1], proof := h10},
    {prop := 5 ^ x + 6 = 329 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 329 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 330 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 330 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (330 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 331 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 331 ^ y,
if x >= 3, 331 ^ y = 6 (mod 125).
So y = 11 (mod 25), 
which implies y = 11, 36, 61, 86 (mod 100).
Therefore, 331 ^ y = 89, 19, 12, 82 (mod 101).
So 5 ^ x = 83, 13, 6, 76 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 331 ^ y is impossible.
-/
theorem diophantine1_5_6_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (331 ^ y % 101) [89, 19, 12, 82]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [83, 13, 6, 76]) [
    {prop := List.Mem (331 ^ y % 101) [89, 19, 12, 82], proof := h10},
    {prop := 5 ^ x + 6 = 331 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [83, 13, 6, 76], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 331 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 332 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 332 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (332 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 333 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 333 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (333 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 334 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 334 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (334 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 335 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 335 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 335 ^ y is impossible.
-/
theorem diophantine1_5_6_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (335 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 335 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 336 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 336 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (336 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 337 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 337 ^ y,
if x >= 2, 337 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2, 12, 22 (mod 30).
Therefore, 337 ^ y = 82, 135, 145 (mod 181).
So 5 ^ x = 76, 129, 139 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 337 ^ y is impossible.
-/
theorem diophantine1_5_6_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 337 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (337 ^ y % 181) [82, 135, 145]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [76, 129, 139]) [
    {prop := List.Mem (337 ^ y % 181) [82, 135, 145], proof := h10},
    {prop := 5 ^ x + 6 = 337 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [76, 129, 139], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 337 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 338 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 338 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (338 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 339 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 339 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (339 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 340 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 340 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (340 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 341 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 31 of 341 ...
-- Trying to disprove y >= 2 with prime factor 11 of 341 ...
-- Trying prime 331...
-- Trying prime 661...
-- Trying prime 881...
-- Trying prime 991...
-- Trying prime 1321...
-- Trying prime 1871...
-- Trying prime 2311...
-- Trying prime 2531...
-- Trying prime 2861...
-- Trying prime 2971...
-- Trying prime 3191...
-- Trying prime 3301...
-- Trying prime 3631...
-- Trying prime 3851...
-- Trying prime 4621...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 341 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 341 ^ y,
if x >= 3, 341 ^ y = 6 (mod 125).
So y = 17 (mod 25), 
which implies y = 17, 42, 67, 92 (mod 100).
Therefore, 341 ^ y = 50, 96, 51, 5 (mod 101).
So 5 ^ x = 44, 90, 45, 100 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 341 ^ y is impossible.
-/
theorem diophantine1_5_6_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 341 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 341 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (341 ^ y % 101) [50, 96, 51, 5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [44, 90, 45, 100]) [
    {prop := List.Mem (341 ^ y % 101) [50, 96, 51, 5], proof := h10},
    {prop := 5 ^ x + 6 = 341 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [44, 90, 45, 100], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 341 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 342 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 342 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (342 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 343 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 343 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 343 ^ y,
if x >= 2, 343 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 343 ^ y is impossible.
-/
theorem diophantine1_5_6_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 343 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 343 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 343 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 344 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 344 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (344 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 345 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 345 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (345 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 346 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 346 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (346 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 347 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 347 ^ y,
if x >= 2, 347 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4, 24 (mod 40).
Therefore, 347 ^ y = 23, 18 (mod 41).
So 5 ^ x = 17, 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 347 ^ y is impossible.
-/
theorem diophantine1_5_6_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (347 ^ y % 41) [23, 18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [17, 12]) [
    {prop := List.Mem (347 ^ y % 41) [23, 18], proof := h10},
    {prop := 5 ^ x + 6 = 347 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [17, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 347 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 348 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 348 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (348 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 349 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 349 ^ y,
if x >= 2, 349 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 349 ^ y is impossible.
-/
theorem diophantine1_5_6_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 349 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 350 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 350 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (350 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 351 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 351 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (351 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 352 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 352 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (352 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 353 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 353 ^ y,
if x >= 2, 353 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4 (mod 10).
Therefore, 353 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 353 ^ y is impossible.
-/
theorem diophantine1_5_6_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (353 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (353 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 353 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 353 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 354 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 354 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (354 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 355 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 355 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 355 ^ y is impossible.
-/
theorem diophantine1_5_6_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (355 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 355 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 356 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 356 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (356 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 357 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 357 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (357 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 358 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 358 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (358 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 359 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 359 ^ y,
if x >= 2, 359 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
Therefore, 359 ^ y = 5 (mod 11).
So 5 ^ x = 10 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 359 ^ y is impossible.
-/
theorem diophantine1_5_6_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (359 ^ y % 11) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [10]) [
    {prop := List.Mem (359 ^ y % 11) [5], proof := h10},
    {prop := 5 ^ x + 6 = 359 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 359 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 360 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 360 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (360 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 19 of 361 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 361 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 361 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 361 ^ y is impossible.
-/
theorem diophantine1_5_6_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (361 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 361 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 362 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 362 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (362 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 363 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 363 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (363 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 364 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 364 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (364 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 365 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 365 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 365 ^ y is impossible.
-/
theorem diophantine1_5_6_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (365 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 365 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 366 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 366 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (366 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 367 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 367 ^ y,
if x >= 2, 367 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
Therefore, 367 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 367 ^ y is impossible.
-/
theorem diophantine1_5_6_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (367 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (367 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 367 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 367 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 368 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 368 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (368 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 369 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 369 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (369 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 370 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 370 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (370 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 371 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 7 of 371 ...
-- Trying prime 43...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   5 ^ x + 6 = 371 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 371 ^ y,
if y >= 2, 5 ^ x = 43 (mod 49).
So x = 6 (mod 42).
Therefore, 5 ^ x = 4 (mod 127).
So 371 ^ y = 10 (mod 127), but this is impossible.
Therefore, y < 2.
Further examination shows that 5 ^ x + 6 = 371 ^ y is impossible.
-/
theorem diophantine1_5_6_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (371 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 49 = 43 := by omega
  have h9 := Claim (x % 42 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 49 = 43, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 127) [4]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (371 ^ y % 127) [10]) [
    {prop := List.Mem (5 ^ x % 127) [4], proof := h10},
    {prop := 5 ^ x + 6 = 371 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (371 ^ y % 127) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 371 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 372 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 372 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (372 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 373 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 373 ^ y,
if x >= 2, 373 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8 (mod 10).
Therefore, 373 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 373 ^ y is impossible.
-/
theorem diophantine1_5_6_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (373 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (373 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 373 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 373 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 374 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 374 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (374 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 375 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 375 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (375 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 376 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 376 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (376 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 377 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 377 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 377 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 377 ^ y is impossible.
-/
theorem diophantine1_5_6_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (377 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 377 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 378 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 378 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (378 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 379 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 379 ^ y,
if x >= 2, 379 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
which implies y = 4, 9, 14 (mod 15).
Therefore, 379 ^ y = 14, 8, 9 (mod 31).
So 5 ^ x = 8, 2, 3 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 379 ^ y is impossible.
-/
theorem diophantine1_5_6_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 379 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (379 ^ y % 31) [14, 8, 9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [8, 2, 3]) [
    {prop := List.Mem (379 ^ y % 31) [14, 8, 9], proof := h10},
    {prop := 5 ^ x + 6 = 379 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [8, 2, 3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 379 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 380 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 380 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (380 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 381 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 381 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (381 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 382 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 382 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (382 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 383 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 383 ^ y,
if x >= 2, 383 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36, 56, 76, 96, 116, 136, 156, 176 (mod 180).
Therefore, 383 ^ y = 3, 59, 14, 34, 5, 38, 144, 117, 129 (mod 181).
So 5 ^ x = 178, 53, 8, 28, 180, 32, 138, 111, 123 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 383 ^ y is impossible.
-/
theorem diophantine1_5_6_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 383 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (383 ^ y % 181) [3, 59, 14, 34, 5, 38, 144, 117, 129]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [178, 53, 8, 28, 180, 32, 138, 111, 123]) [
    {prop := List.Mem (383 ^ y % 181) [3, 59, 14, 34, 5, 38, 144, 117, 129], proof := h10},
    {prop := 5 ^ x + 6 = 383 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [178, 53, 8, 28, 180, 32, 138, 111, 123], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 383 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 384 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 384 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (384 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 385 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 385 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 385 ^ y is impossible.
-/
theorem diophantine1_5_6_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (385 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 385 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 386 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 386 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (386 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 387 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 387 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (387 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 388 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 388 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (388 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 389 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 389 ^ y,
if x >= 2, 389 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
which implies y = 8, 18, 28 (mod 30).
Therefore, 389 ^ y = 18, 16, 28 (mod 31).
So 5 ^ x = 12, 10, 22 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 389 ^ y is impossible.
-/
theorem diophantine1_5_6_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (389 ^ y % 31) [18, 16, 28]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [12, 10, 22]) [
    {prop := List.Mem (389 ^ y % 31) [18, 16, 28], proof := h10},
    {prop := 5 ^ x + 6 = 389 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [12, 10, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 389 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 390 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 390 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (390 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 391 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 577)   5 ^ x + 6 = 391 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 391 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251, 267, 283, 299, 315, 331, 347, 363, 379, 395, 411, 427, 443, 459, 475, 491, 507, 523, 539, 555, 571 (mod 576).
Therefore, 5 ^ x = 77, 78, 94, 350, 407, 165, 332, 119, 173, 460, 436, 52, 255, 41, 79, 110, 29, 464, 500, 499, 483, 227, 170, 412, 245, 458, 404, 117, 141, 525, 322, 536, 498, 467, 548, 113 (mod 577).
So 391 ^ y = 83, 84, 100, 356, 413, 171, 338, 125, 179, 466, 442, 58, 261, 47, 85, 116, 35, 470, 506, 505, 489, 233, 176, 418, 251, 464, 410, 123, 147, 531, 328, 542, 504, 473, 554, 119 (mod 577), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 391 ^ y is impossible.
-/
theorem diophantine1_5_6_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (391 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 577) [77, 78, 94, 350, 407, 165, 332, 119, 173, 460, 436, 52, 255, 41, 79, 110, 29, 464, 500, 499, 483, 227, 170, 412, 245, 458, 404, 117, 141, 525, 322, 536, 498, 467, 548, 113]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (391 ^ y % 577) [83, 84, 100, 356, 413, 171, 338, 125, 179, 466, 442, 58, 261, 47, 85, 116, 35, 470, 506, 505, 489, 233, 176, 418, 251, 464, 410, 123, 147, 531, 328, 542, 504, 473, 554, 119]) [
    {prop := List.Mem (5 ^ x % 577) [77, 78, 94, 350, 407, 165, 332, 119, 173, 460, 436, 52, 255, 41, 79, 110, 29, 464, 500, 499, 483, 227, 170, 412, 245, 458, 404, 117, 141, 525, 322, 536, 498, 467, 548, 113], proof := h10},
    {prop := 5 ^ x + 6 = 391 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (391 ^ y % 577) [83, 84, 100, 356, 413, 171, 338, 125, 179, 466, 442, 58, 261, 47, 85, 116, 35, 470, 506, 505, 489, 233, 176, 418, 251, 464, 410, 123, 147, 531, 328, 542, 504, 473, 554, 119], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 391 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 392 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 392 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (392 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 393 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 393 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (393 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 394 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 394 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (394 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 395 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 395 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 395 ^ y is impossible.
-/
theorem diophantine1_5_6_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (395 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 395 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 396 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 396 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (396 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 397 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 397 ^ y,
if x >= 2, 397 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
Therefore, 397 ^ y = 135 (mod 181).
So 5 ^ x = 129 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 397 ^ y is impossible.
-/
theorem diophantine1_5_6_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (397 ^ y % 181) [135]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [129]) [
    {prop := List.Mem (397 ^ y % 181) [135], proof := h10},
    {prop := 5 ^ x + 6 = 397 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [129], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 397 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 398 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 398 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (398 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 399 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 399 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (399 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 400 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 400 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (400 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 401 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 401 ^ y,
if x >= 2, 401 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 401 ^ y is impossible.
-/
theorem diophantine1_5_6_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 401 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 402 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 402 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (402 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 403 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 403 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 403 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 403 ^ y is impossible.
-/
theorem diophantine1_5_6_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (403 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 403 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 404 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 404 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (404 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 405 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 405 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (405 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 406 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 406 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (406 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 407 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 407 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 407 ^ y,
if x >= 2, 407 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 407 ^ y is impossible.
-/
theorem diophantine1_5_6_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 407 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 407 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 407 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 408 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 408 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (408 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 409 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 409 ^ y,
if x >= 2, 409 ^ y = 6 (mod 25).
So y = 2 (mod 10), 
which implies y = 0, 2, 4 (mod 6).
Therefore, 409 ^ y = 1, 5, 25 (mod 31).
So 5 ^ x = 26, 30, 19 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 409 ^ y is impossible.
-/
theorem diophantine1_5_6_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (409 ^ y % 31) [1, 5, 25]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [26, 30, 19]) [
    {prop := List.Mem (409 ^ y % 31) [1, 5, 25], proof := h10},
    {prop := 5 ^ x + 6 = 409 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [26, 30, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 409 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 410 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 410 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (410 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 411 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 411 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (411 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 412 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 412 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (412 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 413 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 413 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 413 ^ y,
if x >= 2, 413 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 12, 32, 52 (mod 60).
Therefore, 413 ^ y = 42, 114, 25 (mod 181).
So 5 ^ x = 36, 108, 19 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 413 ^ y is impossible.
-/
theorem diophantine1_5_6_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 413 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 413 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (413 ^ y % 181) [42, 114, 25]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [36, 108, 19]) [
    {prop := List.Mem (413 ^ y % 181) [42, 114, 25], proof := h10},
    {prop := 5 ^ x + 6 = 413 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [36, 108, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 413 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 414 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 414 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (414 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 415 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 415 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 415 ^ y is impossible.
-/
theorem diophantine1_5_6_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (415 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 415 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 416 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 416 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (416 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 417 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 417 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (417 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 418 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 418 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (418 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 419 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 419 ^ y,
if x >= 2, 419 ^ y = 6 (mod 25).
So y = 6 (mod 10), 
which implies y = 1 (mod 5).
Therefore, 419 ^ y = 16 (mod 31).
So 5 ^ x = 10 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 419 ^ y is impossible.
-/
theorem diophantine1_5_6_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (419 ^ y % 31) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [10]) [
    {prop := List.Mem (419 ^ y % 31) [16], proof := h10},
    {prop := 5 ^ x + 6 = 419 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 419 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 420 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 420 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (420 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 421 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 421 ^ y,
if x >= 3, 421 ^ y = 6 (mod 125).
So y = 19 (mod 25), 
which implies y = 4, 9 (mod 10).
Therefore, 421 ^ y = 95, 6 (mod 101).
So 5 ^ x = 89, 0 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 421 ^ y is impossible.
-/
theorem diophantine1_5_6_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 19) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (421 ^ y % 101) [95, 6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [89, 0]) [
    {prop := List.Mem (421 ^ y % 101) [95, 6], proof := h10},
    {prop := 5 ^ x + 6 = 421 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [89, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 421 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 422 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 422 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (422 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 423 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 423 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (423 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 424 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 424 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (424 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 425 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 425 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 425 ^ y is impossible.
-/
theorem diophantine1_5_6_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (425 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 425 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 426 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 426 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (426 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 427 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 281)   5 ^ x + 6 = 427 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 427 ^ y,
if x >= 2, 427 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
which implies y = 8, 28 (mod 40).
Therefore, 427 ^ y = 90, 191 (mod 281).
So 5 ^ x = 84, 185 (mod 281), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 427 ^ y is impossible.
-/
theorem diophantine1_5_6_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 427 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 427 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (427 ^ y % 281) [90, 191]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 281) [84, 185]) [
    {prop := List.Mem (427 ^ y % 281) [90, 191], proof := h10},
    {prop := 5 ^ x + 6 = 427 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 281) [84, 185], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 427 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 428 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 428 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (428 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 429 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 429 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (429 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 430 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 430 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (430 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 431 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 431 ^ y,
if x >= 3, 431 ^ y = 6 (mod 125).
So y = 16 (mod 25), 
which implies y = 16, 41, 66, 91 (mod 100).
Therefore, 431 ^ y = 56, 46, 45, 55 (mod 101).
So 5 ^ x = 50, 40, 39, 49 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 431 ^ y is impossible.
-/
theorem diophantine1_5_6_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (431 ^ y % 101) [56, 46, 45, 55]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [50, 40, 39, 49]) [
    {prop := List.Mem (431 ^ y % 101) [56, 46, 45, 55], proof := h10},
    {prop := 5 ^ x + 6 = 431 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [50, 40, 39, 49], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 431 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 432 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 432 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (432 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 6 = 433 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 433 ^ y,
if x >= 2, 433 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 6 (mod 10).
Therefore, 433 ^ y = 18 (mod 41).
So 5 ^ x = 12 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 433 ^ y is impossible.
-/
theorem diophantine1_5_6_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 433 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (433 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [12]) [
    {prop := List.Mem (433 ^ y % 41) [18], proof := h10},
    {prop := 5 ^ x + 6 = 433 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 433 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 434 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 434 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (434 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 435 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 435 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (435 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 436 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 436 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (436 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 437 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 437 ^ y,
if y >= 1, 5 ^ x = 13 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 437 ^ y is impossible.
-/
theorem diophantine1_5_6_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 13 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 13, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 438 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 438 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (438 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   5 ^ x + 6 = 439 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 439 ^ y,
if x >= 2, 439 ^ y = 6 (mod 25).
So y = 8 (mod 10), 
which implies y = 0 (mod 2).
Therefore, 439 ^ y = 1 (mod 11).
So 5 ^ x = 6 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 439 ^ y is impossible.
-/
theorem diophantine1_5_6_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (439 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 11) [6]) [
    {prop := List.Mem (439 ^ y % 11) [1], proof := h10},
    {prop := 5 ^ x + 6 = 439 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 11) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 439 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 440 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 440 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (440 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 441 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 441 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (441 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 442 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 442 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (442 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 443 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 443 ^ y,
if x >= 2, 443 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 443 ^ y is impossible.
-/
theorem diophantine1_5_6_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 443 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 444 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 444 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (444 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 445 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 445 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 445 ^ y is impossible.
-/
theorem diophantine1_5_6_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (445 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 445 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 446 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 446 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (446 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 447 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 447 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (447 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 448 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 448 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (448 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 449 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 449 ^ y,
if x >= 2, 449 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 449 ^ y is impossible.
-/
theorem diophantine1_5_6_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 449 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 449 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 450 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 450 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (450 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 451 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 451 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 451 ^ y,
if x >= 2, 451 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 451 ^ y is impossible.
-/
theorem diophantine1_5_6_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 451 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 451 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 451 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 452 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 452 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (452 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 453 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 453 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (453 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 454 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 454 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (454 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 455 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 455 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 455 ^ y is impossible.
-/
theorem diophantine1_5_6_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (455 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 455 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 456 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 456 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (456 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 457 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 457 ^ y,
if x >= 2, 457 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 457 ^ y is impossible.
-/
theorem diophantine1_5_6_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 457 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 458 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 458 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (458 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 459 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 459 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (459 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 460 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 460 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (460 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 151...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 151)   5 ^ x + 6 = 461 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 461 ^ y,
if x >= 3, 461 ^ y = 6 (mod 125).
So y = 23 (mod 25), 
which implies y = 3 (mod 5).
Therefore, 461 ^ y = 59 (mod 151).
So 5 ^ x = 53 (mod 151), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 461 ^ y is impossible.
-/
theorem diophantine1_5_6_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 23) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (461 ^ y % 151) [59]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 23, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 151) [53]) [
    {prop := List.Mem (461 ^ y % 151) [59], proof := h10},
    {prop := 5 ^ x + 6 = 461 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 151) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 461 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 462 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 462 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (462 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 521)   5 ^ x + 6 = 463 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 463 ^ y,
if x >= 2, 463 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 12, 32, 52, 72, 92, 112, 132, 152, 172, 192, 212, 232, 252 (mod 260).
Therefore, 463 ^ y = 267, 392, 396, 517, 400, 117, 283, 355, 449, 427, 22, 405, 138 (mod 521).
So 5 ^ x = 261, 386, 390, 511, 394, 111, 277, 349, 443, 421, 16, 399, 132 (mod 521), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 463 ^ y is impossible.
-/
theorem diophantine1_5_6_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 463 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (463 ^ y % 521) [267, 392, 396, 517, 400, 117, 283, 355, 449, 427, 22, 405, 138]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 521) [261, 386, 390, 511, 394, 111, 277, 349, 443, 421, 16, 399, 132]) [
    {prop := List.Mem (463 ^ y % 521) [267, 392, 396, 517, 400, 117, 283, 355, 449, 427, 22, 405, 138], proof := h10},
    {prop := 5 ^ x + 6 = 463 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 521) [261, 386, 390, 511, 394, 111, 277, 349, 443, 421, 16, 399, 132], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 463 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 464 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 464 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (464 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 465 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 465 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (465 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 466 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 466 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (466 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 467 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 467 ^ y,
if x >= 2, 467 ^ y = 6 (mod 25).
So y = 16 (mod 20), 
which implies y = 16, 36, 56, 76, 96, 116, 136, 156, 176 (mod 180).
Therefore, 467 ^ y = 15, 42, 9, 170, 114, 102, 177, 25, 70 (mod 181).
So 5 ^ x = 9, 36, 3, 164, 108, 96, 171, 19, 64 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 467 ^ y is impossible.
-/
theorem diophantine1_5_6_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (467 ^ y % 181) [15, 42, 9, 170, 114, 102, 177, 25, 70]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [9, 36, 3, 164, 108, 96, 171, 19, 64]) [
    {prop := List.Mem (467 ^ y % 181) [15, 42, 9, 170, 114, 102, 177, 25, 70], proof := h10},
    {prop := 5 ^ x + 6 = 467 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [9, 36, 3, 164, 108, 96, 171, 19, 64], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 467 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 468 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 468 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (468 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 469 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   5 ^ x + 6 = 469 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 469 ^ y,
if x >= 2, 469 ^ y = 6 (mod 25).
So y = 6 (mod 10), 
which implies y = 1 (mod 5).
Therefore, 469 ^ y = 4 (mod 31).
So 5 ^ x = 29 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 469 ^ y is impossible.
-/
theorem diophantine1_5_6_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 469 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 469 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (469 ^ y % 31) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 31) [29]) [
    {prop := List.Mem (469 ^ y % 31) [4], proof := h10},
    {prop := 5 ^ x + 6 = 469 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 31) [29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 469 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 470 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 470 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (470 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 471 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 471 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (471 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 472 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 472 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (472 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 473 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 473 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 473 ^ y,
if x >= 2, 473 ^ y = 6 (mod 25).
So y = 8 (mod 20), 
Therefore, 473 ^ y = 36 (mod 101).
So 5 ^ x = 30 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 473 ^ y is impossible.
-/
theorem diophantine1_5_6_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 473 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 473 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (473 ^ y % 101) [36]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [30]) [
    {prop := List.Mem (473 ^ y % 101) [36], proof := h10},
    {prop := 5 ^ x + 6 = 473 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 473 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 474 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 474 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (474 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 475 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 475 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 475 ^ y is impossible.
-/
theorem diophantine1_5_6_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (475 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 475 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 476 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 476 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (476 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 477 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 477 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (477 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 478 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 478 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (478 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 479 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 479 ^ y,
if x >= 2, 479 ^ y = 6 (mod 25).
So y = 4 (mod 10), 
Therefore, 479 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 479 ^ y is impossible.
-/
theorem diophantine1_5_6_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 479 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 10 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (479 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (479 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 479 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 479 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 480 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 480 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (480 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 481 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 6 = 481 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 481 ^ y,
if y >= 1, 5 ^ x = 7 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 481 ^ y is impossible.
-/
theorem diophantine1_5_6_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (481 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 481 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 482 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 482 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (482 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 483 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 483 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (483 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 484 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 484 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (484 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 6 = 485 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 485 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 6 = 485 ^ y is impossible.
-/
theorem diophantine1_5_6_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (485 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 485 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 486 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 486 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (486 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 6 = 487 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 487 ^ y,
if x >= 2, 487 ^ y = 6 (mod 25).
So y = 12 (mod 20), 
which implies y = 2 (mod 5).
Therefore, 487 ^ y = 59 (mod 181).
So 5 ^ x = 53 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 487 ^ y is impossible.
-/
theorem diophantine1_5_6_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 487 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (487 ^ y % 181) [59]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [53]) [
    {prop := List.Mem (487 ^ y % 181) [59], proof := h10},
    {prop := 5 ^ x + 6 = 487 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 487 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 488 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 488 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (488 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 489 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 489 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (489 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 490 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 490 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (490 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 6 = 491 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 491 ^ y,
if x >= 3, 491 ^ y = 6 (mod 125).
So y = 22 (mod 25), 
which implies y = 2 (mod 5).
Therefore, 491 ^ y = 95 (mod 101).
So 5 ^ x = 89 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 6 = 491 ^ y is impossible.
-/
theorem diophantine1_5_6_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 125 = 6 := by omega
  have h9 := Claim (y % 25 = 22) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 125 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (491 ^ y % 101) [95]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 25 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [89]) [
    {prop := List.Mem (491 ^ y % 101) [95], proof := h10},
    {prop := 5 ^ x + 6 = 491 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [89], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 491 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 492 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 492 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (492 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 493 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   5 ^ x + 6 = 493 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 493 ^ y,
if y >= 1, 5 ^ x = 11 (mod 17).
So x = 11 (mod 16), 
which implies x = 11, 27, 43, 59, 75, 91 (mod 96).
Therefore, 5 ^ x = 71, 34, 60, 26, 63, 37 (mod 97).
So 493 ^ y = 77, 40, 66, 32, 69, 43 (mod 97), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 6 = 493 ^ y is impossible.
-/
theorem diophantine1_5_6_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (493 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 11 := by omega
  have h9 := Claim (x % 16 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 97) [71, 34, 60, 26, 63, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (493 ^ y % 97) [77, 40, 66, 32, 69, 43]) [
    {prop := List.Mem (5 ^ x % 97) [71, 34, 60, 26, 63, 37], proof := h10},
    {prop := 5 ^ x + 6 = 493 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (493 ^ y % 97) [77, 40, 66, 32, 69, 43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 493 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 494 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 494 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (494 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 495 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 495 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 3).
-/
theorem diophantine1_5_6_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (495 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 496 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 496 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (496 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 7 of 497 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 6 = 497 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 497 ^ y,
if x >= 2, 497 ^ y = 6 (mod 25).
So y = 4 (mod 20), 
which implies y = 4 (mod 5).
Therefore, 497 ^ y = 34 (mod 61).
So 5 ^ x = 28 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 497 ^ y is impossible.
-/
theorem diophantine1_5_6_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 497 ^ y % 25 = 6 := by omega
  have h9 := Claim (y % 20 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 497 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (497 ^ y % 61) [34]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [28]) [
    {prop := List.Mem (497 ^ y % 61) [34], proof := h10},
    {prop := 5 ^ x + 6 = 497 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 497 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 498 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 498 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 6).
-/
theorem diophantine1_5_6_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (498 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 6 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 6 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 6 = 499 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 499 ^ y,
if x >= 2, 499 ^ y = 6 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 6 = 499 ^ y is impossible.
-/
theorem diophantine1_5_6_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 25 = 6 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 25 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 6 = 499 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 6 = 500 ^ y
For positive integers x, y satisfying 5 ^ x + 6 = 500 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 2).
-/
theorem diophantine1_5_6_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 6 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (500 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
