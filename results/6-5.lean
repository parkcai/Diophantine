-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 6 <= a <= 6
-- 5 <= b <= 5
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 7 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 7 ^ y,
if x >= 1, 7 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 7 ^ y is impossible.
-/
theorem diophantine1_6_5_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 7 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 11 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 11 ^ y,
if x >= 3, 11 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_6_5_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 11 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 13 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 13 ^ y,
if x >= 1, 13 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 13 ^ y is impossible.
-/
theorem diophantine1_6_5_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 13 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 17 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 17 ^ y,
if x >= 3, 17 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 17 ^ y is impossible.
-/
theorem diophantine1_6_5_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 17 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 19 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 19 ^ y,
if x >= 1, 19 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 19 ^ y is impossible.
-/
theorem diophantine1_6_5_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 19 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 23 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 23 ^ y,
if x >= 3, 23 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 23 ^ y is impossible.
-/
theorem diophantine1_6_5_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 23 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 5 = 29 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 29 ^ y,
if x >= 3, 29 ^ y = 5 (mod 27).
So y = 5 (mod 18), 
which implies y = 5, 11 (mod 12).
Therefore, 29 ^ y = 14, 23 (mod 37).
So 6 ^ x = 9, 18 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 29 ^ y is impossible.
-/
theorem diophantine1_6_5_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 37) [14, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [9, 18]) [
    {prop := List.Mem (29 ^ y % 37) [14, 23], proof := h10},
    {prop := 6 ^ x + 5 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [9, 18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 31 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 31 ^ y,
if x >= 1, 31 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 31 ^ y is impossible.
-/
theorem diophantine1_6_5_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 37 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 37 ^ y,
if x >= 1, 37 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 37 ^ y is impossible.
-/
theorem diophantine1_6_5_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 37 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 41 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 41 ^ y,
if x >= 3, 41 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_6_5_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 41 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 43 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 43 ^ y,
if x >= 1, 43 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 43 ^ y is impossible.
-/
theorem diophantine1_6_5_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 43 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 47 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 47 ^ y,
if x >= 3, 47 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 47 ^ y is impossible.
-/
theorem diophantine1_6_5_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 49 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 49 ^ y,
if x >= 1, 49 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 49 ^ y is impossible.
-/
theorem diophantine1_6_5_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 49 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 53 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 53 ^ y,
if x >= 2, 53 ^ y = 5 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 6 ^ x + 5 = 53 ^ y is impossible.
-/
theorem diophantine1_6_5_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 9 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 9 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 59 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 59 ^ y,
if x >= 3, 59 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 59 ^ y is impossible.
-/
theorem diophantine1_6_5_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 61 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 61 ^ y,
if x >= 1, 61 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 61 ^ y is impossible.
-/
theorem diophantine1_6_5_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 67 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 67 ^ y,
if x >= 1, 67 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 67 ^ y is impossible.
-/
theorem diophantine1_6_5_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 67 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 71 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 71 ^ y,
if x >= 3, 71 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 71 ^ y is impossible.
-/
theorem diophantine1_6_5_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 71 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 73 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 73 ^ y,
if x >= 1, 73 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 73 ^ y is impossible.
-/
theorem diophantine1_6_5_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 73 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 77 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 77 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 77 ^ y is impossible.
-/
theorem diophantine1_6_5_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 79 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 79 ^ y,
if x >= 1, 79 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 79 ^ y is impossible.
-/
theorem diophantine1_6_5_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 83 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 83 ^ y,
if x >= 3, 83 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 83 ^ y is impossible.
-/
theorem diophantine1_6_5_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 89 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 89 ^ y,
if x >= 3, 89 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 89 ^ y is impossible.
-/
theorem diophantine1_6_5_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 89 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 91 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 91 ^ y,
if x >= 1, 91 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 91 ^ y is impossible.
-/
theorem diophantine1_6_5_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 91 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 91 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 97 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 97 ^ y,
if x >= 1, 97 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 97 ^ y is impossible.
-/
theorem diophantine1_6_5_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 97 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 5 = 101 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 101 ^ y,
if x >= 3, 101 ^ y = 5 (mod 27).
So y = 11 (mod 18), 
which implies y = 2 (mod 9).
Therefore, 101 ^ y = 17 (mod 19).
So 6 ^ x = 12 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 101 ^ y is impossible.
-/
theorem diophantine1_6_5_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 19) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [12]) [
    {prop := List.Mem (101 ^ y % 19) [17], proof := h10},
    {prop := 6 ^ x + 5 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 103 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 103 ^ y,
if x >= 1, 103 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 103 ^ y is impossible.
-/
theorem diophantine1_6_5_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 103 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 107 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 107 ^ y,
if x >= 3, 107 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 107 ^ y is impossible.
-/
theorem diophantine1_6_5_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 107 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 109 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 109 ^ y,
if x >= 1, 109 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 109 ^ y is impossible.
-/
theorem diophantine1_6_5_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 113 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 113 ^ y,
if x >= 3, 113 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 113 ^ y is impossible.
-/
theorem diophantine1_6_5_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 119 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 119 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 119 ^ y is impossible.
-/
theorem diophantine1_6_5_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 121 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 121 ^ y,
if x >= 1, 121 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 121 ^ y is impossible.
-/
theorem diophantine1_6_5_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 127 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 127 ^ y,
if x >= 1, 127 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 127 ^ y is impossible.
-/
theorem diophantine1_6_5_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 127 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 131 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 131 ^ y,
if x >= 3, 131 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 131 ^ y is impossible.
-/
theorem diophantine1_6_5_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 131 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 133 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 133 ^ y,
if x >= 1, 133 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 133 ^ y is impossible.
-/
theorem diophantine1_6_5_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 133 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 133 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 133 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 137 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 137 ^ y,
if x >= 3, 137 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 137 ^ y is impossible.
-/
theorem diophantine1_6_5_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 137 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 139 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 139 ^ y,
if x >= 1, 139 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 139 ^ y is impossible.
-/
theorem diophantine1_6_5_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 139 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 143 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 143 ^ y,
if x >= 3, 143 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 143 ^ y is impossible.
-/
theorem diophantine1_6_5_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 143 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 143 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 143 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 5 = 149 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 149 ^ y,
if x >= 3, 149 ^ y = 5 (mod 27).
So y = 13 (mod 18), 
which implies y = 4 (mod 9).
Therefore, 149 ^ y = 5 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 149 ^ y is impossible.
-/
theorem diophantine1_6_5_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 19) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (149 ^ y % 19) [5], proof := h10},
    {prop := 6 ^ x + 5 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 149 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 151 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 151 ^ y,
if x >= 1, 151 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 151 ^ y is impossible.
-/
theorem diophantine1_6_5_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 151 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 157 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 157 ^ y,
if x >= 1, 157 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 157 ^ y is impossible.
-/
theorem diophantine1_6_5_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 157 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 161 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 161 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 161 ^ y is impossible.
-/
theorem diophantine1_6_5_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 163 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 163 ^ y,
if x >= 1, 163 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 163 ^ y is impossible.
-/
theorem diophantine1_6_5_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 163 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 167 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 167 ^ y,
if x >= 3, 167 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 167 ^ y is impossible.
-/
theorem diophantine1_6_5_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 167 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 169 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 169 ^ y,
if x >= 1, 169 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 169 ^ y is impossible.
-/
theorem diophantine1_6_5_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 169 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 5 = 173 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 173 ^ y,
if x >= 3, 173 ^ y = 5 (mod 27).
So y = 17 (mod 18), 
Therefore, 173 ^ y = 3 (mod 37).
So 6 ^ x = 35 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 173 ^ y is impossible.
-/
theorem diophantine1_6_5_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 37) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [35]) [
    {prop := List.Mem (173 ^ y % 37) [3], proof := h10},
    {prop := 6 ^ x + 5 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 173 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 179 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 179 ^ y,
if x >= 3, 179 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 179 ^ y is impossible.
-/
theorem diophantine1_6_5_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 179 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 181 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 181 ^ y,
if x >= 1, 181 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 181 ^ y is impossible.
-/
theorem diophantine1_6_5_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 181 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 187 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 187 ^ y,
if x >= 1, 187 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 187 ^ y is impossible.
-/
theorem diophantine1_6_5_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 187 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 187 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 187 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 191 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 191 ^ y,
if x >= 3, 191 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 191 ^ y is impossible.
-/
theorem diophantine1_6_5_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 193 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 193 ^ y,
if x >= 1, 193 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 193 ^ y is impossible.
-/
theorem diophantine1_6_5_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 193 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 197 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 197 ^ y,
if x >= 2, 197 ^ y = 5 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 6 ^ x + 5 = 197 ^ y is impossible.
-/
theorem diophantine1_6_5_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 9 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 9 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 199 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 199 ^ y,
if x >= 1, 199 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 199 ^ y is impossible.
-/
theorem diophantine1_6_5_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 199 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 203 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 203 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 203 ^ y is impossible.
-/
theorem diophantine1_6_5_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 203 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 209 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 209 ^ y,
if x >= 3, 209 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 209 ^ y is impossible.
-/
theorem diophantine1_6_5_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 209 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 209 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 209 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 211 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 211 ^ y,
if x >= 1, 211 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 211 ^ y is impossible.
-/
theorem diophantine1_6_5_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 211 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 217 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 217 ^ y,
if x >= 1, 217 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 217 ^ y is impossible.
-/
theorem diophantine1_6_5_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 217 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 97)   6 ^ x + 5 = 221 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 221 ^ y,
if x >= 6, 221 ^ y = 5 (mod 64).
So y = 3 (mod 16), 
Therefore, 221 ^ y = 89 (mod 97).
So 6 ^ x = 84 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_6_5_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 221 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 221 ^ y % 64 = 5 := by omega
  have h9 := Claim (y % 16 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 221 ^ y % 64 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (221 ^ y % 97) [89]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 97) [84]) [
    {prop := List.Mem (221 ^ y % 97) [89], proof := h10},
    {prop := 6 ^ x + 5 = 221 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 97) [84], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 221 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 223 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 223 ^ y,
if x >= 1, 223 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 223 ^ y is impossible.
-/
theorem diophantine1_6_5_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 223 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 227 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 227 ^ y,
if x >= 3, 227 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 227 ^ y is impossible.
-/
theorem diophantine1_6_5_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 227 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 229 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 229 ^ y,
if x >= 1, 229 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 229 ^ y is impossible.
-/
theorem diophantine1_6_5_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 229 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 233 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 233 ^ y,
if x >= 3, 233 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 233 ^ y is impossible.
-/
theorem diophantine1_6_5_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 233 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 239 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 239 ^ y,
if x >= 3, 239 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 239 ^ y is impossible.
-/
theorem diophantine1_6_5_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 241 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 241 ^ y,
if x >= 1, 241 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 241 ^ y is impossible.
-/
theorem diophantine1_6_5_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 241 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 247 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 247 ^ y,
if x >= 1, 247 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 247 ^ y is impossible.
-/
theorem diophantine1_6_5_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 247 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 247 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
