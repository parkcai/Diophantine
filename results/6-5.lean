-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 6 <= a <= 6
-- 5 <= b <= 5
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   6 ^ x + 5 = 2 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 2 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 2 ^ y is impossible.
-/
theorem diophantine1_6_5_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 2 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 3 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 3 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 3 ^ y is impossible.
-/
theorem diophantine1_6_5_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 3 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 4 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 4 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 4 ^ y is impossible.
-/
theorem diophantine1_6_5_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 4 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 5 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 5 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 6 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 6 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 6 ^ y is impossible.
-/
theorem diophantine1_6_5_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 6 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 7 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 7 ^ y,
if x >= 1, 7 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 7 ^ y is impossible.
-/
theorem diophantine1_6_5_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 7 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 8 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 8 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 8 ^ y is impossible.
-/
theorem diophantine1_6_5_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 8 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 9 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 9 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 9 ^ y is impossible.
-/
theorem diophantine1_6_5_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 9 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 10 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 10 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 11 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 11 ^ y,
if x >= 3, 11 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_6_5_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 11 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 12 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 12 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 12 ^ y is impossible.
-/
theorem diophantine1_6_5_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 12 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 13 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 13 ^ y,
if x >= 1, 13 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 13 ^ y is impossible.
-/
theorem diophantine1_6_5_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 13 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 14 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 14 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 14 ^ y is impossible.
-/
theorem diophantine1_6_5_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 14 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 15 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 15 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 16 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 16 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 16 ^ y is impossible.
-/
theorem diophantine1_6_5_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 16 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 17 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 17 ^ y,
if x >= 3, 17 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 17 ^ y is impossible.
-/
theorem diophantine1_6_5_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 17 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 18 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 18 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 18 ^ y is impossible.
-/
theorem diophantine1_6_5_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 19 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 19 ^ y,
if x >= 1, 19 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 19 ^ y is impossible.
-/
theorem diophantine1_6_5_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 19 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 20 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 20 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 21 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 21 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 21 ^ y is impossible.
-/
theorem diophantine1_6_5_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 21 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 22 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 22 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 22 ^ y is impossible.
-/
theorem diophantine1_6_5_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 22 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 23 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 23 ^ y,
if x >= 3, 23 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 23 ^ y is impossible.
-/
theorem diophantine1_6_5_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 23 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 24 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 24 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 24 ^ y is impossible.
-/
theorem diophantine1_6_5_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 25 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 25 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (25 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 26 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 26 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 26 ^ y is impossible.
-/
theorem diophantine1_6_5_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 26 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 27 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 27 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 27 ^ y is impossible.
-/
theorem diophantine1_6_5_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 27 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 28 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 28 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 28 ^ y is impossible.
-/
theorem diophantine1_6_5_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 28 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 5 = 29 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 29 ^ y,
if x >= 3, 29 ^ y = 5 (mod 27).
So y = 5 (mod 18), 
which implies y = 5, 11 (mod 12).
Therefore, 29 ^ y = 14, 23 (mod 37).
So 6 ^ x = 9, 18 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 29 ^ y is impossible.
-/
theorem diophantine1_6_5_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 37) [14, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [9, 18]) [
    {prop := List.Mem (29 ^ y % 37) [14, 23], proof := h10},
    {prop := 6 ^ x + 5 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [9, 18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 30 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 30 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 31 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 31 ^ y,
if x >= 1, 31 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 31 ^ y is impossible.
-/
theorem diophantine1_6_5_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 32 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 32 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 32 ^ y is impossible.
-/
theorem diophantine1_6_5_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 32 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 33 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 33 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 33 ^ y is impossible.
-/
theorem diophantine1_6_5_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 33 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 34 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 34 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 34 ^ y is impossible.
-/
theorem diophantine1_6_5_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 34 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 35 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 35 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (35 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 36 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 36 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 36 ^ y is impossible.
-/
theorem diophantine1_6_5_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 37 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 37 ^ y,
if x >= 1, 37 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 37 ^ y is impossible.
-/
theorem diophantine1_6_5_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 37 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 38 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 38 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 38 ^ y is impossible.
-/
theorem diophantine1_6_5_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 38 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 39 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 39 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 39 ^ y is impossible.
-/
theorem diophantine1_6_5_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 39 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 40 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 40 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 41 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 41 ^ y,
if x >= 3, 41 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_6_5_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 41 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 42 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 42 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 42 ^ y is impossible.
-/
theorem diophantine1_6_5_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 43 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 43 ^ y,
if x >= 1, 43 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 43 ^ y is impossible.
-/
theorem diophantine1_6_5_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 43 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 44 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 44 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 44 ^ y is impossible.
-/
theorem diophantine1_6_5_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 44 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 45 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 45 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 46 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 46 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 46 ^ y is impossible.
-/
theorem diophantine1_6_5_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 46 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 47 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 47 ^ y,
if x >= 3, 47 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 47 ^ y is impossible.
-/
theorem diophantine1_6_5_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 48 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 48 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 48 ^ y is impossible.
-/
theorem diophantine1_6_5_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 49 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 49 ^ y,
if x >= 1, 49 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 49 ^ y is impossible.
-/
theorem diophantine1_6_5_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 49 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 50 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 50 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 51 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 51 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 51 ^ y is impossible.
-/
theorem diophantine1_6_5_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 51 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 52 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 52 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 52 ^ y is impossible.
-/
theorem diophantine1_6_5_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 52 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 53 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 53 ^ y,
if x >= 2, 53 ^ y = 5 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 6 ^ x + 5 = 53 ^ y is impossible.
-/
theorem diophantine1_6_5_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 9 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 9 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 54 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 54 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 54 ^ y is impossible.
-/
theorem diophantine1_6_5_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 55 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 55 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (55 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 56 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 56 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 56 ^ y is impossible.
-/
theorem diophantine1_6_5_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 56 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 57 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 57 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 57 ^ y is impossible.
-/
theorem diophantine1_6_5_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 57 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 58 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 58 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 58 ^ y is impossible.
-/
theorem diophantine1_6_5_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 58 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 59 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 59 ^ y,
if x >= 3, 59 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 59 ^ y is impossible.
-/
theorem diophantine1_6_5_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 60 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 60 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 61 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 61 ^ y,
if x >= 1, 61 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 61 ^ y is impossible.
-/
theorem diophantine1_6_5_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 62 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 62 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 62 ^ y is impossible.
-/
theorem diophantine1_6_5_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 62 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 63 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 63 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 63 ^ y is impossible.
-/
theorem diophantine1_6_5_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 63 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 64 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 64 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 64 ^ y is impossible.
-/
theorem diophantine1_6_5_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 64 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 65 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 65 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (65 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 66 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 66 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 66 ^ y is impossible.
-/
theorem diophantine1_6_5_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 66 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 67 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 67 ^ y,
if x >= 1, 67 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 67 ^ y is impossible.
-/
theorem diophantine1_6_5_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 67 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 68 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 68 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 68 ^ y is impossible.
-/
theorem diophantine1_6_5_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 68 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 69 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 69 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 69 ^ y is impossible.
-/
theorem diophantine1_6_5_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 69 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 70 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 70 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 71 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 71 ^ y,
if x >= 3, 71 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 71 ^ y is impossible.
-/
theorem diophantine1_6_5_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 71 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 72 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 72 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 72 ^ y is impossible.
-/
theorem diophantine1_6_5_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 73 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 73 ^ y,
if x >= 1, 73 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 73 ^ y is impossible.
-/
theorem diophantine1_6_5_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 73 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 74 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 74 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 74 ^ y is impossible.
-/
theorem diophantine1_6_5_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 74 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 75 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 75 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 76 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 76 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 76 ^ y is impossible.
-/
theorem diophantine1_6_5_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 76 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 77 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 77 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 77 ^ y is impossible.
-/
theorem diophantine1_6_5_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 78 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 78 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 78 ^ y is impossible.
-/
theorem diophantine1_6_5_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 78 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 79 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 79 ^ y,
if x >= 1, 79 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 79 ^ y is impossible.
-/
theorem diophantine1_6_5_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 80 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 80 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 81 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 81 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 81 ^ y is impossible.
-/
theorem diophantine1_6_5_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 81 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 82 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 82 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 82 ^ y is impossible.
-/
theorem diophantine1_6_5_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 82 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 83 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 83 ^ y,
if x >= 3, 83 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 83 ^ y is impossible.
-/
theorem diophantine1_6_5_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 84 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 84 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 84 ^ y is impossible.
-/
theorem diophantine1_6_5_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 85 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 85 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (85 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 86 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 86 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 86 ^ y is impossible.
-/
theorem diophantine1_6_5_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 86 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 87 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 87 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 87 ^ y is impossible.
-/
theorem diophantine1_6_5_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 87 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 88 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 88 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 88 ^ y is impossible.
-/
theorem diophantine1_6_5_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 88 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 89 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 89 ^ y,
if x >= 3, 89 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 89 ^ y is impossible.
-/
theorem diophantine1_6_5_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 89 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 90 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 90 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 91 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 91 ^ y,
if x >= 1, 91 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 91 ^ y is impossible.
-/
theorem diophantine1_6_5_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 91 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 91 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 92 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 92 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 92 ^ y is impossible.
-/
theorem diophantine1_6_5_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 92 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 93 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 93 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 93 ^ y is impossible.
-/
theorem diophantine1_6_5_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 93 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 94 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 94 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 94 ^ y is impossible.
-/
theorem diophantine1_6_5_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 94 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 95 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 95 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (95 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 96 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 96 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 96 ^ y is impossible.
-/
theorem diophantine1_6_5_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 97 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 97 ^ y,
if x >= 1, 97 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 97 ^ y is impossible.
-/
theorem diophantine1_6_5_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 97 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 98 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 98 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 98 ^ y is impossible.
-/
theorem diophantine1_6_5_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 98 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 99 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 99 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 99 ^ y is impossible.
-/
theorem diophantine1_6_5_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 99 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 100 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 100 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 5 = 101 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 101 ^ y,
if x >= 3, 101 ^ y = 5 (mod 27).
So y = 11 (mod 18), 
which implies y = 2 (mod 9).
Therefore, 101 ^ y = 17 (mod 19).
So 6 ^ x = 12 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 101 ^ y is impossible.
-/
theorem diophantine1_6_5_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 19) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [12]) [
    {prop := List.Mem (101 ^ y % 19) [17], proof := h10},
    {prop := 6 ^ x + 5 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 102 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 102 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 102 ^ y is impossible.
-/
theorem diophantine1_6_5_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 102 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 103 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 103 ^ y,
if x >= 1, 103 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 103 ^ y is impossible.
-/
theorem diophantine1_6_5_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 103 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 104 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 104 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 104 ^ y is impossible.
-/
theorem diophantine1_6_5_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 104 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 105 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 105 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 106 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 106 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 106 ^ y is impossible.
-/
theorem diophantine1_6_5_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 106 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 107 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 107 ^ y,
if x >= 3, 107 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 107 ^ y is impossible.
-/
theorem diophantine1_6_5_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 107 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 108 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 108 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 108 ^ y is impossible.
-/
theorem diophantine1_6_5_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 108 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 109 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 109 ^ y,
if x >= 1, 109 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 109 ^ y is impossible.
-/
theorem diophantine1_6_5_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 110 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 110 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (110 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 111 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 111 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 111 ^ y is impossible.
-/
theorem diophantine1_6_5_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (111 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 111 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 112 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 112 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 112 ^ y is impossible.
-/
theorem diophantine1_6_5_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 112 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 113 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 113 ^ y,
if x >= 3, 113 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 113 ^ y is impossible.
-/
theorem diophantine1_6_5_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 114 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 114 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 114 ^ y is impossible.
-/
theorem diophantine1_6_5_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 114 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 115 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 115 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (115 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 116 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 116 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 116 ^ y is impossible.
-/
theorem diophantine1_6_5_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 116 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 117 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 117 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 117 ^ y is impossible.
-/
theorem diophantine1_6_5_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (117 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 117 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 118 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 118 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 118 ^ y is impossible.
-/
theorem diophantine1_6_5_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 118 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 119 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 119 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 119 ^ y is impossible.
-/
theorem diophantine1_6_5_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 120 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 120 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 121 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 121 ^ y,
if x >= 1, 121 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 121 ^ y is impossible.
-/
theorem diophantine1_6_5_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 122 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 122 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 122 ^ y is impossible.
-/
theorem diophantine1_6_5_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 122 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 123 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 123 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 123 ^ y is impossible.
-/
theorem diophantine1_6_5_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (123 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 123 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 124 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 124 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 124 ^ y is impossible.
-/
theorem diophantine1_6_5_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 124 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 125 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 125 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (125 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 126 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 126 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 126 ^ y is impossible.
-/
theorem diophantine1_6_5_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (126 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 126 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 127 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 127 ^ y,
if x >= 1, 127 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 127 ^ y is impossible.
-/
theorem diophantine1_6_5_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 127 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 128 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 128 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 128 ^ y is impossible.
-/
theorem diophantine1_6_5_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 128 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 129 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 129 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 129 ^ y is impossible.
-/
theorem diophantine1_6_5_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (129 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 129 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 130 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 130 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (130 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 131 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 131 ^ y,
if x >= 3, 131 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 131 ^ y is impossible.
-/
theorem diophantine1_6_5_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 131 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 132 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 132 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 132 ^ y is impossible.
-/
theorem diophantine1_6_5_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (132 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 132 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 133 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 133 ^ y,
if x >= 1, 133 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 133 ^ y is impossible.
-/
theorem diophantine1_6_5_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 133 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 133 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 133 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 134 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 134 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 134 ^ y is impossible.
-/
theorem diophantine1_6_5_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 134 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 135 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 135 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (135 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 136 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 136 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 136 ^ y is impossible.
-/
theorem diophantine1_6_5_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 136 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 137 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 137 ^ y,
if x >= 3, 137 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 137 ^ y is impossible.
-/
theorem diophantine1_6_5_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 137 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 138 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 138 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 138 ^ y is impossible.
-/
theorem diophantine1_6_5_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (138 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 138 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 139 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 139 ^ y,
if x >= 1, 139 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 139 ^ y is impossible.
-/
theorem diophantine1_6_5_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 139 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 140 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 140 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (140 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 141 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 141 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 141 ^ y is impossible.
-/
theorem diophantine1_6_5_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (141 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 141 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 142 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 142 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 142 ^ y is impossible.
-/
theorem diophantine1_6_5_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 142 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 143 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 143 ^ y,
if x >= 3, 143 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 143 ^ y is impossible.
-/
theorem diophantine1_6_5_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 143 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 143 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 143 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 144 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 144 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 144 ^ y is impossible.
-/
theorem diophantine1_6_5_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (144 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 144 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 145 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 145 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (145 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 146 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 146 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 146 ^ y is impossible.
-/
theorem diophantine1_6_5_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 146 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 147 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 147 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 147 ^ y is impossible.
-/
theorem diophantine1_6_5_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (147 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 147 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 148 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 148 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 148 ^ y is impossible.
-/
theorem diophantine1_6_5_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 148 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 5 = 149 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 149 ^ y,
if x >= 3, 149 ^ y = 5 (mod 27).
So y = 13 (mod 18), 
which implies y = 4 (mod 9).
Therefore, 149 ^ y = 5 (mod 19).
So 6 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 149 ^ y is impossible.
-/
theorem diophantine1_6_5_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 19) [5]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [0]) [
    {prop := List.Mem (149 ^ y % 19) [5], proof := h10},
    {prop := 6 ^ x + 5 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 149 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 150 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 150 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 151 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 151 ^ y,
if x >= 1, 151 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 151 ^ y is impossible.
-/
theorem diophantine1_6_5_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 151 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 152 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 152 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 152 ^ y is impossible.
-/
theorem diophantine1_6_5_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 152 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 153 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 153 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 153 ^ y is impossible.
-/
theorem diophantine1_6_5_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (153 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 153 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 154 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 154 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 154 ^ y is impossible.
-/
theorem diophantine1_6_5_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 154 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 155 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 155 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (155 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 156 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 156 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 156 ^ y is impossible.
-/
theorem diophantine1_6_5_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (156 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 156 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 157 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 157 ^ y,
if x >= 1, 157 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 157 ^ y is impossible.
-/
theorem diophantine1_6_5_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 157 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 158 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 158 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 158 ^ y is impossible.
-/
theorem diophantine1_6_5_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 158 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 159 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 159 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 159 ^ y is impossible.
-/
theorem diophantine1_6_5_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (159 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 159 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 160 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 160 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (160 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 161 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 161 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 161 ^ y is impossible.
-/
theorem diophantine1_6_5_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 162 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 162 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 162 ^ y is impossible.
-/
theorem diophantine1_6_5_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (162 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 162 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 163 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 163 ^ y,
if x >= 1, 163 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 163 ^ y is impossible.
-/
theorem diophantine1_6_5_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 163 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 164 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 164 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 164 ^ y is impossible.
-/
theorem diophantine1_6_5_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 164 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 165 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 165 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (165 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 166 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 166 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 166 ^ y is impossible.
-/
theorem diophantine1_6_5_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 166 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 167 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 167 ^ y,
if x >= 3, 167 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 167 ^ y is impossible.
-/
theorem diophantine1_6_5_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 167 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 168 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 168 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 168 ^ y is impossible.
-/
theorem diophantine1_6_5_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (168 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 168 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 169 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 169 ^ y,
if x >= 1, 169 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 169 ^ y is impossible.
-/
theorem diophantine1_6_5_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 169 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 170 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 170 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (170 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 171 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 171 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 171 ^ y is impossible.
-/
theorem diophantine1_6_5_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (171 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 171 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 172 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 172 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 172 ^ y is impossible.
-/
theorem diophantine1_6_5_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 172 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 5 = 173 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 173 ^ y,
if x >= 3, 173 ^ y = 5 (mod 27).
So y = 17 (mod 18), 
Therefore, 173 ^ y = 3 (mod 37).
So 6 ^ x = 35 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 173 ^ y is impossible.
-/
theorem diophantine1_6_5_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 37) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [35]) [
    {prop := List.Mem (173 ^ y % 37) [3], proof := h10},
    {prop := 6 ^ x + 5 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 173 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 174 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 174 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 174 ^ y is impossible.
-/
theorem diophantine1_6_5_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (174 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 174 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 175 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 175 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (175 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 176 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 176 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 176 ^ y is impossible.
-/
theorem diophantine1_6_5_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 176 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 177 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 177 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 177 ^ y is impossible.
-/
theorem diophantine1_6_5_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (177 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 177 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 178 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 178 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 178 ^ y is impossible.
-/
theorem diophantine1_6_5_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 178 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 179 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 179 ^ y,
if x >= 3, 179 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 179 ^ y is impossible.
-/
theorem diophantine1_6_5_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 179 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 180 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 180 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 181 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 181 ^ y,
if x >= 1, 181 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 181 ^ y is impossible.
-/
theorem diophantine1_6_5_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 181 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 182 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 182 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 182 ^ y is impossible.
-/
theorem diophantine1_6_5_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 182 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 183 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 183 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 183 ^ y is impossible.
-/
theorem diophantine1_6_5_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (183 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 183 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 184 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 184 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 184 ^ y is impossible.
-/
theorem diophantine1_6_5_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 184 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 185 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 185 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (185 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 186 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 186 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 186 ^ y is impossible.
-/
theorem diophantine1_6_5_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (186 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 186 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 187 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 187 ^ y,
if x >= 1, 187 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 187 ^ y is impossible.
-/
theorem diophantine1_6_5_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 187 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 187 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 187 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 188 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 188 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 188 ^ y is impossible.
-/
theorem diophantine1_6_5_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 188 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 189 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 189 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 189 ^ y is impossible.
-/
theorem diophantine1_6_5_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (189 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 189 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 190 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 190 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (190 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 191 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 191 ^ y,
if x >= 3, 191 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 191 ^ y is impossible.
-/
theorem diophantine1_6_5_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 192 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 192 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 192 ^ y is impossible.
-/
theorem diophantine1_6_5_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (192 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 192 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 193 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 193 ^ y,
if x >= 1, 193 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 193 ^ y is impossible.
-/
theorem diophantine1_6_5_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 193 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 194 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 194 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 194 ^ y is impossible.
-/
theorem diophantine1_6_5_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 194 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 195 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 195 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (195 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 196 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 196 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 196 ^ y is impossible.
-/
theorem diophantine1_6_5_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 196 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 197 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 197 ^ y,
if x >= 2, 197 ^ y = 5 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 6 ^ x + 5 = 197 ^ y is impossible.
-/
theorem diophantine1_6_5_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 9 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 9 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 198 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 198 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 198 ^ y is impossible.
-/
theorem diophantine1_6_5_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (198 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 198 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 199 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 199 ^ y,
if x >= 1, 199 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 199 ^ y is impossible.
-/
theorem diophantine1_6_5_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 199 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 200 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 200 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (200 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 201 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 201 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 201 ^ y is impossible.
-/
theorem diophantine1_6_5_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (201 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 201 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 202 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 202 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 202 ^ y is impossible.
-/
theorem diophantine1_6_5_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 202 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 203 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 203 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 203 ^ y is impossible.
-/
theorem diophantine1_6_5_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 203 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 204 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 204 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 204 ^ y is impossible.
-/
theorem diophantine1_6_5_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (204 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 204 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 205 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 205 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (205 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 206 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 206 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 206 ^ y is impossible.
-/
theorem diophantine1_6_5_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 206 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 207 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 207 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 207 ^ y is impossible.
-/
theorem diophantine1_6_5_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (207 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 207 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 208 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 208 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 208 ^ y is impossible.
-/
theorem diophantine1_6_5_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 208 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 209 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 209 ^ y,
if x >= 3, 209 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 209 ^ y is impossible.
-/
theorem diophantine1_6_5_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 209 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 209 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 209 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 210 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 210 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 211 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 211 ^ y,
if x >= 1, 211 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 211 ^ y is impossible.
-/
theorem diophantine1_6_5_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 211 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 212 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 212 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 212 ^ y is impossible.
-/
theorem diophantine1_6_5_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 212 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 213 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 213 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 213 ^ y is impossible.
-/
theorem diophantine1_6_5_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (213 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 213 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 214 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 214 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 214 ^ y is impossible.
-/
theorem diophantine1_6_5_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 214 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 215 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 215 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (215 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 216 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 216 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 216 ^ y is impossible.
-/
theorem diophantine1_6_5_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (216 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 216 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 217 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 217 ^ y,
if x >= 1, 217 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 217 ^ y is impossible.
-/
theorem diophantine1_6_5_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 217 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 218 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 218 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 218 ^ y is impossible.
-/
theorem diophantine1_6_5_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 218 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 219 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 219 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 219 ^ y is impossible.
-/
theorem diophantine1_6_5_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (219 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 219 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 220 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 220 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (220 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 5 with prime factor 2 of 6 ...
-- Trying to disprove x >= 6 with prime factor 2 of 6 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 97)   6 ^ x + 5 = 221 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 221 ^ y,
if x >= 6, 221 ^ y = 5 (mod 64).
So y = 3 (mod 16), 
Therefore, 221 ^ y = 89 (mod 97).
So 6 ^ x = 84 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_6_5_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 221 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (6 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 221 ^ y % 64 = 5 := by omega
  have h9 := Claim (y % 16 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 221 ^ y % 64 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (221 ^ y % 97) [89]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 97) [84]) [
    {prop := List.Mem (221 ^ y % 97) [89], proof := h10},
    {prop := 6 ^ x + 5 = 221 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 97) [84], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 221 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 222 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 222 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 222 ^ y is impossible.
-/
theorem diophantine1_6_5_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (222 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 222 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 223 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 223 ^ y,
if x >= 1, 223 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 223 ^ y is impossible.
-/
theorem diophantine1_6_5_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 223 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 224 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 224 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 224 ^ y is impossible.
-/
theorem diophantine1_6_5_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 224 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 225 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 225 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (225 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 226 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 226 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 226 ^ y is impossible.
-/
theorem diophantine1_6_5_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 226 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 227 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 227 ^ y,
if x >= 3, 227 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 227 ^ y is impossible.
-/
theorem diophantine1_6_5_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 227 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 228 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 228 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 228 ^ y is impossible.
-/
theorem diophantine1_6_5_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (228 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 228 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 229 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 229 ^ y,
if x >= 1, 229 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 229 ^ y is impossible.
-/
theorem diophantine1_6_5_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 229 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 230 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 230 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (230 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 231 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 231 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 231 ^ y is impossible.
-/
theorem diophantine1_6_5_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (231 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 231 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 232 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 232 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 232 ^ y is impossible.
-/
theorem diophantine1_6_5_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 232 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 233 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 233 ^ y,
if x >= 3, 233 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 233 ^ y is impossible.
-/
theorem diophantine1_6_5_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 233 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 234 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 234 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 234 ^ y is impossible.
-/
theorem diophantine1_6_5_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (234 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 234 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 235 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 235 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (235 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 236 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 236 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 236 ^ y is impossible.
-/
theorem diophantine1_6_5_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 236 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 237 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 237 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 237 ^ y is impossible.
-/
theorem diophantine1_6_5_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (237 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 237 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 238 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 238 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 238 ^ y is impossible.
-/
theorem diophantine1_6_5_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 238 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 239 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 239 ^ y,
if x >= 3, 239 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 239 ^ y is impossible.
-/
theorem diophantine1_6_5_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 240 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 240 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 241 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 241 ^ y,
if x >= 1, 241 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 241 ^ y is impossible.
-/
theorem diophantine1_6_5_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 241 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 242 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 242 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 242 ^ y is impossible.
-/
theorem diophantine1_6_5_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 242 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 243 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 243 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 243 ^ y is impossible.
-/
theorem diophantine1_6_5_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (243 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 243 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 244 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 244 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 244 ^ y is impossible.
-/
theorem diophantine1_6_5_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 244 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 245 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 245 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (245 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 246 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 246 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 246 ^ y is impossible.
-/
theorem diophantine1_6_5_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (246 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 246 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 247 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 247 ^ y,
if x >= 1, 247 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 247 ^ y is impossible.
-/
theorem diophantine1_6_5_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 247 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 247 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 248 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 248 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 248 ^ y is impossible.
-/
theorem diophantine1_6_5_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 248 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 249 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 249 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 249 ^ y is impossible.
-/
theorem diophantine1_6_5_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (249 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 249 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 250 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 250 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (250 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 251 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 251 ^ y,
if x >= 3, 251 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 251 ^ y is impossible.
-/
theorem diophantine1_6_5_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 251 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 252 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 252 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 252 ^ y is impossible.
-/
theorem diophantine1_6_5_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (252 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 252 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 253 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 253 ^ y,
if x >= 1, 253 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 253 ^ y is impossible.
-/
theorem diophantine1_6_5_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 253 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 253 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 253 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 254 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 254 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 254 ^ y is impossible.
-/
theorem diophantine1_6_5_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (254 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 254 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 255 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 255 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (255 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 256 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 256 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 256 ^ y is impossible.
-/
theorem diophantine1_6_5_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (256 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 256 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 257 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 257 ^ y,
if x >= 3, 257 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 257 ^ y is impossible.
-/
theorem diophantine1_6_5_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 257 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 258 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 258 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 258 ^ y is impossible.
-/
theorem diophantine1_6_5_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (258 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 258 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 259 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 259 ^ y,
if x >= 1, 259 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 259 ^ y is impossible.
-/
theorem diophantine1_6_5_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 259 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 259 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 259 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 260 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 260 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (260 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 261 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 261 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 261 ^ y is impossible.
-/
theorem diophantine1_6_5_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (261 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 261 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 262 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 262 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 262 ^ y is impossible.
-/
theorem diophantine1_6_5_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (262 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 262 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 263 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 263 ^ y,
if x >= 3, 263 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 263 ^ y is impossible.
-/
theorem diophantine1_6_5_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 263 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 264 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 264 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 264 ^ y is impossible.
-/
theorem diophantine1_6_5_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (264 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 264 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 265 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 265 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (265 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 266 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 266 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 266 ^ y is impossible.
-/
theorem diophantine1_6_5_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (266 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 266 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 267 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 267 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 267 ^ y is impossible.
-/
theorem diophantine1_6_5_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (267 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 267 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 268 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 268 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 268 ^ y is impossible.
-/
theorem diophantine1_6_5_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (268 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 268 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 269 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 269 ^ y,
if x >= 2, 269 ^ y = 5 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 6 ^ x + 5 = 269 ^ y is impossible.
-/
theorem diophantine1_6_5_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 9 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 9 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 269 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 270 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 270 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (270 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 271 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 271 ^ y,
if x >= 1, 271 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 271 ^ y is impossible.
-/
theorem diophantine1_6_5_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 271 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 271 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 272 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 272 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 272 ^ y is impossible.
-/
theorem diophantine1_6_5_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (272 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 272 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 273 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 273 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 273 ^ y is impossible.
-/
theorem diophantine1_6_5_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (273 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 273 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 274 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 274 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 274 ^ y is impossible.
-/
theorem diophantine1_6_5_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (274 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 274 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 275 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 275 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (275 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 276 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 276 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 276 ^ y is impossible.
-/
theorem diophantine1_6_5_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (276 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 276 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 277 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 277 ^ y,
if x >= 1, 277 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 277 ^ y is impossible.
-/
theorem diophantine1_6_5_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 277 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 278 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 278 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 278 ^ y is impossible.
-/
theorem diophantine1_6_5_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (278 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 278 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 279 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 279 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 279 ^ y is impossible.
-/
theorem diophantine1_6_5_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (279 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 279 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 280 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 280 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (280 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 281 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 281 ^ y,
if x >= 3, 281 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 281 ^ y is impossible.
-/
theorem diophantine1_6_5_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 281 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 281 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 282 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 282 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 282 ^ y is impossible.
-/
theorem diophantine1_6_5_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (282 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 282 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 283 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 283 ^ y,
if x >= 1, 283 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 283 ^ y is impossible.
-/
theorem diophantine1_6_5_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 283 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 284 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 284 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 284 ^ y is impossible.
-/
theorem diophantine1_6_5_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (284 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 284 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 285 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 285 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (285 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 286 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 286 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 286 ^ y is impossible.
-/
theorem diophantine1_6_5_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (286 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 286 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 287 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 287 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 287 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 287 ^ y is impossible.
-/
theorem diophantine1_6_5_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (287 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 287 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 288 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 288 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 288 ^ y is impossible.
-/
theorem diophantine1_6_5_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (288 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 288 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 289 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 289 ^ y,
if x >= 1, 289 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 289 ^ y is impossible.
-/
theorem diophantine1_6_5_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 289 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 289 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 289 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 290 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 290 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (290 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 291 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 291 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 291 ^ y is impossible.
-/
theorem diophantine1_6_5_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (291 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 291 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 292 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 292 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 292 ^ y is impossible.
-/
theorem diophantine1_6_5_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (292 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 292 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 5 = 293 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 293 ^ y,
if x >= 3, 293 ^ y = 5 (mod 27).
So y = 7 (mod 18), 
which implies y = 1 (mod 6).
Therefore, 293 ^ y = 8 (mod 19).
So 6 ^ x = 3 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 293 ^ y is impossible.
-/
theorem diophantine1_6_5_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (293 ^ y % 19) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [3]) [
    {prop := List.Mem (293 ^ y % 19) [8], proof := h10},
    {prop := 6 ^ x + 5 = 293 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 293 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 294 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 294 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 294 ^ y is impossible.
-/
theorem diophantine1_6_5_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (294 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 294 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 295 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 295 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (295 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 296 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 296 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 296 ^ y is impossible.
-/
theorem diophantine1_6_5_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (296 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 296 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 297 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 297 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 297 ^ y is impossible.
-/
theorem diophantine1_6_5_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (297 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 297 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 298 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 298 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 298 ^ y is impossible.
-/
theorem diophantine1_6_5_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (298 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 298 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 299 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 299 ^ y,
if x >= 3, 299 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 299 ^ y is impossible.
-/
theorem diophantine1_6_5_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 299 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 299 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 299 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 300 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 300 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (300 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 301 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 301 ^ y,
if x >= 1, 301 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 301 ^ y is impossible.
-/
theorem diophantine1_6_5_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 301 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 301 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 301 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 302 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 302 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 302 ^ y is impossible.
-/
theorem diophantine1_6_5_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (302 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 302 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 303 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 303 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 303 ^ y is impossible.
-/
theorem diophantine1_6_5_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (303 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 303 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 304 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 304 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 304 ^ y is impossible.
-/
theorem diophantine1_6_5_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (304 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 304 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 305 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 305 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (305 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 306 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 306 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 306 ^ y is impossible.
-/
theorem diophantine1_6_5_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (306 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 306 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 307 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 307 ^ y,
if x >= 1, 307 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 307 ^ y is impossible.
-/
theorem diophantine1_6_5_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 307 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 308 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 308 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 308 ^ y is impossible.
-/
theorem diophantine1_6_5_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (308 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 308 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 309 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 309 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 309 ^ y is impossible.
-/
theorem diophantine1_6_5_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (309 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 309 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 310 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 310 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (310 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 311 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 311 ^ y,
if x >= 3, 311 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 311 ^ y is impossible.
-/
theorem diophantine1_6_5_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 311 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 312 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 312 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 312 ^ y is impossible.
-/
theorem diophantine1_6_5_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (312 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 312 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 313 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 313 ^ y,
if x >= 1, 313 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 313 ^ y is impossible.
-/
theorem diophantine1_6_5_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 313 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 314 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 314 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 314 ^ y is impossible.
-/
theorem diophantine1_6_5_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (314 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 314 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 315 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 315 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (315 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 316 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 316 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 316 ^ y is impossible.
-/
theorem diophantine1_6_5_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (316 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 316 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 5 = 317 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 317 ^ y,
if x >= 3, 317 ^ y = 5 (mod 27).
So y = 11 (mod 18), 
Therefore, 317 ^ y = 3 (mod 37).
So 6 ^ x = 35 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 317 ^ y is impossible.
-/
theorem diophantine1_6_5_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 37) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [35]) [
    {prop := List.Mem (317 ^ y % 37) [3], proof := h10},
    {prop := 6 ^ x + 5 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 317 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 318 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 318 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 318 ^ y is impossible.
-/
theorem diophantine1_6_5_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (318 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 318 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 319 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 319 ^ y,
if x >= 1, 319 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 319 ^ y is impossible.
-/
theorem diophantine1_6_5_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 319 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 319 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 319 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 320 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 320 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (320 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 321 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 321 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 321 ^ y is impossible.
-/
theorem diophantine1_6_5_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (321 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 321 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 322 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 322 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 322 ^ y is impossible.
-/
theorem diophantine1_6_5_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (322 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 322 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 323 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 323 ^ y,
if x >= 3, 323 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 323 ^ y is impossible.
-/
theorem diophantine1_6_5_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 323 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 323 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 323 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 324 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 324 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 324 ^ y is impossible.
-/
theorem diophantine1_6_5_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (324 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 324 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 325 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 325 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (325 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 326 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 326 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 326 ^ y is impossible.
-/
theorem diophantine1_6_5_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (326 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 326 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 327 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 327 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 327 ^ y is impossible.
-/
theorem diophantine1_6_5_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (327 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 327 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 328 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 328 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 328 ^ y is impossible.
-/
theorem diophantine1_6_5_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (328 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 328 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 329 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 329 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 329 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 329 ^ y is impossible.
-/
theorem diophantine1_6_5_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (329 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 329 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 330 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 330 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (330 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 331 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 331 ^ y,
if x >= 1, 331 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 331 ^ y is impossible.
-/
theorem diophantine1_6_5_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 331 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 332 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 332 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 332 ^ y is impossible.
-/
theorem diophantine1_6_5_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (332 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 332 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 333 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 333 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 333 ^ y is impossible.
-/
theorem diophantine1_6_5_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (333 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 333 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 334 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 334 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 334 ^ y is impossible.
-/
theorem diophantine1_6_5_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (334 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 334 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 335 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 335 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (335 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 336 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 336 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 336 ^ y is impossible.
-/
theorem diophantine1_6_5_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (336 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 336 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 337 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 337 ^ y,
if x >= 1, 337 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 337 ^ y is impossible.
-/
theorem diophantine1_6_5_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 337 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 337 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 338 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 338 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 338 ^ y is impossible.
-/
theorem diophantine1_6_5_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (338 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 338 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 339 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 339 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 339 ^ y is impossible.
-/
theorem diophantine1_6_5_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (339 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 339 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 340 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 340 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (340 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 341 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 341 ^ y,
if x >= 2, 341 ^ y = 5 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 6 ^ x + 5 = 341 ^ y is impossible.
-/
theorem diophantine1_6_5_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 341 ^ y % 9 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 341 ^ y % 9 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 341 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 342 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 342 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 342 ^ y is impossible.
-/
theorem diophantine1_6_5_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (342 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 342 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 343 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 343 ^ y,
if x >= 1, 343 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 343 ^ y is impossible.
-/
theorem diophantine1_6_5_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 343 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 343 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 343 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 344 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 344 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 344 ^ y is impossible.
-/
theorem diophantine1_6_5_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (344 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 344 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 345 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 345 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (345 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 346 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 346 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 346 ^ y is impossible.
-/
theorem diophantine1_6_5_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (346 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 346 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 347 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 347 ^ y,
if x >= 3, 347 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 347 ^ y is impossible.
-/
theorem diophantine1_6_5_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 347 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 348 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 348 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 348 ^ y is impossible.
-/
theorem diophantine1_6_5_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (348 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 348 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 349 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 349 ^ y,
if x >= 1, 349 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 349 ^ y is impossible.
-/
theorem diophantine1_6_5_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 349 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 350 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 350 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (350 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 351 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 351 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 351 ^ y is impossible.
-/
theorem diophantine1_6_5_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (351 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 351 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 352 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 352 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 352 ^ y is impossible.
-/
theorem diophantine1_6_5_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (352 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 352 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 353 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 353 ^ y,
if x >= 3, 353 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 353 ^ y is impossible.
-/
theorem diophantine1_6_5_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 353 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 354 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 354 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 354 ^ y is impossible.
-/
theorem diophantine1_6_5_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (354 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 354 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 355 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 355 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (355 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 356 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 356 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 356 ^ y is impossible.
-/
theorem diophantine1_6_5_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (356 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 356 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 357 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 357 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 357 ^ y is impossible.
-/
theorem diophantine1_6_5_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (357 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 357 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 358 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 358 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 358 ^ y is impossible.
-/
theorem diophantine1_6_5_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (358 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 358 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 359 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 359 ^ y,
if x >= 3, 359 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 359 ^ y is impossible.
-/
theorem diophantine1_6_5_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 359 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 360 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 360 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (360 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 361 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 361 ^ y,
if x >= 1, 361 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 361 ^ y is impossible.
-/
theorem diophantine1_6_5_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 361 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 361 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 361 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 362 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 362 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 362 ^ y is impossible.
-/
theorem diophantine1_6_5_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (362 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 362 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 363 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 363 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 363 ^ y is impossible.
-/
theorem diophantine1_6_5_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (363 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 363 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 364 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 364 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 364 ^ y is impossible.
-/
theorem diophantine1_6_5_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (364 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 364 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 365 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 365 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (365 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 366 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 366 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 366 ^ y is impossible.
-/
theorem diophantine1_6_5_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (366 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 366 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 367 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 367 ^ y,
if x >= 1, 367 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 367 ^ y is impossible.
-/
theorem diophantine1_6_5_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 367 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 368 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 368 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 368 ^ y is impossible.
-/
theorem diophantine1_6_5_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (368 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 368 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 369 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 369 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 369 ^ y is impossible.
-/
theorem diophantine1_6_5_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (369 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 369 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 370 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 370 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (370 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 371 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 371 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 371 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 371 ^ y is impossible.
-/
theorem diophantine1_6_5_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (371 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 371 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 372 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 372 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 372 ^ y is impossible.
-/
theorem diophantine1_6_5_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (372 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 372 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 373 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 373 ^ y,
if x >= 1, 373 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 373 ^ y is impossible.
-/
theorem diophantine1_6_5_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 373 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 374 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 374 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 374 ^ y is impossible.
-/
theorem diophantine1_6_5_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (374 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 374 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 375 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 375 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (375 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 376 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 376 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 376 ^ y is impossible.
-/
theorem diophantine1_6_5_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (376 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 376 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 377 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 377 ^ y,
if x >= 3, 377 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 377 ^ y is impossible.
-/
theorem diophantine1_6_5_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 377 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 377 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 377 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 378 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 378 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 378 ^ y is impossible.
-/
theorem diophantine1_6_5_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (378 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 378 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 379 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 379 ^ y,
if x >= 1, 379 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 379 ^ y is impossible.
-/
theorem diophantine1_6_5_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 379 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 379 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 380 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 380 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (380 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 381 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 381 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 381 ^ y is impossible.
-/
theorem diophantine1_6_5_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (381 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 381 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 382 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 382 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 382 ^ y is impossible.
-/
theorem diophantine1_6_5_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (382 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 382 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 383 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 383 ^ y,
if x >= 3, 383 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 383 ^ y is impossible.
-/
theorem diophantine1_6_5_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 383 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 383 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 384 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 384 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 384 ^ y is impossible.
-/
theorem diophantine1_6_5_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (384 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 384 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 385 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 385 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (385 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 386 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 386 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 386 ^ y is impossible.
-/
theorem diophantine1_6_5_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (386 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 386 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 387 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 387 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 387 ^ y is impossible.
-/
theorem diophantine1_6_5_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (387 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 387 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 388 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 388 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 388 ^ y is impossible.
-/
theorem diophantine1_6_5_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (388 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 388 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   6 ^ x + 5 = 389 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 389 ^ y,
if x >= 3, 389 ^ y = 5 (mod 27).
So y = 17 (mod 18), 
which implies y = 8 (mod 9).
Therefore, 389 ^ y = 17 (mod 19).
So 6 ^ x = 12 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 389 ^ y is impossible.
-/
theorem diophantine1_6_5_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (389 ^ y % 19) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 19) [12]) [
    {prop := List.Mem (389 ^ y % 19) [17], proof := h10},
    {prop := 6 ^ x + 5 = 389 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 19) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 389 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 390 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 390 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (390 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 391 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 391 ^ y,
if x >= 1, 391 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 391 ^ y is impossible.
-/
theorem diophantine1_6_5_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 391 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 391 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 391 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 392 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 392 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 392 ^ y is impossible.
-/
theorem diophantine1_6_5_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (392 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 392 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 393 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 393 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 393 ^ y is impossible.
-/
theorem diophantine1_6_5_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (393 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 393 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 394 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 394 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 394 ^ y is impossible.
-/
theorem diophantine1_6_5_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (394 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 394 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 395 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 395 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (395 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 396 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 396 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 396 ^ y is impossible.
-/
theorem diophantine1_6_5_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (396 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 396 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 397 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 397 ^ y,
if x >= 1, 397 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 397 ^ y is impossible.
-/
theorem diophantine1_6_5_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 397 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 398 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 398 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 398 ^ y is impossible.
-/
theorem diophantine1_6_5_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (398 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 398 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 399 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 399 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 399 ^ y is impossible.
-/
theorem diophantine1_6_5_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (399 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 399 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 400 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 400 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (400 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 401 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 401 ^ y,
if x >= 3, 401 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 401 ^ y is impossible.
-/
theorem diophantine1_6_5_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 401 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 402 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 402 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 402 ^ y is impossible.
-/
theorem diophantine1_6_5_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (402 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 402 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 403 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 403 ^ y,
if x >= 1, 403 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 403 ^ y is impossible.
-/
theorem diophantine1_6_5_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 403 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 403 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 403 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 404 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 404 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 404 ^ y is impossible.
-/
theorem diophantine1_6_5_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (404 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 404 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 405 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 405 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (405 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 406 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 406 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 406 ^ y is impossible.
-/
theorem diophantine1_6_5_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (406 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 406 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 407 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 407 ^ y,
if x >= 3, 407 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 407 ^ y is impossible.
-/
theorem diophantine1_6_5_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 407 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 407 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 407 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 408 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 408 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 408 ^ y is impossible.
-/
theorem diophantine1_6_5_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (408 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 408 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 409 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 409 ^ y,
if x >= 1, 409 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 409 ^ y is impossible.
-/
theorem diophantine1_6_5_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 409 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 410 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 410 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (410 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 411 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 411 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 411 ^ y is impossible.
-/
theorem diophantine1_6_5_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (411 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 411 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 412 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 412 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 412 ^ y is impossible.
-/
theorem diophantine1_6_5_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (412 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 412 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 413 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 413 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 413 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 413 ^ y is impossible.
-/
theorem diophantine1_6_5_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (413 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 413 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 414 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 414 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 414 ^ y is impossible.
-/
theorem diophantine1_6_5_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (414 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 414 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 415 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 415 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (415 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 416 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 416 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 416 ^ y is impossible.
-/
theorem diophantine1_6_5_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (416 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 416 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 417 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 417 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 417 ^ y is impossible.
-/
theorem diophantine1_6_5_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (417 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 417 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 418 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 418 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 418 ^ y is impossible.
-/
theorem diophantine1_6_5_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (418 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 418 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 419 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 419 ^ y,
if x >= 3, 419 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 419 ^ y is impossible.
-/
theorem diophantine1_6_5_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 419 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 420 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 420 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (420 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 421 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 421 ^ y,
if x >= 1, 421 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 421 ^ y is impossible.
-/
theorem diophantine1_6_5_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 421 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 422 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 422 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 422 ^ y is impossible.
-/
theorem diophantine1_6_5_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (422 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 422 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 423 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 423 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 423 ^ y is impossible.
-/
theorem diophantine1_6_5_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (423 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 423 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 424 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 424 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 424 ^ y is impossible.
-/
theorem diophantine1_6_5_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (424 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 424 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 425 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 425 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (425 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 426 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 426 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 426 ^ y is impossible.
-/
theorem diophantine1_6_5_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (426 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 426 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 427 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 427 ^ y,
if x >= 1, 427 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 427 ^ y is impossible.
-/
theorem diophantine1_6_5_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 427 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 427 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 427 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 428 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 428 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 428 ^ y is impossible.
-/
theorem diophantine1_6_5_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (428 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 428 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 429 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 429 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 429 ^ y is impossible.
-/
theorem diophantine1_6_5_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (429 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 429 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 430 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 430 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (430 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 431 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 431 ^ y,
if x >= 3, 431 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 431 ^ y is impossible.
-/
theorem diophantine1_6_5_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 431 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 432 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 432 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 432 ^ y is impossible.
-/
theorem diophantine1_6_5_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (432 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 432 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 433 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 433 ^ y,
if x >= 1, 433 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 433 ^ y is impossible.
-/
theorem diophantine1_6_5_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 433 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 433 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 434 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 434 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 434 ^ y is impossible.
-/
theorem diophantine1_6_5_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (434 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 434 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 435 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 435 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (435 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 436 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 436 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 436 ^ y is impossible.
-/
theorem diophantine1_6_5_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (436 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 436 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 437 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 437 ^ y,
if y >= 1, 6 ^ x = 14 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 437 ^ y is impossible.
-/
theorem diophantine1_6_5_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 19 = 14 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 19 = 14, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 438 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 438 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 438 ^ y is impossible.
-/
theorem diophantine1_6_5_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (438 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 438 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 439 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 439 ^ y,
if x >= 1, 439 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 439 ^ y is impossible.
-/
theorem diophantine1_6_5_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 439 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 440 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 440 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (440 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 441 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 441 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 441 ^ y is impossible.
-/
theorem diophantine1_6_5_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (441 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 441 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 442 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 442 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 442 ^ y is impossible.
-/
theorem diophantine1_6_5_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (442 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 442 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 443 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 443 ^ y,
if x >= 3, 443 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 443 ^ y is impossible.
-/
theorem diophantine1_6_5_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 443 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 444 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 444 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 444 ^ y is impossible.
-/
theorem diophantine1_6_5_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (444 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 444 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 445 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 445 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (445 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 446 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 446 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 446 ^ y is impossible.
-/
theorem diophantine1_6_5_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (446 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 446 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 447 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 447 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 447 ^ y is impossible.
-/
theorem diophantine1_6_5_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (447 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 447 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 448 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 448 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 448 ^ y is impossible.
-/
theorem diophantine1_6_5_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (448 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 448 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 449 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 449 ^ y,
if x >= 3, 449 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 449 ^ y is impossible.
-/
theorem diophantine1_6_5_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 449 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 449 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 450 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 450 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (450 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 451 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 451 ^ y,
if x >= 1, 451 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 451 ^ y is impossible.
-/
theorem diophantine1_6_5_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 451 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 451 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 451 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 452 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 452 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 452 ^ y is impossible.
-/
theorem diophantine1_6_5_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (452 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 452 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 453 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 453 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 453 ^ y is impossible.
-/
theorem diophantine1_6_5_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (453 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 453 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 454 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 454 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 454 ^ y is impossible.
-/
theorem diophantine1_6_5_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (454 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 454 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 455 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 455 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (455 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 456 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 456 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 456 ^ y is impossible.
-/
theorem diophantine1_6_5_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (456 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 456 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 457 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 457 ^ y,
if x >= 1, 457 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 457 ^ y is impossible.
-/
theorem diophantine1_6_5_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 457 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 458 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 458 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 458 ^ y is impossible.
-/
theorem diophantine1_6_5_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (458 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 458 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 459 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 459 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 459 ^ y is impossible.
-/
theorem diophantine1_6_5_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (459 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 459 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 460 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 460 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (460 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Trying to disprove x >= 2 with prime factor 3 of 6 ...
-- Trying to disprove x >= 4 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 3 of 6 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   6 ^ x + 5 = 461 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 461 ^ y,
if x >= 3, 461 ^ y = 5 (mod 27).
So y = 5 (mod 18), 
which implies y = 5, 23 (mod 36).
Therefore, 461 ^ y = 19, 18 (mod 37).
So 6 ^ x = 14, 13 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 461 ^ y is impossible.
-/
theorem diophantine1_6_5_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 27 = 5 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 27 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (461 ^ y % 37) [19, 18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (6 ^ x % 37) [14, 13]) [
    {prop := List.Mem (461 ^ y % 37) [19, 18], proof := h10},
    {prop := 6 ^ x + 5 = 461 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (6 ^ x % 37) [14, 13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 461 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 462 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 462 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 462 ^ y is impossible.
-/
theorem diophantine1_6_5_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (462 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 462 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 463 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 463 ^ y,
if x >= 1, 463 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 463 ^ y is impossible.
-/
theorem diophantine1_6_5_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 463 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 463 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 464 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 464 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 464 ^ y is impossible.
-/
theorem diophantine1_6_5_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (464 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 464 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 465 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 465 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (465 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 466 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 466 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 466 ^ y is impossible.
-/
theorem diophantine1_6_5_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (466 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 466 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 467 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 467 ^ y,
if x >= 3, 467 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 467 ^ y is impossible.
-/
theorem diophantine1_6_5_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 467 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 468 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 468 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 468 ^ y is impossible.
-/
theorem diophantine1_6_5_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (468 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 468 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 469 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 469 ^ y,
if x >= 1, 469 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 469 ^ y is impossible.
-/
theorem diophantine1_6_5_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 469 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 469 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 469 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 470 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 470 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (470 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 471 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 471 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 471 ^ y is impossible.
-/
theorem diophantine1_6_5_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (471 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 471 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 472 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 472 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 472 ^ y is impossible.
-/
theorem diophantine1_6_5_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (472 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 472 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 473 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 473 ^ y,
if x >= 3, 473 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 473 ^ y is impossible.
-/
theorem diophantine1_6_5_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 473 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 473 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 473 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 474 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 474 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 474 ^ y is impossible.
-/
theorem diophantine1_6_5_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (474 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 474 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 475 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 475 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (475 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 476 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 476 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 476 ^ y is impossible.
-/
theorem diophantine1_6_5_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (476 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 476 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 477 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 477 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 477 ^ y is impossible.
-/
theorem diophantine1_6_5_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (477 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 477 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 478 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 478 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 478 ^ y is impossible.
-/
theorem diophantine1_6_5_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (478 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 478 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 479 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 479 ^ y,
if x >= 3, 479 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 479 ^ y is impossible.
-/
theorem diophantine1_6_5_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 479 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 479 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 480 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 480 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (480 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 481 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 481 ^ y,
if x >= 1, 481 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 481 ^ y is impossible.
-/
theorem diophantine1_6_5_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 481 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 481 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 481 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 482 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 482 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 482 ^ y is impossible.
-/
theorem diophantine1_6_5_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (482 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 482 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 483 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 483 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 483 ^ y is impossible.
-/
theorem diophantine1_6_5_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (483 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 483 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 484 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 484 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 484 ^ y is impossible.
-/
theorem diophantine1_6_5_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (484 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 484 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 485 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 485 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (485 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 486 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 486 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 486 ^ y is impossible.
-/
theorem diophantine1_6_5_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (486 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 486 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 487 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 487 ^ y,
if x >= 1, 487 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 487 ^ y is impossible.
-/
theorem diophantine1_6_5_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 487 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 487 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 488 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 488 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 488 ^ y is impossible.
-/
theorem diophantine1_6_5_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (488 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 488 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 489 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 489 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 6 ^ x + 5 = 489 ^ y is impossible.
-/
theorem diophantine1_6_5_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (6 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (489 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 489 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 490 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 490 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (490 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 3 with prime factor 2 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 491 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 491 ^ y,
if x >= 3, 491 ^ y = 5 (mod 8).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 6 ^ x + 5 = 491 ^ y is impossible.
-/
theorem diophantine1_6_5_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 8 = 5 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 8 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 491 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 492 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 492 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 492 ^ y is impossible.
-/
theorem diophantine1_6_5_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (492 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 492 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 493 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 493 ^ y,
if x >= 1, 493 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 493 ^ y is impossible.
-/
theorem diophantine1_6_5_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 493 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 493 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 493 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 494 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 494 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 494 ^ y is impossible.
-/
theorem diophantine1_6_5_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (494 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 494 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 495 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 495 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (495 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 496 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 496 ^ y,
if x >= 3 and y >= 3,
5 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 6 ^ x + 5 = 496 ^ y is impossible.
-/
theorem diophantine1_6_5_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (6 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (496 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 496 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Trying to disprove x >= 2 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 7 of 497 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   6 ^ x + 5 = 497 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 497 ^ y,
if y >= 1, 6 ^ x = 2 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 6 ^ x + 5 = 497 ^ y is impossible.
-/
theorem diophantine1_6_5_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (497 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ x % 7 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 7 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 497 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   6 ^ x + 5 = 498 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 498 ^ y,
if x >= 1 and y >= 1,
5 = 0 (mod 6), which is impossible.
Therefore, x < 1 or y < 1.
So 6 ^ x + 5 = 498 ^ y is impossible.
-/
theorem diophantine1_6_5_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (6 ^ x % 6 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (498 ^ y % 6 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 498 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 3 of 6 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   6 ^ x + 5 = 499 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 499 ^ y,
if x >= 1, 499 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 6 ^ x + 5 = 499 ^ y is impossible.
-/
theorem diophantine1_6_5_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (6 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 6 ^ x + 5 = 499 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   6 ^ x + 5 = 500 ^ y
For positive integers x, y satisfying 6 ^ x + 5 = 500 ^ y,
this is impossible, because it implies that 6 ^ x = 0 (mod 5).
-/
theorem diophantine1_6_5_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 6 ^ x + 5 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (500 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ x % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 6 ^ x % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
