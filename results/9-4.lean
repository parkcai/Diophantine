-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 9 <= a <= 9
-- 4 <= b <= 4
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   9 ^ x + 4 = 2 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 2 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 3 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 3 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 3 ^ y is impossible.
-/
theorem diophantine1_9_4_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 3 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 4 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 4 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 11)   9 ^ x + 4 = 5 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 5 ^ y,
if y >= 2, 9 ^ x = 21 (mod 25).
So x = 8 (mod 10), 
which implies x = 3 (mod 5).
Therefore, 9 ^ x = 3 (mod 11).
So 5 ^ y = 7 (mod 11), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 4 = 5 ^ y is impossible.
-/
theorem diophantine1_9_4_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 21 := by omega
  have h9 := Claim (x % 10 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 21, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 11) [3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ y % 11) [7]) [
    {prop := List.Mem (9 ^ x % 11) [3], proof := h10},
    {prop := 9 ^ x + 4 = 5 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (5 ^ y % 11) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 6 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 6 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 7 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 7 ^ y,
if y >= 1, 9 ^ x = 3 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 7 ^ y is impossible.
-/
theorem diophantine1_9_4_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 7 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 8 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 8 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 9 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 9 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 4 = 9 ^ y is impossible.
-/
theorem diophantine1_9_4_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 9 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 10 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 10 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 11 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 11 ^ y,
if y >= 1, 9 ^ x = 7 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 11 ^ y is impossible.
-/
theorem diophantine1_9_4_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 11 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 11 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 12 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 12 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 4 = 13 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 13 ^ y,
if x >= 4, 13 ^ y = 4 (mod 81).
So y = 7 (mod 27), 
which implies y = 7, 34, 61, 88 (mod 108).
Therefore, 13 ^ y = 51, 61, 58, 48 (mod 109).
So 9 ^ x = 47, 57, 54, 44 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_9_4_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 13 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 81 = 4 := by omega
  have h9 := Claim (y % 27 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 81 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 109) [51, 61, 58, 48]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [47, 57, 54, 44]) [
    {prop := List.Mem (13 ^ y % 109) [51, 61, 58, 48], proof := h10},
    {prop := 9 ^ x + 4 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [47, 57, 54, 44], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 13 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 14 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 14 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 15 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 15 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 15 ^ y is impossible.
-/
theorem diophantine1_9_4_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 15 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 16 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 16 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 17 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 17 ^ y,
if x >= 2, 17 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 17 ^ y is impossible.
-/
theorem diophantine1_9_4_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 18 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 18 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 19 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 19 ^ y,
if x >= 2, 19 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 19 ^ y is impossible.
-/
theorem diophantine1_9_4_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 19 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 20 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 20 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 21 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 21 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 21 ^ y is impossible.
-/
theorem diophantine1_9_4_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 21 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 22 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 22 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 23 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 23 ^ y,
if y >= 1, 9 ^ x = 19 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 23 ^ y is impossible.
-/
theorem diophantine1_9_4_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 23 = 19 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 23 = 19, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 24 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 24 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 11)   9 ^ x + 4 = 25 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 25 ^ y,
if y >= 2, 9 ^ x = 21 (mod 25).
So x = 8 (mod 10), 
which implies x = 3 (mod 5).
Therefore, 9 ^ x = 3 (mod 11).
So 25 ^ y = 7 (mod 11), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 4 = 25 ^ y is impossible.
-/
theorem diophantine1_9_4_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 21 := by omega
  have h9 := Claim (x % 10 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 21, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 11) [3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 11) [7]) [
    {prop := List.Mem (9 ^ x % 11) [3], proof := h10},
    {prop := 9 ^ x + 4 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 11) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 26 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 26 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 27 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 27 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 4 = 27 ^ y is impossible.
-/
theorem diophantine1_9_4_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 27 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 28 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 28 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 4 = 29 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 29 ^ y,
if x >= 3, 29 ^ y = 4 (mod 27).
So y = 2 (mod 18), 
which implies y = 2, 8 (mod 12).
Therefore, 29 ^ y = 27, 10 (mod 37).
So 9 ^ x = 23, 6 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 4 = 29 ^ y is impossible.
-/
theorem diophantine1_9_4_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 4 := by omega
  have h9 := Claim (y % 18 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 37) [27, 10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [23, 6]) [
    {prop := List.Mem (29 ^ y % 37) [27, 10], proof := h10},
    {prop := 9 ^ x + 4 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [23, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 30 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 30 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 31 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 31 ^ y,
if y >= 1, 9 ^ x = 27 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 31 ^ y is impossible.
-/
theorem diophantine1_9_4_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 31 = 27 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 31 = 27, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 32 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 32 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 33 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 33 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 33 ^ y is impossible.
-/
theorem diophantine1_9_4_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 33 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 34 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 34 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Trying to disprove y >= 1 with prime factor 7 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 35 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 35 ^ y,
if y >= 1, 9 ^ x = 3 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 35 ^ y is impossible.
-/
theorem diophantine1_9_4_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 36 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 36 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 37 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 37 ^ y,
if x >= 2, 37 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 37 ^ y is impossible.
-/
theorem diophantine1_9_4_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 38 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 38 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 39 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 39 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 39 ^ y is impossible.
-/
theorem diophantine1_9_4_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 39 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 40 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 40 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 4 = 41 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 41 ^ y,
if x >= 3, 41 ^ y = 4 (mod 27).
So y = 16 (mod 18), 
Therefore, 41 ^ y = 17 (mod 19).
So 9 ^ x = 13 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 4 = 41 ^ y is impossible.
-/
theorem diophantine1_9_4_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 4 := by omega
  have h9 := Claim (y % 18 = 16) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 19) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 16, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [13]) [
    {prop := List.Mem (41 ^ y % 19) [17], proof := h10},
    {prop := 9 ^ x + 4 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 42 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 42 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 43 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 43 ^ y,
if y >= 1, 9 ^ x = 39 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 43 ^ y is impossible.
-/
theorem diophantine1_9_4_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 43 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 43 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 44 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 44 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 45 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 45 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 4 = 45 ^ y is impossible.
-/
theorem diophantine1_9_4_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 46 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 46 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 4 = 47 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 47 ^ y,
if x >= 3, 47 ^ y = 4 (mod 27).
So y = 8 (mod 18), 
which implies y = 8 (mod 9).
Therefore, 47 ^ y = 17 (mod 19).
So 9 ^ x = 13 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 4 = 47 ^ y is impossible.
-/
theorem diophantine1_9_4_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 4 := by omega
  have h9 := Claim (y % 18 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 19) [17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [13]) [
    {prop := List.Mem (47 ^ y % 19) [17], proof := h10},
    {prop := 9 ^ x + 4 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 48 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 48 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 49 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 49 ^ y,
if y >= 1, 9 ^ x = 3 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 49 ^ y is impossible.
-/
theorem diophantine1_9_4_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 49 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 50 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 50 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 51 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 51 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 51 ^ y is impossible.
-/
theorem diophantine1_9_4_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 51 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 52 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 52 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 53 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 53 ^ y,
if x >= 2, 53 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 53 ^ y is impossible.
-/
theorem diophantine1_9_4_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 54 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 54 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 55 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 55 ^ y,
if x >= 2, 55 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 55 ^ y is impossible.
-/
theorem diophantine1_9_4_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 55 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 55 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 56 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 56 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 57 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 57 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 57 ^ y is impossible.
-/
theorem diophantine1_9_4_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 57 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 58 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 58 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 4 = 59 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 59 ^ y,
if x >= 3, 59 ^ y = 4 (mod 27).
So y = 4 (mod 18), 
Therefore, 59 ^ y = 16 (mod 19).
So 9 ^ x = 12 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 4 = 59 ^ y is impossible.
-/
theorem diophantine1_9_4_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 4 := by omega
  have h9 := Claim (y % 18 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 19) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [12]) [
    {prop := List.Mem (59 ^ y % 19) [16], proof := h10},
    {prop := 9 ^ x + 4 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 60 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 60 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 61 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 61 ^ y,
if y >= 1, 9 ^ x = 57 (mod 61).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 61 ^ y is impossible.
-/
theorem diophantine1_9_4_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 61 = 57 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 61 = 57, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 62 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 62 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 63 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 63 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 4 = 63 ^ y is impossible.
-/
theorem diophantine1_9_4_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 63 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 64 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 64 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Trying to disprove y >= 2 with prime factor 5 of 65 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 11)   9 ^ x + 4 = 65 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 65 ^ y,
if y >= 2, 9 ^ x = 21 (mod 25).
So x = 8 (mod 10), 
which implies x = 3 (mod 5).
Therefore, 9 ^ x = 3 (mod 11).
So 65 ^ y = 7 (mod 11), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 4 = 65 ^ y is impossible.
-/
theorem diophantine1_9_4_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 21 := by omega
  have h9 := Claim (x % 10 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 21, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 11) [3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 11) [7]) [
    {prop := List.Mem (9 ^ x % 11) [3], proof := h10},
    {prop := 9 ^ x + 4 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 11) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 65 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 66 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 66 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 67 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 67 ^ y,
if y >= 1, 9 ^ x = 63 (mod 67).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 67 ^ y is impossible.
-/
theorem diophantine1_9_4_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (67 ^ y % 67 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 67 = 63 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 67 = 63, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 67 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 68 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 68 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 69 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 69 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 69 ^ y is impossible.
-/
theorem diophantine1_9_4_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 69 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 70 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 70 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 71 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 71 ^ y,
if x >= 2, 71 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 71 ^ y is impossible.
-/
theorem diophantine1_9_4_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 71 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 72 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 72 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 73 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 73 ^ y,
if x >= 2, 73 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 73 ^ y is impossible.
-/
theorem diophantine1_9_4_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 74 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 74 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 75 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 75 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 75 ^ y is impossible.
-/
theorem diophantine1_9_4_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 75 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 76 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 76 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 77 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 77 ^ y,
if y >= 1, 9 ^ x = 3 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 77 ^ y is impossible.
-/
theorem diophantine1_9_4_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 78 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 78 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 79 of 79 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 79 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 79 ^ y,
if y >= 1, 9 ^ x = 75 (mod 79).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 79 ^ y is impossible.
-/
theorem diophantine1_9_4_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (79 ^ y % 79 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 79 = 75 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 79 = 75, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 79 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 80 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 80 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 81 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 81 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 4 = 81 ^ y is impossible.
-/
theorem diophantine1_9_4_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 81 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 82 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 82 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 4 = 83 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 83 ^ y,
if x >= 3, 83 ^ y = 4 (mod 27).
So y = 2 (mod 18), 
which implies y = 2 (mod 9).
Therefore, 83 ^ y = 7 (mod 37).
So 9 ^ x = 3 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 4 = 83 ^ y is impossible.
-/
theorem diophantine1_9_4_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 27 = 4 := by omega
  have h9 := Claim (y % 18 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 27 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 37) [7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [3]) [
    {prop := List.Mem (83 ^ y % 37) [7], proof := h10},
    {prop := 9 ^ x + 4 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 84 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 84 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 5 of 85 ...
-- Trying prime 11...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   9 ^ x + 4 = 85 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 85 ^ y,
if y >= 2, 9 ^ x = 21 (mod 25).
So x = 8 (mod 10), 
which implies x = 3, 8, 13, 18, 23, 28, 33 (mod 35).
Therefore, 9 ^ x = 19, 60, 40, 3, 2, 25, 64 (mod 71).
So 85 ^ y = 23, 64, 44, 7, 6, 29, 68 (mod 71), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_9_4_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 85 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 21 := by omega
  have h9 := Claim (x % 10 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 21, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 71) [19, 60, 40, 3, 2, 25, 64]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 71) [23, 64, 44, 7, 6, 29, 68]) [
    {prop := List.Mem (9 ^ x % 71) [19, 60, 40, 3, 2, 25, 64], proof := h10},
    {prop := 9 ^ x + 4 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 71) [23, 64, 44, 7, 6, 29, 68], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 85 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 86 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 86 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 87 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 87 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 87 ^ y is impossible.
-/
theorem diophantine1_9_4_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 87 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 88 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 88 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 4 = 89 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 89 ^ y,
if x >= 2, 89 ^ y = 4 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 4 = 89 ^ y is impossible.
-/
theorem diophantine1_9_4_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 9 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 9 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 90 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 90 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 91 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 91 ^ y,
if y >= 1, 9 ^ x = 3 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 91 ^ y is impossible.
-/
theorem diophantine1_9_4_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 92 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 92 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 93 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 93 ^ y,
if x >= 2 and y >= 2,
4 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 9 ^ x + 4 = 93 ^ y is impossible.
-/
theorem diophantine1_9_4_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 93 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 94 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 94 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 19 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 4 = 95 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 95 ^ y,
if y >= 1, 9 ^ x = 15 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 4 = 95 ^ y is impossible.
-/
theorem diophantine1_9_4_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 19 = 15 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 19 = 15, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 96 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 96 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 4 = 97 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 97 ^ y,
if x >= 4, 97 ^ y = 4 (mod 81).
So y = 14 (mod 27), 
Therefore, 97 ^ y = 73 (mod 109).
So 9 ^ x = 69 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 4 = 97 ^ y is impossible.
-/
theorem diophantine1_9_4_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 81 = 4 := by omega
  have h9 := Claim (y % 27 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 81 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 109) [73]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [69]) [
    {prop := List.Mem (97 ^ y % 109) [73], proof := h10},
    {prop := 9 ^ x + 4 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [69], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 98 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 98 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_4_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 4 = 99 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 99 ^ y,
if x >= 1 and y >= 1,
4 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 4 = 99 ^ y is impossible.
-/
theorem diophantine1_9_4_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 4 = 99 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 4 = 100 ^ y
For positive integers x, y satisfying 9 ^ x + 4 = 100 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 4).
-/
theorem diophantine1_9_4_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 4 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
