-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 5 <= a <= 5
-- 7 <= b <= 7
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


-- Verbose mode on.
-- Trying to disprove y >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 2 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 2 ^ y,
if x >= 3, 2 ^ y = 7 (mod 125).
So y = 85 (mod 100), 
Therefore, 2 ^ y = 62 (mod 101).
So 5 ^ x = 55 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 5).
-/
theorem diophantine1_5_7_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 2 ^ y) :
  List.Mem (x, y) [(2, 5)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 100 = 85) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 2 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ y % 101) [62]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 100 = 85, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [55]) [
    {prop := List.Mem (2 ^ y % 101) [62], proof := h10},
    {prop := 5 ^ x + 7 = 2 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 5)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 2 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 3 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 3 ^ y,
if x >= 2, 3 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 3 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 3 ^ y is impossible.
-/
theorem diophantine1_5_7_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (3 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 3 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 3 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 4 ...
-- Trying to disprove y >= 2 with prime factor 2 of 4 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 4 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 4 ^ y,
if x >= 1, 4 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 4 ^ y is impossible.
-/
theorem diophantine1_5_7_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 4 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 4 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 4 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 5 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 5 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 5 ^ y is impossible.
-/
theorem diophantine1_5_7_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 5 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 6 ...
-- Trying to disprove y >= 1 with prime factor 3 of 6 ...
-- Trying to disprove y >= 2 with prime factor 2 of 6 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 6 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 6 ^ y,
if x >= 1, 6 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 6 ^ y is impossible.
-/
theorem diophantine1_5_7_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 6 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 6 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 6 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 7 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 7 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 8 ...
-- Trying to disprove y >= 2 with prime factor 2 of 8 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 8 ...
-- Trying to disprove y >= 4 with prime factor 2 of 8 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 8 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 8 ^ y,
if x >= 2, 8 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
Therefore, 8 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 8 ^ y is impossible.
-/
theorem diophantine1_5_7_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 8 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 8 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (8 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (8 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 8 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 8 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 9 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 9 ^ y,
if x >= 1, 9 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 9 ^ y is impossible.
-/
theorem diophantine1_5_7_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 9 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 10 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 10 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 10 ^ y is impossible.
-/
theorem diophantine1_5_7_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 10 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 11 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 11 ^ y,
if x >= 1, 11 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 11 ^ y is impossible.
-/
theorem diophantine1_5_7_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 11 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 12 ...
-- Trying to disprove y >= 3 with prime factor 2 of 12 ...
-- Trying to disprove y >= 2 with prime factor 3 of 12 ...
-- Trying to disprove y >= 4 with prime factor 2 of 12 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 12 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 12 ^ y,
if x >= 2, 12 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 12 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_5_7_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 12 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 12 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 12 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (12 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (12 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 12 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 12 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 13 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 13 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 13 ^ y is impossible.
-/
theorem diophantine1_5_7_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 14 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 14 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 15 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 15 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 15 ^ y is impossible.
-/
theorem diophantine1_5_7_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 15 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 16 ...
-- Trying to disprove y >= 2 with prime factor 2 of 16 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 16 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 16 ^ y,
if x >= 1, 16 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 16 ^ y is impossible.
-/
theorem diophantine1_5_7_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 16 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 16 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 16 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 17 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 17 ^ y,
if x >= 2, 17 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 17 ^ y = 100 (mod 101).
So 5 ^ x = 93 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 17 ^ y is impossible.
-/
theorem diophantine1_5_7_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 101) [100]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [93]) [
    {prop := List.Mem (17 ^ y % 101) [100], proof := h10},
    {prop := 5 ^ x + 7 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [93], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 18 ...
-- Trying to disprove y >= 1 with prime factor 3 of 18 ...
-- Trying to disprove y >= 2 with prime factor 2 of 18 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 18 ...
-- Trying to disprove y >= 2 with prime factor 3 of 18 ...
-- Trying to disprove y >= 4 with prime factor 2 of 18 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 18 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   5 ^ x + 7 = 18 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 18 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5 (mod 9).
Therefore, 5 ^ x = 9 (mod 19).
So 18 ^ y = 16 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 18 ^ y is impossible.
-/
theorem diophantine1_5_7_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (18 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 19) [9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (18 ^ y % 19) [16]) [
    {prop := List.Mem (5 ^ x % 19) [9], proof := h10},
    {prop := 5 ^ x + 7 = 18 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (18 ^ y % 19) [16], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 18 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 19 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 19 ^ y,
if x >= 1, 19 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 19 ^ y is impossible.
-/
theorem diophantine1_5_7_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 19 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 20 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 20 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 20 ^ y is impossible.
-/
theorem diophantine1_5_7_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 20 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 21 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 21 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 22 ...
-- Trying to disprove y >= 2 with prime factor 2 of 22 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 22 ...
-- Trying to disprove y >= 1 with prime factor 11 of 22 ...
-- Trying to disprove y >= 4 with prime factor 2 of 22 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 22 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 22 ^ y,
if x >= 2, 22 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 22 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 22 ^ y is impossible.
-/
theorem diophantine1_5_7_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 22 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 22 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (22 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (22 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 22 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 22 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 331)   5 ^ x + 7 = 23 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 23 ^ y,
if y >= 1, 5 ^ x = 16 (mod 23).
So x = 8 (mod 22), 
which implies x = 8, 19, 30, 41, 52, 63, 74, 85, 96, 107, 118, 129, 140, 151, 162 (mod 165).
Therefore, 5 ^ x = 45, 241, 180, 302, 58, 215, 232, 198, 266, 130, 71, 189, 284, 94, 143 (mod 331).
So 23 ^ y = 52, 248, 187, 309, 65, 222, 239, 205, 273, 137, 78, 196, 291, 101, 150 (mod 331), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 23 ^ y is impossible.
-/
theorem diophantine1_5_7_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 22 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 331) [45, 241, 180, 302, 58, 215, 232, 198, 266, 130, 71, 189, 284, 94, 143]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 331) [52, 248, 187, 309, 65, 222, 239, 205, 273, 137, 78, 196, 291, 101, 150]) [
    {prop := List.Mem (5 ^ x % 331) [45, 241, 180, 302, 58, 215, 232, 198, 266, 130, 71, 189, 284, 94, 143], proof := h10},
    {prop := 5 ^ x + 7 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 331) [52, 248, 187, 309, 65, 222, 239, 205, 273, 137, 78, 196, 291, 101, 150], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 24 ...
-- Trying to disprove y >= 1 with prime factor 3 of 24 ...
-- Trying to disprove y >= 2 with prime factor 2 of 24 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 24 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 24 ^ y,
if x >= 1, 24 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 24 ^ y is impossible.
-/
theorem diophantine1_5_7_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 24 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 24 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 24 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 25 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 25 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 25 ^ y is impossible.
-/
theorem diophantine1_5_7_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 25 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 26 ...
-- Trying to disprove y >= 2 with prime factor 2 of 26 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 26 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 26 ^ y,
if x >= 1, 26 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 26 ^ y is impossible.
-/
theorem diophantine1_5_7_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 26 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 26 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 26 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 27 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 27 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 27 ^ y,
if x >= 2, 27 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 27 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 27 ^ y is impossible.
-/
theorem diophantine1_5_7_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 27 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (27 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (27 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 27 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 27 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 28 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 28 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 29 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 29 ^ y,
if x >= 1, 29 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 29 ^ y is impossible.
-/
theorem diophantine1_5_7_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 29 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 30 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 30 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 30 ^ y is impossible.
-/
theorem diophantine1_5_7_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 30 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 31 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 31 ^ y,
if x >= 1, 31 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 31 ^ y is impossible.
-/
theorem diophantine1_5_7_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 32 ...
-- Trying to disprove y >= 3 with prime factor 2 of 32 ...
-- Trying to disprove y >= 4 with prime factor 2 of 32 ...
-- Trying to disprove y >= 5 with prime factor 2 of 32 ...
-- Trying to disprove y >= 6 with prime factor 2 of 32 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 32 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 32 ^ y,
if x >= 3, 32 ^ y = 7 (mod 125).
So y = 17 (mod 20), 
Therefore, 32 ^ y = 62 (mod 101).
So 5 ^ x = 55 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_5_7_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 32 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 32 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 20 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 32 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (32 ^ y % 101) [62]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [55]) [
    {prop := List.Mem (32 ^ y % 101) [62], proof := h10},
    {prop := 5 ^ x + 7 = 32 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 32 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 33 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 33 ...
-- Trying to disprove y >= 1 with prime factor 11 of 33 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 33 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 33 ^ y,
if x >= 2, 33 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75 (mod 80).
Therefore, 33 ^ y = 76, 197, 165, 44 (mod 241).
So 5 ^ x = 69, 190, 158, 37 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 33 ^ y is impossible.
-/
theorem diophantine1_5_7_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 33 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (33 ^ y % 241) [76, 197, 165, 44]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [69, 190, 158, 37]) [
    {prop := List.Mem (33 ^ y % 241) [76, 197, 165, 44], proof := h10},
    {prop := 5 ^ x + 7 = 33 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [69, 190, 158, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 33 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 34 ...
-- Trying to disprove y >= 2 with prime factor 2 of 34 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 34 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 34 ^ y,
if x >= 1, 34 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 34 ^ y is impossible.
-/
theorem diophantine1_5_7_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 34 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 34 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 34 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 35 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 35 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 36 ...
-- Trying to disprove y >= 1 with prime factor 3 of 36 ...
-- Trying to disprove y >= 2 with prime factor 2 of 36 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 36 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 36 ^ y,
if x >= 1, 36 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 36 ^ y is impossible.
-/
theorem diophantine1_5_7_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 36 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 36 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 36 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 37 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 37 ^ y,
if x >= 2, 37 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 37 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 37 ^ y is impossible.
-/
theorem diophantine1_5_7_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (37 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 38 ...
-- Trying to disprove y >= 2 with prime factor 2 of 38 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 38 ...
-- Trying to disprove y >= 4 with prime factor 2 of 38 ...
-- Trying to disprove y >= 1 with prime factor 19 of 38 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 38 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 38 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 38 ^ y is impossible.
-/
theorem diophantine1_5_7_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (38 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 38 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 39 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 39 ^ y,
if x >= 1, 39 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 39 ^ y is impossible.
-/
theorem diophantine1_5_7_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 39 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 39 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 40 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 40 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 40 ^ y is impossible.
-/
theorem diophantine1_5_7_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 40 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 41 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 41 ^ y,
if x >= 1, 41 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 41 ^ y is impossible.
-/
theorem diophantine1_5_7_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 41 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 42 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 42 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Trying prime 127...
-- Trying prime 211...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 211)   5 ^ x + 7 = 43 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 43 ^ y,
if y >= 1, 5 ^ x = 36 (mod 43).
So x = 14 (mod 42), 
which implies x = 0, 7, 14, 21, 28 (mod 35).
Therefore, 5 ^ x = 1, 55, 71, 107, 188 (mod 211).
So 43 ^ y = 8, 62, 78, 114, 195 (mod 211), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 43 ^ y is impossible.
-/
theorem diophantine1_5_7_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 43 = 36 := by omega
  have h9 := Claim (x % 42 = 14) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 43 = 36, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 211) [1, 55, 71, 107, 188]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (43 ^ y % 211) [8, 62, 78, 114, 195]) [
    {prop := List.Mem (5 ^ x % 211) [1, 55, 71, 107, 188], proof := h10},
    {prop := 5 ^ x + 7 = 43 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (43 ^ y % 211) [8, 62, 78, 114, 195], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 44 ...
-- Trying to disprove y >= 2 with prime factor 2 of 44 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 44 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 44 ^ y,
if x >= 1, 44 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 44 ^ y is impossible.
-/
theorem diophantine1_5_7_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 44 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 44 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 44 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 45 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 45 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 45 ^ y is impossible.
-/
theorem diophantine1_5_7_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 45 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 46 ...
-- Trying to disprove y >= 2 with prime factor 2 of 46 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 46 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 46 ^ y,
if x >= 1, 46 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 46 ^ y is impossible.
-/
theorem diophantine1_5_7_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 46 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 46 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 46 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 47 of 47 ...
-- Trying prime 139...
-- Trying prime 277...
-- Trying prime 461...
-- Trying prime 599...
-- Trying prime 691...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Trying prime 401...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 401)   5 ^ x + 7 = 47 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 47 ^ y,
if x >= 3, 47 ^ y = 7 (mod 125).
So y = 5 (mod 100), 
which implies y = 5, 105 (mod 200).
Therefore, 47 ^ y = 275, 126 (mod 401).
So 5 ^ x = 268, 119 (mod 401), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 47 ^ y is impossible.
-/
theorem diophantine1_5_7_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 100 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 401) [275, 126]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 100 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 401) [268, 119]) [
    {prop := List.Mem (47 ^ y % 401) [275, 126], proof := h10},
    {prop := 5 ^ x + 7 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 401) [268, 119], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 48 ...
-- Trying to disprove y >= 1 with prime factor 3 of 48 ...
-- Trying to disprove y >= 2 with prime factor 2 of 48 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 48 ...
-- Trying to disprove y >= 2 with prime factor 3 of 48 ...
-- Trying to disprove y >= 4 with prime factor 2 of 48 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 3 with prime factor 3 of 48 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying to disprove y >= 5 with prime factor 2 of 48 ...
-- Trying to disprove y >= 6 with prime factor 2 of 48 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove y >= 4 with prime factor 3 of 48 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 48 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 48 ^ y,
if x >= 3, 48 ^ y = 7 (mod 125).
So y = 35 (mod 100), 
Therefore, 48 ^ y = 69 (mod 101).
So 5 ^ x = 62 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 48 ^ y is impossible.
-/
theorem diophantine1_5_7_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 48 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 100 = 35) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 48 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (48 ^ y % 101) [69]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 100 = 35, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [62]) [
    {prop := List.Mem (48 ^ y % 101) [69], proof := h10},
    {prop := 5 ^ x + 7 = 48 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [62], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 48 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 49 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 49 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 50 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 50 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 50 ^ y is impossible.
-/
theorem diophantine1_5_7_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 50 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 51 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 51 ^ y,
if x >= 1, 51 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 51 ^ y is impossible.
-/
theorem diophantine1_5_7_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 51 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 51 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 52 ...
-- Trying to disprove y >= 2 with prime factor 2 of 52 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 52 ...
-- Trying to disprove y >= 1 with prime factor 13 of 52 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 52 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 52 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 52 ^ y is impossible.
-/
theorem diophantine1_5_7_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (52 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 52 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 53 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 53 ^ y,
if x >= 2, 53 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175 (mod 180).
Therefore, 53 ^ y = 7, 93, 72, 155, 120, 17, 19, 149, 92 (mod 181).
So 5 ^ x = 0, 86, 65, 148, 113, 10, 12, 142, 85 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 53 ^ y is impossible.
-/
theorem diophantine1_5_7_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 181) [7, 93, 72, 155, 120, 17, 19, 149, 92]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [0, 86, 65, 148, 113, 10, 12, 142, 85]) [
    {prop := List.Mem (53 ^ y % 181) [7, 93, 72, 155, 120, 17, 19, 149, 92], proof := h10},
    {prop := 5 ^ x + 7 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [0, 86, 65, 148, 113, 10, 12, 142, 85], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 54 ...
-- Trying to disprove y >= 1 with prime factor 3 of 54 ...
-- Trying to disprove y >= 2 with prime factor 2 of 54 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 54 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 54 ^ y,
if x >= 1, 54 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 54 ^ y is impossible.
-/
theorem diophantine1_5_7_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 54 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 54 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 54 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 55 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 55 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 55 ^ y is impossible.
-/
theorem diophantine1_5_7_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (55 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 55 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 56 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 56 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 57 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 57 ...
-- Trying to disprove y >= 1 with prime factor 19 of 57 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 57 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 57 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 57 ^ y is impossible.
-/
theorem diophantine1_5_7_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (57 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 57 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 58 ...
-- Trying to disprove y >= 2 with prime factor 2 of 58 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 58 ...
-- Trying to disprove y >= 4 with prime factor 2 of 58 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 58 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 58 ^ y,
if x >= 2, 58 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 58 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 58 ^ y is impossible.
-/
theorem diophantine1_5_7_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 58 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 58 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (58 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (58 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 58 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 58 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 59 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 59 ^ y,
if x >= 1, 59 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 59 ^ y is impossible.
-/
theorem diophantine1_5_7_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 59 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 60 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 60 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 60 ^ y is impossible.
-/
theorem diophantine1_5_7_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 60 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 61 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 61 ^ y,
if x >= 1, 61 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 61 ^ y is impossible.
-/
theorem diophantine1_5_7_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 62 ...
-- Trying to disprove y >= 2 with prime factor 2 of 62 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 62 ...
-- Trying to disprove y >= 4 with prime factor 2 of 62 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 62 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 62 ^ y,
if x >= 2, 62 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
Therefore, 62 ^ y = 10 (mod 101).
So 5 ^ x = 3 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 62 ^ y is impossible.
-/
theorem diophantine1_5_7_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 62 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 62 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (62 ^ y % 101) [10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [3]) [
    {prop := List.Mem (62 ^ y % 101) [10], proof := h10},
    {prop := 5 ^ x + 7 = 62 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 62 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 63 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 63 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 64 ...
-- Trying to disprove y >= 2 with prime factor 2 of 64 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 64 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 64 ^ y,
if x >= 1, 64 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 64 ^ y is impossible.
-/
theorem diophantine1_5_7_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 64 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 64 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 64 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 65 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 65 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 65 ^ y is impossible.
-/
theorem diophantine1_5_7_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 65 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 66 ...
-- Trying to disprove y >= 1 with prime factor 3 of 66 ...
-- Trying to disprove y >= 2 with prime factor 2 of 66 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 66 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 66 ^ y,
if x >= 1, 66 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 66 ^ y is impossible.
-/
theorem diophantine1_5_7_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 66 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 66 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 66 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 67 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 67 ^ y,
if y >= 1, 5 ^ x = 60 (mod 67).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 67 ^ y is impossible.
-/
theorem diophantine1_5_7_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (67 ^ y % 67 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 67 = 60 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 67 = 60, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 67 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 68 ...
-- Trying to disprove y >= 2 with prime factor 2 of 68 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 68 ...
-- Trying to disprove y >= 4 with prime factor 2 of 68 ...
-- Trying to disprove y >= 1 with prime factor 17 of 68 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 68 ...
-- Trying to disprove y >= 6 with prime factor 2 of 68 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 257)   5 ^ x + 7 = 68 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 68 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 (mod 256).
Therefore, 5 ^ x = 139, 178, 215, 59, 168, 21, 99, 173, 118, 79, 42, 198, 89, 236, 158, 84 (mod 257).
So 68 ^ y = 146, 185, 222, 66, 175, 28, 106, 180, 125, 86, 49, 205, 96, 243, 165, 91 (mod 257), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 68 ^ y is impossible.
-/
theorem diophantine1_5_7_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (68 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 257) [139, 178, 215, 59, 168, 21, 99, 173, 118, 79, 42, 198, 89, 236, 158, 84]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (68 ^ y % 257) [146, 185, 222, 66, 175, 28, 106, 180, 125, 86, 49, 205, 96, 243, 165, 91]) [
    {prop := List.Mem (5 ^ x % 257) [139, 178, 215, 59, 168, 21, 99, 173, 118, 79, 42, 198, 89, 236, 158, 84], proof := h10},
    {prop := 5 ^ x + 7 = 68 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (68 ^ y % 257) [146, 185, 222, 66, 175, 28, 106, 180, 125, 86, 49, 205, 96, 243, 165, 91], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 68 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 69 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 69 ^ y,
if x >= 1, 69 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 69 ^ y is impossible.
-/
theorem diophantine1_5_7_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 69 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 69 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 69 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 70 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 70 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 71 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 71 ^ y,
if x >= 1, 71 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 71 ^ y is impossible.
-/
theorem diophantine1_5_7_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 71 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 72 ...
-- Trying to disprove y >= 1 with prime factor 3 of 72 ...
-- Trying to disprove y >= 2 with prime factor 2 of 72 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 72 ...
-- Trying to disprove y >= 2 with prime factor 3 of 72 ...
-- Trying to disprove y >= 4 with prime factor 2 of 72 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 72 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 72 ^ y,
if x >= 2, 72 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1, 5, 9, 13, 17, 21, 25, 29, 33 (mod 36).
Therefore, 72 ^ y = 72, 120, 19, 92, 93, 155, 17, 149, 7 (mod 181).
So 5 ^ x = 65, 113, 12, 85, 86, 148, 10, 142, 0 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 72 ^ y is impossible.
-/
theorem diophantine1_5_7_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 72 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 72 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (72 ^ y % 181) [72, 120, 19, 92, 93, 155, 17, 149, 7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [65, 113, 12, 85, 86, 148, 10, 142, 0]) [
    {prop := List.Mem (72 ^ y % 181) [72, 120, 19, 92, 93, 155, 17, 149, 7], proof := h10},
    {prop := 5 ^ x + 7 = 72 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [65, 113, 12, 85, 86, 148, 10, 142, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 72 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 73 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 73 ^ y,
if x >= 2, 73 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 73 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 73 ^ y is impossible.
-/
theorem diophantine1_5_7_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (73 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 74 ...
-- Trying to disprove y >= 2 with prime factor 2 of 74 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 74 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 74 ^ y,
if x >= 1, 74 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 74 ^ y is impossible.
-/
theorem diophantine1_5_7_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 74 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 74 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 74 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 75 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 75 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 75 ^ y is impossible.
-/
theorem diophantine1_5_7_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 75 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 76 ...
-- Trying to disprove y >= 2 with prime factor 2 of 76 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 76 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 76 ^ y,
if x >= 1, 76 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 76 ^ y is impossible.
-/
theorem diophantine1_5_7_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 76 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 76 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 76 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 77 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 77 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 78 ...
-- Trying to disprove y >= 1 with prime factor 3 of 78 ...
-- Trying to disprove y >= 2 with prime factor 2 of 78 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 78 ...
-- Trying to disprove y >= 2 with prime factor 3 of 78 ...
-- Trying to disprove y >= 1 with prime factor 13 of 78 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 78 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 78 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 78 ^ y is impossible.
-/
theorem diophantine1_5_7_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (78 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 78 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 79 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 79 ^ y,
if x >= 1, 79 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 79 ^ y is impossible.
-/
theorem diophantine1_5_7_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 80 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 80 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 80 ^ y is impossible.
-/
theorem diophantine1_5_7_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 80 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 81 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 81 ^ y,
if x >= 1, 81 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 81 ^ y is impossible.
-/
theorem diophantine1_5_7_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 81 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 81 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 82 ...
-- Trying to disprove y >= 2 with prime factor 2 of 82 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 82 ...
-- Trying to disprove y >= 4 with prime factor 2 of 82 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 82 ...
-- Trying to disprove y >= 1 with prime factor 41 of 82 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 82 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 82 ^ y,
if y >= 1, 5 ^ x = 34 (mod 41).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 82 ^ y is impossible.
-/
theorem diophantine1_5_7_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (82 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 41 = 34 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 41 = 34, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 82 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 83 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 83 ^ y,
if x >= 2, 83 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 83 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 83 ^ y is impossible.
-/
theorem diophantine1_5_7_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (83 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 84 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 84 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 85 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 85 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 85 ^ y is impossible.
-/
theorem diophantine1_5_7_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 85 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 86 ...
-- Trying to disprove y >= 2 with prime factor 2 of 86 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 86 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 86 ^ y,
if x >= 1, 86 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 86 ^ y is impossible.
-/
theorem diophantine1_5_7_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 86 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 86 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 86 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 87 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 3 with prime factor 3 of 87 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   5 ^ x + 7 = 87 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 87 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5 (mod 9).
Therefore, 5 ^ x = 9 (mod 19).
So 87 ^ y = 16 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 87 ^ y is impossible.
-/
theorem diophantine1_5_7_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (87 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 19) [9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (87 ^ y % 19) [16]) [
    {prop := List.Mem (5 ^ x % 19) [9], proof := h10},
    {prop := 5 ^ x + 7 = 87 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (87 ^ y % 19) [16], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 87 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 88 ...
-- Trying to disprove y >= 2 with prime factor 2 of 88 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 88 ...
-- Trying to disprove y >= 1 with prime factor 11 of 88 ...
-- Trying to disprove y >= 4 with prime factor 2 of 88 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 88 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 88 ^ y,
if x >= 2, 88 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 88 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 88 ^ y is impossible.
-/
theorem diophantine1_5_7_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 88 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 88 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (88 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (88 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 88 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 88 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 89 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 89 ^ y,
if x >= 1, 89 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 89 ^ y is impossible.
-/
theorem diophantine1_5_7_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 89 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 90 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 90 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 90 ^ y is impossible.
-/
theorem diophantine1_5_7_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 90 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 91 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 91 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 92 ...
-- Trying to disprove y >= 2 with prime factor 2 of 92 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 92 ...
-- Trying to disprove y >= 4 with prime factor 2 of 92 ...
-- Trying to disprove y >= 1 with prime factor 23 of 92 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 199)   5 ^ x + 7 = 92 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 92 ^ y,
if y >= 1, 5 ^ x = 16 (mod 23).
So x = 8 (mod 22), 
which implies x = 8, 19, 30 (mod 33).
Therefore, 5 ^ x = 187, 90, 121 (mod 199).
So 92 ^ y = 194, 97, 128 (mod 199), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 92 ^ y is impossible.
-/
theorem diophantine1_5_7_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (92 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 22 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 199) [187, 90, 121]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (92 ^ y % 199) [194, 97, 128]) [
    {prop := List.Mem (5 ^ x % 199) [187, 90, 121], proof := h10},
    {prop := 5 ^ x + 7 = 92 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (92 ^ y % 199) [194, 97, 128], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 92 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 93 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 93 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   5 ^ x + 7 = 93 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 93 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 14, 23 (mod 27).
Therefore, 5 ^ x = 73, 21, 15 (mod 109).
So 93 ^ y = 80, 28, 22 (mod 109), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 93 ^ y is impossible.
-/
theorem diophantine1_5_7_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (93 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 109) [73, 21, 15]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (93 ^ y % 109) [80, 28, 22]) [
    {prop := List.Mem (5 ^ x % 109) [73, 21, 15], proof := h10},
    {prop := 5 ^ x + 7 = 93 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (93 ^ y % 109) [80, 28, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 93 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 94 ...
-- Trying to disprove y >= 2 with prime factor 2 of 94 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 94 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 94 ^ y,
if x >= 1, 94 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 94 ^ y is impossible.
-/
theorem diophantine1_5_7_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 94 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 94 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 94 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 95 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 95 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 95 ^ y is impossible.
-/
theorem diophantine1_5_7_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 95 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 96 ...
-- Trying to disprove y >= 1 with prime factor 3 of 96 ...
-- Trying to disprove y >= 2 with prime factor 2 of 96 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 96 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 96 ^ y,
if x >= 1, 96 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 96 ^ y is impossible.
-/
theorem diophantine1_5_7_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 96 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 96 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 96 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 97 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 97 ^ y,
if x >= 2, 97 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165 (mod 180).
Therefore, 97 ^ y = 149, 72, 19, 93, 17, 7, 120, 92, 155 (mod 181).
So 5 ^ x = 142, 65, 12, 86, 10, 0, 113, 85, 148 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 97 ^ y is impossible.
-/
theorem diophantine1_5_7_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 181) [149, 72, 19, 93, 17, 7, 120, 92, 155]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [142, 65, 12, 86, 10, 0, 113, 85, 148]) [
    {prop := List.Mem (97 ^ y % 181) [149, 72, 19, 93, 17, 7, 120, 92, 155], proof := h10},
    {prop := 5 ^ x + 7 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [142, 65, 12, 86, 10, 0, 113, 85, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 98 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 98 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 99 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 99 ^ y,
if x >= 1, 99 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 99 ^ y is impossible.
-/
theorem diophantine1_5_7_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 99 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 99 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 99 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 100 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 100 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 100 ^ y is impossible.
-/
theorem diophantine1_5_7_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 100 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 101 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 101 ^ y,
if x >= 1, 101 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 101 ^ y is impossible.
-/
theorem diophantine1_5_7_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 101 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 102 ...
-- Trying to disprove y >= 1 with prime factor 3 of 102 ...
-- Trying to disprove y >= 2 with prime factor 2 of 102 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 102 ...
-- Trying to disprove y >= 2 with prime factor 3 of 102 ...
-- Trying to disprove y >= 4 with prime factor 2 of 102 ...
-- Trying to disprove y >= 1 with prime factor 17 of 102 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 102 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 102 ^ y,
if x >= 2, 102 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 102 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 102 ^ y is impossible.
-/
theorem diophantine1_5_7_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 102 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 102 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (102 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (102 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 102 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 102 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 103 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 103 ^ y,
if x >= 2, 103 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 103 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 103 ^ y is impossible.
-/
theorem diophantine1_5_7_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (103 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 104 ...
-- Trying to disprove y >= 2 with prime factor 2 of 104 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 104 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 104 ^ y,
if x >= 1, 104 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 104 ^ y is impossible.
-/
theorem diophantine1_5_7_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 104 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 104 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 104 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 105 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 105 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 106 ...
-- Trying to disprove y >= 2 with prime factor 2 of 106 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 106 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 106 ^ y,
if x >= 1, 106 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 106 ^ y is impossible.
-/
theorem diophantine1_5_7_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 106 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 106 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 106 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 107 of 107 ...
-- Trying prime 743...
-- Trying prime 1061...
-- Trying prime 1697...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 1697)   5 ^ x + 7 = 107 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 107 ^ y,
if y >= 1, 5 ^ x = 100 (mod 107).
So x = 90 (mod 106), 
which implies x = 90, 196, 302, 408, 514, 620, 726, 832, 938, 1044, 1150, 1256, 1362, 1468, 1574, 1680 (mod 1696).
Therefore, 5 ^ x = 1542, 1208, 1063, 934, 1381, 503, 1138, 240, 155, 489, 634, 763, 316, 1194, 559, 1457 (mod 1697).
So 107 ^ y = 1549, 1215, 1070, 941, 1388, 510, 1145, 247, 162, 496, 641, 770, 323, 1201, 566, 1464 (mod 1697), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 107 ^ y is impossible.
-/
theorem diophantine1_5_7_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (107 ^ y % 107 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 107 = 100 := by omega
  have h9 := Claim (x % 106 = 90) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 107 = 100, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 1697) [1542, 1208, 1063, 934, 1381, 503, 1138, 240, 155, 489, 634, 763, 316, 1194, 559, 1457]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 106 = 90, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (107 ^ y % 1697) [1549, 1215, 1070, 941, 1388, 510, 1145, 247, 162, 496, 641, 770, 323, 1201, 566, 1464]) [
    {prop := List.Mem (5 ^ x % 1697) [1542, 1208, 1063, 934, 1381, 503, 1138, 240, 155, 489, 634, 763, 316, 1194, 559, 1457], proof := h10},
    {prop := 5 ^ x + 7 = 107 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (107 ^ y % 1697) [1549, 1215, 1070, 941, 1388, 510, 1145, 247, 162, 496, 641, 770, 323, 1201, 566, 1464], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 107 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 108 ...
-- Trying to disprove y >= 1 with prime factor 3 of 108 ...
-- Trying to disprove y >= 2 with prime factor 2 of 108 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 108 ...
-- Trying to disprove y >= 2 with prime factor 3 of 108 ...
-- Trying to disprove y >= 4 with prime factor 2 of 108 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove y >= 3 with prime factor 3 of 108 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   5 ^ x + 7 = 108 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 108 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 23 (mod 36).
Therefore, 5 ^ x = 17, 20 (mod 37).
So 108 ^ y = 24, 27 (mod 37), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 108 ^ y is impossible.
-/
theorem diophantine1_5_7_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (108 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 37) [17, 20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (108 ^ y % 37) [24, 27]) [
    {prop := List.Mem (5 ^ x % 37) [17, 20], proof := h10},
    {prop := 5 ^ x + 7 = 108 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (108 ^ y % 37) [24, 27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 108 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 109 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 109 ^ y,
if x >= 1, 109 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 109 ^ y is impossible.
-/
theorem diophantine1_5_7_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 110 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 110 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 110 ^ y is impossible.
-/
theorem diophantine1_5_7_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 110 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 111 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 111 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 111 ^ y,
if x >= 1, 111 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 111 ^ y is impossible.
-/
theorem diophantine1_5_7_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 111 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 111 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 111 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 112 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 112 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (112 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 113 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 113 ^ y,
if x >= 2, 113 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 113 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 113 ^ y is impossible.
-/
theorem diophantine1_5_7_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (113 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 113 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 114 ...
-- Trying to disprove y >= 1 with prime factor 3 of 114 ...
-- Trying to disprove y >= 2 with prime factor 2 of 114 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 114 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 114 ^ y,
if x >= 1, 114 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 114 ^ y is impossible.
-/
theorem diophantine1_5_7_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 114 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 114 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 114 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 115 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 115 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 115 ^ y is impossible.
-/
theorem diophantine1_5_7_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (115 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 115 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 116 ...
-- Trying to disprove y >= 2 with prime factor 2 of 116 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 116 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 116 ^ y,
if x >= 1, 116 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 116 ^ y is impossible.
-/
theorem diophantine1_5_7_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 116 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 116 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 116 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 117 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 117 ...
-- Trying to disprove y >= 1 with prime factor 13 of 117 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 117 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 117 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 117 ^ y is impossible.
-/
theorem diophantine1_5_7_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (117 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 117 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 118 ...
-- Trying to disprove y >= 2 with prime factor 2 of 118 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 118 ...
-- Trying to disprove y >= 4 with prime factor 2 of 118 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 118 ...
-- Trying to disprove y >= 1 with prime factor 59 of 118 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 118 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 118 ^ y,
if y >= 1, 5 ^ x = 52 (mod 59).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 118 ^ y is impossible.
-/
theorem diophantine1_5_7_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (118 ^ y % 59 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 59 = 52 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 59 = 52, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 118 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 119 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 119 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 120 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 120 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 120 ^ y is impossible.
-/
theorem diophantine1_5_7_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 120 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 121 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 121 ^ y,
if x >= 1, 121 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 121 ^ y is impossible.
-/
theorem diophantine1_5_7_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 122 ...
-- Trying to disprove y >= 2 with prime factor 2 of 122 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 122 ...
-- Trying to disprove y >= 4 with prime factor 2 of 122 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 122 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 122 ^ y,
if x >= 2, 122 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 122 ^ y = 180 (mod 181).
So 5 ^ x = 173 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 122 ^ y is impossible.
-/
theorem diophantine1_5_7_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 122 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 122 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (122 ^ y % 181) [180]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [173]) [
    {prop := List.Mem (122 ^ y % 181) [180], proof := h10},
    {prop := 5 ^ x + 7 = 122 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [173], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 122 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 123 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 123 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 123 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 123 ^ y,
if x >= 2, 123 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55 (mod 60).
Therefore, 123 ^ y = 64, 181, 237 (mod 241).
So 5 ^ x = 57, 174, 230 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 123 ^ y is impossible.
-/
theorem diophantine1_5_7_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 123 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 123 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (123 ^ y % 241) [64, 181, 237]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [57, 174, 230]) [
    {prop := List.Mem (123 ^ y % 241) [64, 181, 237], proof := h10},
    {prop := 5 ^ x + 7 = 123 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [57, 174, 230], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 123 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 124 ...
-- Trying to disprove y >= 2 with prime factor 2 of 124 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 124 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 124 ^ y,
if x >= 1, 124 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 124 ^ y is impossible.
-/
theorem diophantine1_5_7_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 124 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 124 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 124 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 125 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 125 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 125 ^ y is impossible.
-/
theorem diophantine1_5_7_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 125 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 126 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 126 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 127 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 127 ^ y,
if x >= 2, 127 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165 (mod 180).
Therefore, 127 ^ y = 120, 17, 19, 149, 92, 7, 93, 72, 155 (mod 181).
So 5 ^ x = 113, 10, 12, 142, 85, 0, 86, 65, 148 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 127 ^ y is impossible.
-/
theorem diophantine1_5_7_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (127 ^ y % 181) [120, 17, 19, 149, 92, 7, 93, 72, 155]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [113, 10, 12, 142, 85, 0, 86, 65, 148]) [
    {prop := List.Mem (127 ^ y % 181) [120, 17, 19, 149, 92, 7, 93, 72, 155], proof := h10},
    {prop := 5 ^ x + 7 = 127 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [113, 10, 12, 142, 85, 0, 86, 65, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 127 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 128 ...
-- Trying to disprove y >= 2 with prime factor 2 of 128 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 128 ...
-- Trying to disprove y >= 4 with prime factor 2 of 128 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 601...
-- Trying prime 641...
-- Trying prime 661...
-- Trying prime 701...
-- Trying prime 761...
-- Trying prime 821...
-- Trying prime 881...
-- Trying prime 941...
-- Trying prime 1021...
-- Trying prime 1061...
-- Trying prime 1181...
-- Trying prime 1201...
-- Trying prime 1301...
-- Trying prime 1321...
-- Trying to disprove y >= 5 with prime factor 2 of 128 ...
-- Trying to disprove y >= 6 with prime factor 2 of 128 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 257)   5 ^ x + 7 = 128 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 128 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 (mod 256).
Therefore, 5 ^ x = 139, 178, 215, 59, 168, 21, 99, 173, 118, 79, 42, 198, 89, 236, 158, 84 (mod 257).
So 128 ^ y = 146, 185, 222, 66, 175, 28, 106, 180, 125, 86, 49, 205, 96, 243, 165, 91 (mod 257), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 128 ^ y is impossible.
-/
theorem diophantine1_5_7_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (128 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 257) [139, 178, 215, 59, 168, 21, 99, 173, 118, 79, 42, 198, 89, 236, 158, 84]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (128 ^ y % 257) [146, 185, 222, 66, 175, 28, 106, 180, 125, 86, 49, 205, 96, 243, 165, 91]) [
    {prop := List.Mem (5 ^ x % 257) [139, 178, 215, 59, 168, 21, 99, 173, 118, 79, 42, 198, 89, 236, 158, 84], proof := h10},
    {prop := 5 ^ x + 7 = 128 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (128 ^ y % 257) [146, 185, 222, 66, 175, 28, 106, 180, 125, 86, 49, 205, 96, 243, 165, 91], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 128 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 129 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 129 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 129 ^ y,
if x >= 1, 129 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 129 ^ y is impossible.
-/
theorem diophantine1_5_7_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 129 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 129 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 129 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 130 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 130 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 130 ^ y is impossible.
-/
theorem diophantine1_5_7_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 130 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 131 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 131 ^ y,
if x >= 1, 131 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 131 ^ y is impossible.
-/
theorem diophantine1_5_7_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 131 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 132 ...
-- Trying to disprove y >= 3 with prime factor 2 of 132 ...
-- Trying to disprove y >= 2 with prime factor 3 of 132 ...
-- Trying to disprove y >= 4 with prime factor 2 of 132 ...
-- Trying to disprove y >= 3 with prime factor 3 of 132 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   5 ^ x + 7 = 132 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 132 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5 (mod 9).
Therefore, 5 ^ x = 9 (mod 19).
So 132 ^ y = 16 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_5_7_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 132 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (132 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 19) [9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (132 ^ y % 19) [16]) [
    {prop := List.Mem (5 ^ x % 19) [9], proof := h10},
    {prop := 5 ^ x + 7 = 132 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (132 ^ y % 19) [16], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 132 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 133 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 133 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (133 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 134 ...
-- Trying to disprove y >= 2 with prime factor 2 of 134 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 134 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 134 ^ y,
if x >= 1, 134 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 134 ^ y is impossible.
-/
theorem diophantine1_5_7_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 134 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 134 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 134 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 135 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 135 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 135 ^ y is impossible.
-/
theorem diophantine1_5_7_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (135 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 135 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 136 ...
-- Trying to disprove y >= 2 with prime factor 2 of 136 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 136 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 136 ^ y,
if x >= 1, 136 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 136 ^ y is impossible.
-/
theorem diophantine1_5_7_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 136 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 136 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 136 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 137 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 137 ^ y,
if x >= 2, 137 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 137 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 137 ^ y is impossible.
-/
theorem diophantine1_5_7_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (137 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 137 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 138 ...
-- Trying to disprove y >= 1 with prime factor 3 of 138 ...
-- Trying to disprove y >= 2 with prime factor 2 of 138 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 138 ...
-- Trying to disprove y >= 2 with prime factor 3 of 138 ...
-- Trying to disprove y >= 4 with prime factor 2 of 138 ...
-- Trying to disprove y >= 1 with prime factor 23 of 138 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 199)   5 ^ x + 7 = 138 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 138 ^ y,
if y >= 1, 5 ^ x = 16 (mod 23).
So x = 8 (mod 22), 
which implies x = 8, 19, 30 (mod 33).
Therefore, 5 ^ x = 187, 90, 121 (mod 199).
So 138 ^ y = 194, 97, 128 (mod 199), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 138 ^ y is impossible.
-/
theorem diophantine1_5_7_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (138 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 22 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 199) [187, 90, 121]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (138 ^ y % 199) [194, 97, 128]) [
    {prop := List.Mem (5 ^ x % 199) [187, 90, 121], proof := h10},
    {prop := 5 ^ x + 7 = 138 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (138 ^ y % 199) [194, 97, 128], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 138 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 139 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 139 ^ y,
if x >= 1, 139 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 139 ^ y is impossible.
-/
theorem diophantine1_5_7_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 139 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 140 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 140 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (140 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 141 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 141 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 141 ^ y,
if x >= 1, 141 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 141 ^ y is impossible.
-/
theorem diophantine1_5_7_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 141 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 141 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 141 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 142 ...
-- Trying to disprove y >= 2 with prime factor 2 of 142 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 142 ...
-- Trying to disprove y >= 4 with prime factor 2 of 142 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 142 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 142 ^ y,
if x >= 2, 142 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 142 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 142 ^ y is impossible.
-/
theorem diophantine1_5_7_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 142 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 142 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (142 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (142 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 142 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 142 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Trying to disprove y >= 1 with prime factor 13 of 143 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 143 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 143 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 143 ^ y is impossible.
-/
theorem diophantine1_5_7_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 144 ...
-- Trying to disprove y >= 1 with prime factor 3 of 144 ...
-- Trying to disprove y >= 2 with prime factor 2 of 144 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 144 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 144 ^ y,
if x >= 1, 144 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 144 ^ y is impossible.
-/
theorem diophantine1_5_7_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 144 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 144 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 144 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 145 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 145 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 145 ^ y is impossible.
-/
theorem diophantine1_5_7_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 145 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 146 ...
-- Trying to disprove y >= 2 with prime factor 2 of 146 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 146 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 146 ^ y,
if x >= 1, 146 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 146 ^ y is impossible.
-/
theorem diophantine1_5_7_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 146 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 146 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 146 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 147 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 147 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (147 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 148 ...
-- Trying to disprove y >= 2 with prime factor 2 of 148 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 148 ...
-- Trying to disprove y >= 4 with prime factor 2 of 148 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 148 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 148 ^ y,
if x >= 2, 148 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75 (mod 80).
Therefore, 148 ^ y = 126, 111, 115, 130 (mod 241).
So 5 ^ x = 119, 104, 108, 123 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 148 ^ y is impossible.
-/
theorem diophantine1_5_7_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 148 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 148 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (148 ^ y % 241) [126, 111, 115, 130]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [119, 104, 108, 123]) [
    {prop := List.Mem (148 ^ y % 241) [126, 111, 115, 130], proof := h10},
    {prop := 5 ^ x + 7 = 148 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [119, 104, 108, 123], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 148 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 149 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 149 ^ y,
if x >= 1, 149 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 149 ^ y is impossible.
-/
theorem diophantine1_5_7_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 149 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 150 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 150 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 150 ^ y is impossible.
-/
theorem diophantine1_5_7_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (150 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 150 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 151 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 151 ^ y,
if x >= 1, 151 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 151 ^ y is impossible.
-/
theorem diophantine1_5_7_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 151 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 152 ...
-- Trying to disprove y >= 2 with prime factor 2 of 152 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 152 ...
-- Trying to disprove y >= 4 with prime factor 2 of 152 ...
-- Trying to disprove y >= 1 with prime factor 19 of 152 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 152 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 152 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 152 ^ y is impossible.
-/
theorem diophantine1_5_7_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (152 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 152 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 153 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 153 ...
-- Trying to disprove y >= 1 with prime factor 17 of 153 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   5 ^ x + 7 = 153 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 153 ^ y,
if y >= 1, 5 ^ x = 10 (mod 17).
So x = 7 (mod 16), 
which implies x = 7, 15, 23, 31, 39 (mod 40).
Therefore, 5 ^ x = 41, 211, 116, 162, 193 (mod 241).
So 153 ^ y = 48, 218, 123, 169, 200 (mod 241), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 153 ^ y is impossible.
-/
theorem diophantine1_5_7_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (153 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 10 := by omega
  have h9 := Claim (x % 16 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 241) [41, 211, 116, 162, 193]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (153 ^ y % 241) [48, 218, 123, 169, 200]) [
    {prop := List.Mem (5 ^ x % 241) [41, 211, 116, 162, 193], proof := h10},
    {prop := 5 ^ x + 7 = 153 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (153 ^ y % 241) [48, 218, 123, 169, 200], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 153 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 154 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 154 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (154 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 155 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 155 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 155 ^ y is impossible.
-/
theorem diophantine1_5_7_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 155 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 156 ...
-- Trying to disprove y >= 1 with prime factor 3 of 156 ...
-- Trying to disprove y >= 2 with prime factor 2 of 156 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 156 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 156 ^ y,
if x >= 1, 156 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 156 ^ y is impossible.
-/
theorem diophantine1_5_7_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 156 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 156 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 156 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 157 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 157 ^ y,
if x >= 3, 157 ^ y = 7 (mod 125).
So y = 17 (mod 20), 
which implies y = 17, 37, 57, 77, 97, 117, 137, 157, 177 (mod 180).
Therefore, 157 ^ y = 47, 18, 30, 50, 23, 159, 84, 140, 173 (mod 181).
So 5 ^ x = 40, 11, 23, 43, 16, 152, 77, 133, 166 (mod 181), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 157 ^ y is impossible.
-/
theorem diophantine1_5_7_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 20 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 181) [47, 18, 30, 50, 23, 159, 84, 140, 173]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [40, 11, 23, 43, 16, 152, 77, 133, 166]) [
    {prop := List.Mem (157 ^ y % 181) [47, 18, 30, 50, 23, 159, 84, 140, 173], proof := h10},
    {prop := 5 ^ x + 7 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [40, 11, 23, 43, 16, 152, 77, 133, 166], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 157 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 158 ...
-- Trying to disprove y >= 2 with prime factor 2 of 158 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 158 ...
-- Trying to disprove y >= 4 with prime factor 2 of 158 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 158 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 158 ^ y,
if x >= 2, 158 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55 (mod 60).
Therefore, 158 ^ y = 64, 237, 181 (mod 241).
So 5 ^ x = 57, 230, 174 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 158 ^ y is impossible.
-/
theorem diophantine1_5_7_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 158 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 158 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (158 ^ y % 241) [64, 237, 181]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [57, 230, 174]) [
    {prop := List.Mem (158 ^ y % 241) [64, 237, 181], proof := h10},
    {prop := 5 ^ x + 7 = 158 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [57, 230, 174], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 158 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 159 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 159 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 159 ^ y,
if x >= 1, 159 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 159 ^ y is impossible.
-/
theorem diophantine1_5_7_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 159 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 159 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 159 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 160 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 160 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 160 ^ y is impossible.
-/
theorem diophantine1_5_7_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 160 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 161 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 161 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 162 ...
-- Trying to disprove y >= 1 with prime factor 3 of 162 ...
-- Trying to disprove y >= 2 with prime factor 2 of 162 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 162 ...
-- Trying to disprove y >= 2 with prime factor 3 of 162 ...
-- Trying to disprove y >= 4 with prime factor 2 of 162 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 162 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 162 ^ y,
if x >= 2, 162 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1 (mod 4).
Therefore, 162 ^ y = 162 (mod 181).
So 5 ^ x = 155 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 162 ^ y is impossible.
-/
theorem diophantine1_5_7_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 162 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 162 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (162 ^ y % 181) [162]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [155]) [
    {prop := List.Mem (162 ^ y % 181) [162], proof := h10},
    {prop := 5 ^ x + 7 = 162 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [155], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 162 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 163 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 163 ^ y,
if x >= 2, 163 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 163 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 163 ^ y is impossible.
-/
theorem diophantine1_5_7_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (163 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 163 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 164 ...
-- Trying to disprove y >= 2 with prime factor 2 of 164 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 164 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 164 ^ y,
if x >= 1, 164 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 164 ^ y is impossible.
-/
theorem diophantine1_5_7_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 164 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 164 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 164 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 165 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 165 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 165 ^ y is impossible.
-/
theorem diophantine1_5_7_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (165 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 165 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 166 ...
-- Trying to disprove y >= 2 with prime factor 2 of 166 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 166 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 166 ^ y,
if x >= 1, 166 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 166 ^ y is impossible.
-/
theorem diophantine1_5_7_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 166 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 166 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 166 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 167 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 167 ^ y,
if x >= 2, 167 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165, 185, 205, 225 (mod 240).
Therefore, 167 ^ y = 153, 22, 115, 152, 203, 130, 88, 219, 126, 89, 38, 111 (mod 241).
So 5 ^ x = 146, 15, 108, 145, 196, 123, 81, 212, 119, 82, 31, 104 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 167 ^ y is impossible.
-/
theorem diophantine1_5_7_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 241) [153, 22, 115, 152, 203, 130, 88, 219, 126, 89, 38, 111]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [146, 15, 108, 145, 196, 123, 81, 212, 119, 82, 31, 104]) [
    {prop := List.Mem (167 ^ y % 241) [153, 22, 115, 152, 203, 130, 88, 219, 126, 89, 38, 111], proof := h10},
    {prop := 5 ^ x + 7 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [146, 15, 108, 145, 196, 123, 81, 212, 119, 82, 31, 104], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 167 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 168 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 168 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 169 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 169 ^ y,
if x >= 1, 169 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 169 ^ y is impossible.
-/
theorem diophantine1_5_7_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 169 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 170 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 170 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 170 ^ y is impossible.
-/
theorem diophantine1_5_7_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 170 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 171 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 171 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 171 ^ y,
if x >= 1, 171 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 171 ^ y is impossible.
-/
theorem diophantine1_5_7_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 171 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 171 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 171 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 172 ...
-- Trying to disprove y >= 2 with prime factor 2 of 172 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 172 ...
-- Trying to disprove y >= 4 with prime factor 2 of 172 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 172 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 172 ^ y,
if x >= 2, 172 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1 (mod 4).
Therefore, 172 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 172 ^ y is impossible.
-/
theorem diophantine1_5_7_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 172 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 172 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (172 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (172 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 172 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 172 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 173 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 173 ^ y,
if x >= 2, 173 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55 (mod 60).
Therefore, 173 ^ y = 19, 7, 155 (mod 181).
So 5 ^ x = 12, 0, 148 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 173 ^ y is impossible.
-/
theorem diophantine1_5_7_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 181) [19, 7, 155]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [12, 0, 148]) [
    {prop := List.Mem (173 ^ y % 181) [19, 7, 155], proof := h10},
    {prop := 5 ^ x + 7 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [12, 0, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 173 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 174 ...
-- Trying to disprove y >= 1 with prime factor 3 of 174 ...
-- Trying to disprove y >= 2 with prime factor 2 of 174 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 174 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 174 ^ y,
if x >= 1, 174 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 174 ^ y is impossible.
-/
theorem diophantine1_5_7_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 174 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 174 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 174 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 175 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 175 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (175 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 176 ...
-- Trying to disprove y >= 2 with prime factor 2 of 176 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 176 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 176 ^ y,
if x >= 1, 176 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 176 ^ y is impossible.
-/
theorem diophantine1_5_7_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 176 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 176 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 176 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 177 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 177 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 177 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 177 ^ y,
if x >= 2, 177 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1 (mod 4).
Therefore, 177 ^ y = 177 (mod 241).
So 5 ^ x = 170 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 177 ^ y is impossible.
-/
theorem diophantine1_5_7_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 177 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 177 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (177 ^ y % 241) [177]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [170]) [
    {prop := List.Mem (177 ^ y % 241) [177], proof := h10},
    {prop := 5 ^ x + 7 = 177 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [170], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 177 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 178 ...
-- Trying to disprove y >= 2 with prime factor 2 of 178 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 178 ...
-- Trying to disprove y >= 4 with prime factor 2 of 178 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 178 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 178 ^ y,
if x >= 2, 178 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 178 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 178 ^ y is impossible.
-/
theorem diophantine1_5_7_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 178 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 178 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (178 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (178 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 178 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 178 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 179 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 179 ^ y,
if x >= 1, 179 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 179 ^ y is impossible.
-/
theorem diophantine1_5_7_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 179 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 180 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 180 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 180 ^ y is impossible.
-/
theorem diophantine1_5_7_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (180 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 180 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 181 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 181 ^ y,
if x >= 1, 181 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 181 ^ y is impossible.
-/
theorem diophantine1_5_7_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 181 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 182 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 182 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (182 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 183 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 183 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 183 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 183 ^ y,
if x >= 2, 183 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175 (mod 180).
Therefore, 183 ^ y = 7, 120, 92, 155, 149, 72, 19, 93, 17 (mod 181).
So 5 ^ x = 0, 113, 85, 148, 142, 65, 12, 86, 10 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 183 ^ y is impossible.
-/
theorem diophantine1_5_7_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 183 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 183 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (183 ^ y % 181) [7, 120, 92, 155, 149, 72, 19, 93, 17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [0, 113, 85, 148, 142, 65, 12, 86, 10]) [
    {prop := List.Mem (183 ^ y % 181) [7, 120, 92, 155, 149, 72, 19, 93, 17], proof := h10},
    {prop := 5 ^ x + 7 = 183 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [0, 113, 85, 148, 142, 65, 12, 86, 10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 183 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 184 ...
-- Trying to disprove y >= 2 with prime factor 2 of 184 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 184 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 184 ^ y,
if x >= 1, 184 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 184 ^ y is impossible.
-/
theorem diophantine1_5_7_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 184 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 184 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 184 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 185 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 185 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 185 ^ y is impossible.
-/
theorem diophantine1_5_7_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 185 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 186 ...
-- Trying to disprove y >= 1 with prime factor 3 of 186 ...
-- Trying to disprove y >= 2 with prime factor 2 of 186 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 186 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 186 ^ y,
if x >= 1, 186 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 186 ^ y is impossible.
-/
theorem diophantine1_5_7_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 186 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 186 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 186 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Trying to disprove y >= 1 with prime factor 17 of 187 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   5 ^ x + 7 = 187 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 187 ^ y,
if y >= 1, 5 ^ x = 10 (mod 17).
So x = 7 (mod 16), 
which implies x = 7, 15, 23, 31, 39 (mod 40).
Therefore, 5 ^ x = 41, 211, 116, 162, 193 (mod 241).
So 187 ^ y = 48, 218, 123, 169, 200 (mod 241), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 187 ^ y is impossible.
-/
theorem diophantine1_5_7_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 10 := by omega
  have h9 := Claim (x % 16 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 241) [41, 211, 116, 162, 193]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 241) [48, 218, 123, 169, 200]) [
    {prop := List.Mem (5 ^ x % 241) [41, 211, 116, 162, 193], proof := h10},
    {prop := 5 ^ x + 7 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 241) [48, 218, 123, 169, 200], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 188 ...
-- Trying to disprove y >= 2 with prime factor 2 of 188 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 188 ...
-- Trying to disprove y >= 4 with prime factor 2 of 188 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 188 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 188 ^ y,
if x >= 2, 188 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3, 7, 11 (mod 12).
Therefore, 188 ^ y = 162, 174, 26 (mod 181).
So 5 ^ x = 155, 167, 19 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 188 ^ y is impossible.
-/
theorem diophantine1_5_7_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 188 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 188 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (188 ^ y % 181) [162, 174, 26]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [155, 167, 19]) [
    {prop := List.Mem (188 ^ y % 181) [162, 174, 26], proof := h10},
    {prop := 5 ^ x + 7 = 188 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [155, 167, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 188 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 189 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 189 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (189 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 190 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 190 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 190 ^ y is impossible.
-/
theorem diophantine1_5_7_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 190 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 191 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 191 ^ y,
if x >= 1, 191 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 191 ^ y is impossible.
-/
theorem diophantine1_5_7_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 191 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 192 ...
-- Trying to disprove y >= 1 with prime factor 3 of 192 ...
-- Trying to disprove y >= 2 with prime factor 2 of 192 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 192 ...
-- Trying to disprove y >= 2 with prime factor 3 of 192 ...
-- Trying to disprove y >= 4 with prime factor 2 of 192 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 192 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 192 ^ y,
if x >= 2, 192 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 192 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 192 ^ y is impossible.
-/
theorem diophantine1_5_7_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 192 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 192 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (192 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (192 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 192 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 192 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 193 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 193 ^ y,
if x >= 3, 193 ^ y = 7 (mod 125).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 193 ^ y is impossible.
-/
theorem diophantine1_5_7_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 125 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 193 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 194 ...
-- Trying to disprove y >= 2 with prime factor 2 of 194 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 194 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 194 ^ y,
if x >= 1, 194 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 194 ^ y is impossible.
-/
theorem diophantine1_5_7_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 194 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 194 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 194 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 195 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 195 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 195 ^ y is impossible.
-/
theorem diophantine1_5_7_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (195 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 195 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 196 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 196 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (196 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 197 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 197 ^ y,
if x >= 2, 197 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1, 5, 9, 13 (mod 16).
Therefore, 197 ^ y = 197, 76, 44, 165 (mod 241).
So 5 ^ x = 190, 69, 37, 158 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 197 ^ y is impossible.
-/
theorem diophantine1_5_7_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 241) [197, 76, 44, 165]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [190, 69, 37, 158]) [
    {prop := List.Mem (197 ^ y % 241) [197, 76, 44, 165], proof := h10},
    {prop := 5 ^ x + 7 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [190, 69, 37, 158], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 198 ...
-- Trying to disprove y >= 1 with prime factor 3 of 198 ...
-- Trying to disprove y >= 2 with prime factor 2 of 198 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 198 ...
-- Trying to disprove y >= 2 with prime factor 3 of 198 ...
-- Trying to disprove y >= 1 with prime factor 11 of 198 ...
-- Trying to disprove y >= 4 with prime factor 2 of 198 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 198 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 198 ^ y,
if x >= 2, 198 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 198 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 198 ^ y is impossible.
-/
theorem diophantine1_5_7_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 198 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 198 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (198 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (198 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 198 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 198 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 199 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 199 ^ y,
if x >= 1, 199 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 199 ^ y is impossible.
-/
theorem diophantine1_5_7_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 199 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 200 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 200 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 200 ^ y is impossible.
-/
theorem diophantine1_5_7_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 200 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 201 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 201 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 201 ^ y,
if x >= 1, 201 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 201 ^ y is impossible.
-/
theorem diophantine1_5_7_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 201 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 201 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 201 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 202 ...
-- Trying to disprove y >= 2 with prime factor 2 of 202 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 202 ...
-- Trying to disprove y >= 4 with prime factor 2 of 202 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 202 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 202 ^ y,
if x >= 2, 202 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165 (mod 180).
Therefore, 202 ^ y = 17, 93, 19, 72, 149, 155, 92, 120, 7 (mod 181).
So 5 ^ x = 10, 86, 12, 65, 142, 148, 85, 113, 0 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 202 ^ y is impossible.
-/
theorem diophantine1_5_7_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 202 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 202 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (202 ^ y % 181) [17, 93, 19, 72, 149, 155, 92, 120, 7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [10, 86, 12, 65, 142, 148, 85, 113, 0]) [
    {prop := List.Mem (202 ^ y % 181) [17, 93, 19, 72, 149, 155, 92, 120, 7], proof := h10},
    {prop := 5 ^ x + 7 = 202 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [10, 86, 12, 65, 142, 148, 85, 113, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 202 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 203 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 203 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 204 ...
-- Trying to disprove y >= 1 with prime factor 3 of 204 ...
-- Trying to disprove y >= 2 with prime factor 2 of 204 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 204 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 204 ^ y,
if x >= 1, 204 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 204 ^ y is impossible.
-/
theorem diophantine1_5_7_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 204 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 204 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 204 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 205 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 205 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 205 ^ y is impossible.
-/
theorem diophantine1_5_7_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 205 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 206 ...
-- Trying to disprove y >= 2 with prime factor 2 of 206 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 206 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 206 ^ y,
if x >= 1, 206 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 206 ^ y is impossible.
-/
theorem diophantine1_5_7_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 206 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 206 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 206 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 207 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 207 ...
-- Trying to disprove y >= 1 with prime factor 23 of 207 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 199)   5 ^ x + 7 = 207 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 207 ^ y,
if y >= 1, 5 ^ x = 16 (mod 23).
So x = 8 (mod 22), 
which implies x = 8, 19, 30 (mod 33).
Therefore, 5 ^ x = 187, 90, 121 (mod 199).
So 207 ^ y = 194, 97, 128 (mod 199), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 207 ^ y is impossible.
-/
theorem diophantine1_5_7_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (207 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 22 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 199) [187, 90, 121]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (207 ^ y % 199) [194, 97, 128]) [
    {prop := List.Mem (5 ^ x % 199) [187, 90, 121], proof := h10},
    {prop := 5 ^ x + 7 = 207 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (207 ^ y % 199) [194, 97, 128], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 207 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 208 ...
-- Trying to disprove y >= 2 with prime factor 2 of 208 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 208 ...
-- Trying to disprove y >= 1 with prime factor 13 of 208 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 208 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 208 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 208 ^ y is impossible.
-/
theorem diophantine1_5_7_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (208 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 208 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 209 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 209 ^ y,
if x >= 1, 209 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 209 ^ y is impossible.
-/
theorem diophantine1_5_7_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 209 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 209 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 209 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 210 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 210 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 211 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 211 ^ y,
if x >= 1, 211 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 211 ^ y is impossible.
-/
theorem diophantine1_5_7_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 211 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 212 ...
-- Trying to disprove y >= 2 with prime factor 2 of 212 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 212 ...
-- Trying to disprove y >= 4 with prime factor 2 of 212 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 212 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 212 ^ y,
if x >= 2, 212 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1 (mod 4).
Therefore, 212 ^ y = 10 (mod 101).
So 5 ^ x = 3 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 212 ^ y is impossible.
-/
theorem diophantine1_5_7_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 212 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 212 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (212 ^ y % 101) [10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [3]) [
    {prop := List.Mem (212 ^ y % 101) [10], proof := h10},
    {prop := 5 ^ x + 7 = 212 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 212 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 213 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 213 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 213 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 213 ^ y,
if x >= 2, 213 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3, 7, 11, 15, 19, 23, 27, 31, 35 (mod 36).
Therefore, 213 ^ y = 7, 120, 92, 155, 149, 72, 19, 93, 17 (mod 181).
So 5 ^ x = 0, 113, 85, 148, 142, 65, 12, 86, 10 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 213 ^ y is impossible.
-/
theorem diophantine1_5_7_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 213 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 213 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (213 ^ y % 181) [7, 120, 92, 155, 149, 72, 19, 93, 17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [0, 113, 85, 148, 142, 65, 12, 86, 10]) [
    {prop := List.Mem (213 ^ y % 181) [7, 120, 92, 155, 149, 72, 19, 93, 17], proof := h10},
    {prop := 5 ^ x + 7 = 213 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [0, 113, 85, 148, 142, 65, 12, 86, 10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 213 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 214 ...
-- Trying to disprove y >= 2 with prime factor 2 of 214 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 214 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 214 ^ y,
if x >= 1, 214 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 214 ^ y is impossible.
-/
theorem diophantine1_5_7_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 214 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 214 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 214 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 215 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 215 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 215 ^ y is impossible.
-/
theorem diophantine1_5_7_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 215 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 216 ...
-- Trying to disprove y >= 1 with prime factor 3 of 216 ...
-- Trying to disprove y >= 2 with prime factor 2 of 216 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 216 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 216 ^ y,
if x >= 1, 216 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 216 ^ y is impossible.
-/
theorem diophantine1_5_7_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 216 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 216 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 216 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 217 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 217 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (217 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 218 ...
-- Trying to disprove y >= 2 with prime factor 2 of 218 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 218 ...
-- Trying to disprove y >= 4 with prime factor 2 of 218 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 218 ...
-- Trying to disprove y >= 6 with prime factor 2 of 218 ...
-- Trying prime 17...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   5 ^ x + 7 = 218 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 218 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58, 74, 90 (mod 96).
Therefore, 5 ^ x = 53, 65, 12, 44, 32, 85 (mod 97).
So 218 ^ y = 60, 72, 19, 51, 39, 92 (mod 97), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 218 ^ y is impossible.
-/
theorem diophantine1_5_7_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (218 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 97) [53, 65, 12, 44, 32, 85]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (218 ^ y % 97) [60, 72, 19, 51, 39, 92]) [
    {prop := List.Mem (5 ^ x % 97) [53, 65, 12, 44, 32, 85], proof := h10},
    {prop := 5 ^ x + 7 = 218 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (218 ^ y % 97) [60, 72, 19, 51, 39, 92], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 218 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 219 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 219 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 219 ^ y,
if x >= 1, 219 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 219 ^ y is impossible.
-/
theorem diophantine1_5_7_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 219 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 219 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 219 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 220 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 220 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 220 ^ y is impossible.
-/
theorem diophantine1_5_7_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 220 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 221 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 221 ^ y,
if x >= 1, 221 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 221 ^ y is impossible.
-/
theorem diophantine1_5_7_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 221 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 221 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 221 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 222 ...
-- Trying to disprove y >= 1 with prime factor 3 of 222 ...
-- Trying to disprove y >= 2 with prime factor 2 of 222 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 222 ...
-- Trying to disprove y >= 2 with prime factor 3 of 222 ...
-- Trying to disprove y >= 4 with prime factor 2 of 222 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 222 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 222 ^ y,
if x >= 2, 222 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165 (mod 180).
Therefore, 222 ^ y = 92, 149, 19, 17, 120, 155, 72, 93, 7 (mod 181).
So 5 ^ x = 85, 142, 12, 10, 113, 148, 65, 86, 0 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 222 ^ y is impossible.
-/
theorem diophantine1_5_7_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 222 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 222 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (222 ^ y % 181) [92, 149, 19, 17, 120, 155, 72, 93, 7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [85, 142, 12, 10, 113, 148, 65, 86, 0]) [
    {prop := List.Mem (222 ^ y % 181) [92, 149, 19, 17, 120, 155, 72, 93, 7], proof := h10},
    {prop := 5 ^ x + 7 = 222 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [85, 142, 12, 10, 113, 148, 65, 86, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 222 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 223 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 223 ^ y,
if x >= 2, 223 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 223 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 223 ^ y is impossible.
-/
theorem diophantine1_5_7_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (223 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 223 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 224 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 224 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (224 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 225 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 225 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 225 ^ y is impossible.
-/
theorem diophantine1_5_7_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (225 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 225 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 226 ...
-- Trying to disprove y >= 2 with prime factor 2 of 226 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 226 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 226 ^ y,
if x >= 1, 226 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 226 ^ y is impossible.
-/
theorem diophantine1_5_7_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 226 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 226 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 226 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 227 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 227 ^ y,
if x >= 2, 227 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 227 ^ y = 180 (mod 181).
So 5 ^ x = 173 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 227 ^ y is impossible.
-/
theorem diophantine1_5_7_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 181) [180]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [173]) [
    {prop := List.Mem (227 ^ y % 181) [180], proof := h10},
    {prop := 5 ^ x + 7 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [173], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 227 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 228 ...
-- Trying to disprove y >= 1 with prime factor 3 of 228 ...
-- Trying to disprove y >= 2 with prime factor 2 of 228 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 228 ...
-- Trying to disprove y >= 2 with prime factor 3 of 228 ...
-- Trying to disprove y >= 4 with prime factor 2 of 228 ...
-- Trying to disprove y >= 1 with prime factor 19 of 228 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 228 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 228 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 228 ^ y is impossible.
-/
theorem diophantine1_5_7_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (228 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 228 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 229 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 229 ^ y,
if x >= 1, 229 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 229 ^ y is impossible.
-/
theorem diophantine1_5_7_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 229 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 230 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 230 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 230 ^ y is impossible.
-/
theorem diophantine1_5_7_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 230 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 231 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 231 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (231 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 232 ...
-- Trying to disprove y >= 2 with prime factor 2 of 232 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 232 ...
-- Trying to disprove y >= 4 with prime factor 2 of 232 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 29 of 232 ...
-- Trying prime 43...
-- Trying prime 71...
-- Trying prime 113...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   5 ^ x + 7 = 232 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 232 ^ y,
if y >= 1, 5 ^ x = 22 (mod 29).
So x = 5 (mod 14), 
which implies x = 5, 19, 33 (mod 42).
Therefore, 5 ^ x = 77, 66, 111 (mod 127).
So 232 ^ y = 84, 73, 118 (mod 127), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 232 ^ y is impossible.
-/
theorem diophantine1_5_7_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (232 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 29 = 22 := by omega
  have h9 := Claim (x % 14 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 29 = 22, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 127) [77, 66, 111]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 14 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (232 ^ y % 127) [84, 73, 118]) [
    {prop := List.Mem (5 ^ x % 127) [77, 66, 111], proof := h10},
    {prop := 5 ^ x + 7 = 232 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (232 ^ y % 127) [84, 73, 118], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 232 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 233 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 233 ^ y,
if x >= 2, 233 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3, 7 (mod 8).
Therefore, 233 ^ y = 211, 30 (mod 241).
So 5 ^ x = 204, 23 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 233 ^ y is impossible.
-/
theorem diophantine1_5_7_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 241) [211, 30]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [204, 23]) [
    {prop := List.Mem (233 ^ y % 241) [211, 30], proof := h10},
    {prop := 5 ^ x + 7 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [204, 23], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 234 ...
-- Trying to disprove y >= 1 with prime factor 3 of 234 ...
-- Trying to disprove y >= 2 with prime factor 2 of 234 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 234 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 234 ^ y,
if x >= 1, 234 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 234 ^ y is impossible.
-/
theorem diophantine1_5_7_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 234 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 234 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 234 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 235 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 235 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 235 ^ y is impossible.
-/
theorem diophantine1_5_7_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 235 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 236 ...
-- Trying to disprove y >= 2 with prime factor 2 of 236 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 236 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 236 ^ y,
if x >= 1, 236 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 236 ^ y is impossible.
-/
theorem diophantine1_5_7_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 236 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 236 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 236 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 237 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 237 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 237 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 237 ^ y,
if x >= 2, 237 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5 (mod 10).
Therefore, 237 ^ y = 180 (mod 181).
So 5 ^ x = 173 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 237 ^ y is impossible.
-/
theorem diophantine1_5_7_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 237 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 237 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (237 ^ y % 181) [180]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [173]) [
    {prop := List.Mem (237 ^ y % 181) [180], proof := h10},
    {prop := 5 ^ x + 7 = 237 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [173], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 237 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 238 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 238 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (238 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 239 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 239 ^ y,
if x >= 1, 239 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 239 ^ y is impossible.
-/
theorem diophantine1_5_7_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 239 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 240 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 240 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 240 ^ y is impossible.
-/
theorem diophantine1_5_7_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (240 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 240 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 241 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 241 ^ y,
if x >= 1, 241 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 241 ^ y is impossible.
-/
theorem diophantine1_5_7_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 241 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 242 ...
-- Trying to disprove y >= 2 with prime factor 2 of 242 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 242 ...
-- Trying to disprove y >= 1 with prime factor 11 of 242 ...
-- Trying to disprove y >= 4 with prime factor 2 of 242 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 242 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 242 ^ y,
if x >= 2, 242 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 242 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 242 ^ y is impossible.
-/
theorem diophantine1_5_7_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 242 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 242 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (242 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (242 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 242 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 242 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 243 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 243 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 243 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   5 ^ x + 7 = 243 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 243 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 23, 41, 59 (mod 72).
Therefore, 5 ^ x = 59, 60, 14, 13 (mod 73).
So 243 ^ y = 66, 67, 21, 20 (mod 73), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 243 ^ y is impossible.
-/
theorem diophantine1_5_7_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (243 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 73) [59, 60, 14, 13]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (243 ^ y % 73) [66, 67, 21, 20]) [
    {prop := List.Mem (5 ^ x % 73) [59, 60, 14, 13], proof := h10},
    {prop := 5 ^ x + 7 = 243 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (243 ^ y % 73) [66, 67, 21, 20], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 243 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 244 ...
-- Trying to disprove y >= 2 with prime factor 2 of 244 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 244 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 244 ^ y,
if x >= 1, 244 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 244 ^ y is impossible.
-/
theorem diophantine1_5_7_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 244 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 244 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 244 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 245 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 245 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (245 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 246 ...
-- Trying to disprove y >= 1 with prime factor 3 of 246 ...
-- Trying to disprove y >= 2 with prime factor 2 of 246 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 246 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 246 ^ y,
if x >= 1, 246 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 246 ^ y is impossible.
-/
theorem diophantine1_5_7_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 246 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 246 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 246 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 247 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 247 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 247 ^ y is impossible.
-/
theorem diophantine1_5_7_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 248 ...
-- Trying to disprove y >= 2 with prime factor 2 of 248 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 248 ...
-- Trying to disprove y >= 4 with prime factor 2 of 248 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 248 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 248 ^ y,
if x >= 2, 248 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235 (mod 240).
Therefore, 248 ^ y = 111, 38, 89, 126, 219, 88, 130, 203, 152, 115, 22, 153 (mod 241).
So 5 ^ x = 104, 31, 82, 119, 212, 81, 123, 196, 145, 108, 15, 146 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 248 ^ y is impossible.
-/
theorem diophantine1_5_7_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 248 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 248 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (248 ^ y % 241) [111, 38, 89, 126, 219, 88, 130, 203, 152, 115, 22, 153]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [104, 31, 82, 119, 212, 81, 123, 196, 145, 108, 15, 146]) [
    {prop := List.Mem (248 ^ y % 241) [111, 38, 89, 126, 219, 88, 130, 203, 152, 115, 22, 153], proof := h10},
    {prop := 5 ^ x + 7 = 248 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [104, 31, 82, 119, 212, 81, 123, 196, 145, 108, 15, 146], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 248 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 249 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 249 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 249 ^ y,
if x >= 1, 249 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 249 ^ y is impossible.
-/
theorem diophantine1_5_7_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 249 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 249 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 249 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 250 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 250 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 250 ^ y is impossible.
-/
theorem diophantine1_5_7_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 250 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 251 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 251 ^ y,
if x >= 1, 251 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 251 ^ y is impossible.
-/
theorem diophantine1_5_7_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 251 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 252 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 252 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (252 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 253 ...
-- Trying to disprove y >= 1 with prime factor 23 of 253 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Trying prime 397...
-- Trying prime 419...
-- Trying prime 463...
-- Trying prime 617...
-- Trying prime 661...
-- Trying prime 683...
-- Trying prime 727...
-- Trying prime 859...
-- Trying prime 881...
-- Trying prime 947...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 253 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 253 ^ y,
if x >= 2, 253 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 253 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 253 ^ y is impossible.
-/
theorem diophantine1_5_7_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 253 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 253 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (253 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (253 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 253 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 253 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 254 ...
-- Trying to disprove y >= 2 with prime factor 2 of 254 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 254 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 254 ^ y,
if x >= 1, 254 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 254 ^ y is impossible.
-/
theorem diophantine1_5_7_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 254 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 254 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 254 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 255 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 255 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 255 ^ y is impossible.
-/
theorem diophantine1_5_7_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (255 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 255 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 256 ...
-- Trying to disprove y >= 2 with prime factor 2 of 256 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 256 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 256 ^ y,
if x >= 1, 256 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 256 ^ y is impossible.
-/
theorem diophantine1_5_7_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 256 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 256 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 256 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 257 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 257 ^ y,
if x >= 3, 257 ^ y = 7 (mod 125).
So y = 1 (mod 20), 
which implies y = 1, 21, 41, 61, 81, 101, 121, 141, 161 (mod 180).
Therefore, 257 ^ y = 76, 68, 118, 77, 107, 10, 28, 6, 53 (mod 181).
So 5 ^ x = 69, 61, 111, 70, 100, 3, 21, 180, 46 (mod 181), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 257 ^ y is impossible.
-/
theorem diophantine1_5_7_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 20 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (257 ^ y % 181) [76, 68, 118, 77, 107, 10, 28, 6, 53]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [69, 61, 111, 70, 100, 3, 21, 180, 46]) [
    {prop := List.Mem (257 ^ y % 181) [76, 68, 118, 77, 107, 10, 28, 6, 53], proof := h10},
    {prop := 5 ^ x + 7 = 257 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [69, 61, 111, 70, 100, 3, 21, 180, 46], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 257 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 258 ...
-- Trying to disprove y >= 1 with prime factor 3 of 258 ...
-- Trying to disprove y >= 2 with prime factor 2 of 258 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 258 ...
-- Trying to disprove y >= 2 with prime factor 3 of 258 ...
-- Trying to disprove y >= 4 with prime factor 2 of 258 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 258 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 258 ^ y,
if x >= 2, 258 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175 (mod 180).
Therefore, 258 ^ y = 155, 17, 149, 7, 72, 120, 19, 92, 93 (mod 181).
So 5 ^ x = 148, 10, 142, 0, 65, 113, 12, 85, 86 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 258 ^ y is impossible.
-/
theorem diophantine1_5_7_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 258 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 258 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (258 ^ y % 181) [155, 17, 149, 7, 72, 120, 19, 92, 93]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [148, 10, 142, 0, 65, 113, 12, 85, 86]) [
    {prop := List.Mem (258 ^ y % 181) [155, 17, 149, 7, 72, 120, 19, 92, 93], proof := h10},
    {prop := 5 ^ x + 7 = 258 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [148, 10, 142, 0, 65, 113, 12, 85, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 258 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 259 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 259 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (259 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 260 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 260 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 260 ^ y is impossible.
-/
theorem diophantine1_5_7_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (260 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 260 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 261 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 261 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 261 ^ y,
if x >= 1, 261 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 261 ^ y is impossible.
-/
theorem diophantine1_5_7_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 261 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 261 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 261 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 262 ...
-- Trying to disprove y >= 2 with prime factor 2 of 262 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 262 ...
-- Trying to disprove y >= 4 with prime factor 2 of 262 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 262 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 262 ^ y,
if x >= 2, 262 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 262 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 262 ^ y is impossible.
-/
theorem diophantine1_5_7_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 262 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 262 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (262 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (262 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 262 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 262 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 263 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 263 ^ y,
if x >= 2, 263 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47 (mod 48).
Therefore, 263 ^ y = 44, 176, 222, 165, 178, 230, 197, 65, 19, 76, 63, 11 (mod 241).
So 5 ^ x = 37, 169, 215, 158, 171, 223, 190, 58, 12, 69, 56, 4 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 263 ^ y is impossible.
-/
theorem diophantine1_5_7_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (263 ^ y % 241) [44, 176, 222, 165, 178, 230, 197, 65, 19, 76, 63, 11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [37, 169, 215, 158, 171, 223, 190, 58, 12, 69, 56, 4]) [
    {prop := List.Mem (263 ^ y % 241) [44, 176, 222, 165, 178, 230, 197, 65, 19, 76, 63, 11], proof := h10},
    {prop := 5 ^ x + 7 = 263 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [37, 169, 215, 158, 171, 223, 190, 58, 12, 69, 56, 4], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 263 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 264 ...
-- Trying to disprove y >= 1 with prime factor 3 of 264 ...
-- Trying to disprove y >= 2 with prime factor 2 of 264 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 264 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 264 ^ y,
if x >= 1, 264 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 264 ^ y is impossible.
-/
theorem diophantine1_5_7_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 264 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 264 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 264 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 265 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 265 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 265 ^ y is impossible.
-/
theorem diophantine1_5_7_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (265 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 265 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 266 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 266 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (266 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 267 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 267 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 267 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 267 ^ y,
if x >= 2, 267 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
Therefore, 267 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 267 ^ y is impossible.
-/
theorem diophantine1_5_7_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 267 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 267 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (267 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (267 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 267 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 267 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 268 ...
-- Trying to disprove y >= 2 with prime factor 2 of 268 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 268 ...
-- Trying to disprove y >= 4 with prime factor 2 of 268 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 268 ...
-- Trying to disprove y >= 6 with prime factor 2 of 268 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Trying prime 593...
-- Trying prime 641...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 641)   5 ^ x + 7 = 268 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 268 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58 (mod 64).
Therefore, 5 ^ x = 631, 383, 10, 258 (mod 641).
So 268 ^ y = 638, 390, 17, 265 (mod 641), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 268 ^ y is impossible.
-/
theorem diophantine1_5_7_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (268 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 641) [631, 383, 10, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (268 ^ y % 641) [638, 390, 17, 265]) [
    {prop := List.Mem (5 ^ x % 641) [631, 383, 10, 258], proof := h10},
    {prop := 5 ^ x + 7 = 268 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (268 ^ y % 641) [638, 390, 17, 265], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 268 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 269 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 269 ^ y,
if x >= 1, 269 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 269 ^ y is impossible.
-/
theorem diophantine1_5_7_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 269 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 270 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 270 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 270 ^ y is impossible.
-/
theorem diophantine1_5_7_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (270 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 270 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 271 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 271 ^ y,
if x >= 1, 271 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 271 ^ y is impossible.
-/
theorem diophantine1_5_7_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 271 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 271 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 272 ...
-- Trying to disprove y >= 2 with prime factor 2 of 272 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 272 ...
-- Trying to disprove y >= 4 with prime factor 2 of 272 ...
-- Trying to disprove y >= 1 with prime factor 17 of 272 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Trying prime 593...
-- Trying prime 641...
-- Trying prime 673...
-- Trying prime 769...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 272 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 272 ^ y,
if x >= 2, 272 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165 (mod 180).
Therefore, 272 ^ y = 17, 93, 19, 72, 149, 155, 92, 120, 7 (mod 181).
So 5 ^ x = 10, 86, 12, 65, 142, 148, 85, 113, 0 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 272 ^ y is impossible.
-/
theorem diophantine1_5_7_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 272 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 272 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (272 ^ y % 181) [17, 93, 19, 72, 149, 155, 92, 120, 7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [10, 86, 12, 65, 142, 148, 85, 113, 0]) [
    {prop := List.Mem (272 ^ y % 181) [17, 93, 19, 72, 149, 155, 92, 120, 7], proof := h10},
    {prop := 5 ^ x + 7 = 272 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [10, 86, 12, 65, 142, 148, 85, 113, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 272 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 273 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 273 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (273 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 274 ...
-- Trying to disprove y >= 2 with prime factor 2 of 274 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 274 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 274 ^ y,
if x >= 1, 274 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 274 ^ y is impossible.
-/
theorem diophantine1_5_7_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 274 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 274 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 274 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 275 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 275 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 275 ^ y is impossible.
-/
theorem diophantine1_5_7_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (275 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 275 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 276 ...
-- Trying to disprove y >= 1 with prime factor 3 of 276 ...
-- Trying to disprove y >= 2 with prime factor 2 of 276 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 276 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 276 ^ y,
if x >= 1, 276 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 276 ^ y is impossible.
-/
theorem diophantine1_5_7_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 276 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 276 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 276 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 277 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 277 ^ y,
if x >= 2, 277 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
Therefore, 277 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 277 ^ y is impossible.
-/
theorem diophantine1_5_7_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (277 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (277 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 277 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 277 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 278 ...
-- Trying to disprove y >= 2 with prime factor 2 of 278 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 278 ...
-- Trying to disprove y >= 4 with prime factor 2 of 278 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 278 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 278 ^ y,
if x >= 2, 278 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 278 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 278 ^ y is impossible.
-/
theorem diophantine1_5_7_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 278 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 278 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (278 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (278 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 278 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 278 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 279 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 279 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 279 ^ y,
if x >= 1, 279 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 279 ^ y is impossible.
-/
theorem diophantine1_5_7_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 279 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 279 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 279 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 280 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 280 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (280 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 281 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 281 ^ y,
if x >= 1, 281 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 281 ^ y is impossible.
-/
theorem diophantine1_5_7_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 281 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 281 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 282 ...
-- Trying to disprove y >= 1 with prime factor 3 of 282 ...
-- Trying to disprove y >= 2 with prime factor 2 of 282 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 282 ...
-- Trying to disprove y >= 2 with prime factor 3 of 282 ...
-- Trying to disprove y >= 4 with prime factor 2 of 282 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 282 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   5 ^ x + 7 = 282 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 282 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 23, 41, 59 (mod 72).
Therefore, 5 ^ x = 59, 60, 14, 13 (mod 73).
So 282 ^ y = 66, 67, 21, 20 (mod 73), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 282 ^ y is impossible.
-/
theorem diophantine1_5_7_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (282 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 73) [59, 60, 14, 13]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (282 ^ y % 73) [66, 67, 21, 20]) [
    {prop := List.Mem (5 ^ x % 73) [59, 60, 14, 13], proof := h10},
    {prop := 5 ^ x + 7 = 282 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (282 ^ y % 73) [66, 67, 21, 20], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 282 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 283 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 283 ^ y,
if x >= 2, 283 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 283 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 283 ^ y is impossible.
-/
theorem diophantine1_5_7_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (283 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (283 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 283 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 283 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 284 ...
-- Trying to disprove y >= 2 with prime factor 2 of 284 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 284 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 284 ^ y,
if x >= 1, 284 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 284 ^ y is impossible.
-/
theorem diophantine1_5_7_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 284 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 284 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 284 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 285 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 285 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 285 ^ y is impossible.
-/
theorem diophantine1_5_7_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (285 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 285 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 286 ...
-- Trying to disprove y >= 2 with prime factor 2 of 286 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 286 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 286 ^ y,
if x >= 1, 286 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 286 ^ y is impossible.
-/
theorem diophantine1_5_7_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 286 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 286 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 286 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 287 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 287 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (287 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 288 ...
-- Trying to disprove y >= 1 with prime factor 3 of 288 ...
-- Trying to disprove y >= 2 with prime factor 2 of 288 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 288 ...
-- Trying to disprove y >= 2 with prime factor 3 of 288 ...
-- Trying to disprove y >= 4 with prime factor 2 of 288 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 288 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 288 ^ y,
if x >= 2, 288 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
Therefore, 288 ^ y = 19 (mod 181).
So 5 ^ x = 12 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 288 ^ y is impossible.
-/
theorem diophantine1_5_7_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 288 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 288 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (288 ^ y % 181) [19]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [12]) [
    {prop := List.Mem (288 ^ y % 181) [19], proof := h10},
    {prop := 5 ^ x + 7 = 288 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 288 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 289 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 289 ^ y,
if x >= 1, 289 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 289 ^ y is impossible.
-/
theorem diophantine1_5_7_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 289 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 289 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 289 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 290 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 290 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 290 ^ y is impossible.
-/
theorem diophantine1_5_7_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (290 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 290 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 291 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 291 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 291 ^ y,
if x >= 1, 291 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 291 ^ y is impossible.
-/
theorem diophantine1_5_7_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 291 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 291 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 291 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 292 ...
-- Trying to disprove y >= 2 with prime factor 2 of 292 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 292 ...
-- Trying to disprove y >= 4 with prime factor 2 of 292 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 292 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 292 ^ y,
if x >= 2, 292 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165, 185, 205, 225 (mod 240).
Therefore, 292 ^ y = 11, 63, 76, 19, 65, 197, 230, 178, 165, 222, 176, 44 (mod 241).
So 5 ^ x = 4, 56, 69, 12, 58, 190, 223, 171, 158, 215, 169, 37 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 292 ^ y is impossible.
-/
theorem diophantine1_5_7_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 292 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 292 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (292 ^ y % 241) [11, 63, 76, 19, 65, 197, 230, 178, 165, 222, 176, 44]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [4, 56, 69, 12, 58, 190, 223, 171, 158, 215, 169, 37]) [
    {prop := List.Mem (292 ^ y % 241) [11, 63, 76, 19, 65, 197, 230, 178, 165, 222, 176, 44], proof := h10},
    {prop := 5 ^ x + 7 = 292 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [4, 56, 69, 12, 58, 190, 223, 171, 158, 215, 169, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 292 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 293 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 293 ^ y,
if x >= 3, 293 ^ y = 7 (mod 125).
So y = 3 (mod 20), 
which implies y = 3 (mod 4).
Therefore, 293 ^ y = 10 (mod 101).
So 5 ^ x = 3 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 293 ^ y is impossible.
-/
theorem diophantine1_5_7_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 20 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (293 ^ y % 101) [10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [3]) [
    {prop := List.Mem (293 ^ y % 101) [10], proof := h10},
    {prop := 5 ^ x + 7 = 293 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 293 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 294 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 294 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (294 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 295 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 295 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 295 ^ y is impossible.
-/
theorem diophantine1_5_7_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (295 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 295 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 296 ...
-- Trying to disprove y >= 2 with prime factor 2 of 296 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 296 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 296 ^ y,
if x >= 1, 296 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 296 ^ y is impossible.
-/
theorem diophantine1_5_7_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 296 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 296 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 296 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 297 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 297 ...
-- Trying to disprove y >= 1 with prime factor 11 of 297 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 297 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 297 ^ y,
if x >= 2, 297 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 297 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 297 ^ y is impossible.
-/
theorem diophantine1_5_7_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 297 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 297 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (297 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (297 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 297 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 297 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 298 ...
-- Trying to disprove y >= 2 with prime factor 2 of 298 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 298 ...
-- Trying to disprove y >= 4 with prime factor 2 of 298 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 298 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 298 ^ y,
if x >= 2, 298 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75 (mod 80).
Therefore, 298 ^ y = 44, 76, 197, 165 (mod 241).
So 5 ^ x = 37, 69, 190, 158 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 298 ^ y is impossible.
-/
theorem diophantine1_5_7_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 298 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 298 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (298 ^ y % 241) [44, 76, 197, 165]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [37, 69, 190, 158]) [
    {prop := List.Mem (298 ^ y % 241) [44, 76, 197, 165], proof := h10},
    {prop := 5 ^ x + 7 = 298 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [37, 69, 190, 158], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 298 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 299 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 299 ^ y,
if x >= 1, 299 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 299 ^ y is impossible.
-/
theorem diophantine1_5_7_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 299 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 299 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 299 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 300 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 300 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 300 ^ y is impossible.
-/
theorem diophantine1_5_7_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (300 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 300 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 301 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 301 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (301 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 302 ...
-- Trying to disprove y >= 2 with prime factor 2 of 302 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 302 ...
-- Trying to disprove y >= 4 with prime factor 2 of 302 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 302 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 302 ^ y,
if x >= 2, 302 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 302 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 302 ^ y is impossible.
-/
theorem diophantine1_5_7_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 302 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 302 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (302 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (302 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 302 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 302 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 303 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 303 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 303 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 303 ^ y,
if x >= 2, 303 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 303 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 303 ^ y is impossible.
-/
theorem diophantine1_5_7_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 303 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 303 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (303 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (303 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 303 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 303 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 304 ...
-- Trying to disprove y >= 2 with prime factor 2 of 304 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 304 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 304 ^ y,
if x >= 1, 304 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 304 ^ y is impossible.
-/
theorem diophantine1_5_7_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 304 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 304 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 304 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 305 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 305 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 305 ^ y is impossible.
-/
theorem diophantine1_5_7_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (305 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 305 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 306 ...
-- Trying to disprove y >= 1 with prime factor 3 of 306 ...
-- Trying to disprove y >= 2 with prime factor 2 of 306 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 306 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 306 ^ y,
if x >= 1, 306 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 306 ^ y is impossible.
-/
theorem diophantine1_5_7_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 306 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 306 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 306 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 307 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 307 ^ y,
if x >= 3, 307 ^ y = 7 (mod 125).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 307 ^ y is impossible.
-/
theorem diophantine1_5_7_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 125 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 307 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 308 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 308 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (308 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 309 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 309 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 309 ^ y,
if x >= 1, 309 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 309 ^ y is impossible.
-/
theorem diophantine1_5_7_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 309 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 309 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 309 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 310 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 310 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 310 ^ y is impossible.
-/
theorem diophantine1_5_7_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (310 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 310 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 311 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 311 ^ y,
if x >= 1, 311 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 311 ^ y is impossible.
-/
theorem diophantine1_5_7_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 311 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 312 ...
-- Trying to disprove y >= 1 with prime factor 3 of 312 ...
-- Trying to disprove y >= 2 with prime factor 2 of 312 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 312 ...
-- Trying to disprove y >= 2 with prime factor 3 of 312 ...
-- Trying to disprove y >= 1 with prime factor 13 of 312 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 312 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 312 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 312 ^ y is impossible.
-/
theorem diophantine1_5_7_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (312 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 312 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 313 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 313 ^ y,
if x >= 2, 313 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
Therefore, 313 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 313 ^ y is impossible.
-/
theorem diophantine1_5_7_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (313 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (313 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 313 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 313 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 314 ...
-- Trying to disprove y >= 2 with prime factor 2 of 314 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 314 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 314 ^ y,
if x >= 1, 314 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 314 ^ y is impossible.
-/
theorem diophantine1_5_7_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 314 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 314 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 314 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 315 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 315 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (315 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 316 ...
-- Trying to disprove y >= 2 with prime factor 2 of 316 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 316 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 316 ^ y,
if x >= 1, 316 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 316 ^ y is impossible.
-/
theorem diophantine1_5_7_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 316 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 316 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 316 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 317 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 317 ^ y,
if x >= 2, 317 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 317 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 317 ^ y is impossible.
-/
theorem diophantine1_5_7_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (317 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 317 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 318 ...
-- Trying to disprove y >= 1 with prime factor 3 of 318 ...
-- Trying to disprove y >= 2 with prime factor 2 of 318 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 318 ...
-- Trying to disprove y >= 2 with prime factor 3 of 318 ...
-- Trying to disprove y >= 4 with prime factor 2 of 318 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 318 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   5 ^ x + 7 = 318 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 318 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 11, 17, 23, 29, 35, 41 (mod 42).
Therefore, 5 ^ x = 77, 54, 89, 102, 27, 108, 51 (mod 127).
So 318 ^ y = 84, 61, 96, 109, 34, 115, 58 (mod 127), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 318 ^ y is impossible.
-/
theorem diophantine1_5_7_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (318 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 127) [77, 54, 89, 102, 27, 108, 51]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (318 ^ y % 127) [84, 61, 96, 109, 34, 115, 58]) [
    {prop := List.Mem (5 ^ x % 127) [77, 54, 89, 102, 27, 108, 51], proof := h10},
    {prop := 5 ^ x + 7 = 318 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (318 ^ y % 127) [84, 61, 96, 109, 34, 115, 58], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 318 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 319 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 319 ^ y,
if x >= 1, 319 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 319 ^ y is impossible.
-/
theorem diophantine1_5_7_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 319 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 319 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 319 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 320 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 320 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 320 ^ y is impossible.
-/
theorem diophantine1_5_7_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (320 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 320 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 321 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 321 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 321 ^ y,
if x >= 1, 321 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 321 ^ y is impossible.
-/
theorem diophantine1_5_7_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 321 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 321 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 321 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 322 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 322 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (322 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 323 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Trying prime 593...
-- Trying prime 641...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 641)   5 ^ x + 7 = 323 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 323 ^ y,
if y >= 1, 5 ^ x = 10 (mod 17).
So x = 7 (mod 16), 
which implies x = 7, 23, 39, 55 (mod 64).
Therefore, 5 ^ x = 564, 321, 77, 320 (mod 641).
So 323 ^ y = 571, 328, 84, 327 (mod 641), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 323 ^ y is impossible.
-/
theorem diophantine1_5_7_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (323 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 10 := by omega
  have h9 := Claim (x % 16 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 641) [564, 321, 77, 320]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (323 ^ y % 641) [571, 328, 84, 327]) [
    {prop := List.Mem (5 ^ x % 641) [564, 321, 77, 320], proof := h10},
    {prop := 5 ^ x + 7 = 323 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (323 ^ y % 641) [571, 328, 84, 327], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 323 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 324 ...
-- Trying to disprove y >= 1 with prime factor 3 of 324 ...
-- Trying to disprove y >= 2 with prime factor 2 of 324 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 324 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 324 ^ y,
if x >= 1, 324 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 324 ^ y is impossible.
-/
theorem diophantine1_5_7_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 324 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 324 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 324 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 325 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 325 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 325 ^ y is impossible.
-/
theorem diophantine1_5_7_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (325 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 325 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 326 ...
-- Trying to disprove y >= 2 with prime factor 2 of 326 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 326 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 326 ^ y,
if x >= 1, 326 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 326 ^ y is impossible.
-/
theorem diophantine1_5_7_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 326 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 326 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 326 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 327 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 327 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 327 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 327 ^ y,
if x >= 2, 327 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 327 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 327 ^ y is impossible.
-/
theorem diophantine1_5_7_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 327 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 327 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (327 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (327 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 327 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 327 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 328 ...
-- Trying to disprove y >= 2 with prime factor 2 of 328 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 328 ...
-- Trying to disprove y >= 4 with prime factor 2 of 328 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 601...
-- Trying prime 641...
-- Trying prime 661...
-- Trying prime 701...
-- Trying prime 761...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 761)   5 ^ x + 7 = 328 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 328 ^ y,
if x >= 2, 328 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90 (mod 95).
Therefore, 328 ^ y = 1, 233, 258, 756, 357, 232, 25, 498, 362, 636, 554, 473, 625, 274, 679, 680, 152, 410, 405 (mod 761).
So 5 ^ x = 755, 226, 251, 749, 350, 225, 18, 491, 355, 629, 547, 466, 618, 267, 672, 673, 145, 403, 398 (mod 761), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 328 ^ y is impossible.
-/
theorem diophantine1_5_7_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 328 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 328 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (328 ^ y % 761) [1, 233, 258, 756, 357, 232, 25, 498, 362, 636, 554, 473, 625, 274, 679, 680, 152, 410, 405]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 761) [755, 226, 251, 749, 350, 225, 18, 491, 355, 629, 547, 466, 618, 267, 672, 673, 145, 403, 398]) [
    {prop := List.Mem (328 ^ y % 761) [1, 233, 258, 756, 357, 232, 25, 498, 362, 636, 554, 473, 625, 274, 679, 680, 152, 410, 405], proof := h10},
    {prop := 5 ^ x + 7 = 328 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 761) [755, 226, 251, 749, 350, 225, 18, 491, 355, 629, 547, 466, 618, 267, 672, 673, 145, 403, 398], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 328 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 329 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 329 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (329 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 330 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 330 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 330 ^ y is impossible.
-/
theorem diophantine1_5_7_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (330 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 330 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 331 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 331 ^ y,
if x >= 1, 331 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 331 ^ y is impossible.
-/
theorem diophantine1_5_7_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 331 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 332 ...
-- Trying to disprove y >= 2 with prime factor 2 of 332 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 332 ...
-- Trying to disprove y >= 4 with prime factor 2 of 332 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 332 ...
-- Trying to disprove y >= 6 with prime factor 2 of 332 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 113)   5 ^ x + 7 = 332 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 332 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58, 74, 90, 106 (mod 112).
Therefore, 5 ^ x = 52, 91, 18, 88, 41, 100, 62 (mod 113).
So 332 ^ y = 59, 98, 25, 95, 48, 107, 69 (mod 113), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 332 ^ y is impossible.
-/
theorem diophantine1_5_7_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (332 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 113) [52, 91, 18, 88, 41, 100, 62]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (332 ^ y % 113) [59, 98, 25, 95, 48, 107, 69]) [
    {prop := List.Mem (5 ^ x % 113) [52, 91, 18, 88, 41, 100, 62], proof := h10},
    {prop := 5 ^ x + 7 = 332 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (332 ^ y % 113) [59, 98, 25, 95, 48, 107, 69], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 332 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 333 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 333 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 333 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 333 ^ y,
if x >= 2, 333 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
Therefore, 333 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 333 ^ y is impossible.
-/
theorem diophantine1_5_7_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 333 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 333 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (333 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (333 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 333 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 333 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 334 ...
-- Trying to disprove y >= 2 with prime factor 2 of 334 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 334 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 334 ^ y,
if x >= 1, 334 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 334 ^ y is impossible.
-/
theorem diophantine1_5_7_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 334 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 334 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 334 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 335 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 335 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 335 ^ y is impossible.
-/
theorem diophantine1_5_7_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (335 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 335 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 336 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 336 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (336 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 337 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 337 ^ y,
if x >= 2, 337 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45 (mod 60).
Therefore, 337 ^ y = 4, 60, 177 (mod 241).
So 5 ^ x = 238, 53, 170 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 337 ^ y is impossible.
-/
theorem diophantine1_5_7_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 337 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (337 ^ y % 241) [4, 60, 177]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [238, 53, 170]) [
    {prop := List.Mem (337 ^ y % 241) [4, 60, 177], proof := h10},
    {prop := 5 ^ x + 7 = 337 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [238, 53, 170], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 337 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 338 ...
-- Trying to disprove y >= 2 with prime factor 2 of 338 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 338 ...
-- Trying to disprove y >= 1 with prime factor 13 of 338 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 338 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 338 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 338 ^ y is impossible.
-/
theorem diophantine1_5_7_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (338 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 338 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 339 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 339 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 339 ^ y,
if x >= 1, 339 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 339 ^ y is impossible.
-/
theorem diophantine1_5_7_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 339 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 339 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 339 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 340 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 340 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 340 ^ y is impossible.
-/
theorem diophantine1_5_7_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (340 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 340 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 341 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 341 ^ y,
if x >= 1, 341 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 341 ^ y is impossible.
-/
theorem diophantine1_5_7_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 341 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 341 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 341 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 342 ...
-- Trying to disprove y >= 1 with prime factor 3 of 342 ...
-- Trying to disprove y >= 2 with prime factor 2 of 342 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 342 ...
-- Trying to disprove y >= 2 with prime factor 3 of 342 ...
-- Trying to disprove y >= 4 with prime factor 2 of 342 ...
-- Trying to disprove y >= 1 with prime factor 19 of 342 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 342 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 342 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 342 ^ y is impossible.
-/
theorem diophantine1_5_7_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (342 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 342 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 343 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 343 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (343 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 344 ...
-- Trying to disprove y >= 2 with prime factor 2 of 344 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 344 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 344 ^ y,
if x >= 1, 344 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 344 ^ y is impossible.
-/
theorem diophantine1_5_7_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 344 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 344 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 344 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 345 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 345 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 345 ^ y is impossible.
-/
theorem diophantine1_5_7_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (345 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 345 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 346 ...
-- Trying to disprove y >= 2 with prime factor 2 of 346 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 346 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 346 ^ y,
if x >= 1, 346 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 346 ^ y is impossible.
-/
theorem diophantine1_5_7_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 346 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 346 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 346 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 347 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 347 ^ y,
if x >= 2, 347 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 347 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 347 ^ y is impossible.
-/
theorem diophantine1_5_7_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (347 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (347 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 347 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 347 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 348 ...
-- Trying to disprove y >= 1 with prime factor 3 of 348 ...
-- Trying to disprove y >= 2 with prime factor 2 of 348 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 348 ...
-- Trying to disprove y >= 2 with prime factor 3 of 348 ...
-- Trying to disprove y >= 4 with prime factor 2 of 348 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 348 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 348 ^ y,
if x >= 2, 348 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55 (mod 60).
Therefore, 348 ^ y = 64, 181, 237 (mod 241).
So 5 ^ x = 57, 174, 230 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 348 ^ y is impossible.
-/
theorem diophantine1_5_7_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 348 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 348 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (348 ^ y % 241) [64, 181, 237]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [57, 174, 230]) [
    {prop := List.Mem (348 ^ y % 241) [64, 181, 237], proof := h10},
    {prop := 5 ^ x + 7 = 348 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [57, 174, 230], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 348 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 349 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 349 ^ y,
if x >= 1, 349 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 349 ^ y is impossible.
-/
theorem diophantine1_5_7_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 349 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 350 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 350 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (350 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 351 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 351 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 351 ^ y,
if x >= 1, 351 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 351 ^ y is impossible.
-/
theorem diophantine1_5_7_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 351 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 351 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 351 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 352 ...
-- Trying to disprove y >= 2 with prime factor 2 of 352 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 352 ...
-- Trying to disprove y >= 1 with prime factor 11 of 352 ...
-- Trying to disprove y >= 4 with prime factor 2 of 352 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 352 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 352 ^ y,
if x >= 2, 352 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165 (mod 180).
Therefore, 352 ^ y = 93, 92, 19, 120, 72, 7, 149, 17, 155 (mod 181).
So 5 ^ x = 86, 85, 12, 113, 65, 0, 142, 10, 148 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 352 ^ y is impossible.
-/
theorem diophantine1_5_7_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 352 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 352 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (352 ^ y % 181) [93, 92, 19, 120, 72, 7, 149, 17, 155]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [86, 85, 12, 113, 65, 0, 142, 10, 148]) [
    {prop := List.Mem (352 ^ y % 181) [93, 92, 19, 120, 72, 7, 149, 17, 155], proof := h10},
    {prop := 5 ^ x + 7 = 352 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [86, 85, 12, 113, 65, 0, 142, 10, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 352 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 353 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 353 ^ y,
if x >= 2, 353 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235 (mod 240).
Therefore, 353 ^ y = 130, 153, 219, 115, 89, 203, 111, 88, 22, 126, 152, 38 (mod 241).
So 5 ^ x = 123, 146, 212, 108, 82, 196, 104, 81, 15, 119, 145, 31 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 353 ^ y is impossible.
-/
theorem diophantine1_5_7_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (353 ^ y % 241) [130, 153, 219, 115, 89, 203, 111, 88, 22, 126, 152, 38]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [123, 146, 212, 108, 82, 196, 104, 81, 15, 119, 145, 31]) [
    {prop := List.Mem (353 ^ y % 241) [130, 153, 219, 115, 89, 203, 111, 88, 22, 126, 152, 38], proof := h10},
    {prop := 5 ^ x + 7 = 353 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [123, 146, 212, 108, 82, 196, 104, 81, 15, 119, 145, 31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 353 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 354 ...
-- Trying to disprove y >= 1 with prime factor 3 of 354 ...
-- Trying to disprove y >= 2 with prime factor 2 of 354 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 354 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 354 ^ y,
if x >= 1, 354 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 354 ^ y is impossible.
-/
theorem diophantine1_5_7_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 354 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 354 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 354 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 355 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 355 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 355 ^ y is impossible.
-/
theorem diophantine1_5_7_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (355 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 355 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 356 ...
-- Trying to disprove y >= 2 with prime factor 2 of 356 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 356 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 356 ^ y,
if x >= 1, 356 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 356 ^ y is impossible.
-/
theorem diophantine1_5_7_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 356 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 356 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 356 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 357 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 357 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (357 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 358 ...
-- Trying to disprove y >= 2 with prime factor 2 of 358 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 358 ...
-- Trying to disprove y >= 4 with prime factor 2 of 358 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 358 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 358 ^ y,
if x >= 2, 358 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75 (mod 80).
Therefore, 358 ^ y = 44, 76, 197, 165 (mod 241).
So 5 ^ x = 37, 69, 190, 158 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 358 ^ y is impossible.
-/
theorem diophantine1_5_7_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 358 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 358 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (358 ^ y % 241) [44, 76, 197, 165]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [37, 69, 190, 158]) [
    {prop := List.Mem (358 ^ y % 241) [44, 76, 197, 165], proof := h10},
    {prop := 5 ^ x + 7 = 358 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [37, 69, 190, 158], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 358 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 359 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 359 ^ y,
if x >= 1, 359 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 359 ^ y is impossible.
-/
theorem diophantine1_5_7_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 359 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 360 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 360 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 360 ^ y is impossible.
-/
theorem diophantine1_5_7_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (360 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 360 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 361 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 361 ^ y,
if x >= 1, 361 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 361 ^ y is impossible.
-/
theorem diophantine1_5_7_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 361 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 361 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 361 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 362 ...
-- Trying to disprove y >= 2 with prime factor 2 of 362 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 362 ...
-- Trying to disprove y >= 4 with prime factor 2 of 362 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 362 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 362 ^ y,
if x >= 2, 362 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 362 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 362 ^ y is impossible.
-/
theorem diophantine1_5_7_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 362 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 362 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (362 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (362 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 362 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 362 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 363 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 363 ...
-- Trying to disprove y >= 1 with prime factor 11 of 363 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 363 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 363 ^ y,
if x >= 2, 363 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 363 ^ y = 1 (mod 61).
So 5 ^ x = 55 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 363 ^ y is impossible.
-/
theorem diophantine1_5_7_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 363 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 363 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (363 ^ y % 61) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55]) [
    {prop := List.Mem (363 ^ y % 61) [1], proof := h10},
    {prop := 5 ^ x + 7 = 363 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 363 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 364 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 364 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (364 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 365 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 365 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 365 ^ y is impossible.
-/
theorem diophantine1_5_7_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (365 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 365 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 366 ...
-- Trying to disprove y >= 1 with prime factor 3 of 366 ...
-- Trying to disprove y >= 2 with prime factor 2 of 366 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 366 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 366 ^ y,
if x >= 1, 366 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 366 ^ y is impossible.
-/
theorem diophantine1_5_7_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 366 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 366 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 366 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 367 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 367 ^ y,
if x >= 2, 367 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1, 5, 9, 13 (mod 16).
Therefore, 367 ^ y = 126, 130, 115, 111 (mod 241).
So 5 ^ x = 119, 123, 108, 104 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 367 ^ y is impossible.
-/
theorem diophantine1_5_7_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (367 ^ y % 241) [126, 130, 115, 111]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [119, 123, 108, 104]) [
    {prop := List.Mem (367 ^ y % 241) [126, 130, 115, 111], proof := h10},
    {prop := 5 ^ x + 7 = 367 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [119, 123, 108, 104], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 367 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 368 ...
-- Trying to disprove y >= 2 with prime factor 2 of 368 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 368 ...
-- Trying to disprove y >= 4 with prime factor 2 of 368 ...
-- Trying to disprove y >= 1 with prime factor 23 of 368 ...
-- Trying prime 67...
-- Trying prime 89...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 89)   5 ^ x + 7 = 368 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 368 ^ y,
if y >= 1, 5 ^ x = 16 (mod 23).
So x = 8 (mod 22), 
which implies x = 8, 30 (mod 44).
Therefore, 5 ^ x = 4, 85 (mod 89).
So 368 ^ y = 11, 3 (mod 89), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 368 ^ y is impossible.
-/
theorem diophantine1_5_7_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (368 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 23 = 16 := by omega
  have h9 := Claim (x % 22 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 23 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 89) [4, 85]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (368 ^ y % 89) [11, 3]) [
    {prop := List.Mem (5 ^ x % 89) [4, 85], proof := h10},
    {prop := 5 ^ x + 7 = 368 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (368 ^ y % 89) [11, 3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 368 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 369 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 369 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 369 ^ y,
if x >= 1, 369 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 369 ^ y is impossible.
-/
theorem diophantine1_5_7_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 369 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 369 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 369 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 370 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 370 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 370 ^ y is impossible.
-/
theorem diophantine1_5_7_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (370 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 370 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 371 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 371 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (371 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 372 ...
-- Trying to disprove y >= 1 with prime factor 3 of 372 ...
-- Trying to disprove y >= 2 with prime factor 2 of 372 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 372 ...
-- Trying to disprove y >= 2 with prime factor 3 of 372 ...
-- Trying to disprove y >= 4 with prime factor 2 of 372 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 372 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 372 ^ y,
if x >= 2, 372 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165, 185, 205, 225 (mod 240).
Therefore, 372 ^ y = 222, 176, 44, 11, 63, 76, 19, 65, 197, 230, 178, 165 (mod 241).
So 5 ^ x = 215, 169, 37, 4, 56, 69, 12, 58, 190, 223, 171, 158 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 372 ^ y is impossible.
-/
theorem diophantine1_5_7_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 372 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 372 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (372 ^ y % 241) [222, 176, 44, 11, 63, 76, 19, 65, 197, 230, 178, 165]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [215, 169, 37, 4, 56, 69, 12, 58, 190, 223, 171, 158]) [
    {prop := List.Mem (372 ^ y % 241) [222, 176, 44, 11, 63, 76, 19, 65, 197, 230, 178, 165], proof := h10},
    {prop := 5 ^ x + 7 = 372 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [215, 169, 37, 4, 56, 69, 12, 58, 190, 223, 171, 158], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 372 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 373 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 373 ^ y,
if x >= 2, 373 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235 (mod 240).
Therefore, 373 ^ y = 44, 230, 63, 165, 19, 176, 197, 11, 178, 76, 222, 65 (mod 241).
So 5 ^ x = 37, 223, 56, 158, 12, 169, 190, 4, 171, 69, 215, 58 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 373 ^ y is impossible.
-/
theorem diophantine1_5_7_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (373 ^ y % 241) [44, 230, 63, 165, 19, 176, 197, 11, 178, 76, 222, 65]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [37, 223, 56, 158, 12, 169, 190, 4, 171, 69, 215, 58]) [
    {prop := List.Mem (373 ^ y % 241) [44, 230, 63, 165, 19, 176, 197, 11, 178, 76, 222, 65], proof := h10},
    {prop := 5 ^ x + 7 = 373 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [37, 223, 56, 158, 12, 169, 190, 4, 171, 69, 215, 58], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 373 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 374 ...
-- Trying to disprove y >= 2 with prime factor 2 of 374 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 374 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 374 ^ y,
if x >= 1, 374 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 374 ^ y is impossible.
-/
theorem diophantine1_5_7_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 374 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 374 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 374 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 375 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 375 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 375 ^ y is impossible.
-/
theorem diophantine1_5_7_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (375 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 375 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 376 ...
-- Trying to disprove y >= 2 with prime factor 2 of 376 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 376 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 376 ^ y,
if x >= 1, 376 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 376 ^ y is impossible.
-/
theorem diophantine1_5_7_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 376 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 376 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 376 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 377 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 377 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 377 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 377 ^ y is impossible.
-/
theorem diophantine1_5_7_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (377 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 377 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 378 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 378 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (378 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 379 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 379 ^ y,
if x >= 1, 379 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 379 ^ y is impossible.
-/
theorem diophantine1_5_7_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 379 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 379 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 380 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 380 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 380 ^ y is impossible.
-/
theorem diophantine1_5_7_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (380 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 380 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 381 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 381 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 381 ^ y,
if x >= 1, 381 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 381 ^ y is impossible.
-/
theorem diophantine1_5_7_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 381 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 381 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 381 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 382 ...
-- Trying to disprove y >= 2 with prime factor 2 of 382 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 382 ...
-- Trying to disprove y >= 4 with prime factor 2 of 382 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 382 ...
-- Trying to disprove y >= 6 with prime factor 2 of 382 ...
-- Trying prime 17...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   5 ^ x + 7 = 382 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 382 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58, 74, 90 (mod 96).
Therefore, 5 ^ x = 53, 65, 12, 44, 32, 85 (mod 97).
So 382 ^ y = 60, 72, 19, 51, 39, 92 (mod 97), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 382 ^ y is impossible.
-/
theorem diophantine1_5_7_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (382 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 97) [53, 65, 12, 44, 32, 85]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (382 ^ y % 97) [60, 72, 19, 51, 39, 92]) [
    {prop := List.Mem (5 ^ x % 97) [53, 65, 12, 44, 32, 85], proof := h10},
    {prop := 5 ^ x + 7 = 382 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (382 ^ y % 97) [60, 72, 19, 51, 39, 92], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 382 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 383 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 383 ^ y,
if x >= 2, 383 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235 (mod 240).
Therefore, 383 ^ y = 115, 89, 203, 111, 88, 22, 126, 152, 38, 130, 153, 219 (mod 241).
So 5 ^ x = 108, 82, 196, 104, 81, 15, 119, 145, 31, 123, 146, 212 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 383 ^ y is impossible.
-/
theorem diophantine1_5_7_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 383 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (383 ^ y % 241) [115, 89, 203, 111, 88, 22, 126, 152, 38, 130, 153, 219]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [108, 82, 196, 104, 81, 15, 119, 145, 31, 123, 146, 212]) [
    {prop := List.Mem (383 ^ y % 241) [115, 89, 203, 111, 88, 22, 126, 152, 38, 130, 153, 219], proof := h10},
    {prop := 5 ^ x + 7 = 383 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [108, 82, 196, 104, 81, 15, 119, 145, 31, 123, 146, 212], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 383 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 384 ...
-- Trying to disprove y >= 1 with prime factor 3 of 384 ...
-- Trying to disprove y >= 2 with prime factor 2 of 384 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 384 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 384 ^ y,
if x >= 1, 384 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 384 ^ y is impossible.
-/
theorem diophantine1_5_7_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 384 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 384 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 384 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 385 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 385 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (385 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 386 ...
-- Trying to disprove y >= 2 with prime factor 2 of 386 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 386 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 386 ^ y,
if x >= 1, 386 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 386 ^ y is impossible.
-/
theorem diophantine1_5_7_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 386 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 386 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 386 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 387 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 387 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 387 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 387 ^ y,
if x >= 2, 387 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 387 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 387 ^ y is impossible.
-/
theorem diophantine1_5_7_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 387 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 387 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (387 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (387 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 387 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 387 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 388 ...
-- Trying to disprove y >= 2 with prime factor 2 of 388 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 388 ...
-- Trying to disprove y >= 4 with prime factor 2 of 388 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 388 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 388 ^ y,
if x >= 2, 388 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 388 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 388 ^ y is impossible.
-/
theorem diophantine1_5_7_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 388 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 388 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (388 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (388 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 388 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 388 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 389 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 389 ^ y,
if x >= 1, 389 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 389 ^ y is impossible.
-/
theorem diophantine1_5_7_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 389 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 390 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 390 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 390 ^ y is impossible.
-/
theorem diophantine1_5_7_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (390 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 390 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 391 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 391 ^ y,
if x >= 1, 391 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 391 ^ y is impossible.
-/
theorem diophantine1_5_7_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 391 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 391 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 391 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 392 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 392 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (392 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 393 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 393 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 393 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   5 ^ x + 7 = 393 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 393 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 14, 23 (mod 27).
Therefore, 5 ^ x = 73, 21, 15 (mod 109).
So 393 ^ y = 80, 28, 22 (mod 109), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 393 ^ y is impossible.
-/
theorem diophantine1_5_7_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (393 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 109) [73, 21, 15]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (393 ^ y % 109) [80, 28, 22]) [
    {prop := List.Mem (5 ^ x % 109) [73, 21, 15], proof := h10},
    {prop := 5 ^ x + 7 = 393 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (393 ^ y % 109) [80, 28, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 393 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 394 ...
-- Trying to disprove y >= 2 with prime factor 2 of 394 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 394 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 394 ^ y,
if x >= 1, 394 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 394 ^ y is impossible.
-/
theorem diophantine1_5_7_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 394 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 394 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 394 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 395 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 395 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 395 ^ y is impossible.
-/
theorem diophantine1_5_7_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (395 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 395 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 396 ...
-- Trying to disprove y >= 1 with prime factor 3 of 396 ...
-- Trying to disprove y >= 2 with prime factor 2 of 396 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 396 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 396 ^ y,
if x >= 1, 396 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 396 ^ y is impossible.
-/
theorem diophantine1_5_7_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 396 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 396 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 396 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 397 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 397 ^ y,
if x >= 2, 397 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
Therefore, 397 ^ y = 19 (mod 181).
So 5 ^ x = 12 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 397 ^ y is impossible.
-/
theorem diophantine1_5_7_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (397 ^ y % 181) [19]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [12]) [
    {prop := List.Mem (397 ^ y % 181) [19], proof := h10},
    {prop := 5 ^ x + 7 = 397 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 397 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 398 ...
-- Trying to disprove y >= 2 with prime factor 2 of 398 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 398 ...
-- Trying to disprove y >= 4 with prime factor 2 of 398 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 398 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 398 ^ y,
if x >= 2, 398 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235 (mod 240).
Therefore, 398 ^ y = 44, 230, 63, 165, 19, 176, 197, 11, 178, 76, 222, 65 (mod 241).
So 5 ^ x = 37, 223, 56, 158, 12, 169, 190, 4, 171, 69, 215, 58 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 398 ^ y is impossible.
-/
theorem diophantine1_5_7_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 398 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 398 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (398 ^ y % 241) [44, 230, 63, 165, 19, 176, 197, 11, 178, 76, 222, 65]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [37, 223, 56, 158, 12, 169, 190, 4, 171, 69, 215, 58]) [
    {prop := List.Mem (398 ^ y % 241) [44, 230, 63, 165, 19, 176, 197, 11, 178, 76, 222, 65], proof := h10},
    {prop := 5 ^ x + 7 = 398 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [37, 223, 56, 158, 12, 169, 190, 4, 171, 69, 215, 58], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 398 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 399 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 399 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (399 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 400 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 400 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 400 ^ y is impossible.
-/
theorem diophantine1_5_7_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (400 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 400 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 401 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 401 ^ y,
if x >= 1, 401 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 401 ^ y is impossible.
-/
theorem diophantine1_5_7_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 401 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 402 ...
-- Trying to disprove y >= 1 with prime factor 3 of 402 ...
-- Trying to disprove y >= 2 with prime factor 2 of 402 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 402 ...
-- Trying to disprove y >= 2 with prime factor 3 of 402 ...
-- Trying to disprove y >= 4 with prime factor 2 of 402 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 402 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 402 ^ y,
if x >= 2, 402 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45 (mod 60).
Therefore, 402 ^ y = 155, 7, 19 (mod 181).
So 5 ^ x = 148, 0, 12 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 402 ^ y is impossible.
-/
theorem diophantine1_5_7_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 402 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 402 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (402 ^ y % 181) [155, 7, 19]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [148, 0, 12]) [
    {prop := List.Mem (402 ^ y % 181) [155, 7, 19], proof := h10},
    {prop := 5 ^ x + 7 = 402 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [148, 0, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 402 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 13 of 403 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 403 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 403 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 403 ^ y is impossible.
-/
theorem diophantine1_5_7_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (403 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 403 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 404 ...
-- Trying to disprove y >= 2 with prime factor 2 of 404 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 404 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 404 ^ y,
if x >= 1, 404 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 404 ^ y is impossible.
-/
theorem diophantine1_5_7_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 404 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 404 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 404 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 405 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 405 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 405 ^ y is impossible.
-/
theorem diophantine1_5_7_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (405 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 405 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 406 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 406 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (406 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 407 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 37 of 407 ...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   5 ^ x + 7 = 407 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 407 ^ y,
if y >= 1, 5 ^ x = 30 (mod 37).
So x = 10 (mod 36), 
which implies x = 1, 10, 19 (mod 27).
Therefore, 5 ^ x = 5, 97, 7 (mod 109).
So 407 ^ y = 12, 104, 14 (mod 109), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 407 ^ y is impossible.
-/
theorem diophantine1_5_7_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (407 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 37 = 30 := by omega
  have h9 := Claim (x % 36 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 37 = 30, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 109) [5, 97, 7]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 36 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (407 ^ y % 109) [12, 104, 14]) [
    {prop := List.Mem (5 ^ x % 109) [5, 97, 7], proof := h10},
    {prop := 5 ^ x + 7 = 407 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (407 ^ y % 109) [12, 104, 14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 407 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 408 ...
-- Trying to disprove y >= 1 with prime factor 3 of 408 ...
-- Trying to disprove y >= 2 with prime factor 2 of 408 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 408 ...
-- Trying to disprove y >= 2 with prime factor 3 of 408 ...
-- Trying to disprove y >= 4 with prime factor 2 of 408 ...
-- Trying to disprove y >= 1 with prime factor 17 of 408 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Trying prime 593...
-- Trying prime 641...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 641)   5 ^ x + 7 = 408 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 408 ^ y,
if y >= 1, 5 ^ x = 10 (mod 17).
So x = 7 (mod 16), 
which implies x = 7, 23, 39, 55 (mod 64).
Therefore, 5 ^ x = 564, 321, 77, 320 (mod 641).
So 408 ^ y = 571, 328, 84, 327 (mod 641), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 408 ^ y is impossible.
-/
theorem diophantine1_5_7_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (408 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 10 := by omega
  have h9 := Claim (x % 16 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 641) [564, 321, 77, 320]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (408 ^ y % 641) [571, 328, 84, 327]) [
    {prop := List.Mem (5 ^ x % 641) [564, 321, 77, 320], proof := h10},
    {prop := 5 ^ x + 7 = 408 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (408 ^ y % 641) [571, 328, 84, 327], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 408 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 409 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 409 ^ y,
if x >= 1, 409 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 409 ^ y is impossible.
-/
theorem diophantine1_5_7_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 409 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 410 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 410 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 410 ^ y is impossible.
-/
theorem diophantine1_5_7_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (410 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 410 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 411 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 411 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 411 ^ y,
if x >= 1, 411 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 411 ^ y is impossible.
-/
theorem diophantine1_5_7_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 411 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 411 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 411 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 412 ...
-- Trying to disprove y >= 2 with prime factor 2 of 412 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 412 ...
-- Trying to disprove y >= 4 with prime factor 2 of 412 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 412 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 412 ^ y,
if x >= 2, 412 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45, 65, 85, 105, 125, 145, 165, 185, 205, 225 (mod 240).
Therefore, 412 ^ y = 19, 65, 197, 230, 178, 165, 222, 176, 44, 11, 63, 76 (mod 241).
So 5 ^ x = 12, 58, 190, 223, 171, 158, 215, 169, 37, 4, 56, 69 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 412 ^ y is impossible.
-/
theorem diophantine1_5_7_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 412 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 412 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (412 ^ y % 241) [19, 65, 197, 230, 178, 165, 222, 176, 44, 11, 63, 76]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [12, 58, 190, 223, 171, 158, 215, 169, 37, 4, 56, 69]) [
    {prop := List.Mem (412 ^ y % 241) [19, 65, 197, 230, 178, 165, 222, 176, 44, 11, 63, 76], proof := h10},
    {prop := 5 ^ x + 7 = 412 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [12, 58, 190, 223, 171, 158, 215, 169, 37, 4, 56, 69], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 412 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 413 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 413 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (413 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 414 ...
-- Trying to disprove y >= 1 with prime factor 3 of 414 ...
-- Trying to disprove y >= 2 with prime factor 2 of 414 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 414 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 414 ^ y,
if x >= 1, 414 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 414 ^ y is impossible.
-/
theorem diophantine1_5_7_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 414 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 414 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 414 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 415 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 415 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 415 ^ y is impossible.
-/
theorem diophantine1_5_7_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (415 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 415 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 416 ...
-- Trying to disprove y >= 2 with prime factor 2 of 416 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 416 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 416 ^ y,
if x >= 1, 416 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 416 ^ y is impossible.
-/
theorem diophantine1_5_7_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 416 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 416 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 416 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 417 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 417 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 417 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 417 ^ y,
if x >= 2, 417 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45 (mod 48).
Therefore, 417 ^ y = 176, 19, 165, 63, 230, 44, 65, 222, 76, 178, 11, 197 (mod 241).
So 5 ^ x = 169, 12, 158, 56, 223, 37, 58, 215, 69, 171, 4, 190 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 417 ^ y is impossible.
-/
theorem diophantine1_5_7_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 417 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 417 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (417 ^ y % 241) [176, 19, 165, 63, 230, 44, 65, 222, 76, 178, 11, 197]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [169, 12, 158, 56, 223, 37, 58, 215, 69, 171, 4, 190]) [
    {prop := List.Mem (417 ^ y % 241) [176, 19, 165, 63, 230, 44, 65, 222, 76, 178, 11, 197], proof := h10},
    {prop := 5 ^ x + 7 = 417 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [169, 12, 158, 56, 223, 37, 58, 215, 69, 171, 4, 190], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 417 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 418 ...
-- Trying to disprove y >= 2 with prime factor 2 of 418 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 418 ...
-- Trying to disprove y >= 1 with prime factor 11 of 418 ...
-- Trying to disprove y >= 4 with prime factor 2 of 418 ...
-- Trying to disprove y >= 1 with prime factor 19 of 418 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 418 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 418 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 418 ^ y is impossible.
-/
theorem diophantine1_5_7_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (418 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 418 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 419 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 419 ^ y,
if x >= 1, 419 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 419 ^ y is impossible.
-/
theorem diophantine1_5_7_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 419 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 420 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 420 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (420 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 421 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 421 ^ y,
if x >= 1, 421 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 421 ^ y is impossible.
-/
theorem diophantine1_5_7_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 421 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 422 ...
-- Trying to disprove y >= 2 with prime factor 2 of 422 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 422 ...
-- Trying to disprove y >= 4 with prime factor 2 of 422 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 422 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 422 ^ y,
if x >= 2, 422 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 422 ^ y = 1, 47, 13 (mod 61).
So 5 ^ x = 55, 40, 6 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 422 ^ y is impossible.
-/
theorem diophantine1_5_7_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 422 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 422 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (422 ^ y % 61) [1, 47, 13]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 40, 6]) [
    {prop := List.Mem (422 ^ y % 61) [1, 47, 13], proof := h10},
    {prop := 5 ^ x + 7 = 422 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 40, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 422 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 423 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 423 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 423 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 423 ^ y,
if x >= 2, 423 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 423 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 423 ^ y is impossible.
-/
theorem diophantine1_5_7_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 423 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 423 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (423 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (423 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 423 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 423 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 424 ...
-- Trying to disprove y >= 2 with prime factor 2 of 424 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 424 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 424 ^ y,
if x >= 1, 424 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 424 ^ y is impossible.
-/
theorem diophantine1_5_7_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 424 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 424 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 424 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 425 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 425 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 425 ^ y is impossible.
-/
theorem diophantine1_5_7_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (425 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 425 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 426 ...
-- Trying to disprove y >= 1 with prime factor 3 of 426 ...
-- Trying to disprove y >= 2 with prime factor 2 of 426 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 426 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 426 ^ y,
if x >= 1, 426 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 426 ^ y is impossible.
-/
theorem diophantine1_5_7_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 426 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 426 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 426 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 427 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 427 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (427 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 428 ...
-- Trying to disprove y >= 2 with prime factor 2 of 428 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 428 ...
-- Trying to disprove y >= 4 with prime factor 2 of 428 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 428 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 428 ^ y,
if x >= 2, 428 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 428 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 428 ^ y is impossible.
-/
theorem diophantine1_5_7_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 428 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 428 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (428 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (428 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 428 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 428 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 429 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 429 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 429 ^ y,
if x >= 1, 429 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 429 ^ y is impossible.
-/
theorem diophantine1_5_7_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 429 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 429 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 429 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 430 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 430 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 430 ^ y is impossible.
-/
theorem diophantine1_5_7_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (430 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 430 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 431 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 431 ^ y,
if x >= 1, 431 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 431 ^ y is impossible.
-/
theorem diophantine1_5_7_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 431 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 432 ...
-- Trying to disprove y >= 1 with prime factor 3 of 432 ...
-- Trying to disprove y >= 2 with prime factor 2 of 432 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 432 ...
-- Trying to disprove y >= 2 with prime factor 3 of 432 ...
-- Trying to disprove y >= 4 with prime factor 2 of 432 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 3 of 432 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   5 ^ x + 7 = 432 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 432 ^ y,
if y >= 3, 5 ^ x = 20 (mod 27).
So x = 5 (mod 18), 
which implies x = 5, 14, 23 (mod 27).
Therefore, 5 ^ x = 73, 21, 15 (mod 109).
So 432 ^ y = 80, 28, 22 (mod 109), but this is impossible.
Therefore, y < 3.
Further examination shows that 5 ^ x + 7 = 432 ^ y is impossible.
-/
theorem diophantine1_5_7_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (432 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 27 = 20 := by omega
  have h9 := Claim (x % 18 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 27 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 109) [73, 21, 15]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (432 ^ y % 109) [80, 28, 22]) [
    {prop := List.Mem (5 ^ x % 109) [73, 21, 15], proof := h10},
    {prop := 5 ^ x + 7 = 432 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (432 ^ y % 109) [80, 28, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 432 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 433 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 433 ^ y,
if x >= 2, 433 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55 (mod 60).
Therefore, 433 ^ y = 19, 7, 155 (mod 181).
So 5 ^ x = 12, 0, 148 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 433 ^ y is impossible.
-/
theorem diophantine1_5_7_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 433 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (433 ^ y % 181) [19, 7, 155]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [12, 0, 148]) [
    {prop := List.Mem (433 ^ y % 181) [19, 7, 155], proof := h10},
    {prop := 5 ^ x + 7 = 433 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [12, 0, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 433 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 434 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 434 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (434 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 435 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 435 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 435 ^ y is impossible.
-/
theorem diophantine1_5_7_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (435 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 435 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 436 ...
-- Trying to disprove y >= 2 with prime factor 2 of 436 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 436 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 436 ^ y,
if x >= 1, 436 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 436 ^ y is impossible.
-/
theorem diophantine1_5_7_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 436 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 436 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 436 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 437 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 437 ^ y,
if y >= 1, 5 ^ x = 12 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 437 ^ y is impossible.
-/
theorem diophantine1_5_7_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 19 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 19 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 438 ...
-- Trying to disprove y >= 1 with prime factor 3 of 438 ...
-- Trying to disprove y >= 2 with prime factor 2 of 438 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 438 ...
-- Trying to disprove y >= 2 with prime factor 3 of 438 ...
-- Trying to disprove y >= 4 with prime factor 2 of 438 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 438 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 438 ^ y,
if x >= 2, 438 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3 (mod 4).
Therefore, 438 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 438 ^ y is impossible.
-/
theorem diophantine1_5_7_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 438 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 438 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (438 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (438 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 438 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 438 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 439 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 439 ^ y,
if x >= 1, 439 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 439 ^ y is impossible.
-/
theorem diophantine1_5_7_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 439 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 440 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 440 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 440 ^ y is impossible.
-/
theorem diophantine1_5_7_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (440 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 440 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 441 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 441 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (441 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 442 ...
-- Trying to disprove y >= 2 with prime factor 2 of 442 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 442 ...
-- Trying to disprove y >= 1 with prime factor 13 of 442 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 442 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 442 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 442 ^ y is impossible.
-/
theorem diophantine1_5_7_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (442 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 442 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 443 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 443 ^ y,
if x >= 3, 443 ^ y = 7 (mod 125).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 443 ^ y is impossible.
-/
theorem diophantine1_5_7_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 125 = 7 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 443 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 444 ...
-- Trying to disprove y >= 1 with prime factor 3 of 444 ...
-- Trying to disprove y >= 2 with prime factor 2 of 444 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 444 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 444 ^ y,
if x >= 1, 444 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 444 ^ y is impossible.
-/
theorem diophantine1_5_7_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 444 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 444 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 444 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 445 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 445 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 445 ^ y is impossible.
-/
theorem diophantine1_5_7_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (445 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 445 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 446 ...
-- Trying to disprove y >= 2 with prime factor 2 of 446 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 446 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 446 ^ y,
if x >= 1, 446 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 446 ^ y is impossible.
-/
theorem diophantine1_5_7_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 446 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 446 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 446 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 447 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 447 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 447 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 447 ^ y,
if x >= 2, 447 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 447 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 447 ^ y is impossible.
-/
theorem diophantine1_5_7_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 447 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 447 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (447 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (447 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 447 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 447 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 448 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 448 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (448 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 449 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 449 ^ y,
if x >= 1, 449 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 449 ^ y is impossible.
-/
theorem diophantine1_5_7_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 449 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 449 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 450 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 450 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 450 ^ y is impossible.
-/
theorem diophantine1_5_7_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (450 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 450 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 451 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 451 ^ y,
if x >= 1, 451 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 451 ^ y is impossible.
-/
theorem diophantine1_5_7_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 451 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 451 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 451 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 452 ...
-- Trying to disprove y >= 2 with prime factor 2 of 452 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 452 ...
-- Trying to disprove y >= 4 with prime factor 2 of 452 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 452 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 452 ^ y,
if x >= 2, 452 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0, 5, 10 (mod 15).
Therefore, 452 ^ y = 1, 13, 47 (mod 61).
So 5 ^ x = 55, 6, 40 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 452 ^ y is impossible.
-/
theorem diophantine1_5_7_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 452 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 452 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (452 ^ y % 61) [1, 13, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [55, 6, 40]) [
    {prop := List.Mem (452 ^ y % 61) [1, 13, 47], proof := h10},
    {prop := 5 ^ x + 7 = 452 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [55, 6, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 452 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 453 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 453 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 401)   5 ^ x + 7 = 453 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 453 ^ y,
if x >= 2, 453 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235, 255, 275, 295, 315, 335, 355, 375, 395 (mod 400).
Therefore, 453 ^ y = 230, 248, 243, 133, 119, 212, 253, 353, 147, 26, 171, 153, 158, 268, 282, 189, 148, 48, 254, 375 (mod 401).
So 5 ^ x = 223, 241, 236, 126, 112, 205, 246, 346, 140, 19, 164, 146, 151, 261, 275, 182, 141, 41, 247, 368 (mod 401), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 453 ^ y is impossible.
-/
theorem diophantine1_5_7_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 453 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 453 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (453 ^ y % 401) [230, 248, 243, 133, 119, 212, 253, 353, 147, 26, 171, 153, 158, 268, 282, 189, 148, 48, 254, 375]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 401) [223, 241, 236, 126, 112, 205, 246, 346, 140, 19, 164, 146, 151, 261, 275, 182, 141, 41, 247, 368]) [
    {prop := List.Mem (453 ^ y % 401) [230, 248, 243, 133, 119, 212, 253, 353, 147, 26, 171, 153, 158, 268, 282, 189, 148, 48, 254, 375], proof := h10},
    {prop := 5 ^ x + 7 = 453 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 401) [223, 241, 236, 126, 112, 205, 246, 346, 140, 19, 164, 146, 151, 261, 275, 182, 141, 41, 247, 368], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 453 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 454 ...
-- Trying to disprove y >= 2 with prime factor 2 of 454 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 454 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 454 ^ y,
if x >= 1, 454 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 454 ^ y is impossible.
-/
theorem diophantine1_5_7_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 454 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 454 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 454 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 455 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 455 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (455 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 456 ...
-- Trying to disprove y >= 1 with prime factor 3 of 456 ...
-- Trying to disprove y >= 2 with prime factor 2 of 456 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 456 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 456 ^ y,
if x >= 1, 456 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 456 ^ y is impossible.
-/
theorem diophantine1_5_7_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 456 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 456 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 456 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove x >= 3 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 401)   5 ^ x + 7 = 457 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 457 ^ y,
if x >= 3, 457 ^ y = 7 (mod 125).
So y = 13 (mod 20), 
Therefore, 457 ^ y = 22 (mod 401).
So 5 ^ x = 15 (mod 401), but this is impossible.
Therefore, x < 3.
Further examination shows that 5 ^ x + 7 = 457 ^ y is impossible.
-/
theorem diophantine1_5_7_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (5 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 125 = 7 := by omega
  have h9 := Claim (y % 20 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 125 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (457 ^ y % 401) [22]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 401) [15]) [
    {prop := List.Mem (457 ^ y % 401) [22], proof := h10},
    {prop := 5 ^ x + 7 = 457 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 401) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 457 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 458 ...
-- Trying to disprove y >= 2 with prime factor 2 of 458 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 458 ...
-- Trying to disprove y >= 4 with prime factor 2 of 458 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 458 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 458 ^ y,
if x >= 2, 458 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175 (mod 180).
Therefore, 458 ^ y = 7, 93, 72, 155, 120, 17, 19, 149, 92 (mod 181).
So 5 ^ x = 0, 86, 65, 148, 113, 10, 12, 142, 85 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 458 ^ y is impossible.
-/
theorem diophantine1_5_7_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 458 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 458 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (458 ^ y % 181) [7, 93, 72, 155, 120, 17, 19, 149, 92]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [0, 86, 65, 148, 113, 10, 12, 142, 85]) [
    {prop := List.Mem (458 ^ y % 181) [7, 93, 72, 155, 120, 17, 19, 149, 92], proof := h10},
    {prop := 5 ^ x + 7 = 458 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [0, 86, 65, 148, 113, 10, 12, 142, 85], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 458 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 459 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 459 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 459 ^ y,
if x >= 1, 459 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 459 ^ y is impossible.
-/
theorem diophantine1_5_7_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 459 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 459 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 459 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 460 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 460 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 460 ^ y is impossible.
-/
theorem diophantine1_5_7_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (460 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 460 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 461 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 461 ^ y,
if x >= 1, 461 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 461 ^ y is impossible.
-/
theorem diophantine1_5_7_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 461 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 462 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 462 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (462 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 463 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 463 ^ y,
if x >= 2, 463 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47 (mod 48).
Therefore, 463 ^ y = 130, 153, 219, 115, 89, 203, 111, 88, 22, 126, 152, 38 (mod 241).
So 5 ^ x = 123, 146, 212, 108, 82, 196, 104, 81, 15, 119, 145, 31 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 463 ^ y is impossible.
-/
theorem diophantine1_5_7_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 463 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (463 ^ y % 241) [130, 153, 219, 115, 89, 203, 111, 88, 22, 126, 152, 38]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [123, 146, 212, 108, 82, 196, 104, 81, 15, 119, 145, 31]) [
    {prop := List.Mem (463 ^ y % 241) [130, 153, 219, 115, 89, 203, 111, 88, 22, 126, 152, 38], proof := h10},
    {prop := 5 ^ x + 7 = 463 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [123, 146, 212, 108, 82, 196, 104, 81, 15, 119, 145, 31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 463 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 464 ...
-- Trying to disprove y >= 2 with prime factor 2 of 464 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 464 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 464 ^ y,
if x >= 1, 464 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 464 ^ y is impossible.
-/
theorem diophantine1_5_7_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 464 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 464 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 464 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 465 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 465 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 465 ^ y is impossible.
-/
theorem diophantine1_5_7_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (465 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 465 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 466 ...
-- Trying to disprove y >= 2 with prime factor 2 of 466 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 466 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 466 ^ y,
if x >= 1, 466 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 466 ^ y is impossible.
-/
theorem diophantine1_5_7_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 466 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 466 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 466 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 467 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 467 ^ y,
if x >= 2, 467 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 467 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 467 ^ y is impossible.
-/
theorem diophantine1_5_7_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (467 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (467 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 467 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 467 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 468 ...
-- Trying to disprove y >= 1 with prime factor 3 of 468 ...
-- Trying to disprove y >= 2 with prime factor 2 of 468 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 468 ...
-- Trying to disprove y >= 2 with prime factor 3 of 468 ...
-- Trying to disprove y >= 1 with prime factor 13 of 468 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   5 ^ x + 7 = 468 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 468 ^ y,
if y >= 1, 5 ^ x = 6 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 468 ^ y is impossible.
-/
theorem diophantine1_5_7_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (468 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 13 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 13 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 468 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 469 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 469 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (469 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 470 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 470 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 470 ^ y is impossible.
-/
theorem diophantine1_5_7_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (470 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 470 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 471 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 471 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 471 ^ y,
if x >= 1, 471 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 471 ^ y is impossible.
-/
theorem diophantine1_5_7_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 471 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 471 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 471 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 472 ...
-- Trying to disprove y >= 2 with prime factor 2 of 472 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 472 ...
-- Trying to disprove y >= 4 with prime factor 2 of 472 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 472 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 472 ^ y,
if x >= 2, 472 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45 (mod 60).
Therefore, 472 ^ y = 7, 155, 19 (mod 181).
So 5 ^ x = 0, 148, 12 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 472 ^ y is impossible.
-/
theorem diophantine1_5_7_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 472 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 472 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (472 ^ y % 181) [7, 155, 19]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [0, 148, 12]) [
    {prop := List.Mem (472 ^ y % 181) [7, 155, 19], proof := h10},
    {prop := 5 ^ x + 7 = 472 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [0, 148, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 472 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 11 of 473 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   5 ^ x + 7 = 473 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 473 ^ y,
if x >= 2, 473 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
Therefore, 473 ^ y = 10 (mod 101).
So 5 ^ x = 3 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 473 ^ y is impossible.
-/
theorem diophantine1_5_7_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 473 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 473 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (473 ^ y % 101) [10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 101) [3]) [
    {prop := List.Mem (473 ^ y % 101) [10], proof := h10},
    {prop := 5 ^ x + 7 = 473 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 101) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 473 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 474 ...
-- Trying to disprove y >= 1 with prime factor 3 of 474 ...
-- Trying to disprove y >= 2 with prime factor 2 of 474 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 474 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 474 ^ y,
if x >= 1, 474 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 474 ^ y is impossible.
-/
theorem diophantine1_5_7_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 474 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 474 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 474 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 475 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 475 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 475 ^ y is impossible.
-/
theorem diophantine1_5_7_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (475 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 475 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 476 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 476 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (476 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 477 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 2 with prime factor 3 of 477 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 477 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 477 ^ y,
if x >= 2, 477 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1 (mod 4).
Therefore, 477 ^ y = 50 (mod 61).
So 5 ^ x = 43 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 477 ^ y is impossible.
-/
theorem diophantine1_5_7_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 477 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 477 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (477 ^ y % 61) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [43]) [
    {prop := List.Mem (477 ^ y % 61) [50], proof := h10},
    {prop := 5 ^ x + 7 = 477 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [43], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 477 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 478 ...
-- Trying to disprove y >= 2 with prime factor 2 of 478 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 478 ...
-- Trying to disprove y >= 4 with prime factor 2 of 478 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   5 ^ x + 7 = 478 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 478 ^ y,
if x >= 2, 478 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 3, 7, 11 (mod 12).
Therefore, 478 ^ y = 177, 4, 60 (mod 241).
So 5 ^ x = 170, 238, 53 (mod 241), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 478 ^ y is impossible.
-/
theorem diophantine1_5_7_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 478 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 478 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (478 ^ y % 241) [177, 4, 60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 241) [170, 238, 53]) [
    {prop := List.Mem (478 ^ y % 241) [177, 4, 60], proof := h10},
    {prop := 5 ^ x + 7 = 478 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 241) [170, 238, 53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 478 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 479 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 479 ^ y,
if x >= 1, 479 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 479 ^ y is impossible.
-/
theorem diophantine1_5_7_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 479 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 479 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 480 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 480 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 480 ^ y is impossible.
-/
theorem diophantine1_5_7_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (480 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 480 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 481 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 481 ^ y,
if x >= 1, 481 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 481 ^ y is impossible.
-/
theorem diophantine1_5_7_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 481 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 481 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 481 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 482 ...
-- Trying to disprove y >= 2 with prime factor 2 of 482 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 482 ...
-- Trying to disprove y >= 4 with prime factor 2 of 482 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying to disprove y >= 5 with prime factor 2 of 482 ...
-- Trying to disprove y >= 6 with prime factor 2 of 482 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 113)   5 ^ x + 7 = 482 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 482 ^ y,
if y >= 6, 5 ^ x = 57 (mod 64).
So x = 10 (mod 16), 
which implies x = 10, 26, 42, 58, 74, 90, 106 (mod 112).
Therefore, 5 ^ x = 52, 91, 18, 88, 41, 100, 62 (mod 113).
So 482 ^ y = 59, 98, 25, 95, 48, 107, 69 (mod 113), but this is impossible.
Therefore, y < 6.
Further examination shows that 5 ^ x + 7 = 482 ^ y is impossible.
-/
theorem diophantine1_5_7_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 6
  have h7 := Claim (482 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 64 = 57 := by omega
  have h9 := Claim (x % 16 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 64 = 57, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 113) [52, 91, 18, 88, 41, 100, 62]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (482 ^ y % 113) [59, 98, 25, 95, 48, 107, 69]) [
    {prop := List.Mem (5 ^ x % 113) [52, 91, 18, 88, 41, 100, 62], proof := h10},
    {prop := 5 ^ x + 7 = 482 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (482 ^ y % 113) [59, 98, 25, 95, 48, 107, 69], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 482 ^ y, proof := h3},
    {prop := y <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 483 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 483 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (483 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 484 ...
-- Trying to disprove y >= 2 with prime factor 2 of 484 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 484 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 484 ^ y,
if x >= 1, 484 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 484 ^ y is impossible.
-/
theorem diophantine1_5_7_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 484 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 484 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 484 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 485 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 485 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 485 ^ y is impossible.
-/
theorem diophantine1_5_7_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (485 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 485 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 486 ...
-- Trying to disprove y >= 1 with prime factor 3 of 486 ...
-- Trying to disprove y >= 2 with prime factor 2 of 486 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 486 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 486 ^ y,
if x >= 1, 486 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 486 ^ y is impossible.
-/
theorem diophantine1_5_7_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 486 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 486 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 486 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 61)   5 ^ x + 7 = 487 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 487 ^ y,
if x >= 2, 487 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 1 (mod 2).
Therefore, 487 ^ y = 60 (mod 61).
So 5 ^ x = 53 (mod 61), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 487 ^ y is impossible.
-/
theorem diophantine1_5_7_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 487 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (487 ^ y % 61) [60]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 61) [53]) [
    {prop := List.Mem (487 ^ y % 61) [60], proof := h10},
    {prop := 5 ^ x + 7 = 487 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 61) [53], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 487 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 488 ...
-- Trying to disprove y >= 2 with prime factor 2 of 488 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 488 ...
-- Trying to disprove y >= 4 with prime factor 2 of 488 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   5 ^ x + 7 = 488 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 488 ^ y,
if x >= 2, 488 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 488 ^ y = 1 (mod 41).
So 5 ^ x = 35 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 488 ^ y is impossible.
-/
theorem diophantine1_5_7_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 488 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 488 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (488 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 41) [35]) [
    {prop := List.Mem (488 ^ y % 41) [1], proof := h10},
    {prop := 5 ^ x + 7 = 488 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 41) [35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 488 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 489 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 489 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 489 ^ y,
if x >= 1, 489 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 489 ^ y is impossible.
-/
theorem diophantine1_5_7_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 489 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 489 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 489 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 490 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 490 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (490 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 491 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 491 ^ y,
if x >= 1, 491 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 491 ^ y is impossible.
-/
theorem diophantine1_5_7_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 491 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 492 ...
-- Trying to disprove y >= 1 with prime factor 3 of 492 ...
-- Trying to disprove y >= 2 with prime factor 2 of 492 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 492 ...
-- Trying to disprove y >= 2 with prime factor 3 of 492 ...
-- Trying to disprove y >= 4 with prime factor 2 of 492 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 181)   5 ^ x + 7 = 492 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 492 ^ y,
if x >= 2, 492 ^ y = 7 (mod 25).
So y = 5 (mod 20), 
which implies y = 5, 25, 45 (mod 60).
Therefore, 492 ^ y = 26, 174, 162 (mod 181).
So 5 ^ x = 19, 167, 155 (mod 181), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 492 ^ y is impossible.
-/
theorem diophantine1_5_7_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 492 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 492 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (492 ^ y % 181) [26, 174, 162]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 181) [19, 167, 155]) [
    {prop := List.Mem (492 ^ y % 181) [26, 174, 162], proof := h10},
    {prop := 5 ^ x + 7 = 492 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 181) [19, 167, 155], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 492 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 1 with prime factor 17 of 493 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   5 ^ x + 7 = 493 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 493 ^ y,
if y >= 1, 5 ^ x = 10 (mod 17).
So x = 7 (mod 16), 
which implies x = 7, 15, 23, 31, 39 (mod 40).
Therefore, 5 ^ x = 41, 211, 116, 162, 193 (mod 241).
So 493 ^ y = 48, 218, 123, 169, 200 (mod 241), but this is impossible.
Therefore, y < 1.
So 5 ^ x + 7 = 493 ^ y is impossible.
-/
theorem diophantine1_5_7_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (493 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ x % 17 = 10 := by omega
  have h9 := Claim (x % 16 = 7) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 17 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ x % 241) [41, 211, 116, 162, 193]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (493 ^ y % 241) [48, 218, 123, 169, 200]) [
    {prop := List.Mem (5 ^ x % 241) [41, 211, 116, 162, 193], proof := h10},
    {prop := 5 ^ x + 7 = 493 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (493 ^ y % 241) [48, 218, 123, 169, 200], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 493 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 494 ...
-- Trying to disprove y >= 2 with prime factor 2 of 494 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 494 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 494 ^ y,
if x >= 1, 494 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 494 ^ y is impossible.
-/
theorem diophantine1_5_7_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 494 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 494 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 494 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 495 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 495 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 495 ^ y is impossible.
-/
theorem diophantine1_5_7_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (495 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 495 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 496 ...
-- Trying to disprove y >= 2 with prime factor 2 of 496 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 496 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 496 ^ y,
if x >= 1, 496 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 496 ^ y is impossible.
-/
theorem diophantine1_5_7_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 496 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 496 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 496 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   5 ^ x + 7 = 497 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 497 ^ y,
this is impossible, because it implies that 5 ^ x = 0 (mod 7).
-/
theorem diophantine1_5_7_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (497 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ x % 7 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 5 ^ x % 7 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 498 ...
-- Trying to disprove y >= 1 with prime factor 3 of 498 ...
-- Trying to disprove y >= 2 with prime factor 2 of 498 ...
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Trying to disprove y >= 3 with prime factor 2 of 498 ...
-- Trying to disprove y >= 2 with prime factor 3 of 498 ...
-- Trying to disprove y >= 4 with prime factor 2 of 498 ...
-- Trying to disprove x >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 401)   5 ^ x + 7 = 498 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 498 ^ y,
if x >= 2, 498 ^ y = 7 (mod 25).
So y = 15 (mod 20), 
which implies y = 15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235, 255, 275, 295, 315, 335, 355, 375, 395 (mod 400).
Therefore, 498 ^ y = 158, 26, 253, 133, 230, 48, 282, 153, 147, 212, 243, 375, 148, 268, 171, 353, 119, 248, 254, 189 (mod 401).
So 5 ^ x = 151, 19, 246, 126, 223, 41, 275, 146, 140, 205, 236, 368, 141, 261, 164, 346, 112, 241, 247, 182 (mod 401), but this is impossible.
Therefore, x < 2.
Further examination shows that 5 ^ x + 7 = 498 ^ y is impossible.
-/
theorem diophantine1_5_7_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 498 ^ y % 25 = 7 := by omega
  have h9 := Claim (y % 20 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 498 ^ y % 25 = 7, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (498 ^ y % 401) [158, 26, 253, 133, 230, 48, 282, 153, 147, 212, 243, 375, 148, 268, 171, 353, 119, 248, 254, 189]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ x % 401) [151, 19, 246, 126, 223, 41, 275, 146, 140, 205, 236, 368, 141, 261, 164, 346, 112, 241, 247, 182]) [
    {prop := List.Mem (498 ^ y % 401) [158, 26, 253, 133, 230, 48, 282, 153, 147, 212, 243, 375, 148, 268, 171, 353, 119, 248, 254, 189], proof := h10},
    {prop := 5 ^ x + 7 = 498 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (5 ^ x % 401) [151, 19, 246, 126, 223, 41, 275, 146, 140, 205, 236, 368, 141, 261, 164, 346, 112, 241, 247, 182], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 498 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   5 ^ x + 7 = 499 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 499 ^ y,
if x >= 1, 499 ^ y = 2 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 5 ^ x + 7 = 499 ^ y is impossible.
-/
theorem diophantine1_5_7_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 5 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 5 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 499 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 7 = 500 ^ y
For positive integers x, y satisfying 5 ^ x + 7 = 500 ^ y,
if x >= 2 and y >= 2,
7 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 7 = 500 ^ y is impossible.
-/
theorem diophantine1_5_7_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 7 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (500 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 7 = 500 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
