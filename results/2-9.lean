-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 2 <= a <= 2
-- 9 <= b <= 9
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   2 ^ x + 9 = 2 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 2 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 2 ^ y is impossible.
-/
theorem diophantine1_2_9_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 2 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 3 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 3 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 4 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 4 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 4 ^ y is impossible.
-/
theorem diophantine1_2_9_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 4 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 5 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 5 ^ y,
if x >= 6, 5 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 5 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (4, 2).
-/
theorem diophantine1_2_9_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 5 ^ y) :
  List.Mem (x, y) [(4, 2)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 5 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (5 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 5 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 2)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 5 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 6 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 6 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 7 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 7 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 7 ^ y is impossible.
-/
theorem diophantine1_2_9_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 7 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 8 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 8 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 8 ^ y is impossible.
-/
theorem diophantine1_2_9_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 8 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 9 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 9 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 10 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 10 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 10 ^ y is impossible.
-/
theorem diophantine1_2_9_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 10 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 11 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 11 ^ y,
if x >= 6, 11 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 11 ^ y = 9 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_2_9_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (11 ^ y % 17) [9], proof := h10},
    {prop := 2 ^ x + 9 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 11 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 12 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 12 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 13 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 13 ^ y,
if x >= 6, 13 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 13 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_2_9_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 13 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (13 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 13 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 14 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 14 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 14 ^ y is impossible.
-/
theorem diophantine1_2_9_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 14 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 15 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 15 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 16 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 16 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 16 ^ y is impossible.
-/
theorem diophantine1_2_9_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 16 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 17 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 17 ^ y,
if x >= 4, 17 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_2_9_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 17 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 17 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 18 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 18 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 19 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 19 ^ y,
if x >= 6, 19 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 19 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 19 ^ y is impossible.
-/
theorem diophantine1_2_9_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (19 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (19 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 19 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 19 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 20 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 20 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 20 ^ y is impossible.
-/
theorem diophantine1_2_9_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 20 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 21 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 21 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 22 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 22 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 22 ^ y is impossible.
-/
theorem diophantine1_2_9_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 22 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 23 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 23 ^ y,
if x >= 4, 23 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 23 ^ y is impossible.
-/
theorem diophantine1_2_9_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 23 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 24 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 24 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 5 of 25 ...
-- Trying prime 101...
-- Trying prime 401...
-- Trying prime 601...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 601)   2 ^ x + 9 = 25 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 25 ^ y,
if y >= 3, 2 ^ x = 116 (mod 125).
So x = 64 (mod 100), 
which implies x = 14 (mod 25).
Therefore, 2 ^ x = 157 (mod 601).
So 25 ^ y = 166 (mod 601), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_2_9_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 25 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (25 ^ y % 125 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 125 = 116 := by omega
  have h9 := Claim (x % 100 = 64) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 125 = 116, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 601) [157]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 100 = 64, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 601) [166]) [
    {prop := List.Mem (2 ^ x % 601) [157], proof := h10},
    {prop := 2 ^ x + 9 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 601) [166], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 25 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 26 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 26 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 26 ^ y is impossible.
-/
theorem diophantine1_2_9_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 26 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 27 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 27 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 28 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 28 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 28 ^ y is impossible.
-/
theorem diophantine1_2_9_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 28 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 29 of 29 ...
-- Trying prime 113...
-- Trying prime 197...
-- Trying prime 281...
-- Trying prime 337...
-- Trying prime 421...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 421)   2 ^ x + 9 = 29 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 29 ^ y,
if y >= 1, 2 ^ x = 20 (mod 29).
So x = 24 (mod 28), 
which implies x = 24, 52, 80, 108, 136, 164, 192, 220, 248, 276, 304, 332, 360, 388, 416 (mod 420).
Therefore, 2 ^ x = 366, 406, 149, 232, 25, 313, 315, 239, 180, 317, 163, 121, 33, 9, 79 (mod 421).
So 29 ^ y = 375, 415, 158, 241, 34, 322, 324, 248, 189, 326, 172, 130, 42, 18, 88 (mod 421), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 29 ^ y is impossible.
-/
theorem diophantine1_2_9_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 29 = 20 := by omega
  have h9 := Claim (x % 28 = 24) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 29 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 421) [366, 406, 149, 232, 25, 313, 315, 239, 180, 317, 163, 121, 33, 9, 79]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (29 ^ y % 421) [375, 415, 158, 241, 34, 322, 324, 248, 189, 326, 172, 130, 42, 18, 88]) [
    {prop := List.Mem (2 ^ x % 421) [366, 406, 149, 232, 25, 313, 315, 239, 180, 317, 163, 121, 33, 9, 79], proof := h10},
    {prop := 2 ^ x + 9 = 29 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (29 ^ y % 421) [375, 415, 158, 241, 34, 322, 324, 248, 189, 326, 172, 130, 42, 18, 88], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 30 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 30 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 31 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 31 ^ y,
if x >= 4, 31 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 31 ^ y is impossible.
-/
theorem diophantine1_2_9_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 31 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 32 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 32 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 32 ^ y is impossible.
-/
theorem diophantine1_2_9_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 32 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 33 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 33 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 34 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 34 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 34 ^ y is impossible.
-/
theorem diophantine1_2_9_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 34 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Trying to disprove y >= 1 with prime factor 7 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 35 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 35 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 35 ^ y is impossible.
-/
theorem diophantine1_2_9_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 36 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 36 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 181...
-- Trying prime 397...
-- Trying prime 433...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 37 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 37 ^ y,
if x >= 6, 37 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 37 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 37 ^ y is impossible.
-/
theorem diophantine1_2_9_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (37 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 37 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 38 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 38 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 38 ^ y is impossible.
-/
theorem diophantine1_2_9_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 38 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 39 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 39 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 40 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 40 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 40 ^ y is impossible.
-/
theorem diophantine1_2_9_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 40 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 41 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 41 ^ y,
if x >= 7, 41 ^ y = 9 (mod 128).
So y = 13 (mod 16), 
Therefore, 41 ^ y = 6 (mod 17).
So 2 ^ x = 14 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that (x, y) = (5, 1).
-/
theorem diophantine1_2_9_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 41 ^ y) :
  List.Mem (x, y) [(5, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 17) [6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [14]) [
    {prop := List.Mem (41 ^ y % 17) [6], proof := h10},
    {prop := 2 ^ x + 9 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim (List.Mem (x, y) [(5, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 41 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 42 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 42 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 43 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 43 ^ y,
if y >= 1, 2 ^ x = 34 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 43 ^ y is impossible.
-/
theorem diophantine1_2_9_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 43 = 34 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 43 = 34, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 44 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 44 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 44 ^ y is impossible.
-/
theorem diophantine1_2_9_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 44 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 45 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 45 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 46 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 46 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 46 ^ y is impossible.
-/
theorem diophantine1_2_9_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 46 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 47 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 47 ^ y,
if x >= 4, 47 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 47 ^ y is impossible.
-/
theorem diophantine1_2_9_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 47 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 48 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 48 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 49 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 49 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 49 ^ y is impossible.
-/
theorem diophantine1_2_9_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 49 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 50 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 50 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 50 ^ y is impossible.
-/
theorem diophantine1_2_9_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 50 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 51 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 51 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 52 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 52 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 52 ^ y is impossible.
-/
theorem diophantine1_2_9_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 52 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 53 of 53 ...
-- Trying prime 157...
-- Trying prime 313...
-- Trying prime 521...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 521)   2 ^ x + 9 = 53 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 53 ^ y,
if y >= 1, 2 ^ x = 44 (mod 53).
So x = 8 (mod 52), 
which implies x = 8, 60, 112, 164, 216 (mod 260).
Therefore, 2 ^ x = 256, 302, 283, 53, 148 (mod 521).
So 53 ^ y = 265, 311, 292, 62, 157 (mod 521), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 53 ^ y is impossible.
-/
theorem diophantine1_2_9_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 53 = 44 := by omega
  have h9 := Claim (x % 52 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 53 = 44, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 521) [256, 302, 283, 53, 148]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 52 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 521) [265, 311, 292, 62, 157]) [
    {prop := List.Mem (2 ^ x % 521) [256, 302, 283, 53, 148], proof := h10},
    {prop := 2 ^ x + 9 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 521) [265, 311, 292, 62, 157], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 54 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 54 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 55 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 55 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1, 11 (mod 20).
Therefore, 2 ^ x = 2, 39 (mod 41).
So 55 ^ y = 11, 7 (mod 41), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 55 ^ y is impossible.
-/
theorem diophantine1_2_9_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [2, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [11, 7]) [
    {prop := List.Mem (2 ^ x % 41) [2, 39], proof := h10},
    {prop := 2 ^ x + 9 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [11, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 56 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 56 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 56 ^ y is impossible.
-/
theorem diophantine1_2_9_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 56 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 57 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 57 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 58 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 58 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 58 ^ y is impossible.
-/
theorem diophantine1_2_9_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 58 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 59 of 59 ...
-- Trying prime 233...
-- Trying prime 349...
-- Trying prime 523...
-- Trying prime 929...
-- Trying prime 1103...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 59 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 59 ^ y,
if x >= 6, 59 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6 (mod 8).
Therefore, 59 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 59 ^ y is impossible.
-/
theorem diophantine1_2_9_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (59 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 59 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 60 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 60 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   2 ^ x + 9 = 61 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 61 ^ y,
if y >= 1, 2 ^ x = 52 (mod 61).
So x = 42 (mod 60), 
which implies x = 42, 102, 162 (mod 180).
Therefore, 2 ^ x = 156, 67, 139 (mod 181).
So 61 ^ y = 165, 76, 148 (mod 181), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 61 ^ y is impossible.
-/
theorem diophantine1_2_9_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 61 = 52 := by omega
  have h9 := Claim (x % 60 = 42) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 61 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 181) [156, 67, 139]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 42, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 181) [165, 76, 148]) [
    {prop := List.Mem (2 ^ x % 181) [156, 67, 139], proof := h10},
    {prop := 2 ^ x + 9 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 181) [165, 76, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 62 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 62 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 62 ^ y is impossible.
-/
theorem diophantine1_2_9_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 62 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 63 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 63 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 64 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 64 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 64 ^ y is impossible.
-/
theorem diophantine1_2_9_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 64 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 9 = 65 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 65 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 5, 8 (mod 9).
Therefore, 2 ^ x = 4, 32, 37 (mod 73).
So 65 ^ y = 13, 41, 46 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 65 ^ y is impossible.
-/
theorem diophantine1_2_9_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [4, 32, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 73) [13, 41, 46]) [
    {prop := List.Mem (2 ^ x % 73) [4, 32, 37], proof := h10},
    {prop := 2 ^ x + 9 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 73) [13, 41, 46], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 66 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 66 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 397...
-- Trying prime 463...
-- Trying prime 661...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 97...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 193)   2 ^ x + 9 = 67 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 67 ^ y,
if x >= 7, 67 ^ y = 9 (mod 128).
So y = 2 (mod 32), 
Therefore, 67 ^ y = 50 (mod 193).
So 2 ^ x = 41 (mod 193), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 67 ^ y is impossible.
-/
theorem diophantine1_2_9_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 32 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 193) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 32 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 193) [41]) [
    {prop := List.Mem (67 ^ y % 193) [50], proof := h10},
    {prop := 2 ^ x + 9 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 193) [41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 67 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 68 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 68 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 68 ^ y is impossible.
-/
theorem diophantine1_2_9_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 68 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 69 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 69 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 70 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 70 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 70 ^ y is impossible.
-/
theorem diophantine1_2_9_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 70 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 71 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 71 ^ y,
if x >= 4, 71 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 71 ^ y is impossible.
-/
theorem diophantine1_2_9_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 71 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 72 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 72 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 73 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 73 ^ y,
if x >= 7, 73 ^ y = 9 (mod 128).
So y = 9 (mod 16), 
Therefore, 73 ^ y = 12 (mod 17).
So 2 ^ x = 3 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that (x, y) = (6, 1).
-/
theorem diophantine1_2_9_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 73 ^ y) :
  List.Mem (x, y) [(6, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 17) [12]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [3]) [
    {prop := List.Mem (73 ^ y % 17) [12], proof := h10},
    {prop := 2 ^ x + 9 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim (List.Mem (x, y) [(6, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 73 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 74 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 74 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 74 ^ y is impossible.
-/
theorem diophantine1_2_9_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 74 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 75 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 75 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 76 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 76 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 76 ^ y is impossible.
-/
theorem diophantine1_2_9_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 76 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 77 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 77 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 77 ^ y is impossible.
-/
theorem diophantine1_2_9_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 78 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 78 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 79 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 79 ^ y,
if x >= 4, 79 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 79 ^ y is impossible.
-/
theorem diophantine1_2_9_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 79 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 80 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 80 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 80 ^ y is impossible.
-/
theorem diophantine1_2_9_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 80 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 81 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 81 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 82 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 82 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 82 ^ y is impossible.
-/
theorem diophantine1_2_9_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 82 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 83 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 83 ^ y,
if x >= 6, 83 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 83 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 83 ^ y is impossible.
-/
theorem diophantine1_2_9_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (83 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 83 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 84 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 84 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying to disprove y >= 2 with prime factor 5 of 85 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 85 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 85 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20).
Therefore, 2 ^ x = 16 (mod 41).
So 85 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 85 ^ y is impossible.
-/
theorem diophantine1_2_9_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 41) [25]) [
    {prop := List.Mem (2 ^ x % 41) [16], proof := h10},
    {prop := 2 ^ x + 9 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 85 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 86 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 86 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 86 ^ y is impossible.
-/
theorem diophantine1_2_9_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 86 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 87 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 87 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 88 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 88 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 88 ^ y is impossible.
-/
theorem diophantine1_2_9_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 88 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 89 of 89 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 89 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 89 ^ y,
if y >= 1, 2 ^ x = 80 (mod 89).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 89 ^ y is impossible.
-/
theorem diophantine1_2_9_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (89 ^ y % 89 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 89 = 80 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 89 = 80, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 89 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 90 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 90 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 91 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 91 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 91 ^ y is impossible.
-/
theorem diophantine1_2_9_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 92 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 92 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 92 ^ y is impossible.
-/
theorem diophantine1_2_9_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 92 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 93 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 93 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 94 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 94 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 94 ^ y is impossible.
-/
theorem diophantine1_2_9_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 94 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 95 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 95 ^ y,
if x >= 4, 95 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 95 ^ y is impossible.
-/
theorem diophantine1_2_9_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 95 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 95 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 96 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 96 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 97 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 97 ^ y,
if x >= 4, 97 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 97 ^ y is impossible.
-/
theorem diophantine1_2_9_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 98 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 98 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 98 ^ y is impossible.
-/
theorem diophantine1_2_9_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 98 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 99 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 99 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 100 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 100 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 100 ^ y is impossible.
-/
theorem diophantine1_2_9_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 100 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 101 of 101 ...
-- Trying prime 401...
-- Trying prime 601...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 601)   2 ^ x + 9 = 101 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 101 ^ y,
if y >= 1, 2 ^ x = 92 (mod 101).
So x = 88 (mod 100), 
which implies x = 13 (mod 25).
Therefore, 2 ^ x = 379 (mod 601).
So 101 ^ y = 388 (mod 601), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 101 ^ y is impossible.
-/
theorem diophantine1_2_9_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (101 ^ y % 101 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 101 = 92 := by omega
  have h9 := Claim (x % 100 = 88) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 101 = 92, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 601) [379]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 100 = 88, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (101 ^ y % 601) [388]) [
    {prop := List.Mem (2 ^ x % 601) [379], proof := h10},
    {prop := 2 ^ x + 9 = 101 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (101 ^ y % 601) [388], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 101 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 102 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 102 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 103 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 103 ^ y,
if x >= 4, 103 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 103 ^ y is impossible.
-/
theorem diophantine1_2_9_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 103 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 104 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 104 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 104 ^ y is impossible.
-/
theorem diophantine1_2_9_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 104 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 105 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 105 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 106 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 106 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 106 ^ y is impossible.
-/
theorem diophantine1_2_9_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 106 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 107 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 107 ^ y,
if x >= 6, 107 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 107 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 107 ^ y is impossible.
-/
theorem diophantine1_2_9_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (107 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 107 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 108 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 108 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 109 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 109 ^ y,
if x >= 6, 109 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 109 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 109 ^ y is impossible.
-/
theorem diophantine1_2_9_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (109 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 109 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 110 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 110 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 110 ^ y is impossible.
-/
theorem diophantine1_2_9_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 110 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 111 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 111 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 112 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 112 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 112 ^ y is impossible.
-/
theorem diophantine1_2_9_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 112 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 113 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 113 ^ y,
if x >= 4, 113 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 113 ^ y is impossible.
-/
theorem diophantine1_2_9_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 113 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 114 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 114 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 115 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 23 of 115 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 115 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 115 ^ y,
if y >= 1, 2 ^ x = 14 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 115 ^ y is impossible.
-/
theorem diophantine1_2_9_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 14 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 14, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 116 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 116 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 116 ^ y is impossible.
-/
theorem diophantine1_2_9_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 116 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 117 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 117 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (117 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 118 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 118 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 118 ^ y is impossible.
-/
theorem diophantine1_2_9_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 118 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 119 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 119 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 119 ^ y is impossible.
-/
theorem diophantine1_2_9_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 120 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 120 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 121 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 121 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 121 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 121 ^ y is impossible.
-/
theorem diophantine1_2_9_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (121 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 121 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 122 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 122 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 122 ^ y is impossible.
-/
theorem diophantine1_2_9_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 122 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 123 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 123 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 124 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 124 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 124 ^ y is impossible.
-/
theorem diophantine1_2_9_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 124 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 125 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   2 ^ x + 9 = 125 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 125 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20), 
which implies x = 4, 24, 44, 64, 84, 104, 124, 144, 164 (mod 180).
Therefore, 2 ^ x = 16, 145, 81, 44, 82, 87, 121, 135, 13 (mod 181).
So 125 ^ y = 25, 154, 90, 53, 91, 96, 130, 144, 22 (mod 181), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 125 ^ y is impossible.
-/
theorem diophantine1_2_9_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 181) [16, 145, 81, 44, 82, 87, 121, 135, 13]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (125 ^ y % 181) [25, 154, 90, 53, 91, 96, 130, 144, 22]) [
    {prop := List.Mem (2 ^ x % 181) [16, 145, 81, 44, 82, 87, 121, 135, 13], proof := h10},
    {prop := 2 ^ x + 9 = 125 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (125 ^ y % 181) [25, 154, 90, 53, 91, 96, 130, 144, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 125 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 126 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 126 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 127 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 127 ^ y,
if x >= 4, 127 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 127 ^ y is impossible.
-/
theorem diophantine1_2_9_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 127 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 128 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 128 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 128 ^ y is impossible.
-/
theorem diophantine1_2_9_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 128 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 129 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 129 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 130 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 130 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 130 ^ y is impossible.
-/
theorem diophantine1_2_9_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 130 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 113)   2 ^ x + 9 = 131 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 131 ^ y,
if x >= 6, 131 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 131 ^ y = 98 (mod 113).
So 2 ^ x = 89 (mod 113), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 131 ^ y is impossible.
-/
theorem diophantine1_2_9_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 113) [98]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 113) [89]) [
    {prop := List.Mem (131 ^ y % 113) [98], proof := h10},
    {prop := 2 ^ x + 9 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 113) [89], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 131 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 132 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 132 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (132 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 133 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 133 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 133 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 133 ^ y is impossible.
-/
theorem diophantine1_2_9_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 134 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 134 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 134 ^ y is impossible.
-/
theorem diophantine1_2_9_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 134 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 135 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 135 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (135 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 136 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 136 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 136 ^ y is impossible.
-/
theorem diophantine1_2_9_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 136 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 97...
-- Trying prime 193...
-- Trying prime 257...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 257)   2 ^ x + 9 = 137 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 137 ^ y,
if x >= 8, 137 ^ y = 9 (mod 256).
So y = 17 (mod 32), 
Therefore, 137 ^ y = 120 (mod 257).
So 2 ^ x = 111 (mod 257), but this is impossible.
Therefore, x < 8.
Further examination shows that (x, y) = (7, 1).
-/
theorem diophantine1_2_9_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 137 ^ y) :
  List.Mem (x, y) [(7, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 256 = 9 := by omega
  have h9 := Claim (y % 32 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 256 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 257) [120]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 32 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 257) [111]) [
    {prop := List.Mem (137 ^ y % 257) [120], proof := h10},
    {prop := 2 ^ x + 9 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 257) [111], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim (List.Mem (x, y) [(7, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 137 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 138 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 138 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (138 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 139 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 139 ^ y,
if x >= 6, 139 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 139 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 139 ^ y is impossible.
-/
theorem diophantine1_2_9_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (139 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 139 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 140 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 140 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 140 ^ y is impossible.
-/
theorem diophantine1_2_9_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (140 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 140 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 141 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 141 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 142 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 142 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 142 ^ y is impossible.
-/
theorem diophantine1_2_9_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 142 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 143 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 143 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 143 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 143 ^ y is impossible.
-/
theorem diophantine1_2_9_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (143 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 143 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (143 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 144 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 144 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (144 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 145 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 145 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 145 ^ y,
if x >= 4, 145 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 145 ^ y is impossible.
-/
theorem diophantine1_2_9_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 145 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 145 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 145 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 146 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 146 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 146 ^ y is impossible.
-/
theorem diophantine1_2_9_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 146 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 147 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 147 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 148 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 148 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 148 ^ y is impossible.
-/
theorem diophantine1_2_9_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 148 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 149 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 149 ^ y,
if x >= 6, 149 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 149 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 149 ^ y is impossible.
-/
theorem diophantine1_2_9_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (149 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 149 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 150 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 150 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 151 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 151 ^ y,
if x >= 4, 151 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 151 ^ y is impossible.
-/
theorem diophantine1_2_9_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 151 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 152 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 152 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 152 ^ y is impossible.
-/
theorem diophantine1_2_9_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 152 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 153 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 153 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (153 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 154 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 154 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 154 ^ y is impossible.
-/
theorem diophantine1_2_9_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 154 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 155 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 155 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 155 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 155 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20).
Therefore, 2 ^ x = 16 (mod 41).
So 155 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 155 ^ y is impossible.
-/
theorem diophantine1_2_9_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (155 ^ y % 41) [25]) [
    {prop := List.Mem (2 ^ x % 41) [16], proof := h10},
    {prop := 2 ^ x + 9 = 155 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (155 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 156 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 156 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (156 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 157 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 157 ^ y,
if x >= 6, 157 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 157 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 157 ^ y is impossible.
-/
theorem diophantine1_2_9_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (157 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 157 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 158 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 158 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 158 ^ y is impossible.
-/
theorem diophantine1_2_9_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 158 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 159 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 159 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 160 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 160 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 160 ^ y is impossible.
-/
theorem diophantine1_2_9_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 160 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 161 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 161 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 161 ^ y is impossible.
-/
theorem diophantine1_2_9_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 162 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 162 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (162 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 163 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 163 ^ y,
if x >= 6, 163 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 163 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 163 ^ y is impossible.
-/
theorem diophantine1_2_9_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (163 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 163 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 164 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 164 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 164 ^ y is impossible.
-/
theorem diophantine1_2_9_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 164 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 165 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 165 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 166 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 166 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 166 ^ y is impossible.
-/
theorem diophantine1_2_9_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 166 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 167 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 167 ^ y,
if x >= 4, 167 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 167 ^ y is impossible.
-/
theorem diophantine1_2_9_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 167 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 168 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 168 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying prime 157...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 157)   2 ^ x + 9 = 169 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 169 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50 (mod 52).
Therefore, 2 ^ x = 4, 64, 82, 56, 111, 49, 156, 141, 58, 143, 90, 27, 118 (mod 157).
So 169 ^ y = 13, 73, 91, 65, 120, 58, 8, 150, 67, 152, 99, 36, 127 (mod 157), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 169 ^ y is impossible.
-/
theorem diophantine1_2_9_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 157) [4, 64, 82, 56, 111, 49, 156, 141, 58, 143, 90, 27, 118]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (169 ^ y % 157) [13, 73, 91, 65, 120, 58, 8, 150, 67, 152, 99, 36, 127]) [
    {prop := List.Mem (2 ^ x % 157) [4, 64, 82, 56, 111, 49, 156, 141, 58, 143, 90, 27, 118], proof := h10},
    {prop := 2 ^ x + 9 = 169 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (169 ^ y % 157) [13, 73, 91, 65, 120, 58, 8, 150, 67, 152, 99, 36, 127], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 170 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 170 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 170 ^ y is impossible.
-/
theorem diophantine1_2_9_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 170 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 171 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 171 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (171 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 172 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 172 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 172 ^ y is impossible.
-/
theorem diophantine1_2_9_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 172 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 9 = 173 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 173 ^ y,
if x >= 6, 173 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234 (mod 240).
Therefore, 173 ^ y = 209, 174, 48, 221, 169, 30, 108, 196, 79, 188, 2, 200, 238, 182, 125 (mod 241).
So 2 ^ x = 200, 165, 39, 212, 160, 21, 99, 187, 70, 179, 234, 191, 229, 173, 116 (mod 241), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 173 ^ y is impossible.
-/
theorem diophantine1_2_9_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 241) [209, 174, 48, 221, 169, 30, 108, 196, 79, 188, 2, 200, 238, 182, 125]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [200, 165, 39, 212, 160, 21, 99, 187, 70, 179, 234, 191, 229, 173, 116]) [
    {prop := List.Mem (173 ^ y % 241) [209, 174, 48, 221, 169, 30, 108, 196, 79, 188, 2, 200, 238, 182, 125], proof := h10},
    {prop := 2 ^ x + 9 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [200, 165, 39, 212, 160, 21, 99, 187, 70, 179, 234, 191, 229, 173, 116], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 173 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 174 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 174 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (174 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 175 ...
-- Trying to disprove y >= 1 with prime factor 7 of 175 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 175 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 175 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 175 ^ y is impossible.
-/
theorem diophantine1_2_9_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (175 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 175 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 176 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 176 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 176 ^ y is impossible.
-/
theorem diophantine1_2_9_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 176 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 177 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 177 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 178 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 178 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 178 ^ y is impossible.
-/
theorem diophantine1_2_9_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 178 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 9 = 179 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 179 ^ y,
if x >= 6, 179 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234 (mod 240).
Therefore, 179 ^ y = 121, 50, 180, 166, 212, 233, 164, 12, 236, 223, 128, 27, 49, 80, 47 (mod 241).
So 2 ^ x = 112, 41, 171, 157, 203, 224, 155, 3, 227, 214, 119, 18, 40, 71, 38 (mod 241), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 179 ^ y is impossible.
-/
theorem diophantine1_2_9_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 241) [121, 50, 180, 166, 212, 233, 164, 12, 236, 223, 128, 27, 49, 80, 47]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [112, 41, 171, 157, 203, 224, 155, 3, 227, 214, 119, 18, 40, 71, 38]) [
    {prop := List.Mem (179 ^ y % 241) [121, 50, 180, 166, 212, 233, 164, 12, 236, 223, 128, 27, 49, 80, 47], proof := h10},
    {prop := 2 ^ x + 9 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [112, 41, 171, 157, 203, 224, 155, 3, 227, 214, 119, 18, 40, 71, 38], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 179 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 180 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 180 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 181 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 181 ^ y,
if x >= 6, 181 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 181 ^ y = 9 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 181 ^ y is impossible.
-/
theorem diophantine1_2_9_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (181 ^ y % 17) [9], proof := h10},
    {prop := 2 ^ x + 9 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 181 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 182 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 182 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 182 ^ y is impossible.
-/
theorem diophantine1_2_9_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 182 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 183 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 183 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 184 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 184 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 184 ^ y is impossible.
-/
theorem diophantine1_2_9_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 184 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 185 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 185 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   2 ^ x + 9 = 185 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 185 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20), 
which implies x = 4, 24, 44, 64, 84 (mod 100).
Therefore, 2 ^ x = 16, 5, 71, 79, 31 (mod 101).
So 185 ^ y = 25, 14, 80, 88, 40 (mod 101), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 185 ^ y is impossible.
-/
theorem diophantine1_2_9_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 101) [16, 5, 71, 79, 31]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (185 ^ y % 101) [25, 14, 80, 88, 40]) [
    {prop := List.Mem (2 ^ x % 101) [16, 5, 71, 79, 31], proof := h10},
    {prop := 2 ^ x + 9 = 185 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (185 ^ y % 101) [25, 14, 80, 88, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 186 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 186 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (186 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 187 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 187 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 187 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 187 ^ y is impossible.
-/
theorem diophantine1_2_9_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 188 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 188 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 188 ^ y is impossible.
-/
theorem diophantine1_2_9_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 188 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 189 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 189 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (189 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 190 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 190 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 190 ^ y is impossible.
-/
theorem diophantine1_2_9_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 190 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 191 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 191 ^ y,
if x >= 4, 191 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 191 ^ y is impossible.
-/
theorem diophantine1_2_9_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 191 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 192 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 192 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (192 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 193 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 193 ^ y,
if x >= 4, 193 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 193 ^ y is impossible.
-/
theorem diophantine1_2_9_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 193 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 194 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 194 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 194 ^ y is impossible.
-/
theorem diophantine1_2_9_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 194 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 195 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 195 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 196 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 196 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 196 ^ y is impossible.
-/
theorem diophantine1_2_9_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 196 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 197 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 197 ^ y,
if x >= 6, 197 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 197 ^ y = 9 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 197 ^ y is impossible.
-/
theorem diophantine1_2_9_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (197 ^ y % 17) [9], proof := h10},
    {prop := 2 ^ x + 9 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 197 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 198 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 198 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (198 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 199 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 199 ^ y,
if x >= 4, 199 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 199 ^ y is impossible.
-/
theorem diophantine1_2_9_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 199 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 200 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 200 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 200 ^ y is impossible.
-/
theorem diophantine1_2_9_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 200 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 201 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 201 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 202 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 202 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 202 ^ y is impossible.
-/
theorem diophantine1_2_9_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 202 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 203 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 203 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 203 ^ y is impossible.
-/
theorem diophantine1_2_9_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 203 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 204 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 204 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (204 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 205 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 205 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   2 ^ x + 9 = 205 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 205 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20), 
which implies x = 0, 4, 8, 12, 16, 20 (mod 24).
Therefore, 2 ^ x = 1, 16, 15, 240, 225, 226 (mod 241).
So 205 ^ y = 10, 25, 24, 8, 234, 235 (mod 241), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 205 ^ y is impossible.
-/
theorem diophantine1_2_9_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 241) [1, 16, 15, 240, 225, 226]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (205 ^ y % 241) [10, 25, 24, 8, 234, 235]) [
    {prop := List.Mem (2 ^ x % 241) [1, 16, 15, 240, 225, 226], proof := h10},
    {prop := 2 ^ x + 9 = 205 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (205 ^ y % 241) [10, 25, 24, 8, 234, 235], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 205 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 206 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 206 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 206 ^ y is impossible.
-/
theorem diophantine1_2_9_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 206 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 207 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 207 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (207 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 208 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 208 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 208 ^ y is impossible.
-/
theorem diophantine1_2_9_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 208 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 209 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 209 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 209 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 209 ^ y is impossible.
-/
theorem diophantine1_2_9_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 210 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 210 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 211 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 211 ^ y,
if x >= 6, 211 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 211 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 211 ^ y is impossible.
-/
theorem diophantine1_2_9_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (211 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 211 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 212 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 212 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 212 ^ y is impossible.
-/
theorem diophantine1_2_9_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 212 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 213 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 213 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 214 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 214 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 214 ^ y is impossible.
-/
theorem diophantine1_2_9_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 214 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 215 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 215 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 215 ^ y,
if x >= 4, 215 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 215 ^ y is impossible.
-/
theorem diophantine1_2_9_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 215 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 215 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 215 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 216 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 216 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (216 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 217 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 217 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 217 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 217 ^ y is impossible.
-/
theorem diophantine1_2_9_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (217 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 217 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 218 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 218 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 218 ^ y is impossible.
-/
theorem diophantine1_2_9_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 218 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 219 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 219 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 220 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 220 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 220 ^ y is impossible.
-/
theorem diophantine1_2_9_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 220 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 9 = 221 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 221 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14, 26 (mod 36).
Therefore, 2 ^ x = 4, 30, 3 (mod 37).
So 221 ^ y = 13, 2, 12 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 221 ^ y is impossible.
-/
theorem diophantine1_2_9_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [4, 30, 3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (221 ^ y % 37) [13, 2, 12]) [
    {prop := List.Mem (2 ^ x % 37) [4, 30, 3], proof := h10},
    {prop := 2 ^ x + 9 = 221 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (221 ^ y % 37) [13, 2, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 222 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 222 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (222 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 223 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 223 ^ y,
if x >= 4, 223 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 223 ^ y is impossible.
-/
theorem diophantine1_2_9_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 223 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 224 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 224 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 224 ^ y is impossible.
-/
theorem diophantine1_2_9_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 224 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 225 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 225 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (225 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 226 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 226 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 226 ^ y is impossible.
-/
theorem diophantine1_2_9_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 226 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 227 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 227 ^ y,
if x >= 6, 227 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 227 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 227 ^ y is impossible.
-/
theorem diophantine1_2_9_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (227 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 227 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 228 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 228 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (228 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 229 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 229 ^ y,
if x >= 6, 229 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6 (mod 8).
Therefore, 229 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 229 ^ y is impossible.
-/
theorem diophantine1_2_9_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (229 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 229 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 230 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 230 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 230 ^ y is impossible.
-/
theorem diophantine1_2_9_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 230 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 231 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 231 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 232 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 232 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 232 ^ y is impossible.
-/
theorem diophantine1_2_9_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 232 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 233 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 233 ^ y,
if x >= 7, 233 ^ y = 9 (mod 128).
So y = 5 (mod 16), 
Therefore, 233 ^ y = 3 (mod 17).
So 2 ^ x = 11 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 233 ^ y is impossible.
-/
theorem diophantine1_2_9_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 17) [3]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [11]) [
    {prop := List.Mem (233 ^ y % 17) [3], proof := h10},
    {prop := 2 ^ x + 9 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 233 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 234 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 234 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (234 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 235 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 235 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 521)   2 ^ x + 9 = 235 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 235 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20), 
which implies x = 4, 24, 44, 64, 84, 104, 124, 144, 164, 184, 204, 224, 244 (mod 260).
Therefore, 2 ^ x = 16, 495, 433, 143, 484, 516, 464, 288, 53, 500, 490, 376, 431 (mod 521).
So 235 ^ y = 25, 504, 442, 152, 493, 4, 473, 297, 62, 509, 499, 385, 440 (mod 521), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 235 ^ y is impossible.
-/
theorem diophantine1_2_9_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 521) [16, 495, 433, 143, 484, 516, 464, 288, 53, 500, 490, 376, 431]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (235 ^ y % 521) [25, 504, 442, 152, 493, 4, 473, 297, 62, 509, 499, 385, 440]) [
    {prop := List.Mem (2 ^ x % 521) [16, 495, 433, 143, 484, 516, 464, 288, 53, 500, 490, 376, 431], proof := h10},
    {prop := 2 ^ x + 9 = 235 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (235 ^ y % 521) [25, 504, 442, 152, 493, 4, 473, 297, 62, 509, 499, 385, 440], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 235 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 236 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 236 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 236 ^ y is impossible.
-/
theorem diophantine1_2_9_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 236 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 237 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 237 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 238 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 238 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 238 ^ y is impossible.
-/
theorem diophantine1_2_9_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 238 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 239 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 239 ^ y,
if x >= 4, 239 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 239 ^ y is impossible.
-/
theorem diophantine1_2_9_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 239 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 240 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 240 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 241 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 241 ^ y,
if x >= 4, 241 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 241 ^ y is impossible.
-/
theorem diophantine1_2_9_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 241 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 242 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 242 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 242 ^ y is impossible.
-/
theorem diophantine1_2_9_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 242 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 243 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 243 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (243 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 244 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 244 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 244 ^ y is impossible.
-/
theorem diophantine1_2_9_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 244 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 245 ...
-- Trying to disprove y >= 1 with prime factor 7 of 245 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 245 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 245 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 245 ^ y is impossible.
-/
theorem diophantine1_2_9_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (245 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 245 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 246 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 246 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (246 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying prime 157...
-- Trying prime 181...
-- Trying prime 193...
-- Trying prime 229...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   2 ^ x + 9 = 247 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 247 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14 (mod 24).
Therefore, 2 ^ x = 4, 237 (mod 241).
So 247 ^ y = 13, 5 (mod 241), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 247 ^ y is impossible.
-/
theorem diophantine1_2_9_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 241) [4, 237]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (247 ^ y % 241) [13, 5]) [
    {prop := List.Mem (2 ^ x % 241) [4, 237], proof := h10},
    {prop := 2 ^ x + 9 = 247 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (247 ^ y % 241) [13, 5], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 248 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 248 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 248 ^ y is impossible.
-/
theorem diophantine1_2_9_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 248 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 249 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 249 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 250 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 250 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 250 ^ y is impossible.
-/
theorem diophantine1_2_9_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 250 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 251 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 251 ^ y,
if x >= 6, 251 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 251 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 251 ^ y is impossible.
-/
theorem diophantine1_2_9_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (251 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (251 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 251 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 251 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 252 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 252 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (252 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 253 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 253 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 253 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 253 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 253 ^ y is impossible.
-/
theorem diophantine1_2_9_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (253 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (253 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 253 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (253 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 253 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 254 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 254 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 254 ^ y is impossible.
-/
theorem diophantine1_2_9_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (254 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 254 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 255 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 255 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (255 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 256 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 256 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 256 ^ y is impossible.
-/
theorem diophantine1_2_9_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (256 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 256 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 257 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 257 ^ y,
if x >= 4, 257 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 257 ^ y is impossible.
-/
theorem diophantine1_2_9_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 257 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 258 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 258 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (258 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 259 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 259 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 259 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 259 ^ y is impossible.
-/
theorem diophantine1_2_9_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (259 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 259 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 260 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 260 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 260 ^ y is impossible.
-/
theorem diophantine1_2_9_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (260 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 260 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 261 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 261 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (261 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 262 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 262 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 262 ^ y is impossible.
-/
theorem diophantine1_2_9_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (262 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 262 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 263 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 263 ^ y,
if x >= 4, 263 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 263 ^ y is impossible.
-/
theorem diophantine1_2_9_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 263 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 264 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 264 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (264 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 5 of 265 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 601...
-- Trying prime 641...
-- Trying prime 661...
-- Trying prime 701...
-- Trying to disprove y >= 3 with prime factor 5 of 265 ...
-- Trying prime 101...
-- Trying prime 401...
-- Trying prime 601...
-- Trying prime 701...
-- Trying prime 1201...
-- Trying prime 1301...
-- Trying prime 1601...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 1601)   2 ^ x + 9 = 265 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 265 ^ y,
if y >= 3, 2 ^ x = 116 (mod 125).
So x = 64 (mod 100), 
which implies x = 64, 164, 264, 364 (mod 400).
Therefore, 2 ^ x = 1104, 668, 497, 933 (mod 1601).
So 265 ^ y = 1113, 677, 506, 942 (mod 1601), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (8, 1).
-/
theorem diophantine1_2_9_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 265 ^ y) :
  List.Mem (x, y) [(8, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (265 ^ y % 125 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 125 = 116 := by omega
  have h9 := Claim (x % 100 = 64) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 125 = 116, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 1601) [1104, 668, 497, 933]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 100 = 64, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (265 ^ y % 1601) [1113, 677, 506, 942]) [
    {prop := List.Mem (2 ^ x % 1601) [1104, 668, 497, 933], proof := h10},
    {prop := 2 ^ x + 9 = 265 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (265 ^ y % 1601) [1113, 677, 506, 942], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(8, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 265 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 266 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 266 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 266 ^ y is impossible.
-/
theorem diophantine1_2_9_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (266 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 266 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 267 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 267 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (267 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 268 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 268 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 268 ^ y is impossible.
-/
theorem diophantine1_2_9_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (268 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 268 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 97)   2 ^ x + 9 = 269 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 269 ^ y,
if x >= 6, 269 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 269 ^ y = 96 (mod 97).
So 2 ^ x = 87 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 269 ^ y is impossible.
-/
theorem diophantine1_2_9_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (269 ^ y % 97) [96]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 97) [87]) [
    {prop := List.Mem (269 ^ y % 97) [96], proof := h10},
    {prop := 2 ^ x + 9 = 269 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 97) [87], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 269 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 270 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 270 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (270 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 271 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 271 ^ y,
if x >= 4, 271 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 271 ^ y is impossible.
-/
theorem diophantine1_2_9_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 271 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 271 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 272 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 272 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 272 ^ y is impossible.
-/
theorem diophantine1_2_9_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (272 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 272 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 273 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 273 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (273 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 274 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 274 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 274 ^ y is impossible.
-/
theorem diophantine1_2_9_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (274 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 274 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 275 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 275 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 275 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 275 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 275 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 275 ^ y is impossible.
-/
theorem diophantine1_2_9_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (275 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (275 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 275 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (275 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 275 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 276 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 276 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (276 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 277 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 277 ^ y,
if x >= 6, 277 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 277 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 277 ^ y is impossible.
-/
theorem diophantine1_2_9_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (277 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (277 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 277 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 277 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 278 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 278 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 278 ^ y is impossible.
-/
theorem diophantine1_2_9_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (278 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 278 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 279 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 279 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (279 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 280 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 280 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 280 ^ y is impossible.
-/
theorem diophantine1_2_9_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (280 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 280 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 281 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 281 ^ y,
if x >= 7, 281 ^ y = 9 (mod 128).
So y = 3 (mod 16), 
which implies y = 3 (mod 8).
Therefore, 281 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 281 ^ y is impossible.
-/
theorem diophantine1_2_9_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 281 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (281 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (281 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 281 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 281 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 282 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 282 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (282 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 97)   2 ^ x + 9 = 283 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 283 ^ y,
if x >= 6, 283 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 283 ^ y = 50 (mod 97).
So 2 ^ x = 41 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 283 ^ y is impossible.
-/
theorem diophantine1_2_9_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (283 ^ y % 97) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 97) [41]) [
    {prop := List.Mem (283 ^ y % 97) [50], proof := h10},
    {prop := 2 ^ x + 9 = 283 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 97) [41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 283 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 284 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 284 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 284 ^ y is impossible.
-/
theorem diophantine1_2_9_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (284 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 284 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 285 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 285 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (285 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 286 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 286 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 286 ^ y is impossible.
-/
theorem diophantine1_2_9_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (286 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 286 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 287 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 287 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 287 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 287 ^ y is impossible.
-/
theorem diophantine1_2_9_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (287 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 287 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 288 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 288 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (288 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 289 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 289 ^ y,
if x >= 4, 289 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 289 ^ y is impossible.
-/
theorem diophantine1_2_9_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 289 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 289 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 289 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 290 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 290 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 290 ^ y is impossible.
-/
theorem diophantine1_2_9_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (290 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 290 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 291 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 291 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (291 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 292 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 292 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 292 ^ y is impossible.
-/
theorem diophantine1_2_9_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (292 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 292 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 293 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 293 ^ y,
if x >= 6, 293 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 293 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 293 ^ y is impossible.
-/
theorem diophantine1_2_9_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (293 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (293 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 293 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 293 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 294 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 294 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (294 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 295 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 295 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 295 ^ y,
if x >= 4, 295 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 295 ^ y is impossible.
-/
theorem diophantine1_2_9_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 295 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 295 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 295 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 296 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 296 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 296 ^ y is impossible.
-/
theorem diophantine1_2_9_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (296 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 296 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 297 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 297 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (297 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 298 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 298 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 298 ^ y is impossible.
-/
theorem diophantine1_2_9_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (298 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 298 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 299 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying prime 157...
-- Trying prime 181...
-- Trying prime 193...
-- Trying prime 229...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   2 ^ x + 9 = 299 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 299 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14 (mod 24).
Therefore, 2 ^ x = 4, 237 (mod 241).
So 299 ^ y = 13, 5 (mod 241), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 299 ^ y is impossible.
-/
theorem diophantine1_2_9_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (299 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 241) [4, 237]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (299 ^ y % 241) [13, 5]) [
    {prop := List.Mem (2 ^ x % 241) [4, 237], proof := h10},
    {prop := 2 ^ x + 9 = 299 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (299 ^ y % 241) [13, 5], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 299 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 300 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 300 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (300 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 301 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 301 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 301 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 301 ^ y is impossible.
-/
theorem diophantine1_2_9_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (301 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 301 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 302 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 302 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 302 ^ y is impossible.
-/
theorem diophantine1_2_9_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (302 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 302 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 303 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 303 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (303 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 304 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 304 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 304 ^ y is impossible.
-/
theorem diophantine1_2_9_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (304 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 304 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 305 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 305 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 305 ^ y,
if x >= 4, 305 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 305 ^ y is impossible.
-/
theorem diophantine1_2_9_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 305 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 305 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 305 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 306 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 306 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (306 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 9 = 307 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 307 ^ y,
if x >= 6, 307 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234 (mod 240).
Therefore, 307 ^ y = 128, 49, 47, 50, 166, 233, 12, 223, 27, 80, 121, 180, 212, 164, 236 (mod 241).
So 2 ^ x = 119, 40, 38, 41, 157, 224, 3, 214, 18, 71, 112, 171, 203, 155, 227 (mod 241), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 307 ^ y is impossible.
-/
theorem diophantine1_2_9_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (307 ^ y % 241) [128, 49, 47, 50, 166, 233, 12, 223, 27, 80, 121, 180, 212, 164, 236]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [119, 40, 38, 41, 157, 224, 3, 214, 18, 71, 112, 171, 203, 155, 227]) [
    {prop := List.Mem (307 ^ y % 241) [128, 49, 47, 50, 166, 233, 12, 223, 27, 80, 121, 180, 212, 164, 236], proof := h10},
    {prop := 2 ^ x + 9 = 307 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [119, 40, 38, 41, 157, 224, 3, 214, 18, 71, 112, 171, 203, 155, 227], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 307 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 308 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 308 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 308 ^ y is impossible.
-/
theorem diophantine1_2_9_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (308 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 308 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 309 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 309 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (309 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 310 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 310 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 310 ^ y is impossible.
-/
theorem diophantine1_2_9_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (310 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 310 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 311 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 311 ^ y,
if x >= 4, 311 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 311 ^ y is impossible.
-/
theorem diophantine1_2_9_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 311 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 312 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 312 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (312 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 337)   2 ^ x + 9 = 313 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 313 ^ y,
if x >= 7, 313 ^ y = 9 (mod 128).
So y = 15 (mod 16), 
which implies y = 7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127, 135, 143, 151, 159, 167 (mod 168).
Therefore, 313 ^ y = 172, 43, 95, 108, 27, 91, 107, 111, 112, 28, 7, 86, 190, 216, 54, 182, 214, 222, 224, 56, 14 (mod 337).
So 2 ^ x = 163, 34, 86, 99, 18, 82, 98, 102, 103, 19, 335, 77, 181, 207, 45, 173, 205, 213, 215, 47, 5 (mod 337), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 313 ^ y is impossible.
-/
theorem diophantine1_2_9_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (313 ^ y % 337) [172, 43, 95, 108, 27, 91, 107, 111, 112, 28, 7, 86, 190, 216, 54, 182, 214, 222, 224, 56, 14]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 337) [163, 34, 86, 99, 18, 82, 98, 102, 103, 19, 335, 77, 181, 207, 45, 173, 205, 213, 215, 47, 5]) [
    {prop := List.Mem (313 ^ y % 337) [172, 43, 95, 108, 27, 91, 107, 111, 112, 28, 7, 86, 190, 216, 54, 182, 214, 222, 224, 56, 14], proof := h10},
    {prop := 2 ^ x + 9 = 313 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 337) [163, 34, 86, 99, 18, 82, 98, 102, 103, 19, 335, 77, 181, 207, 45, 173, 205, 213, 215, 47, 5], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 313 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 314 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 314 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 314 ^ y is impossible.
-/
theorem diophantine1_2_9_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (314 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 314 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 315 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 315 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (315 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 316 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 316 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 316 ^ y is impossible.
-/
theorem diophantine1_2_9_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (316 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 316 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 317 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 317 ^ y,
if x >= 6, 317 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 317 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 317 ^ y is impossible.
-/
theorem diophantine1_2_9_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (317 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 317 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 318 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 318 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (318 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 319 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 319 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 319 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 319 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 319 ^ y is impossible.
-/
theorem diophantine1_2_9_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (319 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (319 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 319 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (319 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 319 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 320 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 320 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 320 ^ y is impossible.
-/
theorem diophantine1_2_9_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (320 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 320 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 321 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 321 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (321 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 322 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 322 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 322 ^ y is impossible.
-/
theorem diophantine1_2_9_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (322 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 322 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 323 ...
-- Trying to disprove y >= 1 with prime factor 19 of 323 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   2 ^ x + 9 = 323 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 323 ^ y,
if y >= 1, 2 ^ x = 10 (mod 19).
So x = 17 (mod 18), 
which implies x = 17, 35, 53, 71, 89, 107, 125, 143, 161, 179 (mod 180).
Therefore, 2 ^ x = 28, 120, 23, 21, 90, 153, 61, 158, 160, 91 (mod 181).
So 323 ^ y = 37, 129, 32, 30, 99, 162, 70, 167, 169, 100 (mod 181), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 323 ^ y is impossible.
-/
theorem diophantine1_2_9_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (323 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 10 := by omega
  have h9 := Claim (x % 18 = 17) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 181) [28, 120, 23, 21, 90, 153, 61, 158, 160, 91]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (323 ^ y % 181) [37, 129, 32, 30, 99, 162, 70, 167, 169, 100]) [
    {prop := List.Mem (2 ^ x % 181) [28, 120, 23, 21, 90, 153, 61, 158, 160, 91], proof := h10},
    {prop := 2 ^ x + 9 = 323 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (323 ^ y % 181) [37, 129, 32, 30, 99, 162, 70, 167, 169, 100], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 323 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 324 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 324 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (324 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 325 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 325 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 9 = 325 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 325 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14, 26 (mod 36).
Therefore, 2 ^ x = 4, 30, 3 (mod 37).
So 325 ^ y = 13, 2, 12 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 325 ^ y is impossible.
-/
theorem diophantine1_2_9_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (325 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [4, 30, 3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (325 ^ y % 37) [13, 2, 12]) [
    {prop := List.Mem (2 ^ x % 37) [4, 30, 3], proof := h10},
    {prop := 2 ^ x + 9 = 325 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (325 ^ y % 37) [13, 2, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 325 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 326 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 326 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 326 ^ y is impossible.
-/
theorem diophantine1_2_9_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (326 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 326 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 327 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 327 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (327 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 328 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 328 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 328 ^ y is impossible.
-/
theorem diophantine1_2_9_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (328 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 328 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 329 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 329 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 329 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 329 ^ y is impossible.
-/
theorem diophantine1_2_9_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (329 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 329 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 330 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 330 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (330 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 331 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 331 ^ y,
if x >= 6, 331 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
which implies y = 6 (mod 8).
Therefore, 331 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 331 ^ y is impossible.
-/
theorem diophantine1_2_9_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (331 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (331 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 331 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 331 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 332 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 332 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 332 ^ y is impossible.
-/
theorem diophantine1_2_9_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (332 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 332 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 333 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 333 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (333 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 334 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 334 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 334 ^ y is impossible.
-/
theorem diophantine1_2_9_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (334 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 334 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 335 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 335 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 335 ^ y,
if x >= 4, 335 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 335 ^ y is impossible.
-/
theorem diophantine1_2_9_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 335 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 335 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 335 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 336 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 336 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (336 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 337 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 337 ^ y,
if x >= 4, 337 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 337 ^ y is impossible.
-/
theorem diophantine1_2_9_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 337 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 337 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 338 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 338 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 338 ^ y is impossible.
-/
theorem diophantine1_2_9_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (338 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 338 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 339 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 339 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (339 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 340 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 340 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 340 ^ y is impossible.
-/
theorem diophantine1_2_9_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (340 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 340 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 341 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   2 ^ x + 9 = 341 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 341 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1, 6, 11, 16, 21, 26, 31 (mod 35).
Therefore, 2 ^ x = 2, 64, 60, 3, 25, 19, 40 (mod 71).
So 341 ^ y = 11, 2, 69, 12, 34, 28, 49 (mod 71), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 341 ^ y is impossible.
-/
theorem diophantine1_2_9_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (341 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 71) [2, 64, 60, 3, 25, 19, 40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (341 ^ y % 71) [11, 2, 69, 12, 34, 28, 49]) [
    {prop := List.Mem (2 ^ x % 71) [2, 64, 60, 3, 25, 19, 40], proof := h10},
    {prop := 2 ^ x + 9 = 341 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (341 ^ y % 71) [11, 2, 69, 12, 34, 28, 49], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 341 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 342 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 342 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (342 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 343 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 343 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 343 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 343 ^ y is impossible.
-/
theorem diophantine1_2_9_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (343 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 343 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 344 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 344 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 344 ^ y is impossible.
-/
theorem diophantine1_2_9_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (344 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 344 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 345 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 345 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (345 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 346 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 346 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 346 ^ y is impossible.
-/
theorem diophantine1_2_9_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (346 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 346 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 347 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 347 ^ y,
if x >= 6, 347 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 347 ^ y = 9 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 347 ^ y is impossible.
-/
theorem diophantine1_2_9_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (347 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (347 ^ y % 17) [9], proof := h10},
    {prop := 2 ^ x + 9 = 347 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 347 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 348 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 348 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (348 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 449)   2 ^ x + 9 = 349 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 349 ^ y,
if x >= 6, 349 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 349 ^ y = 122 (mod 449).
So 2 ^ x = 113 (mod 449), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 349 ^ y is impossible.
-/
theorem diophantine1_2_9_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (349 ^ y % 449) [122]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 449) [113]) [
    {prop := List.Mem (349 ^ y % 449) [122], proof := h10},
    {prop := 2 ^ x + 9 = 349 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 449) [113], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 349 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 350 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 350 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 350 ^ y is impossible.
-/
theorem diophantine1_2_9_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (350 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 350 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 351 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 351 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (351 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 352 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 352 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 352 ^ y is impossible.
-/
theorem diophantine1_2_9_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (352 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 352 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 353 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 353 ^ y,
if x >= 4, 353 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 353 ^ y is impossible.
-/
theorem diophantine1_2_9_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 353 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 354 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 354 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (354 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 355 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 355 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 355 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 355 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20).
Therefore, 2 ^ x = 16 (mod 41).
So 355 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 355 ^ y is impossible.
-/
theorem diophantine1_2_9_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (355 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (355 ^ y % 41) [25]) [
    {prop := List.Mem (2 ^ x % 41) [16], proof := h10},
    {prop := 2 ^ x + 9 = 355 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (355 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 355 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 356 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 356 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 356 ^ y is impossible.
-/
theorem diophantine1_2_9_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (356 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 356 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 357 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 357 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (357 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 358 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 358 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 358 ^ y is impossible.
-/
theorem diophantine1_2_9_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (358 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 358 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 359 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 359 ^ y,
if x >= 4, 359 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 359 ^ y is impossible.
-/
theorem diophantine1_2_9_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 359 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 360 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 360 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (360 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 361 ...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 9 = 361 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 361 ^ y,
if y >= 1, 2 ^ x = 10 (mod 19).
So x = 17 (mod 18), 
which implies x = 8 (mod 9).
Therefore, 2 ^ x = 37 (mod 73).
So 361 ^ y = 46 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 361 ^ y is impossible.
-/
theorem diophantine1_2_9_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (361 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 10 := by omega
  have h9 := Claim (x % 18 = 17) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (361 ^ y % 73) [46]) [
    {prop := List.Mem (2 ^ x % 73) [37], proof := h10},
    {prop := 2 ^ x + 9 = 361 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (361 ^ y % 73) [46], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 361 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 362 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 362 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 362 ^ y is impossible.
-/
theorem diophantine1_2_9_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (362 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 362 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 363 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 363 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (363 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 364 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 364 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 364 ^ y is impossible.
-/
theorem diophantine1_2_9_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (364 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 364 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 365 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 365 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 365 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 365 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20).
Therefore, 2 ^ x = 16 (mod 41).
So 365 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 365 ^ y is impossible.
-/
theorem diophantine1_2_9_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (365 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (365 ^ y % 41) [25]) [
    {prop := List.Mem (2 ^ x % 41) [16], proof := h10},
    {prop := 2 ^ x + 9 = 365 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (365 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 365 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 366 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 366 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (366 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 367 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 367 ^ y,
if x >= 4, 367 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 367 ^ y is impossible.
-/
theorem diophantine1_2_9_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 367 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 368 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 368 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 368 ^ y is impossible.
-/
theorem diophantine1_2_9_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (368 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 368 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 369 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 369 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (369 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 370 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 370 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 370 ^ y is impossible.
-/
theorem diophantine1_2_9_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (370 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 370 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 371 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 371 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 371 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 371 ^ y is impossible.
-/
theorem diophantine1_2_9_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (371 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 371 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 372 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 372 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (372 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 337)   2 ^ x + 9 = 373 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 373 ^ y,
if x >= 6, 373 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
which implies y = 2, 6, 10, 14, 18, 22, 26 (mod 28).
Therefore, 373 ^ y = 285, 258, 42, 336, 329, 273, 162 (mod 337).
So 2 ^ x = 276, 249, 33, 327, 320, 264, 153 (mod 337), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 373 ^ y is impossible.
-/
theorem diophantine1_2_9_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (373 ^ y % 337) [285, 258, 42, 336, 329, 273, 162]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 337) [276, 249, 33, 327, 320, 264, 153]) [
    {prop := List.Mem (373 ^ y % 337) [285, 258, 42, 336, 329, 273, 162], proof := h10},
    {prop := 2 ^ x + 9 = 373 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 337) [276, 249, 33, 327, 320, 264, 153], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 373 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 374 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 374 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 374 ^ y is impossible.
-/
theorem diophantine1_2_9_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (374 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 374 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 375 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 375 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (375 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 376 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 376 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 376 ^ y is impossible.
-/
theorem diophantine1_2_9_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (376 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 376 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 377 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 9 = 377 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 377 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14, 26, 38, 50 (mod 60).
Therefore, 2 ^ x = 4, 36, 19, 49, 14 (mod 61).
So 377 ^ y = 13, 45, 28, 58, 23 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 377 ^ y is impossible.
-/
theorem diophantine1_2_9_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (377 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [4, 36, 19, 49, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (377 ^ y % 61) [13, 45, 28, 58, 23]) [
    {prop := List.Mem (2 ^ x % 61) [4, 36, 19, 49, 14], proof := h10},
    {prop := 2 ^ x + 9 = 377 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (377 ^ y % 61) [13, 45, 28, 58, 23], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 377 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 378 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 378 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (378 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 379 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 379 ^ y,
if x >= 6, 379 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 379 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 379 ^ y is impossible.
-/
theorem diophantine1_2_9_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 379 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (379 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (379 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 379 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 379 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 380 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 380 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 380 ^ y is impossible.
-/
theorem diophantine1_2_9_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (380 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 380 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 381 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 381 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (381 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 382 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 382 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 382 ^ y is impossible.
-/
theorem diophantine1_2_9_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (382 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 382 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 383 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 383 ^ y,
if x >= 4, 383 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 383 ^ y is impossible.
-/
theorem diophantine1_2_9_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 383 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 383 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 384 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 384 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (384 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 385 ...
-- Trying to disprove y >= 1 with prime factor 7 of 385 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 385 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 385 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 385 ^ y is impossible.
-/
theorem diophantine1_2_9_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (385 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 385 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 386 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 386 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 386 ^ y is impossible.
-/
theorem diophantine1_2_9_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (386 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 386 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 387 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 387 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (387 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 388 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 388 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 388 ^ y is impossible.
-/
theorem diophantine1_2_9_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (388 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 388 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 193)   2 ^ x + 9 = 389 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 389 ^ y,
if x >= 6, 389 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 389 ^ y = 150 (mod 193).
So 2 ^ x = 141 (mod 193), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 389 ^ y is impossible.
-/
theorem diophantine1_2_9_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (389 ^ y % 193) [150]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 193) [141]) [
    {prop := List.Mem (389 ^ y % 193) [150], proof := h10},
    {prop := 2 ^ x + 9 = 389 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 193) [141], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 389 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 390 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 390 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (390 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 391 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 391 ^ y,
if x >= 4, 391 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 391 ^ y is impossible.
-/
theorem diophantine1_2_9_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 391 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 391 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 391 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 392 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 392 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 392 ^ y is impossible.
-/
theorem diophantine1_2_9_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (392 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 392 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 393 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 393 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (393 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 394 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 394 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 394 ^ y is impossible.
-/
theorem diophantine1_2_9_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (394 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 394 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 395 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 395 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   2 ^ x + 9 = 395 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 395 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20), 
which implies x = 0, 4, 8, 12, 16, 20 (mod 24).
Therefore, 2 ^ x = 1, 16, 15, 240, 225, 226 (mod 241).
So 395 ^ y = 10, 25, 24, 8, 234, 235 (mod 241), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 395 ^ y is impossible.
-/
theorem diophantine1_2_9_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (395 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 241) [1, 16, 15, 240, 225, 226]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (395 ^ y % 241) [10, 25, 24, 8, 234, 235]) [
    {prop := List.Mem (2 ^ x % 241) [1, 16, 15, 240, 225, 226], proof := h10},
    {prop := 2 ^ x + 9 = 395 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (395 ^ y % 241) [10, 25, 24, 8, 234, 235], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 395 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 396 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 396 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (396 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 397 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 397 ^ y,
if x >= 6, 397 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 397 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 397 ^ y is impossible.
-/
theorem diophantine1_2_9_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (397 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (397 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 397 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 397 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 398 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 398 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 398 ^ y is impossible.
-/
theorem diophantine1_2_9_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (398 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 398 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 399 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 399 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (399 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 400 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 400 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 400 ^ y is impossible.
-/
theorem diophantine1_2_9_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (400 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 400 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 401 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 401 ^ y,
if x >= 4, 401 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 401 ^ y is impossible.
-/
theorem diophantine1_2_9_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 401 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 402 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 402 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (402 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 403 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   2 ^ x + 9 = 403 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 403 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14, 26 (mod 36).
Therefore, 2 ^ x = 4, 34, 71 (mod 109).
So 403 ^ y = 13, 43, 80 (mod 109), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 403 ^ y is impossible.
-/
theorem diophantine1_2_9_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (403 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 109) [4, 34, 71]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (403 ^ y % 109) [13, 43, 80]) [
    {prop := List.Mem (2 ^ x % 109) [4, 34, 71], proof := h10},
    {prop := 2 ^ x + 9 = 403 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (403 ^ y % 109) [13, 43, 80], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 403 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 404 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 404 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 404 ^ y is impossible.
-/
theorem diophantine1_2_9_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (404 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 404 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 405 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 405 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (405 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 406 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 406 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 406 ^ y is impossible.
-/
theorem diophantine1_2_9_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (406 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 406 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 407 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 407 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 407 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 407 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 407 ^ y is impossible.
-/
theorem diophantine1_2_9_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (407 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (407 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 407 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (407 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 407 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 408 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 408 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (408 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 9 = 409 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 409 ^ y,
if x >= 7, 409 ^ y = 9 (mod 128).
So y = 3 (mod 16), 
which implies y = 3, 19, 35, 51, 67 (mod 80).
Therefore, 409 ^ y = 198, 184, 115, 102, 124 (mod 241).
So 2 ^ x = 189, 175, 106, 93, 115 (mod 241), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 409 ^ y is impossible.
-/
theorem diophantine1_2_9_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (409 ^ y % 241) [198, 184, 115, 102, 124]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [189, 175, 106, 93, 115]) [
    {prop := List.Mem (409 ^ y % 241) [198, 184, 115, 102, 124], proof := h10},
    {prop := 2 ^ x + 9 = 409 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [189, 175, 106, 93, 115], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 409 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 410 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 410 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 410 ^ y is impossible.
-/
theorem diophantine1_2_9_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (410 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 410 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 411 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 411 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (411 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 412 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 412 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 412 ^ y is impossible.
-/
theorem diophantine1_2_9_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (412 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 412 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 413 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 413 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 413 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 413 ^ y is impossible.
-/
theorem diophantine1_2_9_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (413 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 413 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 414 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 414 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (414 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 415 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 415 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 415 ^ y,
if x >= 4, 415 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 415 ^ y is impossible.
-/
theorem diophantine1_2_9_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 415 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 415 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 415 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 416 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 416 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 416 ^ y is impossible.
-/
theorem diophantine1_2_9_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (416 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 416 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 417 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 417 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (417 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 418 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 418 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 418 ^ y is impossible.
-/
theorem diophantine1_2_9_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (418 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 418 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 419 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 419 ^ y,
if x >= 6, 419 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 419 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 419 ^ y is impossible.
-/
theorem diophantine1_2_9_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (419 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (419 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 419 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 419 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 420 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 420 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (420 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 421 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 421 ^ y,
if x >= 6, 421 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 421 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 421 ^ y is impossible.
-/
theorem diophantine1_2_9_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (421 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (421 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 421 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 421 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 422 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 422 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 422 ^ y is impossible.
-/
theorem diophantine1_2_9_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (422 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 422 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 423 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 423 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (423 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 424 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 424 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 424 ^ y is impossible.
-/
theorem diophantine1_2_9_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (424 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 424 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 425 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 425 ...
-- Trying to disprove y >= 2 with prime factor 5 of 425 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 601...
-- Trying prime 641...
-- Trying prime 661...
-- Trying prime 701...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 5 of 425 ...
-- Trying prime 101...
-- Trying prime 401...
-- Trying prime 601...
-- Trying prime 701...
-- Trying prime 1201...
-- Trying prime 1301...
-- Trying prime 1601...
-- Trying prime 1801...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 1801)   2 ^ x + 9 = 425 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 425 ^ y,
if y >= 3, 2 ^ x = 116 (mod 125).
So x = 64 (mod 100), 
which implies x = 14 (mod 25).
Therefore, 2 ^ x = 175 (mod 1801).
So 425 ^ y = 184 (mod 1801), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 9 = 425 ^ y is impossible.
-/
theorem diophantine1_2_9_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (425 ^ y % 125 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 125 = 116 := by omega
  have h9 := Claim (x % 100 = 64) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 125 = 116, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 1801) [175]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 100 = 64, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (425 ^ y % 1801) [184]) [
    {prop := List.Mem (2 ^ x % 1801) [175], proof := h10},
    {prop := 2 ^ x + 9 = 425 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (425 ^ y % 1801) [184], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 425 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 426 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 426 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (426 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 427 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 427 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 427 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 427 ^ y is impossible.
-/
theorem diophantine1_2_9_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (427 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 427 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 428 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 428 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 428 ^ y is impossible.
-/
theorem diophantine1_2_9_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (428 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 428 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 429 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 429 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (429 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 430 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 430 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 430 ^ y is impossible.
-/
theorem diophantine1_2_9_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (430 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 430 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 431 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 431 ^ y,
if x >= 4, 431 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 431 ^ y is impossible.
-/
theorem diophantine1_2_9_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 431 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 432 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 432 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (432 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 433 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 433 ^ y,
if x >= 4, 433 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 433 ^ y is impossible.
-/
theorem diophantine1_2_9_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 433 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 433 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 434 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 434 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 434 ^ y is impossible.
-/
theorem diophantine1_2_9_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (434 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 434 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 435 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 435 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (435 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 436 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 436 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 436 ^ y is impossible.
-/
theorem diophantine1_2_9_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (436 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 436 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 9 = 437 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 437 ^ y,
if y >= 1, 2 ^ x = 10 (mod 19).
So x = 17 (mod 18), 
which implies x = 8 (mod 9).
Therefore, 2 ^ x = 37 (mod 73).
So 437 ^ y = 46 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 437 ^ y is impossible.
-/
theorem diophantine1_2_9_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 10 := by omega
  have h9 := Claim (x % 18 = 17) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (437 ^ y % 73) [46]) [
    {prop := List.Mem (2 ^ x % 73) [37], proof := h10},
    {prop := 2 ^ x + 9 = 437 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (437 ^ y % 73) [46], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 438 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 438 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (438 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 439 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 439 ^ y,
if x >= 4, 439 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 439 ^ y is impossible.
-/
theorem diophantine1_2_9_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 439 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 440 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 440 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 440 ^ y is impossible.
-/
theorem diophantine1_2_9_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (440 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 440 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 441 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 441 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (441 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 442 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 442 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 442 ^ y is impossible.
-/
theorem diophantine1_2_9_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (442 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 442 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 9 = 443 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 443 ^ y,
if x >= 6, 443 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230 (mod 240).
Therefore, 443 ^ y = 125, 182, 238, 200, 2, 188, 79, 196, 108, 30, 169, 221, 48, 174, 209 (mod 241).
So 2 ^ x = 116, 173, 229, 191, 234, 179, 70, 187, 99, 21, 160, 212, 39, 165, 200 (mod 241), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 443 ^ y is impossible.
-/
theorem diophantine1_2_9_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (443 ^ y % 241) [125, 182, 238, 200, 2, 188, 79, 196, 108, 30, 169, 221, 48, 174, 209]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [116, 173, 229, 191, 234, 179, 70, 187, 99, 21, 160, 212, 39, 165, 200]) [
    {prop := List.Mem (443 ^ y % 241) [125, 182, 238, 200, 2, 188, 79, 196, 108, 30, 169, 221, 48, 174, 209], proof := h10},
    {prop := 2 ^ x + 9 = 443 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [116, 173, 229, 191, 234, 179, 70, 187, 99, 21, 160, 212, 39, 165, 200], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 443 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 444 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 444 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (444 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 445 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 445 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 601...
-- Trying prime 641...
-- Trying prime 661...
-- Trying prime 701...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 445 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 445 ^ y,
if x >= 6, 445 ^ y = 9 (mod 64).
So y = 2 (mod 16), 
Therefore, 445 ^ y = 9 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 445 ^ y is impossible.
-/
theorem diophantine1_2_9_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 445 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 445 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (445 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (445 ^ y % 17) [9], proof := h10},
    {prop := 2 ^ x + 9 = 445 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 445 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 446 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 446 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 446 ^ y is impossible.
-/
theorem diophantine1_2_9_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (446 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 446 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 447 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 447 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (447 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 448 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 448 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 448 ^ y is impossible.
-/
theorem diophantine1_2_9_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (448 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 448 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 449 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 449 ^ y,
if x >= 4, 449 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 449 ^ y is impossible.
-/
theorem diophantine1_2_9_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 449 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 449 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 450 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 450 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (450 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 451 ...
-- Trying prime 31...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   2 ^ x + 9 = 451 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 451 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1, 6, 11, 16, 21, 26, 31 (mod 35).
Therefore, 2 ^ x = 2, 64, 60, 3, 25, 19, 40 (mod 71).
So 451 ^ y = 11, 2, 69, 12, 34, 28, 49 (mod 71), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 451 ^ y is impossible.
-/
theorem diophantine1_2_9_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (451 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 71) [2, 64, 60, 3, 25, 19, 40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (451 ^ y % 71) [11, 2, 69, 12, 34, 28, 49]) [
    {prop := List.Mem (2 ^ x % 71) [2, 64, 60, 3, 25, 19, 40], proof := h10},
    {prop := 2 ^ x + 9 = 451 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (451 ^ y % 71) [11, 2, 69, 12, 34, 28, 49], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 451 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 452 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 452 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 452 ^ y is impossible.
-/
theorem diophantine1_2_9_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (452 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 452 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 453 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 453 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (453 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 454 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 454 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 454 ^ y is impossible.
-/
theorem diophantine1_2_9_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (454 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 454 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 455 ...
-- Trying to disprove y >= 1 with prime factor 7 of 455 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 455 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 455 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 455 ^ y is impossible.
-/
theorem diophantine1_2_9_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (455 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 455 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 456 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 456 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (456 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 457 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 457 ^ y,
if x >= 7, 457 ^ y = 9 (mod 128).
So y = 9 (mod 16), 
which implies y = 1 (mod 8).
Therefore, 457 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 457 ^ y is impossible.
-/
theorem diophantine1_2_9_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (457 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (457 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 457 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 457 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 458 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 458 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 458 ^ y is impossible.
-/
theorem diophantine1_2_9_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (458 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 458 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 459 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 459 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (459 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 460 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 460 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 460 ^ y is impossible.
-/
theorem diophantine1_2_9_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (460 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 460 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 461 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 461 ^ y,
if x >= 6, 461 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 461 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 461 ^ y is impossible.
-/
theorem diophantine1_2_9_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (461 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (461 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 461 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 461 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 462 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 462 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (462 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 463 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 463 ^ y,
if x >= 4, 463 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 463 ^ y is impossible.
-/
theorem diophantine1_2_9_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 463 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 463 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 464 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 464 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 464 ^ y is impossible.
-/
theorem diophantine1_2_9_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (464 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 464 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 465 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 465 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (465 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 466 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 466 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 466 ^ y is impossible.
-/
theorem diophantine1_2_9_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (466 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 466 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 97)   2 ^ x + 9 = 467 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 467 ^ y,
if x >= 6, 467 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 467 ^ y = 64 (mod 97).
So 2 ^ x = 55 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 467 ^ y is impossible.
-/
theorem diophantine1_2_9_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (467 ^ y % 97) [64]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 97) [55]) [
    {prop := List.Mem (467 ^ y % 97) [64], proof := h10},
    {prop := 2 ^ x + 9 = 467 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 97) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 467 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 468 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 468 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (468 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 469 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 469 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 469 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 469 ^ y is impossible.
-/
theorem diophantine1_2_9_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (469 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 469 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 470 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 470 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 470 ^ y is impossible.
-/
theorem diophantine1_2_9_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (470 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 470 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 471 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 471 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (471 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 472 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 472 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 472 ^ y is impossible.
-/
theorem diophantine1_2_9_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (472 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 472 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 473 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 9 = 473 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 473 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1 (mod 5).
Therefore, 2 ^ x = 2 (mod 31).
So 473 ^ y = 11 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 473 ^ y is impossible.
-/
theorem diophantine1_2_9_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (473 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [2]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (473 ^ y % 31) [11]) [
    {prop := List.Mem (2 ^ x % 31) [2], proof := h10},
    {prop := 2 ^ x + 9 = 473 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (473 ^ y % 31) [11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 473 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 474 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 474 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (474 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 475 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 475 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 9 = 475 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 475 ^ y,
if y >= 1, 2 ^ x = 10 (mod 19).
So x = 17 (mod 18), 
which implies x = 17, 35 (mod 36).
Therefore, 2 ^ x = 18, 19 (mod 37).
So 475 ^ y = 27, 28 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 475 ^ y is impossible.
-/
theorem diophantine1_2_9_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (475 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 10 := by omega
  have h9 := Claim (x % 18 = 17) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [18, 19]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (475 ^ y % 37) [27, 28]) [
    {prop := List.Mem (2 ^ x % 37) [18, 19], proof := h10},
    {prop := 2 ^ x + 9 = 475 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (475 ^ y % 37) [27, 28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 475 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 476 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 476 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 476 ^ y is impossible.
-/
theorem diophantine1_2_9_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (476 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 476 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 477 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 477 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (477 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 478 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 478 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 478 ^ y is impossible.
-/
theorem diophantine1_2_9_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (478 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 478 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 479 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 479 ^ y,
if x >= 4, 479 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 479 ^ y is impossible.
-/
theorem diophantine1_2_9_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 479 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 479 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 480 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 480 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (480 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 481 ...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   2 ^ x + 9 = 481 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 481 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 14, 26, 38 (mod 48).
Therefore, 2 ^ x = 4, 88, 93, 9 (mod 97).
So 481 ^ y = 13, 0, 5, 18 (mod 97), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 481 ^ y is impossible.
-/
theorem diophantine1_2_9_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (481 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 97) [4, 88, 93, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (481 ^ y % 97) [13, 0, 5, 18]) [
    {prop := List.Mem (2 ^ x % 97) [4, 88, 93, 9], proof := h10},
    {prop := 2 ^ x + 9 = 481 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (481 ^ y % 97) [13, 0, 5, 18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 481 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 482 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 482 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 482 ^ y is impossible.
-/
theorem diophantine1_2_9_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (482 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 482 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 483 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 483 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (483 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 484 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 484 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 484 ^ y is impossible.
-/
theorem diophantine1_2_9_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (484 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 484 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 485 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 485 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 461...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 601...
-- Trying prime 641...
-- Trying prime 661...
-- Trying prime 701...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 485 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 485 ^ y,
if x >= 6, 485 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6 (mod 8).
Therefore, 485 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 485 ^ y is impossible.
-/
theorem diophantine1_2_9_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 485 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 485 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (485 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (485 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 485 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 485 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 486 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 486 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (486 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 487 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 487 ^ y,
if x >= 4, 487 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 487 ^ y is impossible.
-/
theorem diophantine1_2_9_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 487 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 487 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 488 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 488 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 488 ^ y is impossible.
-/
theorem diophantine1_2_9_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (488 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 488 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 489 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 489 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (489 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 490 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 490 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 490 ^ y is impossible.
-/
theorem diophantine1_2_9_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (490 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 490 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 113)   2 ^ x + 9 = 491 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 491 ^ y,
if x >= 6, 491 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
which implies y = 14, 30, 46, 62, 78, 94, 110 (mod 112).
Therefore, 491 ^ y = 44, 102, 31, 77, 9, 26, 50 (mod 113).
So 2 ^ x = 35, 93, 22, 68, 0, 17, 41 (mod 113), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 491 ^ y is impossible.
-/
theorem diophantine1_2_9_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (491 ^ y % 113) [44, 102, 31, 77, 9, 26, 50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 113) [35, 93, 22, 68, 0, 17, 41]) [
    {prop := List.Mem (491 ^ y % 113) [44, 102, 31, 77, 9, 26, 50], proof := h10},
    {prop := 2 ^ x + 9 = 491 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 113) [35, 93, 22, 68, 0, 17, 41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 491 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 492 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 492 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (492 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 493 ...
-- Trying to disprove y >= 1 with prime factor 29 of 493 ...
-- Trying prime 113...
-- Trying prime 197...
-- Trying prime 281...
-- Trying prime 337...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 337)   2 ^ x + 9 = 493 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 493 ^ y,
if y >= 1, 2 ^ x = 20 (mod 29).
So x = 24 (mod 28), 
which implies x = 3, 10, 17 (mod 21).
Therefore, 2 ^ x = 8, 13, 316 (mod 337).
So 493 ^ y = 17, 22, 325 (mod 337), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 493 ^ y is impossible.
-/
theorem diophantine1_2_9_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (493 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 29 = 20 := by omega
  have h9 := Claim (x % 28 = 24) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 29 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 337) [8, 13, 316]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (493 ^ y % 337) [17, 22, 325]) [
    {prop := List.Mem (2 ^ x % 337) [8, 13, 316], proof := h10},
    {prop := 2 ^ x + 9 = 493 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (493 ^ y % 337) [17, 22, 325], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 493 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 494 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 494 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 494 ^ y is impossible.
-/
theorem diophantine1_2_9_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (494 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 494 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 495 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 495 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (495 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 496 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 496 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 496 ^ y is impossible.
-/
theorem diophantine1_2_9_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (496 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 496 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 497 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 497 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 497 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 497 ^ y is impossible.
-/
theorem diophantine1_2_9_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (497 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 497 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 498 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 498 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (498 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 499 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 499 ^ y,
if x >= 6, 499 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
Therefore, 499 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 499 ^ y is impossible.
-/
theorem diophantine1_2_9_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (499 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (499 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 499 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 499 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 500 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 500 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 500 ^ y is impossible.
-/
theorem diophantine1_2_9_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (500 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 500 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
