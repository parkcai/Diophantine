-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 2 <= a <= 2
-- 9 <= b <= 9
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   2 ^ x + 9 = 2 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 2 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 2 ^ y is impossible.
-/
theorem diophantine1_2_9_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 2 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 3 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 3 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 4 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 4 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 4 ^ y is impossible.
-/
theorem diophantine1_2_9_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 4 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 5 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 5 ^ y,
if x >= 6, 5 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 5 ^ y = 2 (mod 17).
So 2 ^ x = 10 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (4, 2).
-/
theorem diophantine1_2_9_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 5 ^ y) :
  List.Mem (x, y) [(4, 2)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 5 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 5 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (5 ^ y % 17) [2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [10]) [
    {prop := List.Mem (5 ^ y % 17) [2], proof := h10},
    {prop := 2 ^ x + 9 = 5 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 2)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 5 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 6 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 6 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 7 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 7 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 7 ^ y is impossible.
-/
theorem diophantine1_2_9_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 7 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 8 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 8 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 8 ^ y is impossible.
-/
theorem diophantine1_2_9_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 8 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 9 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 9 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 10 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 10 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 10 ^ y is impossible.
-/
theorem diophantine1_2_9_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 10 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 11 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 11 ^ y,
if x >= 6, 11 ^ y = 9 (mod 64).
So y = 14 (mod 16), 
Therefore, 11 ^ y = 9 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_2_9_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 17) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (11 ^ y % 17) [9], proof := h10},
    {prop := 2 ^ x + 9 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 11 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 12 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 12 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 13 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 13 ^ y,
if x >= 6, 13 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 4).
Therefore, 13 ^ y = 16 (mod 17).
So 2 ^ x = 7 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_2_9_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 13 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 17) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [7]) [
    {prop := List.Mem (13 ^ y % 17) [16], proof := h10},
    {prop := 2 ^ x + 9 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 13 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 14 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 14 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 14 ^ y is impossible.
-/
theorem diophantine1_2_9_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 14 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 15 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 15 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 16 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 16 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 16 ^ y is impossible.
-/
theorem diophantine1_2_9_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 16 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 17 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 17 ^ y,
if x >= 4, 17 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_2_9_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 17 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 17 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 18 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 18 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 19 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 19 ^ y,
if x >= 6, 19 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 19 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 19 ^ y is impossible.
-/
theorem diophantine1_2_9_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (19 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (19 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 19 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 19 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 20 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 20 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 20 ^ y is impossible.
-/
theorem diophantine1_2_9_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 20 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 21 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 21 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 22 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 22 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 22 ^ y is impossible.
-/
theorem diophantine1_2_9_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 22 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 23 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 23 ^ y,
if x >= 4, 23 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 23 ^ y is impossible.
-/
theorem diophantine1_2_9_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 23 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 24 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 24 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 5 of 25 ...
-- Trying prime 101...
-- Trying prime 401...
-- Trying prime 601...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 601)   2 ^ x + 9 = 25 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 25 ^ y,
if y >= 3, 2 ^ x = 116 (mod 125).
So x = 64 (mod 100), 
which implies x = 14 (mod 25).
Therefore, 2 ^ x = 157 (mod 601).
So 25 ^ y = 166 (mod 601), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_2_9_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 25 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (25 ^ y % 125 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 125 = 116 := by omega
  have h9 := Claim (x % 100 = 64) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 125 = 116, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 601) [157]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 100 = 64, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 601) [166]) [
    {prop := List.Mem (2 ^ x % 601) [157], proof := h10},
    {prop := 2 ^ x + 9 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 601) [166], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 25 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 26 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 26 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 26 ^ y is impossible.
-/
theorem diophantine1_2_9_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 26 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 27 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 27 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 28 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 28 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 28 ^ y is impossible.
-/
theorem diophantine1_2_9_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 28 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 29 of 29 ...
-- Trying prime 113...
-- Trying prime 197...
-- Trying prime 281...
-- Trying prime 337...
-- Trying prime 421...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 421)   2 ^ x + 9 = 29 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 29 ^ y,
if y >= 1, 2 ^ x = 20 (mod 29).
So x = 24 (mod 28), 
which implies x = 24, 52, 80, 108, 136, 164, 192, 220, 248, 276, 304, 332, 360, 388, 416 (mod 420).
Therefore, 2 ^ x = 366, 406, 149, 232, 25, 313, 315, 239, 180, 317, 163, 121, 33, 9, 79 (mod 421).
So 29 ^ y = 375, 415, 158, 241, 34, 322, 324, 248, 189, 326, 172, 130, 42, 18, 88 (mod 421), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 29 ^ y is impossible.
-/
theorem diophantine1_2_9_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 29 = 20 := by omega
  have h9 := Claim (x % 28 = 24) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 29 = 20, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 421) [366, 406, 149, 232, 25, 313, 315, 239, 180, 317, 163, 121, 33, 9, 79]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (29 ^ y % 421) [375, 415, 158, 241, 34, 322, 324, 248, 189, 326, 172, 130, 42, 18, 88]) [
    {prop := List.Mem (2 ^ x % 421) [366, 406, 149, 232, 25, 313, 315, 239, 180, 317, 163, 121, 33, 9, 79], proof := h10},
    {prop := 2 ^ x + 9 = 29 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (29 ^ y % 421) [375, 415, 158, 241, 34, 322, 324, 248, 189, 326, 172, 130, 42, 18, 88], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 30 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 30 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 31 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 31 ^ y,
if x >= 4, 31 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 31 ^ y is impossible.
-/
theorem diophantine1_2_9_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 31 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 32 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 32 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 32 ^ y is impossible.
-/
theorem diophantine1_2_9_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 32 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 33 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 33 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 34 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 34 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 34 ^ y is impossible.
-/
theorem diophantine1_2_9_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 34 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Trying to disprove y >= 1 with prime factor 7 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 35 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 35 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 35 ^ y is impossible.
-/
theorem diophantine1_2_9_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 36 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 36 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 181...
-- Trying prime 397...
-- Trying prime 433...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 37 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 37 ^ y,
if x >= 6, 37 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
Therefore, 37 ^ y = 15 (mod 17).
So 2 ^ x = 6 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 37 ^ y is impossible.
-/
theorem diophantine1_2_9_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 17) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [6]) [
    {prop := List.Mem (37 ^ y % 17) [15], proof := h10},
    {prop := 2 ^ x + 9 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 37 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 38 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 38 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 38 ^ y is impossible.
-/
theorem diophantine1_2_9_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 38 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 39 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 39 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 40 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 40 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 40 ^ y is impossible.
-/
theorem diophantine1_2_9_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 40 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 41 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 41 ^ y,
if x >= 7, 41 ^ y = 9 (mod 128).
So y = 13 (mod 16), 
Therefore, 41 ^ y = 6 (mod 17).
So 2 ^ x = 14 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that (x, y) = (5, 1).
-/
theorem diophantine1_2_9_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 41 ^ y) :
  List.Mem (x, y) [(5, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 17) [6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [14]) [
    {prop := List.Mem (41 ^ y % 17) [6], proof := h10},
    {prop := 2 ^ x + 9 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim (List.Mem (x, y) [(5, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 41 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 42 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 42 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 43 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 43 ^ y,
if y >= 1, 2 ^ x = 34 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 43 ^ y is impossible.
-/
theorem diophantine1_2_9_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 43 = 34 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 43 = 34, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 44 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 44 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 44 ^ y is impossible.
-/
theorem diophantine1_2_9_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 44 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 45 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 45 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 46 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 46 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 46 ^ y is impossible.
-/
theorem diophantine1_2_9_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 46 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 47 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 47 ^ y,
if x >= 4, 47 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 47 ^ y is impossible.
-/
theorem diophantine1_2_9_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 47 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 48 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 48 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 49 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 49 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 49 ^ y is impossible.
-/
theorem diophantine1_2_9_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 49 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 50 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 50 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 50 ^ y is impossible.
-/
theorem diophantine1_2_9_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 50 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 51 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 51 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 52 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 52 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 52 ^ y is impossible.
-/
theorem diophantine1_2_9_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 52 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 53 of 53 ...
-- Trying prime 157...
-- Trying prime 313...
-- Trying prime 521...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 521)   2 ^ x + 9 = 53 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 53 ^ y,
if y >= 1, 2 ^ x = 44 (mod 53).
So x = 8 (mod 52), 
which implies x = 8, 60, 112, 164, 216 (mod 260).
Therefore, 2 ^ x = 256, 302, 283, 53, 148 (mod 521).
So 53 ^ y = 265, 311, 292, 62, 157 (mod 521), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 53 ^ y is impossible.
-/
theorem diophantine1_2_9_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 53 = 44 := by omega
  have h9 := Claim (x % 52 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 53 = 44, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 521) [256, 302, 283, 53, 148]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 52 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 521) [265, 311, 292, 62, 157]) [
    {prop := List.Mem (2 ^ x % 521) [256, 302, 283, 53, 148], proof := h10},
    {prop := 2 ^ x + 9 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 521) [265, 311, 292, 62, 157], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 54 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 54 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 55 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 55 ^ y,
if y >= 1, 2 ^ x = 2 (mod 11).
So x = 1 (mod 10), 
which implies x = 1, 11 (mod 20).
Therefore, 2 ^ x = 2, 39 (mod 41).
So 55 ^ y = 11, 7 (mod 41), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 55 ^ y is impossible.
-/
theorem diophantine1_2_9_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 2 := by omega
  have h9 := Claim (x % 10 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [2, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [11, 7]) [
    {prop := List.Mem (2 ^ x % 41) [2, 39], proof := h10},
    {prop := 2 ^ x + 9 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [11, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 56 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 56 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 56 ^ y is impossible.
-/
theorem diophantine1_2_9_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 56 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 57 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 57 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 58 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 58 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 58 ^ y is impossible.
-/
theorem diophantine1_2_9_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 58 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 59 of 59 ...
-- Trying prime 233...
-- Trying prime 349...
-- Trying prime 523...
-- Trying prime 929...
-- Trying prime 1103...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 59 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 59 ^ y,
if x >= 6, 59 ^ y = 9 (mod 64).
So y = 6 (mod 16), 
which implies y = 6 (mod 8).
Therefore, 59 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 59 ^ y is impossible.
-/
theorem diophantine1_2_9_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (59 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 59 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 60 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 60 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   2 ^ x + 9 = 61 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 61 ^ y,
if y >= 1, 2 ^ x = 52 (mod 61).
So x = 42 (mod 60), 
which implies x = 42, 102, 162 (mod 180).
Therefore, 2 ^ x = 156, 67, 139 (mod 181).
So 61 ^ y = 165, 76, 148 (mod 181), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 61 ^ y is impossible.
-/
theorem diophantine1_2_9_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 61 = 52 := by omega
  have h9 := Claim (x % 60 = 42) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 61 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 181) [156, 67, 139]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 42, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 181) [165, 76, 148]) [
    {prop := List.Mem (2 ^ x % 181) [156, 67, 139], proof := h10},
    {prop := 2 ^ x + 9 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 181) [165, 76, 148], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 62 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 62 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 62 ^ y is impossible.
-/
theorem diophantine1_2_9_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 62 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 63 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 63 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 64 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 64 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 64 ^ y is impossible.
-/
theorem diophantine1_2_9_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 64 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 9 = 65 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 65 ^ y,
if y >= 1, 2 ^ x = 4 (mod 13).
So x = 2 (mod 12), 
which implies x = 2, 5, 8 (mod 9).
Therefore, 2 ^ x = 4, 32, 37 (mod 73).
So 65 ^ y = 13, 41, 46 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 65 ^ y is impossible.
-/
theorem diophantine1_2_9_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 4 := by omega
  have h9 := Claim (x % 12 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 4, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [4, 32, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 73) [13, 41, 46]) [
    {prop := List.Mem (2 ^ x % 73) [4, 32, 37], proof := h10},
    {prop := 2 ^ x + 9 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 73) [13, 41, 46], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 66 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 66 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 397...
-- Trying prime 463...
-- Trying prime 661...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 97...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 193)   2 ^ x + 9 = 67 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 67 ^ y,
if x >= 7, 67 ^ y = 9 (mod 128).
So y = 2 (mod 32), 
Therefore, 67 ^ y = 50 (mod 193).
So 2 ^ x = 41 (mod 193), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 9 = 67 ^ y is impossible.
-/
theorem diophantine1_2_9_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 32 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 193) [50]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 32 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 193) [41]) [
    {prop := List.Mem (67 ^ y % 193) [50], proof := h10},
    {prop := 2 ^ x + 9 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 193) [41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 67 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 68 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 68 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 68 ^ y is impossible.
-/
theorem diophantine1_2_9_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 68 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 69 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 69 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 70 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 70 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 70 ^ y is impossible.
-/
theorem diophantine1_2_9_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 70 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 71 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 71 ^ y,
if x >= 4, 71 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 71 ^ y is impossible.
-/
theorem diophantine1_2_9_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 71 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 72 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 72 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 73 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 73 ^ y,
if x >= 7, 73 ^ y = 9 (mod 128).
So y = 9 (mod 16), 
Therefore, 73 ^ y = 12 (mod 17).
So 2 ^ x = 3 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that (x, y) = (6, 1).
-/
theorem diophantine1_2_9_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 73 ^ y) :
  List.Mem (x, y) [(6, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 128 = 9 := by omega
  have h9 := Claim (y % 16 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 128 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 17) [12]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [3]) [
    {prop := List.Mem (73 ^ y % 17) [12], proof := h10},
    {prop := 2 ^ x + 9 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim (List.Mem (x, y) [(6, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 73 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 74 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 74 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 74 ^ y is impossible.
-/
theorem diophantine1_2_9_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 74 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 75 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 75 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 76 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 76 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 76 ^ y is impossible.
-/
theorem diophantine1_2_9_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 76 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 77 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 77 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 77 ^ y is impossible.
-/
theorem diophantine1_2_9_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 78 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 78 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 79 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 79 ^ y,
if x >= 4, 79 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 79 ^ y is impossible.
-/
theorem diophantine1_2_9_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 79 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 80 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 80 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 80 ^ y is impossible.
-/
theorem diophantine1_2_9_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 80 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 81 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 81 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 82 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 82 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 82 ^ y is impossible.
-/
theorem diophantine1_2_9_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 82 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 9 = 83 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 83 ^ y,
if x >= 6, 83 ^ y = 9 (mod 64).
So y = 10 (mod 16), 
which implies y = 2 (mod 8).
Therefore, 83 ^ y = 4 (mod 17).
So 2 ^ x = 12 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 9 = 83 ^ y is impossible.
-/
theorem diophantine1_2_9_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 64 = 9 := by omega
  have h9 := Claim (y % 16 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 64 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 17) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [12]) [
    {prop := List.Mem (83 ^ y % 17) [4], proof := h10},
    {prop := 2 ^ x + 9 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 83 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 84 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 84 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying to disprove y >= 2 with prime factor 5 of 85 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 9 = 85 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 85 ^ y,
if y >= 2, 2 ^ x = 16 (mod 25).
So x = 4 (mod 20).
Therefore, 2 ^ x = 16 (mod 41).
So 85 ^ y = 25 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 9 = 85 ^ y is impossible.
-/
theorem diophantine1_2_9_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 16 := by omega
  have h9 := Claim (x % 20 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [16]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 41) [25]) [
    {prop := List.Mem (2 ^ x % 41) [16], proof := h10},
    {prop := 2 ^ x + 9 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 41) [25], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 85 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 86 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 86 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 86 ^ y is impossible.
-/
theorem diophantine1_2_9_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 86 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 87 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 87 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 88 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 88 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 88 ^ y is impossible.
-/
theorem diophantine1_2_9_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 88 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 89 of 89 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 89 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 89 ^ y,
if y >= 1, 2 ^ x = 80 (mod 89).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 89 ^ y is impossible.
-/
theorem diophantine1_2_9_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (89 ^ y % 89 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 89 = 80 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 89 = 80, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 89 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 90 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 90 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 9 = 91 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 91 ^ y,
if y >= 1, 2 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 9 = 91 ^ y is impossible.
-/
theorem diophantine1_2_9_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 92 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 92 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 92 ^ y is impossible.
-/
theorem diophantine1_2_9_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 92 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 93 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 93 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 94 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 94 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 94 ^ y is impossible.
-/
theorem diophantine1_2_9_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 94 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 95 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 95 ^ y,
if x >= 4, 95 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 95 ^ y is impossible.
-/
theorem diophantine1_2_9_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 95 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 95 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 96 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 96 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 3).
-/
theorem diophantine1_2_9_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   2 ^ x + 9 = 97 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 97 ^ y,
if x >= 4, 97 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 2 ^ x + 9 = 97 ^ y is impossible.
-/
theorem diophantine1_2_9_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 98 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 98 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 98 ^ y is impossible.
-/
theorem diophantine1_2_9_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 98 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   2 ^ x + 9 = 99 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 99 ^ y,
this is impossible, because it implies that 2 ^ x = 0 (mod 9).
-/
theorem diophantine1_2_9_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 9 = 100 ^ y
For positive integers x, y satisfying 2 ^ x + 9 = 100 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 2 ^ x + 9 = 100 ^ y is impossible.
-/
theorem diophantine1_2_9_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 9 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (2 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 9 = 100 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
