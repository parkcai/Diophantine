-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 2 <= a <= 2
-- 1 <= b <= 1
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   2 ^ x + 1 = 2 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 2 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 2 ^ y is impossible.
-/
theorem diophantine1_2_1_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 2 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 3 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 3 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 3 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (1, 1), (3, 2).
-/
theorem diophantine1_2_1_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 3 ^ y) :
  List.Mem (x, y) [(1, 1), (3, 2)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (3 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 3 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (3 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1), (3, 2)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 3 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 4 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 4 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 4 ^ y is impossible.
-/
theorem diophantine1_2_1_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 4 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 5 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 5 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 5 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_2_1_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 5 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 5 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (5 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 6 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 6 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 6 ^ y is impossible.
-/
theorem diophantine1_2_1_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 6 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 7 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 7 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 7 ^ y is impossible.
-/
theorem diophantine1_2_1_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 7 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 8 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 8 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 8 ^ y is impossible.
-/
theorem diophantine1_2_1_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 8 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 9 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 9 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 9 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_2_1_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 9 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (9 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 9 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (9 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 9 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 10 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 10 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 10 ^ y is impossible.
-/
theorem diophantine1_2_1_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 10 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 11 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 11 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 2 ^ x = 32, 11, 40, 29, 50, 21 (mod 61).
So 11 ^ y = 33, 12, 41, 30, 51, 22 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 11 ^ y is impossible.
-/
theorem diophantine1_2_1_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (11 ^ y % 61) [33, 12, 41, 30, 51, 22]) [
    {prop := List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21], proof := h10},
    {prop := 2 ^ x + 1 = 11 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (11 ^ y % 61) [33, 12, 41, 30, 51, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 12 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 12 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 12 ^ y is impossible.
-/
theorem diophantine1_2_1_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 12 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 13 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 13 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42, 54 (mod 60).
Therefore, 2 ^ x = 3, 27, 60, 52, 41 (mod 61).
So 13 ^ y = 4, 28, 0, 53, 42 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 13 ^ y is impossible.
-/
theorem diophantine1_2_1_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (13 ^ y % 61) [4, 28, 0, 53, 42]) [
    {prop := List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41], proof := h10},
    {prop := 2 ^ x + 1 = 13 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (13 ^ y % 61) [4, 28, 0, 53, 42], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 14 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 14 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 14 ^ y is impossible.
-/
theorem diophantine1_2_1_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 14 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 15 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 15 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 15 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 15 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 15 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 15 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 15 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 15 ^ y is impossible.
-/
theorem diophantine1_2_1_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (15 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 15 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (15 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 15 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 16 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 16 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 16 ^ y is impossible.
-/
theorem diophantine1_2_1_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 16 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 1 = 17 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 17 ^ y,
if x >= 8, 17 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
which implies y = 0, 16, 32, 48, 64 (mod 80).
Therefore, 17 ^ y = 1, 87, 98, 91, 205 (mod 241).
So 2 ^ x = 0, 86, 97, 90, 204 (mod 241), but this is impossible.
Therefore, x < 8.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_2_1_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 17 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 241) [1, 87, 98, 91, 205]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [0, 86, 97, 90, 204]) [
    {prop := List.Mem (17 ^ y % 241) [1, 87, 98, 91, 205], proof := h10},
    {prop := 2 ^ x + 1 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [0, 86, 97, 90, 204], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 17 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 18 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 18 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 18 ^ y is impossible.
-/
theorem diophantine1_2_1_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 19 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 19 ^ y,
if x >= 6, 19 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 19 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 19 ^ y is impossible.
-/
theorem diophantine1_2_1_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (19 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (19 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 19 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 19 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 20 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 20 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 20 ^ y is impossible.
-/
theorem diophantine1_2_1_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 20 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 21 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 21 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 21 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 21 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 21 ^ y is impossible.
-/
theorem diophantine1_2_1_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (21 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 21 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 22 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 22 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 22 ^ y is impossible.
-/
theorem diophantine1_2_1_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 22 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 23 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 23 ^ y,
if y >= 1, 2 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 23 ^ y is impossible.
-/
theorem diophantine1_2_1_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 24 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 24 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 24 ^ y is impossible.
-/
theorem diophantine1_2_1_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 25 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 25 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 25 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 25 ^ y is impossible.
-/
theorem diophantine1_2_1_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 26 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 26 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 26 ^ y is impossible.
-/
theorem diophantine1_2_1_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 26 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 27 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 27 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 27 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 27 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 27 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 27 ^ y is impossible.
-/
theorem diophantine1_2_1_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (27 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (27 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 27 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (27 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 27 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 28 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 28 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 28 ^ y is impossible.
-/
theorem diophantine1_2_1_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 28 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 29 of 29 ...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 113)   2 ^ x + 1 = 29 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 29 ^ y,
if y >= 1, 2 ^ x = 28 (mod 29).
So x = 14 (mod 28).
Therefore, 2 ^ x = 112 (mod 113).
So 29 ^ y = 0 (mod 113), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 29 ^ y is impossible.
-/
theorem diophantine1_2_1_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 29 = 28 := by omega
  have h9 := Claim (x % 28 = 14) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 29 = 28, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 113) [112]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (29 ^ y % 113) [0]) [
    {prop := List.Mem (2 ^ x % 113) [112], proof := h10},
    {prop := 2 ^ x + 1 = 29 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (29 ^ y % 113) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 30 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 30 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 30 ^ y is impossible.
-/
theorem diophantine1_2_1_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 30 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 31 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 31 ^ y,
if y >= 1, 2 ^ x = 30 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 31 ^ y is impossible.
-/
theorem diophantine1_2_1_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 31 = 30 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 31 = 30, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 32 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 32 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 32 ^ y is impossible.
-/
theorem diophantine1_2_1_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 32 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 33 ...
-- Trying to disprove y >= 3 with prime factor 3 of 33 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 33 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 33 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 33 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (5, 1).
-/
theorem diophantine1_2_1_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 33 ^ y) :
  List.Mem (x, y) [(5, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (33 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (33 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 33 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (33 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(5, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 33 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 34 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 34 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 34 ^ y is impossible.
-/
theorem diophantine1_2_1_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 34 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Trying to disprove y >= 1 with prime factor 7 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 35 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 35 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 35 ^ y is impossible.
-/
theorem diophantine1_2_1_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 36 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 36 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 36 ^ y is impossible.
-/
theorem diophantine1_2_1_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   2 ^ x + 1 = 37 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 37 ^ y,
if y >= 1, 2 ^ x = 36 (mod 37).
So x = 18 (mod 36).
Therefore, 2 ^ x = 108 (mod 109).
So 37 ^ y = 0 (mod 109), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 37 ^ y is impossible.
-/
theorem diophantine1_2_1_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 37 = 36 := by omega
  have h9 := Claim (x % 36 = 18) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 37 = 36, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 109) [108]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 36 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (37 ^ y % 109) [0]) [
    {prop := List.Mem (2 ^ x % 109) [108], proof := h10},
    {prop := 2 ^ x + 1 = 37 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (37 ^ y % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 38 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 38 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 38 ^ y is impossible.
-/
theorem diophantine1_2_1_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 38 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 39 ...
-- Trying to disprove y >= 1 with prime factor 13 of 39 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 39 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 39 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 39 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 39 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 39 ^ y is impossible.
-/
theorem diophantine1_2_1_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (39 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (39 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 39 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (39 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 39 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 40 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 40 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 40 ^ y is impossible.
-/
theorem diophantine1_2_1_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 40 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 41 of 41 ...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 41 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 41 ^ y,
if y >= 1, 2 ^ x = 40 (mod 41).
So x = 10 (mod 20), 
which implies x = 10, 30, 50 (mod 60).
Therefore, 2 ^ x = 48, 60, 14 (mod 61).
So 41 ^ y = 49, 0, 15 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 41 ^ y is impossible.
-/
theorem diophantine1_2_1_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 41 = 40 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 41 = 40, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [48, 60, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (41 ^ y % 61) [49, 0, 15]) [
    {prop := List.Mem (2 ^ x % 61) [48, 60, 14], proof := h10},
    {prop := 2 ^ x + 1 = 41 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (41 ^ y % 61) [49, 0, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 42 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 42 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 42 ^ y is impossible.
-/
theorem diophantine1_2_1_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Trying prime 29...
-- Trying prime 71...
-- Trying prime 113...
-- Trying prime 127...
-- Trying prime 197...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 43 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 43 ^ y,
if x >= 6, 43 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 43 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 43 ^ y is impossible.
-/
theorem diophantine1_2_1_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (43 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (43 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 43 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 43 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 44 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 44 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 44 ^ y is impossible.
-/
theorem diophantine1_2_1_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 44 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 45 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 45 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 45 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 45 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 45 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 45 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 45 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 45 ^ y is impossible.
-/
theorem diophantine1_2_1_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (45 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 45 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (45 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 45 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 46 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 46 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 46 ^ y is impossible.
-/
theorem diophantine1_2_1_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 46 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 47 of 47 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 47 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 47 ^ y,
if y >= 1, 2 ^ x = 46 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 47 ^ y is impossible.
-/
theorem diophantine1_2_1_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (47 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 47 = 46 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 47 = 46, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 47 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 48 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 48 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 48 ^ y is impossible.
-/
theorem diophantine1_2_1_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 49 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 49 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 49 ^ y is impossible.
-/
theorem diophantine1_2_1_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 49 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 50 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 50 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 50 ^ y is impossible.
-/
theorem diophantine1_2_1_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 50 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 51 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 51 ...
-- Trying to disprove y >= 3 with prime factor 3 of 51 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 51 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 51 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 51 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 51 ^ y is impossible.
-/
theorem diophantine1_2_1_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (51 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (51 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 51 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (51 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 51 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 52 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 52 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 52 ^ y is impossible.
-/
theorem diophantine1_2_1_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 52 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 53 of 53 ...
-- Trying prime 157...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 157)   2 ^ x + 1 = 53 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 53 ^ y,
if y >= 1, 2 ^ x = 52 (mod 53).
So x = 26 (mod 52).
Therefore, 2 ^ x = 156 (mod 157).
So 53 ^ y = 0 (mod 157), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 53 ^ y is impossible.
-/
theorem diophantine1_2_1_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 53 = 52 := by omega
  have h9 := Claim (x % 52 = 26) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 53 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 157) [156]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 52 = 26, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 157) [0]) [
    {prop := List.Mem (2 ^ x % 157) [156], proof := h10},
    {prop := 2 ^ x + 1 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 157) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 54 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 54 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 54 ^ y is impossible.
-/
theorem diophantine1_2_1_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 55 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 55 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15 (mod 20).
Therefore, 2 ^ x = 32, 9 (mod 41).
So 55 ^ y = 33, 10 (mod 41), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 55 ^ y is impossible.
-/
theorem diophantine1_2_1_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [32, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [33, 10]) [
    {prop := List.Mem (2 ^ x % 41) [32, 9], proof := h10},
    {prop := 2 ^ x + 1 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [33, 10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 56 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 56 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 56 ^ y is impossible.
-/
theorem diophantine1_2_1_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 56 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 57 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 57 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 57 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying to disprove y >= 3 with prime factor 3 of 57 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 4 with prime factor 3 of 57 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   2 ^ x + 1 = 57 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 57 ^ y,
if y >= 4, 2 ^ x = 80 (mod 81).
So x = 27 (mod 54), 
which implies x = 0, 27, 54, 81, 108 (mod 135).
Therefore, 2 ^ x = 1, 100, 244, 10, 187 (mod 271).
So 57 ^ y = 2, 101, 245, 11, 188 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that 2 ^ x + 1 = 57 ^ y is impossible.
-/
theorem diophantine1_2_1_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (57 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 81 = 80 := by omega
  have h9 := Claim (x % 54 = 27) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 81 = 80, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 271) [1, 100, 244, 10, 187]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 54 = 27, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (57 ^ y % 271) [2, 101, 245, 11, 188]) [
    {prop := List.Mem (2 ^ x % 271) [1, 100, 244, 10, 187], proof := h10},
    {prop := 2 ^ x + 1 = 57 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (57 ^ y % 271) [2, 101, 245, 11, 188], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 57 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 58 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 58 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 58 ^ y is impossible.
-/
theorem diophantine1_2_1_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 58 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 59 of 59 ...
-- Trying prime 233...
-- Trying prime 349...
-- Trying prime 523...
-- Trying prime 929...
-- Trying prime 1103...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 59 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 59 ^ y,
if x >= 6, 59 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 59 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 59 ^ y is impossible.
-/
theorem diophantine1_2_1_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (59 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 59 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 60 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 60 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 60 ^ y is impossible.
-/
theorem diophantine1_2_1_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 60 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   2 ^ x + 1 = 61 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 61 ^ y,
if y >= 1, 2 ^ x = 60 (mod 61).
So x = 30 (mod 60), 
which implies x = 30, 90, 150 (mod 180).
Therefore, 2 ^ x = 49, 180, 133 (mod 181).
So 61 ^ y = 50, 0, 134 (mod 181), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 61 ^ y is impossible.
-/
theorem diophantine1_2_1_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 61 = 60 := by omega
  have h9 := Claim (x % 60 = 30) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 61 = 60, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 181) [49, 180, 133]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 181) [50, 0, 134]) [
    {prop := List.Mem (2 ^ x % 181) [49, 180, 133], proof := h10},
    {prop := 2 ^ x + 1 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 181) [50, 0, 134], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 62 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 62 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 62 ^ y is impossible.
-/
theorem diophantine1_2_1_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 62 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 63 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 63 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 63 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 63 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 63 ^ y is impossible.
-/
theorem diophantine1_2_1_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (63 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 63 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 64 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 64 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 64 ^ y is impossible.
-/
theorem diophantine1_2_1_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 64 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 5 of 65 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 65 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 65 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 65 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (6, 1).
-/
theorem diophantine1_2_1_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 65 ^ y) :
  List.Mem (x, y) [(6, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(6, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 65 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 66 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 66 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 66 ^ y is impossible.
-/
theorem diophantine1_2_1_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 66 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 67 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 67 ^ y,
if x >= 6, 67 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 2).
Therefore, 67 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 67 ^ y is impossible.
-/
theorem diophantine1_2_1_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (67 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 67 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 68 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 68 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 68 ^ y is impossible.
-/
theorem diophantine1_2_1_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 68 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 69 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 23 of 69 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 69 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 69 ^ y,
if y >= 1, 2 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 69 ^ y is impossible.
-/
theorem diophantine1_2_1_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (69 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 69 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 70 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 70 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 70 ^ y is impossible.
-/
theorem diophantine1_2_1_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 70 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 71 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 71 ^ y,
if y >= 1, 2 ^ x = 70 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 71 ^ y is impossible.
-/
theorem diophantine1_2_1_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 71 = 70 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 71 = 70, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 72 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 72 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 72 ^ y is impossible.
-/
theorem diophantine1_2_1_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 73 of 73 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 73 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 73 ^ y,
if y >= 1, 2 ^ x = 72 (mod 73).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 73 ^ y is impossible.
-/
theorem diophantine1_2_1_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (73 ^ y % 73 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 73 = 72 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 73 = 72, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 73 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 74 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 74 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 74 ^ y is impossible.
-/
theorem diophantine1_2_1_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 74 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 75 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 75 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 75 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 75 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 75 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 75 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 75 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 75 ^ y is impossible.
-/
theorem diophantine1_2_1_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (75 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 75 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (75 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 75 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 76 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 76 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 76 ^ y is impossible.
-/
theorem diophantine1_2_1_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 76 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 77 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 77 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 77 ^ y is impossible.
-/
theorem diophantine1_2_1_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 78 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 78 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 78 ^ y is impossible.
-/
theorem diophantine1_2_1_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 78 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 79 of 79 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 79 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 79 ^ y,
if y >= 1, 2 ^ x = 78 (mod 79).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 79 ^ y is impossible.
-/
theorem diophantine1_2_1_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (79 ^ y % 79 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 79 = 78 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 79 = 78, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 79 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 80 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 80 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 80 ^ y is impossible.
-/
theorem diophantine1_2_1_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 80 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 81 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 81 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 81 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 81 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 81 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 81 ^ y is impossible.
-/
theorem diophantine1_2_1_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (81 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (81 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 81 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (81 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 81 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 82 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 82 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 82 ^ y is impossible.
-/
theorem diophantine1_2_1_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 82 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 83 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 83 ^ y,
if x >= 6, 83 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 83 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 83 ^ y is impossible.
-/
theorem diophantine1_2_1_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (83 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 83 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 84 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 84 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 84 ^ y is impossible.
-/
theorem diophantine1_2_1_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying to disprove y >= 2 with prime factor 5 of 85 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 85 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 85 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 85 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 85 ^ y is impossible.
-/
theorem diophantine1_2_1_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 85 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 86 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 86 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 86 ^ y is impossible.
-/
theorem diophantine1_2_1_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 86 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 87 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 87 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 87 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 87 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 87 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 87 ^ y is impossible.
-/
theorem diophantine1_2_1_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (87 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (87 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 87 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (87 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 87 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 88 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 88 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 88 ^ y is impossible.
-/
theorem diophantine1_2_1_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 88 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 89 of 89 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 89 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 89 ^ y,
if y >= 1, 2 ^ x = 88 (mod 89).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 89 ^ y is impossible.
-/
theorem diophantine1_2_1_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (89 ^ y % 89 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 89 = 88 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 89 = 88, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 89 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 90 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 90 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 90 ^ y is impossible.
-/
theorem diophantine1_2_1_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 90 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 91 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 91 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 91 ^ y is impossible.
-/
theorem diophantine1_2_1_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 92 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 92 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 92 ^ y is impossible.
-/
theorem diophantine1_2_1_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 92 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 93 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 93 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 93 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 93 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 93 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 93 ^ y is impossible.
-/
theorem diophantine1_2_1_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (93 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (93 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 93 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (93 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 93 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 94 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 94 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 94 ^ y is impossible.
-/
theorem diophantine1_2_1_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 94 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 95 ...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 1 = 95 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 95 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 0 (mod 9).
Therefore, 2 ^ x = 1 (mod 73).
So 95 ^ y = 2 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 95 ^ y is impossible.
-/
theorem diophantine1_2_1_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (95 ^ y % 73) [2]) [
    {prop := List.Mem (2 ^ x % 73) [1], proof := h10},
    {prop := 2 ^ x + 1 = 95 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (95 ^ y % 73) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 96 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 96 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 96 ^ y is impossible.
-/
theorem diophantine1_2_1_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 97 of 97 ...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 193)   2 ^ x + 1 = 97 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 97 ^ y,
if y >= 1, 2 ^ x = 96 (mod 97).
So x = 24 (mod 48), 
which implies x = 24, 72 (mod 96).
Therefore, 2 ^ x = 112, 81 (mod 193).
So 97 ^ y = 113, 82 (mod 193), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 97 ^ y is impossible.
-/
theorem diophantine1_2_1_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (97 ^ y % 97 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 97 = 96 := by omega
  have h9 := Claim (x % 48 = 24) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 97 = 96, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 193) [112, 81]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 48 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (97 ^ y % 193) [113, 82]) [
    {prop := List.Mem (2 ^ x % 193) [112, 81], proof := h10},
    {prop := 2 ^ x + 1 = 97 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (97 ^ y % 193) [113, 82], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 97 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 98 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 98 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 98 ^ y is impossible.
-/
theorem diophantine1_2_1_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 98 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 99 ...
-- Trying to disprove y >= 1 with prime factor 11 of 99 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 1 = 99 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 99 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 2 ^ x = 1 (mod 31).
So 99 ^ y = 2 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 99 ^ y is impossible.
-/
theorem diophantine1_2_1_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (99 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (99 ^ y % 31) [2]) [
    {prop := List.Mem (2 ^ x % 31) [1], proof := h10},
    {prop := 2 ^ x + 1 = 99 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (99 ^ y % 31) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 99 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 100 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 100 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 100 ^ y is impossible.
-/
theorem diophantine1_2_1_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 100 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 101 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 101 ^ y,
if x >= 6, 101 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 2).
Therefore, 101 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 101 ^ y is impossible.
-/
theorem diophantine1_2_1_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (101 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 101 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 102 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 102 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 102 ^ y is impossible.
-/
theorem diophantine1_2_1_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 102 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 103 of 103 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 103 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 103 ^ y,
if y >= 1, 2 ^ x = 102 (mod 103).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 103 ^ y is impossible.
-/
theorem diophantine1_2_1_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (103 ^ y % 103 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 103 = 102 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 103 = 102, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 103 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 104 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 104 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 104 ^ y is impossible.
-/
theorem diophantine1_2_1_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 104 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 105 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 105 ...
-- Trying to disprove y >= 1 with prime factor 7 of 105 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 105 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 105 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 105 ^ y is impossible.
-/
theorem diophantine1_2_1_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (105 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 105 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 106 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 106 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 106 ^ y is impossible.
-/
theorem diophantine1_2_1_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 106 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 107 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 107 ^ y,
if x >= 6, 107 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 107 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 107 ^ y is impossible.
-/
theorem diophantine1_2_1_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (107 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 107 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 108 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 108 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 108 ^ y is impossible.
-/
theorem diophantine1_2_1_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 108 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 109 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 109 ^ y,
if x >= 6, 109 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 109 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 109 ^ y is impossible.
-/
theorem diophantine1_2_1_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (109 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 109 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 110 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 110 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 110 ^ y is impossible.
-/
theorem diophantine1_2_1_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 110 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 111 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 111 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 111 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 111 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 111 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 111 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 111 ^ y is impossible.
-/
theorem diophantine1_2_1_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (111 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (111 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 111 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (111 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 111 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 112 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 112 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 112 ^ y is impossible.
-/
theorem diophantine1_2_1_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 112 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 113 of 113 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 29)   2 ^ x + 1 = 113 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 113 ^ y,
if y >= 1, 2 ^ x = 112 (mod 113).
So x = 14 (mod 28).
Therefore, 2 ^ x = 28 (mod 29).
So 113 ^ y = 0 (mod 29), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 113 ^ y is impossible.
-/
theorem diophantine1_2_1_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (113 ^ y % 113 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 113 = 112 := by omega
  have h9 := Claim (x % 28 = 14) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 113 = 112, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 29) [28]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (113 ^ y % 29) [0]) [
    {prop := List.Mem (2 ^ x % 29) [28], proof := h10},
    {prop := 2 ^ x + 1 = 113 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (113 ^ y % 29) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 113 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 114 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 114 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 114 ^ y is impossible.
-/
theorem diophantine1_2_1_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 114 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 115 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 23 of 115 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 115 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 115 ^ y,
if y >= 1, 2 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 115 ^ y is impossible.
-/
theorem diophantine1_2_1_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 116 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 116 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 116 ^ y is impossible.
-/
theorem diophantine1_2_1_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 116 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 117 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 117 ...
-- Trying to disprove y >= 1 with prime factor 13 of 117 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 117 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 117 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30 (mod 36).
Therefore, 2 ^ x = 27, 36, 11 (mod 37).
So 117 ^ y = 28, 0, 12 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 117 ^ y is impossible.
-/
theorem diophantine1_2_1_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (117 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [27, 36, 11]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (117 ^ y % 37) [28, 0, 12]) [
    {prop := List.Mem (2 ^ x % 37) [27, 36, 11], proof := h10},
    {prop := 2 ^ x + 1 = 117 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (117 ^ y % 37) [28, 0, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 117 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 118 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 118 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 118 ^ y is impossible.
-/
theorem diophantine1_2_1_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 118 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 119 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 119 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 119 ^ y is impossible.
-/
theorem diophantine1_2_1_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 120 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 120 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 120 ^ y is impossible.
-/
theorem diophantine1_2_1_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 120 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 121 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 121 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 2 ^ x = 32, 11, 40, 29, 50, 21 (mod 61).
So 121 ^ y = 33, 12, 41, 30, 51, 22 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 121 ^ y is impossible.
-/
theorem diophantine1_2_1_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (121 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 61) [33, 12, 41, 30, 51, 22]) [
    {prop := List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21], proof := h10},
    {prop := 2 ^ x + 1 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 61) [33, 12, 41, 30, 51, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 121 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 122 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 122 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 122 ^ y is impossible.
-/
theorem diophantine1_2_1_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 122 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 123 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 123 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 123 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 123 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 123 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 123 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 123 ^ y is impossible.
-/
theorem diophantine1_2_1_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (123 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (123 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 123 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (123 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 123 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 124 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 124 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 124 ^ y is impossible.
-/
theorem diophantine1_2_1_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 124 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 125 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 125 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 125 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 125 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 125 ^ y is impossible.
-/
theorem diophantine1_2_1_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (125 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 125 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (125 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 125 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 126 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 126 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 126 ^ y is impossible.
-/
theorem diophantine1_2_1_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (126 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 126 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 127 of 127 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 127 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 127 ^ y,
if y >= 1, 2 ^ x = 126 (mod 127).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 127 ^ y is impossible.
-/
theorem diophantine1_2_1_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (127 ^ y % 127 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 127 = 126 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 127 = 126, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 127 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 128 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 128 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 128 ^ y is impossible.
-/
theorem diophantine1_2_1_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 128 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 129 ...
-- Trying to disprove y >= 3 with prime factor 3 of 129 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 129 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 129 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 129 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (7, 1).
-/
theorem diophantine1_2_1_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 129 ^ y) :
  List.Mem (x, y) [(7, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (129 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (129 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 129 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (129 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(7, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 129 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 130 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 130 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 130 ^ y is impossible.
-/
theorem diophantine1_2_1_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 130 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 131 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 131 ^ y,
if x >= 6, 131 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 131 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 131 ^ y is impossible.
-/
theorem diophantine1_2_1_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (131 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 131 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 132 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 132 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 132 ^ y is impossible.
-/
theorem diophantine1_2_1_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (132 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 132 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 133 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 133 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 133 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 133 ^ y is impossible.
-/
theorem diophantine1_2_1_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 134 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 134 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 134 ^ y is impossible.
-/
theorem diophantine1_2_1_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 134 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 135 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 135 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 135 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 135 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 135 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 135 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 135 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 135 ^ y is impossible.
-/
theorem diophantine1_2_1_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (135 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (135 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 135 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (135 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 135 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 136 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 136 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 136 ^ y is impossible.
-/
theorem diophantine1_2_1_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 136 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 1 = 137 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 137 ^ y,
if x >= 7, 137 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224 (mod 240).
Therefore, 137 ^ y = 1, 24, 94, 87, 160, 225, 98, 183, 54, 91, 15, 119, 205, 100, 231 (mod 241).
So 2 ^ x = 0, 23, 93, 86, 159, 224, 97, 182, 53, 90, 14, 118, 204, 99, 230 (mod 241), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 137 ^ y is impossible.
-/
theorem diophantine1_2_1_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 241) [1, 24, 94, 87, 160, 225, 98, 183, 54, 91, 15, 119, 205, 100, 231]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [0, 23, 93, 86, 159, 224, 97, 182, 53, 90, 14, 118, 204, 99, 230]) [
    {prop := List.Mem (137 ^ y % 241) [1, 24, 94, 87, 160, 225, 98, 183, 54, 91, 15, 119, 205, 100, 231], proof := h10},
    {prop := 2 ^ x + 1 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [0, 23, 93, 86, 159, 224, 97, 182, 53, 90, 14, 118, 204, 99, 230], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 137 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 138 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 138 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 138 ^ y is impossible.
-/
theorem diophantine1_2_1_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (138 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 138 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 139 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 139 ^ y,
if x >= 6, 139 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 139 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 139 ^ y is impossible.
-/
theorem diophantine1_2_1_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (139 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 139 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 140 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 140 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 140 ^ y is impossible.
-/
theorem diophantine1_2_1_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (140 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 140 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 141 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 141 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 141 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 141 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 141 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 141 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 141 ^ y is impossible.
-/
theorem diophantine1_2_1_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (141 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (141 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 141 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (141 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 141 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 142 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 142 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 142 ^ y is impossible.
-/
theorem diophantine1_2_1_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 142 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 143 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 143 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 2 ^ x = 32, 11, 40, 29, 50, 21 (mod 61).
So 143 ^ y = 33, 12, 41, 30, 51, 22 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 143 ^ y is impossible.
-/
theorem diophantine1_2_1_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (143 ^ y % 61) [33, 12, 41, 30, 51, 22]) [
    {prop := List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21], proof := h10},
    {prop := 2 ^ x + 1 = 143 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (143 ^ y % 61) [33, 12, 41, 30, 51, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 144 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 144 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 144 ^ y is impossible.
-/
theorem diophantine1_2_1_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (144 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 144 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 145 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 145 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 145 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 145 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 145 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 145 ^ y is impossible.
-/
theorem diophantine1_2_1_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (145 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 145 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (145 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 145 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 146 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 146 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 146 ^ y is impossible.
-/
theorem diophantine1_2_1_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 146 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 147 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 147 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 147 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 147 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 147 ^ y is impossible.
-/
theorem diophantine1_2_1_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (147 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 147 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 148 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 148 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 148 ^ y is impossible.
-/
theorem diophantine1_2_1_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 148 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 149 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 149 ^ y,
if x >= 6, 149 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 149 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 149 ^ y is impossible.
-/
theorem diophantine1_2_1_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (149 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 149 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 150 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 150 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 150 ^ y is impossible.
-/
theorem diophantine1_2_1_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (150 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 150 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 151 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 151 ^ y,
if x >= 7, 151 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 151 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 151 ^ y is impossible.
-/
theorem diophantine1_2_1_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (151 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (151 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 151 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 151 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 152 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 152 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 152 ^ y is impossible.
-/
theorem diophantine1_2_1_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 152 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 153 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 153 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 153 ...
-- Trying to disprove y >= 3 with prime factor 3 of 153 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 153 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 153 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 153 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 153 ^ y is impossible.
-/
theorem diophantine1_2_1_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (153 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (153 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 153 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (153 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 153 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 154 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 154 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 154 ^ y is impossible.
-/
theorem diophantine1_2_1_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 154 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 155 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 155 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 155 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 155 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 155 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 155 ^ y is impossible.
-/
theorem diophantine1_2_1_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (155 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 155 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (155 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 156 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 156 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 156 ^ y is impossible.
-/
theorem diophantine1_2_1_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (156 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 156 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 157 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 157 ^ y,
if x >= 6, 157 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 157 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 157 ^ y is impossible.
-/
theorem diophantine1_2_1_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (157 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 157 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 158 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 158 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 158 ^ y is impossible.
-/
theorem diophantine1_2_1_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 158 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 159 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 159 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 159 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 159 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 159 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 159 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 159 ^ y is impossible.
-/
theorem diophantine1_2_1_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (159 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (159 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 159 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (159 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 159 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 160 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 160 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 160 ^ y is impossible.
-/
theorem diophantine1_2_1_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 160 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 161 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 161 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 161 ^ y is impossible.
-/
theorem diophantine1_2_1_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 162 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 162 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 162 ^ y is impossible.
-/
theorem diophantine1_2_1_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (162 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 162 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 163 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 163 ^ y,
if x >= 6, 163 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 163 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 163 ^ y is impossible.
-/
theorem diophantine1_2_1_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (163 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 163 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 164 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 164 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 164 ^ y is impossible.
-/
theorem diophantine1_2_1_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 164 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 165 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 165 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 165 ...
-- Trying to disprove y >= 1 with prime factor 11 of 165 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 165 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 165 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15 (mod 20).
Therefore, 2 ^ x = 32, 9 (mod 41).
So 165 ^ y = 33, 10 (mod 41), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 165 ^ y is impossible.
-/
theorem diophantine1_2_1_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (165 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [32, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (165 ^ y % 41) [33, 10]) [
    {prop := List.Mem (2 ^ x % 41) [32, 9], proof := h10},
    {prop := 2 ^ x + 1 = 165 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (165 ^ y % 41) [33, 10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 165 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 166 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 166 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 166 ^ y is impossible.
-/
theorem diophantine1_2_1_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 166 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 167 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 167 ^ y,
if x >= 7, 167 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 167 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 167 ^ y is impossible.
-/
theorem diophantine1_2_1_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (167 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 167 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 168 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 168 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 168 ^ y is impossible.
-/
theorem diophantine1_2_1_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (168 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 168 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 169 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 169 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42, 54 (mod 60).
Therefore, 2 ^ x = 3, 27, 60, 52, 41 (mod 61).
So 169 ^ y = 4, 28, 0, 53, 42 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 169 ^ y is impossible.
-/
theorem diophantine1_2_1_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (169 ^ y % 61) [4, 28, 0, 53, 42]) [
    {prop := List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41], proof := h10},
    {prop := 2 ^ x + 1 = 169 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (169 ^ y % 61) [4, 28, 0, 53, 42], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 170 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 170 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 170 ^ y is impossible.
-/
theorem diophantine1_2_1_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 170 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 171 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 171 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 171 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 171 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 171 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 9, 27 (mod 36).
Therefore, 2 ^ x = 31, 6 (mod 37).
So 171 ^ y = 32, 7 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 171 ^ y is impossible.
-/
theorem diophantine1_2_1_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (171 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [31, 6]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (171 ^ y % 37) [32, 7]) [
    {prop := List.Mem (2 ^ x % 37) [31, 6], proof := h10},
    {prop := 2 ^ x + 1 = 171 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (171 ^ y % 37) [32, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 171 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 172 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 172 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 172 ^ y is impossible.
-/
theorem diophantine1_2_1_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 172 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 173 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 173 ^ y,
if x >= 6, 173 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 173 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 173 ^ y is impossible.
-/
theorem diophantine1_2_1_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (173 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 173 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 174 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 174 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 174 ^ y is impossible.
-/
theorem diophantine1_2_1_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (174 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 174 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 175 ...
-- Trying to disprove y >= 1 with prime factor 7 of 175 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 175 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 175 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 175 ^ y is impossible.
-/
theorem diophantine1_2_1_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (175 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 175 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 176 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 176 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 176 ^ y is impossible.
-/
theorem diophantine1_2_1_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 176 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 177 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 177 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 177 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 177 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 177 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 177 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 177 ^ y is impossible.
-/
theorem diophantine1_2_1_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (177 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (177 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 177 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (177 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 177 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 178 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 178 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 178 ^ y is impossible.
-/
theorem diophantine1_2_1_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 178 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 179 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 179 ^ y,
if x >= 6, 179 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 179 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 179 ^ y is impossible.
-/
theorem diophantine1_2_1_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (179 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 179 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 180 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 180 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 180 ^ y is impossible.
-/
theorem diophantine1_2_1_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (180 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 180 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 181 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 181 ^ y,
if x >= 6, 181 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 181 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 181 ^ y is impossible.
-/
theorem diophantine1_2_1_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (181 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 181 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 182 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 182 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 182 ^ y is impossible.
-/
theorem diophantine1_2_1_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 182 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 183 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 183 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 183 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 183 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 183 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 183 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 183 ^ y is impossible.
-/
theorem diophantine1_2_1_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (183 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (183 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 183 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (183 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 183 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 184 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 184 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 184 ^ y is impossible.
-/
theorem diophantine1_2_1_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 184 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 185 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 185 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 185 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 185 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 185 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 185 ^ y is impossible.
-/
theorem diophantine1_2_1_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (185 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 185 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (185 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 186 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 186 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 186 ^ y is impossible.
-/
theorem diophantine1_2_1_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (186 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 186 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 1 = 187 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 187 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 2 ^ x = 1 (mod 31).
So 187 ^ y = 2 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 187 ^ y is impossible.
-/
theorem diophantine1_2_1_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 31) [2]) [
    {prop := List.Mem (2 ^ x % 31) [1], proof := h10},
    {prop := 2 ^ x + 1 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 31) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 188 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 188 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 188 ^ y is impossible.
-/
theorem diophantine1_2_1_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 188 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 189 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 189 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 189 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 189 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 189 ^ y is impossible.
-/
theorem diophantine1_2_1_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (189 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 189 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 190 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 190 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 190 ^ y is impossible.
-/
theorem diophantine1_2_1_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 190 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 191 of 191 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 191 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 191 ^ y,
if y >= 1, 2 ^ x = 190 (mod 191).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 191 ^ y is impossible.
-/
theorem diophantine1_2_1_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (191 ^ y % 191 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 191 = 190 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 191 = 190, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 191 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 192 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 192 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 192 ^ y is impossible.
-/
theorem diophantine1_2_1_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (192 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 192 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 193 of 193 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   2 ^ x + 1 = 193 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 193 ^ y,
if y >= 1, 2 ^ x = 192 (mod 193).
So x = 48 (mod 96), 
which implies x = 0 (mod 48).
Therefore, 2 ^ x = 1 (mod 97).
So 193 ^ y = 2 (mod 97), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 193 ^ y is impossible.
-/
theorem diophantine1_2_1_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (193 ^ y % 193 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 193 = 192 := by omega
  have h9 := Claim (x % 96 = 48) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 193 = 192, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 97) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 96 = 48, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (193 ^ y % 97) [2]) [
    {prop := List.Mem (2 ^ x % 97) [1], proof := h10},
    {prop := 2 ^ x + 1 = 193 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (193 ^ y % 97) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 193 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 194 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 194 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 194 ^ y is impossible.
-/
theorem diophantine1_2_1_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 194 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 195 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 195 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 195 ...
-- Trying to disprove y >= 1 with prime factor 13 of 195 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 195 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 195 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30 (mod 36).
Therefore, 2 ^ x = 27, 36, 11 (mod 37).
So 195 ^ y = 28, 0, 12 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 195 ^ y is impossible.
-/
theorem diophantine1_2_1_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (195 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [27, 36, 11]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (195 ^ y % 37) [28, 0, 12]) [
    {prop := List.Mem (2 ^ x % 37) [27, 36, 11], proof := h10},
    {prop := 2 ^ x + 1 = 195 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (195 ^ y % 37) [28, 0, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 195 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 196 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 196 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 196 ^ y is impossible.
-/
theorem diophantine1_2_1_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 196 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 197 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 197 ^ y,
if x >= 6, 197 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 197 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 197 ^ y is impossible.
-/
theorem diophantine1_2_1_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (197 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 197 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 198 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 198 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 198 ^ y is impossible.
-/
theorem diophantine1_2_1_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (198 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 198 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 199 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 199 ^ y,
if x >= 7, 199 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 199 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 199 ^ y is impossible.
-/
theorem diophantine1_2_1_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (199 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (199 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 199 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 199 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 200 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 200 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 200 ^ y is impossible.
-/
theorem diophantine1_2_1_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 200 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 201 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 201 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 201 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 201 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 201 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 201 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 201 ^ y is impossible.
-/
theorem diophantine1_2_1_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (201 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (201 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 201 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (201 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 201 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 202 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 202 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 202 ^ y is impossible.
-/
theorem diophantine1_2_1_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 202 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 203 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 203 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 203 ^ y is impossible.
-/
theorem diophantine1_2_1_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 203 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 204 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 204 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 204 ^ y is impossible.
-/
theorem diophantine1_2_1_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (204 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 204 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 205 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 205 ...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   2 ^ x + 1 = 205 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 205 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 2, 6, 10, 14, 18, 22 (mod 24).
Therefore, 2 ^ x = 4, 64, 60, 237, 177, 181 (mod 241).
So 205 ^ y = 5, 65, 61, 238, 178, 182 (mod 241), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 205 ^ y is impossible.
-/
theorem diophantine1_2_1_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 241) [4, 64, 60, 237, 177, 181]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (205 ^ y % 241) [5, 65, 61, 238, 178, 182]) [
    {prop := List.Mem (2 ^ x % 241) [4, 64, 60, 237, 177, 181], proof := h10},
    {prop := 2 ^ x + 1 = 205 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (205 ^ y % 241) [5, 65, 61, 238, 178, 182], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 205 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 206 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 206 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 206 ^ y is impossible.
-/
theorem diophantine1_2_1_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 206 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 207 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 207 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 23 of 207 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 207 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 207 ^ y,
if y >= 1, 2 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 207 ^ y is impossible.
-/
theorem diophantine1_2_1_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (207 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 207 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 208 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 208 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 208 ^ y is impossible.
-/
theorem diophantine1_2_1_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 208 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying prime 131...
-- Trying prime 151...
-- Trying prime 181...
-- Trying prime 191...
-- Trying prime 211...
-- Trying prime 241...
-- Trying prime 251...
-- Trying prime 271...
-- Trying prime 281...
-- Trying prime 311...
-- Trying prime 331...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 431...
-- Trying prime 461...
-- Trying prime 491...
-- Trying prime 521...
-- Trying prime 541...
-- Trying prime 571...
-- Trying prime 601...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 209 ...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 1 = 209 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 209 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 0 (mod 9).
Therefore, 2 ^ x = 1 (mod 73).
So 209 ^ y = 2 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 209 ^ y is impossible.
-/
theorem diophantine1_2_1_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 73) [2]) [
    {prop := List.Mem (2 ^ x % 73) [1], proof := h10},
    {prop := 2 ^ x + 1 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 73) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 210 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 210 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 210 ^ y is impossible.
-/
theorem diophantine1_2_1_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (210 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 210 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 211 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 211 ^ y,
if x >= 6, 211 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 211 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 211 ^ y is impossible.
-/
theorem diophantine1_2_1_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (211 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 211 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 212 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 212 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 212 ^ y is impossible.
-/
theorem diophantine1_2_1_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 212 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 213 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 213 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 213 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 213 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 213 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 213 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 213 ^ y is impossible.
-/
theorem diophantine1_2_1_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (213 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (213 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 213 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (213 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 213 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 214 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 214 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 214 ^ y is impossible.
-/
theorem diophantine1_2_1_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 214 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 215 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 215 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 215 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 215 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 215 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 215 ^ y is impossible.
-/
theorem diophantine1_2_1_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (215 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 215 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (215 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 215 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 216 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 216 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 216 ^ y is impossible.
-/
theorem diophantine1_2_1_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (216 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 216 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 217 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 217 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 217 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 217 ^ y is impossible.
-/
theorem diophantine1_2_1_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (217 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 217 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 218 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 218 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 218 ^ y is impossible.
-/
theorem diophantine1_2_1_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 218 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 219 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 219 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 219 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 219 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 219 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 219 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 219 ^ y is impossible.
-/
theorem diophantine1_2_1_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (219 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (219 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 219 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (219 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 219 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 220 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 220 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 220 ^ y is impossible.
-/
theorem diophantine1_2_1_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 220 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 221 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 221 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30 (mod 36).
Therefore, 2 ^ x = 27, 36, 11 (mod 37).
So 221 ^ y = 28, 0, 12 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 221 ^ y is impossible.
-/
theorem diophantine1_2_1_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [27, 36, 11]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (221 ^ y % 37) [28, 0, 12]) [
    {prop := List.Mem (2 ^ x % 37) [27, 36, 11], proof := h10},
    {prop := 2 ^ x + 1 = 221 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (221 ^ y % 37) [28, 0, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 222 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 222 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 222 ^ y is impossible.
-/
theorem diophantine1_2_1_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (222 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 222 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 223 of 223 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 223 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 223 ^ y,
if y >= 1, 2 ^ x = 222 (mod 223).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 223 ^ y is impossible.
-/
theorem diophantine1_2_1_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (223 ^ y % 223 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 223 = 222 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 223 = 222, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 223 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 224 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 224 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 224 ^ y is impossible.
-/
theorem diophantine1_2_1_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 224 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 225 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 225 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 225 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 225 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 225 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 225 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 225 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 225 ^ y is impossible.
-/
theorem diophantine1_2_1_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (225 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (225 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 225 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (225 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 225 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 226 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 226 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 226 ^ y is impossible.
-/
theorem diophantine1_2_1_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 226 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 227 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 227 ^ y,
if x >= 6, 227 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 227 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 227 ^ y is impossible.
-/
theorem diophantine1_2_1_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (227 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 227 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 228 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 228 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 228 ^ y is impossible.
-/
theorem diophantine1_2_1_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (228 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 228 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 229 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 229 ^ y,
if x >= 6, 229 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 229 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 229 ^ y is impossible.
-/
theorem diophantine1_2_1_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (229 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 229 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 230 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 230 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 230 ^ y is impossible.
-/
theorem diophantine1_2_1_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 230 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 231 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 231 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 231 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 231 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 231 ^ y is impossible.
-/
theorem diophantine1_2_1_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (231 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 231 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 232 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 232 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 232 ^ y is impossible.
-/
theorem diophantine1_2_1_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 232 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 233 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 233 ^ y,
if x >= 7, 233 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 233 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 233 ^ y is impossible.
-/
theorem diophantine1_2_1_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (233 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 233 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 234 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 234 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 234 ^ y is impossible.
-/
theorem diophantine1_2_1_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (234 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 234 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 235 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 235 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 235 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 235 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 235 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 235 ^ y is impossible.
-/
theorem diophantine1_2_1_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (235 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 235 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (235 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 235 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 236 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 236 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 236 ^ y is impossible.
-/
theorem diophantine1_2_1_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 236 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 237 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 237 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 237 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 237 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 237 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 237 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 237 ^ y is impossible.
-/
theorem diophantine1_2_1_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (237 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (237 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 237 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (237 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 237 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 238 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 238 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 238 ^ y is impossible.
-/
theorem diophantine1_2_1_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 238 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 239 of 239 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 239 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 239 ^ y,
if y >= 1, 2 ^ x = 238 (mod 239).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 239 ^ y is impossible.
-/
theorem diophantine1_2_1_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (239 ^ y % 239 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 239 = 238 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 239 = 238, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 239 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 240 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 240 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 240 ^ y is impossible.
-/
theorem diophantine1_2_1_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (240 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 240 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 241 of 241 ...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 1 = 241 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 241 ^ y,
if y >= 1, 2 ^ x = 240 (mod 241).
So x = 12 (mod 24), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 2 ^ x = 1, 8, 64 (mod 73).
So 241 ^ y = 2, 9, 65 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 241 ^ y is impossible.
-/
theorem diophantine1_2_1_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (241 ^ y % 241 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 241 = 240 := by omega
  have h9 := Claim (x % 24 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 241 = 240, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [1, 8, 64]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 24 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (241 ^ y % 73) [2, 9, 65]) [
    {prop := List.Mem (2 ^ x % 73) [1, 8, 64], proof := h10},
    {prop := 2 ^ x + 1 = 241 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (241 ^ y % 73) [2, 9, 65], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 241 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 242 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 242 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 242 ^ y is impossible.
-/
theorem diophantine1_2_1_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 242 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 243 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 243 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 243 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 243 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 243 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 243 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 243 ^ y is impossible.
-/
theorem diophantine1_2_1_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (243 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (243 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 243 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (243 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 243 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 244 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 244 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 244 ^ y is impossible.
-/
theorem diophantine1_2_1_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 244 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 245 ...
-- Trying to disprove y >= 1 with prime factor 7 of 245 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 245 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 245 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 245 ^ y is impossible.
-/
theorem diophantine1_2_1_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (245 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 245 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 246 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 246 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 246 ^ y is impossible.
-/
theorem diophantine1_2_1_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (246 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 246 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 247 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 247 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42, 54 (mod 60).
Therefore, 2 ^ x = 3, 27, 60, 52, 41 (mod 61).
So 247 ^ y = 4, 28, 0, 53, 42 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 247 ^ y is impossible.
-/
theorem diophantine1_2_1_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (247 ^ y % 61) [4, 28, 0, 53, 42]) [
    {prop := List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41], proof := h10},
    {prop := 2 ^ x + 1 = 247 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (247 ^ y % 61) [4, 28, 0, 53, 42], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 248 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 248 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 248 ^ y is impossible.
-/
theorem diophantine1_2_1_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 248 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 249 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 249 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 249 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 249 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 249 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 249 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 249 ^ y is impossible.
-/
theorem diophantine1_2_1_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (249 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (249 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 249 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (249 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 249 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 250 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 250 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 250 ^ y is impossible.
-/
theorem diophantine1_2_1_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 250 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 251 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 251 ^ y,
if x >= 6, 251 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 251 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 251 ^ y is impossible.
-/
theorem diophantine1_2_1_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (251 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (251 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 251 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 251 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 252 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 252 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 252 ^ y is impossible.
-/
theorem diophantine1_2_1_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (252 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 252 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 253 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 1 = 253 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 253 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 2 ^ x = 1 (mod 31).
So 253 ^ y = 2 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 253 ^ y is impossible.
-/
theorem diophantine1_2_1_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (253 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (253 ^ y % 31) [2]) [
    {prop := List.Mem (2 ^ x % 31) [1], proof := h10},
    {prop := 2 ^ x + 1 = 253 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (253 ^ y % 31) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 253 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 254 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 254 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 254 ^ y is impossible.
-/
theorem diophantine1_2_1_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (254 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 254 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 255 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 255 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 255 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 255 ...
-- Trying to disprove y >= 2 with prime factor 5 of 255 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 255 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 255 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 255 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 255 ^ y is impossible.
-/
theorem diophantine1_2_1_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (255 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (255 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 255 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (255 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 255 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 256 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 256 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 256 ^ y is impossible.
-/
theorem diophantine1_2_1_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (256 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 256 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 9 with prime factor 2 of 2 ...
-- Trying to disprove x >= 10 with prime factor 2 of 2 ...
-- Trying to disprove x >= 11 with prime factor 2 of 2 ...
-- Trying to disprove x >= 12 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 257 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 257 ^ y,
if x >= 12, 257 ^ y = 1 (mod 4096).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 257 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 12.
Further examination shows that (x, y) = (8, 1).
-/
theorem diophantine1_2_1_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 257 ^ y) :
  List.Mem (x, y) [(8, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 12
  have h7 := Claim (2 ^ x % 4096 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 12, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 4096 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 4096 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (257 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (257 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 257 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 11 := by omega
  have h8 := Claim (List.Mem (x, y) [(8, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 257 ^ y, proof := h3},
    {prop := x <= 11, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 258 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 258 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 258 ^ y is impossible.
-/
theorem diophantine1_2_1_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (258 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 258 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 259 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 259 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 259 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 259 ^ y is impossible.
-/
theorem diophantine1_2_1_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (259 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 259 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 260 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 260 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 260 ^ y is impossible.
-/
theorem diophantine1_2_1_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (260 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 260 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 261 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 261 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 261 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 261 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 261 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 261 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 261 ^ y is impossible.
-/
theorem diophantine1_2_1_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (261 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (261 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 261 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (261 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 261 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 262 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 262 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 262 ^ y is impossible.
-/
theorem diophantine1_2_1_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (262 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 262 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 263 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 263 ^ y,
if x >= 7, 263 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 263 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 263 ^ y is impossible.
-/
theorem diophantine1_2_1_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (263 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (263 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 263 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 263 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 264 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 264 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 264 ^ y is impossible.
-/
theorem diophantine1_2_1_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (264 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 264 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 265 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 265 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 265 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 265 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 265 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 265 ^ y is impossible.
-/
theorem diophantine1_2_1_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (265 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (265 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 265 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (265 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 265 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 266 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 266 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 266 ^ y is impossible.
-/
theorem diophantine1_2_1_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (266 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 266 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 267 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 267 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 267 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 267 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 267 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 267 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 267 ^ y is impossible.
-/
theorem diophantine1_2_1_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (267 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (267 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 267 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (267 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 267 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 268 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 268 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 268 ^ y is impossible.
-/
theorem diophantine1_2_1_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (268 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 268 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 269 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 269 ^ y,
if x >= 6, 269 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 269 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 269 ^ y is impossible.
-/
theorem diophantine1_2_1_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (269 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (269 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 269 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 269 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 270 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 270 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 270 ^ y is impossible.
-/
theorem diophantine1_2_1_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (270 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 270 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 271 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 271 ^ y,
if x >= 8, 271 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
which implies y = 0 (mod 2).
Therefore, 271 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 271 ^ y is impossible.
-/
theorem diophantine1_2_1_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 271 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (271 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (271 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 271 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 271 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 272 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 272 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 272 ^ y is impossible.
-/
theorem diophantine1_2_1_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (272 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 272 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 273 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 273 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 273 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 273 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 273 ^ y is impossible.
-/
theorem diophantine1_2_1_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (273 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 273 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 274 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 274 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 274 ^ y is impossible.
-/
theorem diophantine1_2_1_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (274 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 274 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 275 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 275 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying prime 131...
-- Trying prime 151...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 151)   2 ^ x + 1 = 275 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 275 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0, 5, 10 (mod 15).
Therefore, 2 ^ x = 1, 32, 118 (mod 151).
So 275 ^ y = 2, 33, 119 (mod 151), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 275 ^ y is impossible.
-/
theorem diophantine1_2_1_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (275 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 151) [1, 32, 118]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (275 ^ y % 151) [2, 33, 119]) [
    {prop := List.Mem (2 ^ x % 151) [1, 32, 118], proof := h10},
    {prop := 2 ^ x + 1 = 275 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (275 ^ y % 151) [2, 33, 119], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 275 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 276 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 276 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 276 ^ y is impossible.
-/
theorem diophantine1_2_1_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (276 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 276 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 277 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 277 ^ y,
if x >= 6, 277 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 277 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 277 ^ y is impossible.
-/
theorem diophantine1_2_1_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (277 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (277 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 277 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 277 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 278 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 278 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 278 ^ y is impossible.
-/
theorem diophantine1_2_1_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (278 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 278 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 279 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 279 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 279 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 279 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 279 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 279 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 279 ^ y is impossible.
-/
theorem diophantine1_2_1_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (279 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (279 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 279 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (279 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 279 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 280 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 280 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 280 ^ y is impossible.
-/
theorem diophantine1_2_1_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (280 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 280 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 281 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 281 ^ y,
if x >= 7, 281 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 281 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 281 ^ y is impossible.
-/
theorem diophantine1_2_1_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 281 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (281 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (281 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 281 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 281 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 282 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 282 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 282 ^ y is impossible.
-/
theorem diophantine1_2_1_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (282 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 282 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 283 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 283 ^ y,
if x >= 6, 283 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 283 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 283 ^ y is impossible.
-/
theorem diophantine1_2_1_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (283 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (283 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 283 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 283 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 284 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 284 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 284 ^ y is impossible.
-/
theorem diophantine1_2_1_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (284 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 284 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 285 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 285 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 285 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 285 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 285 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 285 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 9, 27 (mod 36).
Therefore, 2 ^ x = 31, 6 (mod 37).
So 285 ^ y = 32, 7 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 285 ^ y is impossible.
-/
theorem diophantine1_2_1_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (285 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [31, 6]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (285 ^ y % 37) [32, 7]) [
    {prop := List.Mem (2 ^ x % 37) [31, 6], proof := h10},
    {prop := 2 ^ x + 1 = 285 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (285 ^ y % 37) [32, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 285 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 286 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 286 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 286 ^ y is impossible.
-/
theorem diophantine1_2_1_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (286 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 286 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 287 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 287 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 287 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 287 ^ y is impossible.
-/
theorem diophantine1_2_1_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (287 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 287 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 288 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 288 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 288 ^ y is impossible.
-/
theorem diophantine1_2_1_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (288 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 288 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 289 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 17 of 289 ...
-- Trying prime 137...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 137)   2 ^ x + 1 = 289 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 289 ^ y,
if y >= 2, 2 ^ x = 288 (mod 289).
So x = 68 (mod 136), 
which implies x = 0 (mod 68).
Therefore, 2 ^ x = 1 (mod 137).
So 289 ^ y = 2 (mod 137), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 289 ^ y is impossible.
-/
theorem diophantine1_2_1_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (289 ^ y % 289 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 289 = 288 := by omega
  have h9 := Claim (x % 136 = 68) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 289 = 288, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 137) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 136 = 68, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (289 ^ y % 137) [2]) [
    {prop := List.Mem (2 ^ x % 137) [1], proof := h10},
    {prop := 2 ^ x + 1 = 289 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (289 ^ y % 137) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 289 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 290 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 290 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 290 ^ y is impossible.
-/
theorem diophantine1_2_1_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (290 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 290 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 291 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 291 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 291 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 291 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 291 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 291 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 291 ^ y is impossible.
-/
theorem diophantine1_2_1_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (291 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (291 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 291 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (291 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 291 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 292 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 292 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 292 ^ y is impossible.
-/
theorem diophantine1_2_1_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (292 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 292 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 293 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 293 ^ y,
if x >= 6, 293 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 293 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 293 ^ y is impossible.
-/
theorem diophantine1_2_1_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (293 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (293 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 293 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 293 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 294 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 294 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 294 ^ y is impossible.
-/
theorem diophantine1_2_1_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (294 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 294 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 295 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 295 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 295 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 295 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 295 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 295 ^ y is impossible.
-/
theorem diophantine1_2_1_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (295 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (295 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 295 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (295 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 295 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 296 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 296 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 296 ^ y is impossible.
-/
theorem diophantine1_2_1_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (296 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 296 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 297 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 297 ...
-- Trying to disprove y >= 1 with prime factor 11 of 297 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   2 ^ x + 1 = 297 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 297 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55, 65, 75, 85, 95 (mod 100).
Therefore, 2 ^ x = 32, 44, 10, 39, 41, 69, 57, 91, 62, 60 (mod 101).
So 297 ^ y = 33, 45, 11, 40, 42, 70, 58, 92, 63, 61 (mod 101), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 297 ^ y is impossible.
-/
theorem diophantine1_2_1_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (297 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 101) [32, 44, 10, 39, 41, 69, 57, 91, 62, 60]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (297 ^ y % 101) [33, 45, 11, 40, 42, 70, 58, 92, 63, 61]) [
    {prop := List.Mem (2 ^ x % 101) [32, 44, 10, 39, 41, 69, 57, 91, 62, 60], proof := h10},
    {prop := 2 ^ x + 1 = 297 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (297 ^ y % 101) [33, 45, 11, 40, 42, 70, 58, 92, 63, 61], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 297 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 298 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 298 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 298 ^ y is impossible.
-/
theorem diophantine1_2_1_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (298 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 298 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 299 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   2 ^ x + 1 = 299 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 299 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42 (mod 48).
Therefore, 2 ^ x = 64, 50, 33, 47 (mod 97).
So 299 ^ y = 65, 51, 34, 48 (mod 97), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 299 ^ y is impossible.
-/
theorem diophantine1_2_1_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (299 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 97) [64, 50, 33, 47]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (299 ^ y % 97) [65, 51, 34, 48]) [
    {prop := List.Mem (2 ^ x % 97) [64, 50, 33, 47], proof := h10},
    {prop := 2 ^ x + 1 = 299 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (299 ^ y % 97) [65, 51, 34, 48], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 299 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 300 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 300 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 300 ^ y is impossible.
-/
theorem diophantine1_2_1_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (300 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 300 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 301 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 301 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 301 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 301 ^ y is impossible.
-/
theorem diophantine1_2_1_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (301 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 301 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 302 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 302 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 302 ^ y is impossible.
-/
theorem diophantine1_2_1_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (302 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 302 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 303 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 303 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 303 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 303 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 303 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 303 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 303 ^ y is impossible.
-/
theorem diophantine1_2_1_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (303 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (303 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 303 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (303 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 303 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 304 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 304 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 304 ^ y is impossible.
-/
theorem diophantine1_2_1_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (304 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 304 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 305 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 305 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 305 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 305 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 305 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 305 ^ y is impossible.
-/
theorem diophantine1_2_1_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (305 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (305 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 305 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (305 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 305 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 306 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 306 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 306 ^ y is impossible.
-/
theorem diophantine1_2_1_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (306 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 306 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 97)   2 ^ x + 1 = 307 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 307 ^ y,
if x >= 6, 307 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0, 4, 8 (mod 12).
Therefore, 307 ^ y = 1, 61, 35 (mod 97).
So 2 ^ x = 0, 60, 34 (mod 97), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 307 ^ y is impossible.
-/
theorem diophantine1_2_1_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (307 ^ y % 97) [1, 61, 35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 97) [0, 60, 34]) [
    {prop := List.Mem (307 ^ y % 97) [1, 61, 35], proof := h10},
    {prop := 2 ^ x + 1 = 307 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 97) [0, 60, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 307 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 308 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 308 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 308 ^ y is impossible.
-/
theorem diophantine1_2_1_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (308 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 308 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 309 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 309 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 309 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 309 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 309 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 309 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 309 ^ y is impossible.
-/
theorem diophantine1_2_1_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (309 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (309 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 309 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (309 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 309 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 310 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 310 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 310 ^ y is impossible.
-/
theorem diophantine1_2_1_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (310 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 310 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 311 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 311 ^ y,
if x >= 7, 311 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 311 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 311 ^ y is impossible.
-/
theorem diophantine1_2_1_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (311 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (311 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 311 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 311 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 312 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 312 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 312 ^ y is impossible.
-/
theorem diophantine1_2_1_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (312 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 312 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 313 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 313 ^ y,
if x >= 7, 313 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 313 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 313 ^ y is impossible.
-/
theorem diophantine1_2_1_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (313 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (313 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 313 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 313 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 314 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 314 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 314 ^ y is impossible.
-/
theorem diophantine1_2_1_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (314 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 314 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 315 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 315 ...
-- Trying to disprove y >= 1 with prime factor 7 of 315 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 315 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 315 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 315 ^ y is impossible.
-/
theorem diophantine1_2_1_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (315 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 315 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 316 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 316 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 316 ^ y is impossible.
-/
theorem diophantine1_2_1_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (316 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 316 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 317 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 317 ^ y,
if x >= 6, 317 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 317 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 317 ^ y is impossible.
-/
theorem diophantine1_2_1_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (317 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 317 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 318 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 318 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 318 ^ y is impossible.
-/
theorem diophantine1_2_1_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (318 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 318 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 319 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 319 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 319 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15 (mod 20).
Therefore, 2 ^ x = 32, 9 (mod 41).
So 319 ^ y = 33, 10 (mod 41), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 319 ^ y is impossible.
-/
theorem diophantine1_2_1_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (319 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [32, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (319 ^ y % 41) [33, 10]) [
    {prop := List.Mem (2 ^ x % 41) [32, 9], proof := h10},
    {prop := 2 ^ x + 1 = 319 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (319 ^ y % 41) [33, 10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 319 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 320 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 320 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 320 ^ y is impossible.
-/
theorem diophantine1_2_1_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (320 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 320 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 321 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 321 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 321 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 321 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 321 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 321 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 321 ^ y is impossible.
-/
theorem diophantine1_2_1_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (321 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (321 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 321 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (321 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 321 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 322 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 322 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 322 ^ y is impossible.
-/
theorem diophantine1_2_1_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (322 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 322 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 323 ...
-- Trying to disprove y >= 1 with prime factor 19 of 323 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 323 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 323 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 9, 27 (mod 36).
Therefore, 2 ^ x = 31, 6 (mod 37).
So 323 ^ y = 32, 7 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 323 ^ y is impossible.
-/
theorem diophantine1_2_1_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (323 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [31, 6]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (323 ^ y % 37) [32, 7]) [
    {prop := List.Mem (2 ^ x % 37) [31, 6], proof := h10},
    {prop := 2 ^ x + 1 = 323 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (323 ^ y % 37) [32, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 323 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 324 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 324 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 324 ^ y is impossible.
-/
theorem diophantine1_2_1_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (324 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 324 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 325 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 325 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 325 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 325 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30 (mod 36).
Therefore, 2 ^ x = 27, 36, 11 (mod 37).
So 325 ^ y = 28, 0, 12 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 325 ^ y is impossible.
-/
theorem diophantine1_2_1_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (325 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [27, 36, 11]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (325 ^ y % 37) [28, 0, 12]) [
    {prop := List.Mem (2 ^ x % 37) [27, 36, 11], proof := h10},
    {prop := 2 ^ x + 1 = 325 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (325 ^ y % 37) [28, 0, 12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 325 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 326 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 326 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 326 ^ y is impossible.
-/
theorem diophantine1_2_1_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (326 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 326 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 327 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 327 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 327 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 327 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 327 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 327 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 327 ^ y is impossible.
-/
theorem diophantine1_2_1_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (327 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (327 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 327 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (327 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 327 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 328 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 328 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 328 ^ y is impossible.
-/
theorem diophantine1_2_1_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (328 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 328 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 329 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 329 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 329 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 329 ^ y is impossible.
-/
theorem diophantine1_2_1_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (329 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 329 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 330 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 330 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 330 ^ y is impossible.
-/
theorem diophantine1_2_1_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (330 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 330 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 331 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 331 ^ y,
if x >= 6, 331 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 331 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 331 ^ y is impossible.
-/
theorem diophantine1_2_1_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (331 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (331 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 331 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 331 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 332 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 332 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 332 ^ y is impossible.
-/
theorem diophantine1_2_1_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (332 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 332 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 333 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 333 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 333 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 333 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 333 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 333 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 333 ^ y is impossible.
-/
theorem diophantine1_2_1_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (333 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (333 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 333 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (333 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 333 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 334 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 334 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 334 ^ y is impossible.
-/
theorem diophantine1_2_1_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (334 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 334 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 335 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 335 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 335 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 335 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 335 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 335 ^ y is impossible.
-/
theorem diophantine1_2_1_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (335 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (335 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 335 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (335 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 335 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 336 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 336 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 336 ^ y is impossible.
-/
theorem diophantine1_2_1_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (336 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 336 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 337 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 337 ^ y,
if x >= 8, 337 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
Therefore, 337 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 337 ^ y is impossible.
-/
theorem diophantine1_2_1_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 337 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (337 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (337 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 337 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 337 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 338 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 338 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 338 ^ y is impossible.
-/
theorem diophantine1_2_1_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (338 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 338 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 339 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 339 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 339 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 339 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 339 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 339 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 339 ^ y is impossible.
-/
theorem diophantine1_2_1_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (339 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (339 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 339 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (339 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 339 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 340 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 340 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 340 ^ y is impossible.
-/
theorem diophantine1_2_1_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (340 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 340 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 341 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   2 ^ x + 1 = 341 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 341 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0, 5, 10, 15, 20, 25, 30 (mod 35).
Therefore, 2 ^ x = 1, 32, 30, 37, 48, 45, 20 (mod 71).
So 341 ^ y = 2, 33, 31, 38, 49, 46, 21 (mod 71), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 341 ^ y is impossible.
-/
theorem diophantine1_2_1_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (341 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 71) [1, 32, 30, 37, 48, 45, 20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (341 ^ y % 71) [2, 33, 31, 38, 49, 46, 21]) [
    {prop := List.Mem (2 ^ x % 71) [1, 32, 30, 37, 48, 45, 20], proof := h10},
    {prop := 2 ^ x + 1 = 341 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (341 ^ y % 71) [2, 33, 31, 38, 49, 46, 21], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 341 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 342 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 342 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 342 ^ y is impossible.
-/
theorem diophantine1_2_1_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (342 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 342 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 343 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 343 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 343 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 343 ^ y is impossible.
-/
theorem diophantine1_2_1_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (343 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 343 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 344 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 344 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 344 ^ y is impossible.
-/
theorem diophantine1_2_1_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (344 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 344 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 345 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 345 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 345 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 23 of 345 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 345 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 345 ^ y,
if y >= 1, 2 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 345 ^ y is impossible.
-/
theorem diophantine1_2_1_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (345 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 345 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 346 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 346 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 346 ^ y is impossible.
-/
theorem diophantine1_2_1_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (346 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 346 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 347 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 347 ^ y,
if x >= 6, 347 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 347 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 347 ^ y is impossible.
-/
theorem diophantine1_2_1_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (347 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (347 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 347 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 347 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 348 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 348 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 348 ^ y is impossible.
-/
theorem diophantine1_2_1_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (348 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 348 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 349 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 349 ^ y,
if x >= 6, 349 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 349 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 349 ^ y is impossible.
-/
theorem diophantine1_2_1_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (349 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (349 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 349 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 349 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 350 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 350 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 350 ^ y is impossible.
-/
theorem diophantine1_2_1_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (350 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 350 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 351 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 351 ...
-- Trying to disprove y >= 1 with prime factor 13 of 351 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying prime 157...
-- Trying prime 181...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 193)   2 ^ x + 1 = 351 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 351 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42, 54, 66, 78, 90 (mod 96).
Therefore, 2 ^ x = 64, 50, 27, 3, 129, 143, 166, 190 (mod 193).
So 351 ^ y = 65, 51, 28, 4, 130, 144, 167, 191 (mod 193), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 351 ^ y is impossible.
-/
theorem diophantine1_2_1_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (351 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 193) [64, 50, 27, 3, 129, 143, 166, 190]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (351 ^ y % 193) [65, 51, 28, 4, 130, 144, 167, 191]) [
    {prop := List.Mem (2 ^ x % 193) [64, 50, 27, 3, 129, 143, 166, 190], proof := h10},
    {prop := 2 ^ x + 1 = 351 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (351 ^ y % 193) [65, 51, 28, 4, 130, 144, 167, 191], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 351 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 352 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 352 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 352 ^ y is impossible.
-/
theorem diophantine1_2_1_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (352 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 352 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 353 of 353 ...
-- Trying prime 89...
-- Trying prime 617...
-- Trying prime 881...
-- Trying prime 1321...
-- Trying prime 1409...
-- Trying prime 2113...
-- Trying prime 2377...
-- Trying prime 2729...
-- Trying prime 3169...
-- Trying prime 3257...
-- Trying prime 3433...
-- Trying prime 3697...
-- Trying prime 4049...
-- Trying prime 5281...
-- Trying prime 5897...
-- Trying to disprove x >= 9 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 353 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 353 ^ y,
if x >= 9, 353 ^ y = 1 (mod 512).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 353 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 9.
Further examination shows that 2 ^ x + 1 = 353 ^ y is impossible.
-/
theorem diophantine1_2_1_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 9
  have h7 := Claim (2 ^ x % 512 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 9, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 512 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 512 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (353 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (353 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 353 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 8 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 353 ^ y, proof := h3},
    {prop := x <= 8, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 354 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 354 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 354 ^ y is impossible.
-/
theorem diophantine1_2_1_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (354 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 354 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 355 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 355 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 355 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 355 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 355 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 355 ^ y is impossible.
-/
theorem diophantine1_2_1_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (355 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (355 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 355 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (355 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 355 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 356 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 356 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 356 ^ y is impossible.
-/
theorem diophantine1_2_1_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (356 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 356 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 357 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 357 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 357 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 357 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 357 ^ y is impossible.
-/
theorem diophantine1_2_1_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (357 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 357 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 358 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 358 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 358 ^ y is impossible.
-/
theorem diophantine1_2_1_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (358 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 358 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 359 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 359 ^ y,
if x >= 7, 359 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 359 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 359 ^ y is impossible.
-/
theorem diophantine1_2_1_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (359 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (359 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 359 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 359 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 360 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 360 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 360 ^ y is impossible.
-/
theorem diophantine1_2_1_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (360 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 360 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 361 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   2 ^ x + 1 = 361 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 361 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 9, 27, 45, 63, 81, 99, 117, 135, 153, 171 (mod 180).
Therefore, 2 ^ x = 150, 74, 162, 22, 146, 31, 107, 19, 159, 35 (mod 181).
So 361 ^ y = 151, 75, 163, 23, 147, 32, 108, 20, 160, 36 (mod 181), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 361 ^ y is impossible.
-/
theorem diophantine1_2_1_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (361 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 181) [150, 74, 162, 22, 146, 31, 107, 19, 159, 35]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (361 ^ y % 181) [151, 75, 163, 23, 147, 32, 108, 20, 160, 36]) [
    {prop := List.Mem (2 ^ x % 181) [150, 74, 162, 22, 146, 31, 107, 19, 159, 35], proof := h10},
    {prop := 2 ^ x + 1 = 361 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (361 ^ y % 181) [151, 75, 163, 23, 147, 32, 108, 20, 160, 36], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 361 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 362 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 362 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 362 ^ y is impossible.
-/
theorem diophantine1_2_1_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (362 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 362 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 363 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 363 ...
-- Trying to disprove y >= 1 with prime factor 11 of 363 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 363 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 363 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55 (mod 60).
Therefore, 2 ^ x = 32, 11, 40, 29, 50, 21 (mod 61).
So 363 ^ y = 33, 12, 41, 30, 51, 22 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 363 ^ y is impossible.
-/
theorem diophantine1_2_1_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (363 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (363 ^ y % 61) [33, 12, 41, 30, 51, 22]) [
    {prop := List.Mem (2 ^ x % 61) [32, 11, 40, 29, 50, 21], proof := h10},
    {prop := 2 ^ x + 1 = 363 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (363 ^ y % 61) [33, 12, 41, 30, 51, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 363 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 364 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 364 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 364 ^ y is impossible.
-/
theorem diophantine1_2_1_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (364 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 364 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 365 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 365 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 365 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 365 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 365 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 365 ^ y is impossible.
-/
theorem diophantine1_2_1_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (365 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (365 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 365 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (365 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 365 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 366 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 366 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 366 ^ y is impossible.
-/
theorem diophantine1_2_1_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (366 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 366 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 367 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 367 ^ y,
if x >= 8, 367 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
Therefore, 367 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 367 ^ y is impossible.
-/
theorem diophantine1_2_1_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (367 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (367 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 367 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 367 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 368 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 368 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 368 ^ y is impossible.
-/
theorem diophantine1_2_1_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (368 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 368 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 369 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 369 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 369 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 369 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 369 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 369 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 369 ^ y is impossible.
-/
theorem diophantine1_2_1_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (369 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (369 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 369 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (369 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 369 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 370 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 370 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 370 ^ y is impossible.
-/
theorem diophantine1_2_1_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (370 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 370 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 371 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 371 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 371 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 371 ^ y is impossible.
-/
theorem diophantine1_2_1_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (371 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 371 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 372 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 372 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 372 ^ y is impossible.
-/
theorem diophantine1_2_1_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (372 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 372 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 373 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 373 ^ y,
if x >= 6, 373 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 2).
Therefore, 373 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 373 ^ y is impossible.
-/
theorem diophantine1_2_1_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (373 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (373 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 373 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 373 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 374 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 374 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 374 ^ y is impossible.
-/
theorem diophantine1_2_1_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (374 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 374 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 375 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 375 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 375 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 375 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 375 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 375 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 375 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 375 ^ y is impossible.
-/
theorem diophantine1_2_1_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (375 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (375 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 375 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (375 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 375 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 376 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 376 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 376 ^ y is impossible.
-/
theorem diophantine1_2_1_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (376 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 376 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 377 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   2 ^ x + 1 = 377 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 377 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42, 54 (mod 60).
Therefore, 2 ^ x = 3, 27, 60, 52, 41 (mod 61).
So 377 ^ y = 4, 28, 0, 53, 42 (mod 61), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 377 ^ y is impossible.
-/
theorem diophantine1_2_1_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (377 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (377 ^ y % 61) [4, 28, 0, 53, 42]) [
    {prop := List.Mem (2 ^ x % 61) [3, 27, 60, 52, 41], proof := h10},
    {prop := 2 ^ x + 1 = 377 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (377 ^ y % 61) [4, 28, 0, 53, 42], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 377 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 378 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 378 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 378 ^ y is impossible.
-/
theorem diophantine1_2_1_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (378 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 378 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 379 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 379 ^ y,
if x >= 6, 379 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 379 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 379 ^ y is impossible.
-/
theorem diophantine1_2_1_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 379 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (379 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (379 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 379 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 379 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 380 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 380 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 380 ^ y is impossible.
-/
theorem diophantine1_2_1_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (380 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 380 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 381 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 381 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 381 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 381 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 381 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 381 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 381 ^ y is impossible.
-/
theorem diophantine1_2_1_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (381 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (381 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 381 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (381 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 381 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 382 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 382 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 382 ^ y is impossible.
-/
theorem diophantine1_2_1_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (382 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 382 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 383 of 383 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 383 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 383 ^ y,
if y >= 1, 2 ^ x = 382 (mod 383).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 383 ^ y is impossible.
-/
theorem diophantine1_2_1_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (383 ^ y % 383 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 383 = 382 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 383 = 382, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 383 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 384 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 384 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 384 ^ y is impossible.
-/
theorem diophantine1_2_1_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (384 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 384 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 385 ...
-- Trying to disprove y >= 1 with prime factor 7 of 385 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 385 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 385 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 385 ^ y is impossible.
-/
theorem diophantine1_2_1_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (385 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 385 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 386 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 386 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 386 ^ y is impossible.
-/
theorem diophantine1_2_1_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (386 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 386 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 387 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 387 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 387 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 387 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 387 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 387 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 387 ^ y is impossible.
-/
theorem diophantine1_2_1_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (387 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (387 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 387 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (387 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 387 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 388 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 388 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 388 ^ y is impossible.
-/
theorem diophantine1_2_1_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (388 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 388 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 389 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 389 ^ y,
if x >= 6, 389 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 389 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 389 ^ y is impossible.
-/
theorem diophantine1_2_1_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (389 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (389 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 389 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 389 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 390 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 390 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 390 ^ y is impossible.
-/
theorem diophantine1_2_1_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (390 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 390 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 391 ...
-- Trying to disprove y >= 1 with prime factor 23 of 391 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 391 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 391 ^ y,
if y >= 1, 2 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 391 ^ y is impossible.
-/
theorem diophantine1_2_1_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (391 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 391 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 392 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 392 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 392 ^ y is impossible.
-/
theorem diophantine1_2_1_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (392 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 392 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 393 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 393 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 393 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 393 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 393 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 393 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 393 ^ y is impossible.
-/
theorem diophantine1_2_1_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (393 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (393 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 393 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (393 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 393 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 394 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 394 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 394 ^ y is impossible.
-/
theorem diophantine1_2_1_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (394 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 394 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 395 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 395 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 395 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 395 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 395 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 395 ^ y is impossible.
-/
theorem diophantine1_2_1_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (395 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (395 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 395 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (395 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 395 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 396 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 396 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 396 ^ y is impossible.
-/
theorem diophantine1_2_1_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (396 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 396 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 397 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 397 ^ y,
if x >= 6, 397 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 397 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 397 ^ y is impossible.
-/
theorem diophantine1_2_1_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (397 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (397 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 397 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 397 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 398 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 398 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 398 ^ y is impossible.
-/
theorem diophantine1_2_1_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (398 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 398 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 399 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 399 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 399 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 399 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 399 ^ y is impossible.
-/
theorem diophantine1_2_1_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (399 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 399 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 400 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 400 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 400 ^ y is impossible.
-/
theorem diophantine1_2_1_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (400 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 400 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 401 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 401 ^ y,
if x >= 8, 401 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
Therefore, 401 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 401 ^ y is impossible.
-/
theorem diophantine1_2_1_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (401 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (401 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 401 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 401 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 402 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 402 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 402 ^ y is impossible.
-/
theorem diophantine1_2_1_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (402 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 402 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 403 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   2 ^ x + 1 = 403 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 403 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30 (mod 36).
Therefore, 2 ^ x = 64, 108, 46 (mod 109).
So 403 ^ y = 65, 0, 47 (mod 109), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 403 ^ y is impossible.
-/
theorem diophantine1_2_1_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (403 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 109) [64, 108, 46]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (403 ^ y % 109) [65, 0, 47]) [
    {prop := List.Mem (2 ^ x % 109) [64, 108, 46], proof := h10},
    {prop := 2 ^ x + 1 = 403 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (403 ^ y % 109) [65, 0, 47], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 403 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 404 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 404 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 404 ^ y is impossible.
-/
theorem diophantine1_2_1_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (404 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 404 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 405 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 405 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 405 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 405 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 405 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 405 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 405 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 405 ^ y is impossible.
-/
theorem diophantine1_2_1_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (405 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (405 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 405 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (405 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 405 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 406 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 406 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 406 ^ y is impossible.
-/
theorem diophantine1_2_1_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (406 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 406 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 407 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 407 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 407 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15 (mod 20).
Therefore, 2 ^ x = 32, 9 (mod 41).
So 407 ^ y = 33, 10 (mod 41), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 407 ^ y is impossible.
-/
theorem diophantine1_2_1_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (407 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [32, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (407 ^ y % 41) [33, 10]) [
    {prop := List.Mem (2 ^ x % 41) [32, 9], proof := h10},
    {prop := 2 ^ x + 1 = 407 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (407 ^ y % 41) [33, 10], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 407 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 408 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 408 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 408 ^ y is impossible.
-/
theorem diophantine1_2_1_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (408 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 408 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 1 = 409 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 409 ^ y,
if x >= 7, 409 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0, 16, 32, 48, 64 (mod 80).
Therefore, 409 ^ y = 1, 91, 87, 205, 98 (mod 241).
So 2 ^ x = 0, 90, 86, 204, 97 (mod 241), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 409 ^ y is impossible.
-/
theorem diophantine1_2_1_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (409 ^ y % 241) [1, 91, 87, 205, 98]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [0, 90, 86, 204, 97]) [
    {prop := List.Mem (409 ^ y % 241) [1, 91, 87, 205, 98], proof := h10},
    {prop := 2 ^ x + 1 = 409 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [0, 90, 86, 204, 97], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 409 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 410 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 410 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 410 ^ y is impossible.
-/
theorem diophantine1_2_1_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (410 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 410 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 411 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 411 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 411 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 411 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 411 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 411 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 411 ^ y is impossible.
-/
theorem diophantine1_2_1_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (411 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (411 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 411 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (411 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 411 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 412 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 412 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 412 ^ y is impossible.
-/
theorem diophantine1_2_1_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (412 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 412 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 413 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 413 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 413 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 413 ^ y is impossible.
-/
theorem diophantine1_2_1_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (413 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 413 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 414 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 414 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 414 ^ y is impossible.
-/
theorem diophantine1_2_1_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (414 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 414 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 415 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 415 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 415 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 415 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 415 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 415 ^ y is impossible.
-/
theorem diophantine1_2_1_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (415 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (415 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 415 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (415 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 415 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 416 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 416 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 416 ^ y is impossible.
-/
theorem diophantine1_2_1_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (416 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 416 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 417 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 417 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 417 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 417 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 417 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 417 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 417 ^ y is impossible.
-/
theorem diophantine1_2_1_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (417 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (417 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 417 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (417 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 417 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 418 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 418 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 418 ^ y is impossible.
-/
theorem diophantine1_2_1_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (418 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 418 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 419 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 419 ^ y,
if x >= 6, 419 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 419 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 419 ^ y is impossible.
-/
theorem diophantine1_2_1_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (419 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (419 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 419 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 419 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 420 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 420 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 420 ^ y is impossible.
-/
theorem diophantine1_2_1_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (420 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 420 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 421 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 421 ^ y,
if x >= 6, 421 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 421 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 421 ^ y is impossible.
-/
theorem diophantine1_2_1_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (421 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (421 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 421 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 421 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 422 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 422 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 422 ^ y is impossible.
-/
theorem diophantine1_2_1_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (422 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 422 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 423 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 423 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 423 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 423 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 423 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 423 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 423 ^ y is impossible.
-/
theorem diophantine1_2_1_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (423 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (423 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 423 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (423 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 423 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 424 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 424 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 424 ^ y is impossible.
-/
theorem diophantine1_2_1_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (424 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 424 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 425 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 425 ...
-- Trying to disprove y >= 2 with prime factor 5 of 425 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 425 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 425 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 425 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 425 ^ y is impossible.
-/
theorem diophantine1_2_1_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (425 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (425 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 425 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (425 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 425 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 426 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 426 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 426 ^ y is impossible.
-/
theorem diophantine1_2_1_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (426 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 426 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 427 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 427 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 427 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 427 ^ y is impossible.
-/
theorem diophantine1_2_1_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (427 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 427 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 428 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 428 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 428 ^ y is impossible.
-/
theorem diophantine1_2_1_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (428 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 428 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 429 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 429 ...
-- Trying to disprove y >= 1 with prime factor 11 of 429 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 1 = 429 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 429 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 2 ^ x = 1 (mod 31).
So 429 ^ y = 2 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 429 ^ y is impossible.
-/
theorem diophantine1_2_1_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (429 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (429 ^ y % 31) [2]) [
    {prop := List.Mem (2 ^ x % 31) [1], proof := h10},
    {prop := 2 ^ x + 1 = 429 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (429 ^ y % 31) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 429 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 430 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 430 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 430 ^ y is impossible.
-/
theorem diophantine1_2_1_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (430 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 430 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 431 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 431 ^ y,
if x >= 8, 431 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
Therefore, 431 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 431 ^ y is impossible.
-/
theorem diophantine1_2_1_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (431 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (431 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 431 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 431 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 432 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 432 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 432 ^ y is impossible.
-/
theorem diophantine1_2_1_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (432 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 432 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 433 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 433 ^ y,
if x >= 8, 433 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 433 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 433 ^ y is impossible.
-/
theorem diophantine1_2_1_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 433 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (433 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (433 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 433 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 433 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 434 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 434 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 434 ^ y is impossible.
-/
theorem diophantine1_2_1_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (434 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 434 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 435 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 435 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 435 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 435 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 435 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 435 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 435 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 435 ^ y is impossible.
-/
theorem diophantine1_2_1_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (435 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (435 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 435 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (435 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 435 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 436 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 436 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 436 ^ y is impossible.
-/
theorem diophantine1_2_1_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (436 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 436 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   2 ^ x + 1 = 437 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 437 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 0 (mod 9).
Therefore, 2 ^ x = 1 (mod 73).
So 437 ^ y = 2 (mod 73), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 437 ^ y is impossible.
-/
theorem diophantine1_2_1_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 73) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (437 ^ y % 73) [2]) [
    {prop := List.Mem (2 ^ x % 73) [1], proof := h10},
    {prop := 2 ^ x + 1 = 437 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (437 ^ y % 73) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 438 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 438 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 438 ^ y is impossible.
-/
theorem diophantine1_2_1_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (438 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 438 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 439 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 439 ^ y,
if x >= 7, 439 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 439 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 439 ^ y is impossible.
-/
theorem diophantine1_2_1_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (439 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (439 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 439 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 439 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 440 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 440 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 440 ^ y is impossible.
-/
theorem diophantine1_2_1_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (440 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 440 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 441 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 441 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 441 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 441 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 441 ^ y is impossible.
-/
theorem diophantine1_2_1_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (441 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 441 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 442 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 442 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 442 ^ y is impossible.
-/
theorem diophantine1_2_1_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (442 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 442 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 241)   2 ^ x + 1 = 443 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 443 ^ y,
if x >= 6, 443 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224 (mod 240).
Therefore, 443 ^ y = 1, 94, 160, 98, 54, 15, 205, 231, 24, 87, 225, 183, 91, 119, 100 (mod 241).
So 2 ^ x = 0, 93, 159, 97, 53, 14, 204, 230, 23, 86, 224, 182, 90, 118, 99 (mod 241), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 443 ^ y is impossible.
-/
theorem diophantine1_2_1_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (443 ^ y % 241) [1, 94, 160, 98, 54, 15, 205, 231, 24, 87, 225, 183, 91, 119, 100]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 241) [0, 93, 159, 97, 53, 14, 204, 230, 23, 86, 224, 182, 90, 118, 99]) [
    {prop := List.Mem (443 ^ y % 241) [1, 94, 160, 98, 54, 15, 205, 231, 24, 87, 225, 183, 91, 119, 100], proof := h10},
    {prop := 2 ^ x + 1 = 443 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 241) [0, 93, 159, 97, 53, 14, 204, 230, 23, 86, 224, 182, 90, 118, 99], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 443 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 444 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 444 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 444 ^ y is impossible.
-/
theorem diophantine1_2_1_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (444 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 444 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 445 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 445 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 445 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 445 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 445 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 445 ^ y is impossible.
-/
theorem diophantine1_2_1_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (445 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (445 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 445 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (445 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 445 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 446 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 446 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 446 ^ y is impossible.
-/
theorem diophantine1_2_1_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (446 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 446 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 447 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 447 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 447 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 447 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 447 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 447 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 447 ^ y is impossible.
-/
theorem diophantine1_2_1_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (447 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (447 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 447 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (447 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 447 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 448 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 448 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 448 ^ y is impossible.
-/
theorem diophantine1_2_1_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (448 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 448 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 449 of 449 ...
-- Trying prime 673...
-- Trying prime 2017...
-- Trying prime 2689...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 2689)   2 ^ x + 1 = 449 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 449 ^ y,
if y >= 1, 2 ^ x = 448 (mod 449).
So x = 112 (mod 224).
Therefore, 2 ^ x = 2688 (mod 2689).
So 449 ^ y = 0 (mod 2689), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 449 ^ y is impossible.
-/
theorem diophantine1_2_1_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (449 ^ y % 449 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 449 = 448 := by omega
  have h9 := Claim (x % 224 = 112) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 449 = 448, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 2689) [2688]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 224 = 112, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (449 ^ y % 2689) [0]) [
    {prop := List.Mem (2 ^ x % 2689) [2688], proof := h10},
    {prop := 2 ^ x + 1 = 449 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (449 ^ y % 2689) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 449 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 450 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 450 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 450 ^ y is impossible.
-/
theorem diophantine1_2_1_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (450 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 450 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 451 ...
-- Trying prime 31...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   2 ^ x + 1 = 451 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 451 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0, 5, 10, 15, 20, 25, 30 (mod 35).
Therefore, 2 ^ x = 1, 32, 30, 37, 48, 45, 20 (mod 71).
So 451 ^ y = 2, 33, 31, 38, 49, 46, 21 (mod 71), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 451 ^ y is impossible.
-/
theorem diophantine1_2_1_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (451 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 71) [1, 32, 30, 37, 48, 45, 20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (451 ^ y % 71) [2, 33, 31, 38, 49, 46, 21]) [
    {prop := List.Mem (2 ^ x % 71) [1, 32, 30, 37, 48, 45, 20], proof := h10},
    {prop := 2 ^ x + 1 = 451 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (451 ^ y % 71) [2, 33, 31, 38, 49, 46, 21], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 451 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 452 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 452 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 452 ^ y is impossible.
-/
theorem diophantine1_2_1_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (452 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 452 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 453 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 453 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 453 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 453 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 453 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 453 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 453 ^ y is impossible.
-/
theorem diophantine1_2_1_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (453 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (453 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 453 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (453 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 453 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 454 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 454 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 454 ^ y is impossible.
-/
theorem diophantine1_2_1_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (454 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 454 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 455 ...
-- Trying to disprove y >= 1 with prime factor 7 of 455 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 455 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 455 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 455 ^ y is impossible.
-/
theorem diophantine1_2_1_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (455 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 455 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 456 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 456 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 456 ^ y is impossible.
-/
theorem diophantine1_2_1_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (456 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 456 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 457 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 457 ^ y,
if x >= 7, 457 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 457 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 457 ^ y is impossible.
-/
theorem diophantine1_2_1_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (457 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (457 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 457 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 457 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 458 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 458 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 458 ^ y is impossible.
-/
theorem diophantine1_2_1_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (458 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 458 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 459 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 459 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 459 ...
-- Trying to disprove y >= 3 with prime factor 3 of 459 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 459 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 459 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 459 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 459 ^ y is impossible.
-/
theorem diophantine1_2_1_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (459 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (459 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 459 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (459 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 459 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 460 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 460 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 460 ^ y is impossible.
-/
theorem diophantine1_2_1_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (460 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 460 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 461 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 461 ^ y,
if x >= 6, 461 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 461 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 461 ^ y is impossible.
-/
theorem diophantine1_2_1_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (461 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (461 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 461 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 461 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 462 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 462 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 462 ^ y is impossible.
-/
theorem diophantine1_2_1_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (462 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 462 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 463 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 463 ^ y,
if x >= 8, 463 ^ y = 1 (mod 256).
So y = 0 (mod 16), 
which implies y = 0 (mod 4).
Therefore, 463 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 8.
Further examination shows that 2 ^ x + 1 = 463 ^ y is impossible.
-/
theorem diophantine1_2_1_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 8
  have h7 := Claim (2 ^ x % 256 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 8, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 463 ^ y % 256 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 256 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (463 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (463 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 463 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 7 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 463 ^ y, proof := h3},
    {prop := x <= 7, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 464 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 464 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 464 ^ y is impossible.
-/
theorem diophantine1_2_1_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (464 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 464 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 465 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 465 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 465 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 465 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 465 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 465 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 465 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 465 ^ y is impossible.
-/
theorem diophantine1_2_1_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (465 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (465 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 465 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (465 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 465 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 466 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 466 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 466 ^ y is impossible.
-/
theorem diophantine1_2_1_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (466 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 466 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 467 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 467 ^ y,
if x >= 6, 467 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 467 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 467 ^ y is impossible.
-/
theorem diophantine1_2_1_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (467 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (467 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 467 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 467 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 468 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 468 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 468 ^ y is impossible.
-/
theorem diophantine1_2_1_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (468 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 468 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 469 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 469 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 469 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 469 ^ y is impossible.
-/
theorem diophantine1_2_1_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (469 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 469 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 470 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 470 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 470 ^ y is impossible.
-/
theorem diophantine1_2_1_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (470 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 470 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 471 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 471 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 471 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 471 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 471 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 471 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 471 ^ y is impossible.
-/
theorem diophantine1_2_1_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (471 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (471 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 471 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (471 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 471 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 472 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 472 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 472 ^ y is impossible.
-/
theorem diophantine1_2_1_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (472 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 472 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 11 of 473 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   2 ^ x + 1 = 473 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 473 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 5, 15, 25, 35, 45, 55, 65, 75, 85, 95 (mod 100).
Therefore, 2 ^ x = 32, 44, 10, 39, 41, 69, 57, 91, 62, 60 (mod 101).
So 473 ^ y = 33, 45, 11, 40, 42, 70, 58, 92, 63, 61 (mod 101), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 473 ^ y is impossible.
-/
theorem diophantine1_2_1_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (473 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 101) [32, 44, 10, 39, 41, 69, 57, 91, 62, 60]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (473 ^ y % 101) [33, 45, 11, 40, 42, 70, 58, 92, 63, 61]) [
    {prop := List.Mem (2 ^ x % 101) [32, 44, 10, 39, 41, 69, 57, 91, 62, 60], proof := h10},
    {prop := 2 ^ x + 1 = 473 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (473 ^ y % 101) [33, 45, 11, 40, 42, 70, 58, 92, 63, 61], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 473 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 474 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 474 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 474 ^ y is impossible.
-/
theorem diophantine1_2_1_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (474 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 474 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 475 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 19 of 475 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   2 ^ x + 1 = 475 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 475 ^ y,
if y >= 1, 2 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 9, 27 (mod 36).
Therefore, 2 ^ x = 31, 6 (mod 37).
So 475 ^ y = 32, 7 (mod 37), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 475 ^ y is impossible.
-/
theorem diophantine1_2_1_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (475 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 37) [31, 6]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (475 ^ y % 37) [32, 7]) [
    {prop := List.Mem (2 ^ x % 37) [31, 6], proof := h10},
    {prop := 2 ^ x + 1 = 475 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (475 ^ y % 37) [32, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 475 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 476 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 476 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 476 ^ y is impossible.
-/
theorem diophantine1_2_1_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (476 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 476 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 477 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 477 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 477 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 477 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 477 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 477 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 477 ^ y is impossible.
-/
theorem diophantine1_2_1_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (477 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (477 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 477 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (477 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 477 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 478 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 478 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 478 ^ y is impossible.
-/
theorem diophantine1_2_1_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (478 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 478 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying to disprove x >= 8 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 479 of 479 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 479 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 479 ^ y,
if y >= 1, 2 ^ x = 478 (mod 479).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 479 ^ y is impossible.
-/
theorem diophantine1_2_1_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (479 ^ y % 479 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 479 = 478 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 479 = 478, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 479 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 480 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 480 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 480 ^ y is impossible.
-/
theorem diophantine1_2_1_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (480 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 480 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 13 of 481 ...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   2 ^ x + 1 = 481 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 481 ^ y,
if y >= 1, 2 ^ x = 12 (mod 13).
So x = 6 (mod 12), 
which implies x = 6, 18, 30, 42 (mod 48).
Therefore, 2 ^ x = 64, 50, 33, 47 (mod 97).
So 481 ^ y = 65, 51, 34, 48 (mod 97), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 481 ^ y is impossible.
-/
theorem diophantine1_2_1_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (481 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 13 = 12 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 97) [64, 50, 33, 47]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (481 ^ y % 97) [65, 51, 34, 48]) [
    {prop := List.Mem (2 ^ x % 97) [64, 50, 33, 47], proof := h10},
    {prop := 2 ^ x + 1 = 481 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (481 ^ y % 97) [65, 51, 34, 48], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 481 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 482 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 482 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 482 ^ y is impossible.
-/
theorem diophantine1_2_1_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (482 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 482 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 483 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 483 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 483 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 483 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 483 ^ y is impossible.
-/
theorem diophantine1_2_1_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (483 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 483 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 484 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 484 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 484 ^ y is impossible.
-/
theorem diophantine1_2_1_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (484 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 484 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 485 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 5 of 485 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   2 ^ x + 1 = 485 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 485 ^ y,
if y >= 2, 2 ^ x = 24 (mod 25).
So x = 10 (mod 20).
Therefore, 2 ^ x = 40 (mod 41).
So 485 ^ y = 0 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 2 ^ x + 1 = 485 ^ y is impossible.
-/
theorem diophantine1_2_1_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (485 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 41) [40]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (485 ^ y % 41) [0]) [
    {prop := List.Mem (2 ^ x % 41) [40], proof := h10},
    {prop := 2 ^ x + 1 = 485 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (485 ^ y % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 485 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 486 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 486 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 486 ^ y is impossible.
-/
theorem diophantine1_2_1_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (486 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 486 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying to disprove x >= 7 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 487 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 487 ^ y,
if x >= 7, 487 ^ y = 1 (mod 128).
So y = 0 (mod 16), 
Therefore, 487 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 7.
Further examination shows that 2 ^ x + 1 = 487 ^ y is impossible.
-/
theorem diophantine1_2_1_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 7
  have h7 := Claim (2 ^ x % 128 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 7, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 487 ^ y % 128 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 128 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (487 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (487 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 487 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 6 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 487 ^ y, proof := h3},
    {prop := x <= 6, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 488 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 488 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 488 ^ y is impossible.
-/
theorem diophantine1_2_1_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (488 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 488 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 489 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 489 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 3 with prime factor 3 of 489 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   2 ^ x + 1 = 489 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 489 ^ y,
if y >= 3, 2 ^ x = 26 (mod 27).
So x = 9 (mod 18).
Therefore, 2 ^ x = 18 (mod 19).
So 489 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 3.
Further examination shows that 2 ^ x + 1 = 489 ^ y is impossible.
-/
theorem diophantine1_2_1_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (489 ^ y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 27 = 26 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 27 = 26, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (489 ^ y % 19) [0]) [
    {prop := List.Mem (2 ^ x % 19) [18], proof := h10},
    {prop := 2 ^ x + 1 = 489 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (489 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 489 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 490 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 490 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 490 ^ y is impossible.
-/
theorem diophantine1_2_1_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (490 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 490 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 491 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 491 ^ y,
if x >= 6, 491 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 8).
Therefore, 491 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 491 ^ y is impossible.
-/
theorem diophantine1_2_1_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (491 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (491 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 491 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 491 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 492 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 492 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 492 ^ y is impossible.
-/
theorem diophantine1_2_1_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (492 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 492 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 17 of 493 ...
-- Trying to disprove y >= 1 with prime factor 29 of 493 ...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 113)   2 ^ x + 1 = 493 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 493 ^ y,
if y >= 1, 2 ^ x = 28 (mod 29).
So x = 14 (mod 28).
Therefore, 2 ^ x = 112 (mod 113).
So 493 ^ y = 0 (mod 113), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 493 ^ y is impossible.
-/
theorem diophantine1_2_1_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (493 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 29 = 28 := by omega
  have h9 := Claim (x % 28 = 14) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 29 = 28, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 113) [112]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 28 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (493 ^ y % 113) [0]) [
    {prop := List.Mem (2 ^ x % 113) [112], proof := h10},
    {prop := 2 ^ x + 1 = 493 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (493 ^ y % 113) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 493 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 494 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 494 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 494 ^ y is impossible.
-/
theorem diophantine1_2_1_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (494 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 494 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 3 of 495 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 5 of 495 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove y >= 2 with prime factor 3 of 495 ...
-- Trying to disprove y >= 1 with prime factor 11 of 495 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   2 ^ x + 1 = 495 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 495 ^ y,
if y >= 1, 2 ^ x = 10 (mod 11).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 2 ^ x = 1 (mod 31).
So 495 ^ y = 2 (mod 31), but this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 495 ^ y is impossible.
-/
theorem diophantine1_2_1_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (495 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 11 = 10 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (2 ^ x % 31) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (495 ^ y % 31) [2]) [
    {prop := List.Mem (2 ^ x % 31) [1], proof := h10},
    {prop := 2 ^ x + 1 = 495 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (495 ^ y % 31) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 495 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 496 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 496 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 496 ^ y is impossible.
-/
theorem diophantine1_2_1_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (496 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 496 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove y >= 1 with prime factor 7 of 497 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   2 ^ x + 1 = 497 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 497 ^ y,
if y >= 1, 2 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 2 ^ x + 1 = 497 ^ y is impossible.
-/
theorem diophantine1_2_1_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (497 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 2 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 2 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 497 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 498 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 498 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 498 ^ y is impossible.
-/
theorem diophantine1_2_1_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (498 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 498 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 2 with prime factor 2 of 2 ...
-- Trying to disprove x >= 3 with prime factor 2 of 2 ...
-- Trying to disprove x >= 4 with prime factor 2 of 2 ...
-- Trying to disprove x >= 5 with prime factor 2 of 2 ...
-- Trying to disprove x >= 6 with prime factor 2 of 2 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   2 ^ x + 1 = 499 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 499 ^ y,
if x >= 6, 499 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 499 ^ y = 1 (mod 17).
So 2 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 2 ^ x + 1 = 499 ^ y is impossible.
-/
theorem diophantine1_2_1_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (2 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (499 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (2 ^ x % 17) [0]) [
    {prop := List.Mem (499 ^ y % 17) [1], proof := h10},
    {prop := 2 ^ x + 1 = 499 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (2 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 499 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   2 ^ x + 1 = 500 ^ y
For positive integers x, y satisfying 2 ^ x + 1 = 500 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 2 ^ x + 1 = 500 ^ y is impossible.
-/
theorem diophantine1_2_1_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 2 ^ x + 1 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (2 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (500 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 2 ^ x + 1 = 500 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
