-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 4 <= a <= 4
-- 6 <= b <= 6
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   4 ^ x + 6 = 2 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 2 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 2 ^ y is impossible.
-/
theorem diophantine1_4_6_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 2 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 3 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 3 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 4 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 4 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 4 ^ y is impossible.
-/
theorem diophantine1_4_6_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 4 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 5 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 5 ^ y,
this is impossible, because it implies that 5 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 5 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 6 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 6 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 7 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 7 ^ y,
this is impossible, because it implies that 7 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 8 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 8 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 8 ^ y is impossible.
-/
theorem diophantine1_4_6_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 8 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 9 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 9 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (9 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 10 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 10 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_4_6_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 10 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 10 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 11 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 11 ^ y,
this is impossible, because it implies that 11 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 11 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 12 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 12 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 13 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 13 ^ y,
this is impossible, because it implies that 13 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 13 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 14 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 14 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 14 ^ y is impossible.
-/
theorem diophantine1_4_6_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 14 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 15 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 15 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 16 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 16 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 16 ^ y is impossible.
-/
theorem diophantine1_4_6_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 16 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 17 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 17 ^ y,
this is impossible, because it implies that 17 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 17 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 18 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 18 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 19 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 19 ^ y,
this is impossible, because it implies that 19 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 19 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 20 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 20 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 20 ^ y is impossible.
-/
theorem diophantine1_4_6_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 20 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 21 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 21 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 22 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 22 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_4_6_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 22 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 22 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 23 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 23 ^ y,
this is impossible, because it implies that 23 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 23 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 24 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 24 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 25 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 25 ^ y,
this is impossible, because it implies that 25 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 25 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 26 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 26 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 26 ^ y is impossible.
-/
theorem diophantine1_4_6_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 26 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 27 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 27 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (27 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 28 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 28 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 28 ^ y is impossible.
-/
theorem diophantine1_4_6_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 28 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 29 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 29 ^ y,
this is impossible, because it implies that 29 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 29 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 30 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 30 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 31 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 31 ^ y,
this is impossible, because it implies that 31 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 31 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 32 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 32 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 32 ^ y is impossible.
-/
theorem diophantine1_4_6_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 32 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 33 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 33 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 34 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 34 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 34 ^ y is impossible.
-/
theorem diophantine1_4_6_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 34 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 35 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 35 ^ y,
this is impossible, because it implies that 35 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 35 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 35 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 36 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 36 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 37 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 37 ^ y,
this is impossible, because it implies that 37 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 37 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 38 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 38 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 38 ^ y is impossible.
-/
theorem diophantine1_4_6_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 38 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 39 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 39 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 40 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 40 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 40 ^ y is impossible.
-/
theorem diophantine1_4_6_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 40 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 41 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 41 ^ y,
this is impossible, because it implies that 41 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 41 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 42 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 42 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 43 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 43 ^ y,
this is impossible, because it implies that 43 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 43 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 44 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 44 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 44 ^ y is impossible.
-/
theorem diophantine1_4_6_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 44 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 45 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 45 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 46 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 46 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 46 ^ y is impossible.
-/
theorem diophantine1_4_6_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 46 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 47 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 47 ^ y,
this is impossible, because it implies that 47 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 47 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 48 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 48 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 49 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 49 ^ y,
this is impossible, because it implies that 49 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 49 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 50 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 50 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 50 ^ y is impossible.
-/
theorem diophantine1_4_6_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 50 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 51 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 51 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 52 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 52 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 52 ^ y is impossible.
-/
theorem diophantine1_4_6_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 52 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 53 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 53 ^ y,
this is impossible, because it implies that 53 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 53 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 54 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 54 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 55 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 55 ^ y,
this is impossible, because it implies that 55 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 55 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 56 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 56 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 56 ^ y is impossible.
-/
theorem diophantine1_4_6_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 56 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 57 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 57 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 58 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 58 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 58 ^ y is impossible.
-/
theorem diophantine1_4_6_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 58 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 59 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 59 ^ y,
this is impossible, because it implies that 59 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 59 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 60 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 60 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 61 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 61 ^ y,
this is impossible, because it implies that 61 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 61 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 62 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 62 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 62 ^ y is impossible.
-/
theorem diophantine1_4_6_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 62 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 63 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 63 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 64 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 64 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 64 ^ y is impossible.
-/
theorem diophantine1_4_6_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 64 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 65 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 65 ^ y,
this is impossible, because it implies that 65 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 65 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 65 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 66 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 66 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 67 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 67 ^ y,
this is impossible, because it implies that 67 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 67 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 68 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 68 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 68 ^ y is impossible.
-/
theorem diophantine1_4_6_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 68 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 69 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 69 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 70 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 70 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_4_6_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 70 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 70 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 71 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 71 ^ y,
this is impossible, because it implies that 71 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 71 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 72 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 72 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 73 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 73 ^ y,
this is impossible, because it implies that 73 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 73 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 74 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 74 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 74 ^ y is impossible.
-/
theorem diophantine1_4_6_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 74 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 75 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 75 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 76 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 76 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 76 ^ y is impossible.
-/
theorem diophantine1_4_6_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 76 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 77 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 77 ^ y,
this is impossible, because it implies that 77 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 77 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 78 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 78 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 79 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 79 ^ y,
this is impossible, because it implies that 79 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 79 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 80 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 80 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 80 ^ y is impossible.
-/
theorem diophantine1_4_6_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 80 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 81 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 81 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (81 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 82 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 82 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 82 ^ y is impossible.
-/
theorem diophantine1_4_6_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 82 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 83 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 83 ^ y,
this is impossible, because it implies that 83 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 83 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 84 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 84 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 85 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 85 ^ y,
this is impossible, because it implies that 85 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 85 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 86 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 86 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 86 ^ y is impossible.
-/
theorem diophantine1_4_6_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 86 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 87 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 87 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 88 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 88 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 88 ^ y is impossible.
-/
theorem diophantine1_4_6_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 88 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 89 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 89 ^ y,
this is impossible, because it implies that 89 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 89 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 90 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 90 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 91 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 91 ^ y,
this is impossible, because it implies that 91 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 91 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 92 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 92 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 92 ^ y is impossible.
-/
theorem diophantine1_4_6_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 92 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 93 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 93 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 94 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 94 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 94 ^ y is impossible.
-/
theorem diophantine1_4_6_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 94 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 95 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 95 ^ y,
this is impossible, because it implies that 95 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 95 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 96 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 96 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 97 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 97 ^ y,
this is impossible, because it implies that 97 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 97 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 98 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 98 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 98 ^ y is impossible.
-/
theorem diophantine1_4_6_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 98 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 99 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 99 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (99 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 100 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 100 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 100 ^ y is impossible.
-/
theorem diophantine1_4_6_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 100 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 101 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 101 ^ y,
this is impossible, because it implies that 101 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 101 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 102 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 102 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 103 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 103 ^ y,
this is impossible, because it implies that 103 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 103 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 104 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 104 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 104 ^ y is impossible.
-/
theorem diophantine1_4_6_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 104 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 105 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 105 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 106 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 106 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 106 ^ y is impossible.
-/
theorem diophantine1_4_6_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 106 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 107 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 107 ^ y,
this is impossible, because it implies that 107 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 107 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 108 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 108 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 109 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 109 ^ y,
this is impossible, because it implies that 109 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 109 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 110 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 110 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 110 ^ y is impossible.
-/
theorem diophantine1_4_6_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 110 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 111 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 111 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 112 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 112 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 112 ^ y is impossible.
-/
theorem diophantine1_4_6_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 112 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 113 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 113 ^ y,
this is impossible, because it implies that 113 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 113 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 114 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 114 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 115 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 115 ^ y,
this is impossible, because it implies that 115 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 115 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 115 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 116 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 116 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 116 ^ y is impossible.
-/
theorem diophantine1_4_6_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 116 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 117 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 117 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (117 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 118 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 118 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 118 ^ y is impossible.
-/
theorem diophantine1_4_6_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 118 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 119 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 119 ^ y,
this is impossible, because it implies that 119 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 119 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 119 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 120 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 120 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 121 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 121 ^ y,
this is impossible, because it implies that 121 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 121 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 122 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 122 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 122 ^ y is impossible.
-/
theorem diophantine1_4_6_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 122 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 123 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 123 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 124 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 124 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 124 ^ y is impossible.
-/
theorem diophantine1_4_6_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 124 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 125 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 125 ^ y,
this is impossible, because it implies that 125 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 125 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 125 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 126 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 126 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 127 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 127 ^ y,
this is impossible, because it implies that 127 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 127 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 128 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 128 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 128 ^ y is impossible.
-/
theorem diophantine1_4_6_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 128 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 129 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 129 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 130 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 130 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 130 ^ y is impossible.
-/
theorem diophantine1_4_6_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 130 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 131 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 131 ^ y,
this is impossible, because it implies that 131 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 131 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 132 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 132 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (132 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 133 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 133 ^ y,
this is impossible, because it implies that 133 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 133 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 133 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 134 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 134 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 134 ^ y is impossible.
-/
theorem diophantine1_4_6_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 134 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 135 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 135 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (135 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 136 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 136 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 136 ^ y is impossible.
-/
theorem diophantine1_4_6_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 136 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 137 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 137 ^ y,
this is impossible, because it implies that 137 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 137 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 138 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 138 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (138 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 139 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 139 ^ y,
this is impossible, because it implies that 139 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 139 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 140 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 140 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 140 ^ y is impossible.
-/
theorem diophantine1_4_6_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (140 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 140 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 141 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 141 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 142 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 142 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 142 ^ y is impossible.
-/
theorem diophantine1_4_6_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 142 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 143 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 143 ^ y,
this is impossible, because it implies that 143 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 143 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 143 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 144 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 144 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (144 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 145 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 145 ^ y,
this is impossible, because it implies that 145 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 145 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 145 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 146 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 146 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 146 ^ y is impossible.
-/
theorem diophantine1_4_6_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 146 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 147 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 147 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 148 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 148 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 148 ^ y is impossible.
-/
theorem diophantine1_4_6_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 148 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 149 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 149 ^ y,
this is impossible, because it implies that 149 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 149 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 150 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 150 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 151 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 151 ^ y,
this is impossible, because it implies that 151 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 151 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 152 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 152 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 152 ^ y is impossible.
-/
theorem diophantine1_4_6_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 152 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 153 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 153 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (153 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 154 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 154 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 154 ^ y is impossible.
-/
theorem diophantine1_4_6_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 154 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 155 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 155 ^ y,
this is impossible, because it implies that 155 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 155 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 155 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 156 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 156 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (156 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 157 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 157 ^ y,
this is impossible, because it implies that 157 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 157 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 158 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 158 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 158 ^ y is impossible.
-/
theorem diophantine1_4_6_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 158 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 159 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 159 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 160 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 160 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 160 ^ y is impossible.
-/
theorem diophantine1_4_6_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 160 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 161 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 161 ^ y,
this is impossible, because it implies that 161 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 161 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 161 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 162 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 162 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (162 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 163 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 163 ^ y,
this is impossible, because it implies that 163 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 163 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 164 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 164 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 164 ^ y is impossible.
-/
theorem diophantine1_4_6_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 164 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 165 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 165 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 166 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 166 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 166 ^ y is impossible.
-/
theorem diophantine1_4_6_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 166 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 167 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 167 ^ y,
this is impossible, because it implies that 167 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 167 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 168 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 168 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 169 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 169 ^ y,
this is impossible, because it implies that 169 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 169 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 170 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 170 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 170 ^ y is impossible.
-/
theorem diophantine1_4_6_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 170 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 171 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 171 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (171 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 172 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 172 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 172 ^ y is impossible.
-/
theorem diophantine1_4_6_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 172 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 173 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 173 ^ y,
this is impossible, because it implies that 173 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 173 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 174 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 174 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (174 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 175 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 175 ^ y,
this is impossible, because it implies that 175 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 175 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 175 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 176 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 176 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 176 ^ y is impossible.
-/
theorem diophantine1_4_6_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 176 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 177 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 177 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 178 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 178 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 178 ^ y is impossible.
-/
theorem diophantine1_4_6_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 178 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 179 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 179 ^ y,
this is impossible, because it implies that 179 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 179 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 180 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 180 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 181 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 181 ^ y,
this is impossible, because it implies that 181 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 181 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 182 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 182 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 182 ^ y is impossible.
-/
theorem diophantine1_4_6_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 182 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 183 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 183 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 184 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 184 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 184 ^ y is impossible.
-/
theorem diophantine1_4_6_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 184 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 185 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 185 ^ y,
this is impossible, because it implies that 185 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 185 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 185 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 186 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 186 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (186 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 187 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 187 ^ y,
this is impossible, because it implies that 187 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 187 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 187 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 188 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 188 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 188 ^ y is impossible.
-/
theorem diophantine1_4_6_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 188 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 189 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 189 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (189 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 190 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 190 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 190 ^ y is impossible.
-/
theorem diophantine1_4_6_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 190 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 191 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 191 ^ y,
this is impossible, because it implies that 191 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 191 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 192 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 192 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (192 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 193 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 193 ^ y,
this is impossible, because it implies that 193 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 193 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 194 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 194 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 194 ^ y is impossible.
-/
theorem diophantine1_4_6_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 194 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 195 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 195 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 196 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 196 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 196 ^ y is impossible.
-/
theorem diophantine1_4_6_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 196 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 197 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 197 ^ y,
this is impossible, because it implies that 197 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 197 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 198 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 198 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (198 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 199 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 199 ^ y,
this is impossible, because it implies that 199 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 199 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 200 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 200 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 200 ^ y is impossible.
-/
theorem diophantine1_4_6_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 200 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 201 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 201 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 202 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 202 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 202 ^ y is impossible.
-/
theorem diophantine1_4_6_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 202 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 203 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 203 ^ y,
this is impossible, because it implies that 203 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 203 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 204 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 204 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (204 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 205 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 205 ^ y,
this is impossible, because it implies that 205 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 205 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 205 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 206 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 206 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 206 ^ y is impossible.
-/
theorem diophantine1_4_6_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 206 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 207 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 207 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (207 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 208 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 208 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 208 ^ y is impossible.
-/
theorem diophantine1_4_6_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 208 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 209 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 209 ^ y,
this is impossible, because it implies that 209 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 209 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 209 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 210 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 210 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 211 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 211 ^ y,
this is impossible, because it implies that 211 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 211 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 212 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 212 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 212 ^ y is impossible.
-/
theorem diophantine1_4_6_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 212 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 213 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 213 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 214 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 214 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 214 ^ y is impossible.
-/
theorem diophantine1_4_6_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 214 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 215 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 215 ^ y,
this is impossible, because it implies that 215 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 215 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 215 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 216 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 216 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (216 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 217 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 217 ^ y,
this is impossible, because it implies that 217 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 217 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 218 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 218 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 218 ^ y is impossible.
-/
theorem diophantine1_4_6_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 218 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 219 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 219 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 220 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 220 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 220 ^ y is impossible.
-/
theorem diophantine1_4_6_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 220 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 221 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 221 ^ y,
this is impossible, because it implies that 221 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 221 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 221 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 222 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 222 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (222 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 223 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 223 ^ y,
this is impossible, because it implies that 223 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 223 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 224 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 224 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 224 ^ y is impossible.
-/
theorem diophantine1_4_6_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 224 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 225 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 225 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (225 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 226 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 226 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 226 ^ y is impossible.
-/
theorem diophantine1_4_6_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 226 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 227 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 227 ^ y,
this is impossible, because it implies that 227 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 227 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 228 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 228 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (228 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 229 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 229 ^ y,
this is impossible, because it implies that 229 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 229 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 230 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 230 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 230 ^ y is impossible.
-/
theorem diophantine1_4_6_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 230 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 231 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 231 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 232 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 232 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 232 ^ y is impossible.
-/
theorem diophantine1_4_6_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 232 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 233 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 233 ^ y,
this is impossible, because it implies that 233 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 233 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 234 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 234 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (234 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 235 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 235 ^ y,
this is impossible, because it implies that 235 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 235 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 235 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 236 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 236 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 236 ^ y is impossible.
-/
theorem diophantine1_4_6_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 236 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 237 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 237 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 238 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 238 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 238 ^ y is impossible.
-/
theorem diophantine1_4_6_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 238 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 239 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 239 ^ y,
this is impossible, because it implies that 239 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 239 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 240 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 240 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 241 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 241 ^ y,
this is impossible, because it implies that 241 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 241 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 242 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 242 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 242 ^ y is impossible.
-/
theorem diophantine1_4_6_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 242 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 243 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 243 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (243 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 244 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 244 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 244 ^ y is impossible.
-/
theorem diophantine1_4_6_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 244 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 245 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 245 ^ y,
this is impossible, because it implies that 245 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 245 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 245 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 246 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 246 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (246 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 247 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 247 ^ y,
this is impossible, because it implies that 247 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 247 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 248 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 248 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 248 ^ y is impossible.
-/
theorem diophantine1_4_6_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 248 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 249 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 249 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 250 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 250 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 250 ^ y is impossible.
-/
theorem diophantine1_4_6_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 250 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 251 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 251 ^ y,
this is impossible, because it implies that 251 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 251 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 252 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 252 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (252 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 253 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 253 ^ y,
this is impossible, because it implies that 253 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 253 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 253 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 254 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 254 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 254 ^ y is impossible.
-/
theorem diophantine1_4_6_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (254 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 254 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 255 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 255 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (255 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 256 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 256 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 256 ^ y is impossible.
-/
theorem diophantine1_4_6_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (256 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 256 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 257 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 257 ^ y,
this is impossible, because it implies that 257 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 257 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 258 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 258 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (258 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 259 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 259 ^ y,
this is impossible, because it implies that 259 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 259 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 259 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 260 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 260 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 260 ^ y is impossible.
-/
theorem diophantine1_4_6_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (260 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 260 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 261 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 261 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (261 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 262 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 262 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_4_6_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 262 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (262 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 262 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 263 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 263 ^ y,
this is impossible, because it implies that 263 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 263 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 264 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 264 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (264 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 265 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 265 ^ y,
this is impossible, because it implies that 265 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 265 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 265 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 266 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 266 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 266 ^ y is impossible.
-/
theorem diophantine1_4_6_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (266 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 266 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 267 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 267 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (267 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 268 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 268 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 268 ^ y is impossible.
-/
theorem diophantine1_4_6_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (268 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 268 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 269 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 269 ^ y,
this is impossible, because it implies that 269 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 269 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 270 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 270 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (270 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 271 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 271 ^ y,
this is impossible, because it implies that 271 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 271 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 272 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 272 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 272 ^ y is impossible.
-/
theorem diophantine1_4_6_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (272 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 272 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 273 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 273 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (273 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 274 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 274 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 274 ^ y is impossible.
-/
theorem diophantine1_4_6_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (274 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 274 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 275 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 275 ^ y,
this is impossible, because it implies that 275 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 275 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 275 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 276 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 276 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (276 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 277 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 277 ^ y,
this is impossible, because it implies that 277 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 277 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 278 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 278 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 278 ^ y is impossible.
-/
theorem diophantine1_4_6_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (278 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 278 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 279 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 279 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (279 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 280 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 280 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 280 ^ y is impossible.
-/
theorem diophantine1_4_6_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (280 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 280 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 281 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 281 ^ y,
this is impossible, because it implies that 281 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 281 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 282 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 282 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (282 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 283 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 283 ^ y,
this is impossible, because it implies that 283 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 283 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 284 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 284 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 284 ^ y is impossible.
-/
theorem diophantine1_4_6_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (284 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 284 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 285 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 285 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (285 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 286 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 286 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 286 ^ y is impossible.
-/
theorem diophantine1_4_6_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (286 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 286 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 287 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 287 ^ y,
this is impossible, because it implies that 287 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 287 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 287 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 288 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 288 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (288 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 289 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 289 ^ y,
this is impossible, because it implies that 289 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 289 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 289 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 290 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 290 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 290 ^ y is impossible.
-/
theorem diophantine1_4_6_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (290 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 290 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 291 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 291 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (291 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 292 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 292 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 292 ^ y is impossible.
-/
theorem diophantine1_4_6_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (292 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 292 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 293 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 293 ^ y,
this is impossible, because it implies that 293 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 293 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 294 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 294 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (294 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 295 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 295 ^ y,
this is impossible, because it implies that 295 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 295 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 295 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 296 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 296 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 296 ^ y is impossible.
-/
theorem diophantine1_4_6_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (296 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 296 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 297 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 297 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (297 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 298 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 298 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 298 ^ y is impossible.
-/
theorem diophantine1_4_6_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (298 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 298 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 299 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 299 ^ y,
this is impossible, because it implies that 299 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 299 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 299 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 300 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 300 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (300 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 301 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 301 ^ y,
this is impossible, because it implies that 301 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 301 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 301 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 302 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 302 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 302 ^ y is impossible.
-/
theorem diophantine1_4_6_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (302 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 302 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 303 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 303 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (303 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 304 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 304 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 304 ^ y is impossible.
-/
theorem diophantine1_4_6_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (304 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 304 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 305 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 305 ^ y,
this is impossible, because it implies that 305 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 305 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 305 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 306 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 306 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (306 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 307 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 307 ^ y,
this is impossible, because it implies that 307 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 307 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 308 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 308 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 308 ^ y is impossible.
-/
theorem diophantine1_4_6_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (308 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 308 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 309 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 309 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (309 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 310 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 310 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 310 ^ y is impossible.
-/
theorem diophantine1_4_6_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (310 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 310 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 311 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 311 ^ y,
this is impossible, because it implies that 311 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 311 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 312 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 312 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (312 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 313 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 313 ^ y,
this is impossible, because it implies that 313 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 313 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 314 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 314 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 314 ^ y is impossible.
-/
theorem diophantine1_4_6_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (314 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 314 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 315 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 315 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (315 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 316 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 316 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 316 ^ y is impossible.
-/
theorem diophantine1_4_6_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (316 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 316 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 317 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 317 ^ y,
this is impossible, because it implies that 317 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 317 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 318 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 318 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (318 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 319 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 319 ^ y,
this is impossible, because it implies that 319 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 319 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 319 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 320 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 320 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 320 ^ y is impossible.
-/
theorem diophantine1_4_6_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (320 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 320 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 321 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 321 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (321 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 322 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 322 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 322 ^ y is impossible.
-/
theorem diophantine1_4_6_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (322 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 322 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 323 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 323 ^ y,
this is impossible, because it implies that 323 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 323 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 323 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 324 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 324 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (324 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 325 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 325 ^ y,
this is impossible, because it implies that 325 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 325 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 325 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 326 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 326 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 326 ^ y is impossible.
-/
theorem diophantine1_4_6_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (326 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 326 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 327 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 327 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (327 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 328 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 328 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 328 ^ y is impossible.
-/
theorem diophantine1_4_6_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (328 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 328 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 329 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 329 ^ y,
this is impossible, because it implies that 329 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 329 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 329 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 330 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 330 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (330 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 331 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 331 ^ y,
this is impossible, because it implies that 331 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 331 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 332 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 332 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 332 ^ y is impossible.
-/
theorem diophantine1_4_6_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (332 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 332 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 333 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 333 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (333 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 334 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 334 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 334 ^ y is impossible.
-/
theorem diophantine1_4_6_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (334 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 334 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 335 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 335 ^ y,
this is impossible, because it implies that 335 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 335 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 335 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 336 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 336 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (336 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 337 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 337 ^ y,
this is impossible, because it implies that 337 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 337 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 338 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 338 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 338 ^ y is impossible.
-/
theorem diophantine1_4_6_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (338 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 338 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 339 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 339 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (339 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 340 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 340 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 340 ^ y is impossible.
-/
theorem diophantine1_4_6_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (340 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 340 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 341 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 341 ^ y,
this is impossible, because it implies that 341 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 341 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 341 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 342 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 342 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (342 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 343 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 343 ^ y,
this is impossible, because it implies that 343 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 343 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 343 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 344 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 344 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 344 ^ y is impossible.
-/
theorem diophantine1_4_6_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (344 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 344 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 345 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 345 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (345 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 346 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 346 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 346 ^ y is impossible.
-/
theorem diophantine1_4_6_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (346 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 346 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 347 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 347 ^ y,
this is impossible, because it implies that 347 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 347 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 348 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 348 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (348 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 349 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 349 ^ y,
this is impossible, because it implies that 349 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 349 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 350 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 350 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 350 ^ y is impossible.
-/
theorem diophantine1_4_6_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (350 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 350 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 351 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 351 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (351 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 352 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 352 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 352 ^ y is impossible.
-/
theorem diophantine1_4_6_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (352 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 352 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 353 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 353 ^ y,
this is impossible, because it implies that 353 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 353 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 354 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 354 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (354 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 355 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 355 ^ y,
this is impossible, because it implies that 355 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 355 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 355 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 356 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 356 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 356 ^ y is impossible.
-/
theorem diophantine1_4_6_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (356 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 356 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 357 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 357 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (357 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 358 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 358 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 358 ^ y is impossible.
-/
theorem diophantine1_4_6_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (358 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 358 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 359 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 359 ^ y,
this is impossible, because it implies that 359 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 359 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 360 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 360 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (360 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 361 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 361 ^ y,
this is impossible, because it implies that 361 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 361 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 361 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 362 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 362 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 362 ^ y is impossible.
-/
theorem diophantine1_4_6_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (362 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 362 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 363 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 363 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (363 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 364 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 364 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 364 ^ y is impossible.
-/
theorem diophantine1_4_6_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (364 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 364 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 365 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 365 ^ y,
this is impossible, because it implies that 365 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 365 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 365 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 366 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 366 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (366 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 367 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 367 ^ y,
this is impossible, because it implies that 367 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 367 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 368 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 368 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 368 ^ y is impossible.
-/
theorem diophantine1_4_6_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (368 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 368 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 369 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 369 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (369 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 370 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 370 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 370 ^ y is impossible.
-/
theorem diophantine1_4_6_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (370 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 370 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 371 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 371 ^ y,
this is impossible, because it implies that 371 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 371 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 371 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 372 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 372 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (372 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 373 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 373 ^ y,
this is impossible, because it implies that 373 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 373 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 374 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 374 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 374 ^ y is impossible.
-/
theorem diophantine1_4_6_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (374 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 374 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 375 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 375 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (375 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 376 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 376 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 376 ^ y is impossible.
-/
theorem diophantine1_4_6_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (376 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 376 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 377 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 377 ^ y,
this is impossible, because it implies that 377 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 377 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 377 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 378 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 378 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (378 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 379 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 379 ^ y,
this is impossible, because it implies that 379 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 379 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 380 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 380 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 380 ^ y is impossible.
-/
theorem diophantine1_4_6_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (380 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 380 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 381 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 381 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (381 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 382 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 382 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 382 ^ y is impossible.
-/
theorem diophantine1_4_6_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (382 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 382 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 383 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 383 ^ y,
this is impossible, because it implies that 383 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 383 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 384 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 384 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (384 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 385 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 385 ^ y,
this is impossible, because it implies that 385 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 385 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 385 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 386 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 386 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 386 ^ y is impossible.
-/
theorem diophantine1_4_6_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (386 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 386 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 387 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 387 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (387 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 388 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 388 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 388 ^ y is impossible.
-/
theorem diophantine1_4_6_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (388 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 388 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 389 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 389 ^ y,
this is impossible, because it implies that 389 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 389 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 390 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 390 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (390 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 391 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 391 ^ y,
this is impossible, because it implies that 391 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 391 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 391 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 392 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 392 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 392 ^ y is impossible.
-/
theorem diophantine1_4_6_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (392 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 392 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 393 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 393 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (393 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 394 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 394 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 394 ^ y is impossible.
-/
theorem diophantine1_4_6_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (394 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 394 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 395 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 395 ^ y,
this is impossible, because it implies that 395 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 395 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 395 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 396 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 396 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (396 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 397 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 397 ^ y,
this is impossible, because it implies that 397 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 397 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 398 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 398 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 398 ^ y is impossible.
-/
theorem diophantine1_4_6_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (398 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 398 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 399 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 399 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (399 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 400 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 400 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 400 ^ y is impossible.
-/
theorem diophantine1_4_6_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (400 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 400 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 401 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 401 ^ y,
this is impossible, because it implies that 401 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 401 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 402 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 402 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (402 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 403 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 403 ^ y,
this is impossible, because it implies that 403 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 403 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 403 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 404 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 404 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 404 ^ y is impossible.
-/
theorem diophantine1_4_6_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (404 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 404 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 405 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 405 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (405 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 406 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 406 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 406 ^ y is impossible.
-/
theorem diophantine1_4_6_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (406 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 406 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 407 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 407 ^ y,
this is impossible, because it implies that 407 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 407 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 407 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 408 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 408 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (408 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 409 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 409 ^ y,
this is impossible, because it implies that 409 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 409 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 410 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 410 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 410 ^ y is impossible.
-/
theorem diophantine1_4_6_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (410 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 410 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 411 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 411 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (411 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 412 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 412 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 412 ^ y is impossible.
-/
theorem diophantine1_4_6_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (412 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 412 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 413 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 413 ^ y,
this is impossible, because it implies that 413 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 413 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 413 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 414 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 414 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (414 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 415 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 415 ^ y,
this is impossible, because it implies that 415 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 415 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 415 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 416 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 416 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 416 ^ y is impossible.
-/
theorem diophantine1_4_6_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (416 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 416 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 417 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 417 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (417 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 418 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 418 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 418 ^ y is impossible.
-/
theorem diophantine1_4_6_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (418 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 418 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 419 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 419 ^ y,
this is impossible, because it implies that 419 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 419 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 420 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 420 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (420 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 421 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 421 ^ y,
this is impossible, because it implies that 421 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 421 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 422 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 422 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 422 ^ y is impossible.
-/
theorem diophantine1_4_6_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (422 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 422 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 423 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 423 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (423 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 424 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 424 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 424 ^ y is impossible.
-/
theorem diophantine1_4_6_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (424 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 424 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 425 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 425 ^ y,
this is impossible, because it implies that 425 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 425 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 425 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 426 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 426 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (426 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 427 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 427 ^ y,
this is impossible, because it implies that 427 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 427 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 427 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 428 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 428 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 428 ^ y is impossible.
-/
theorem diophantine1_4_6_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (428 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 428 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 429 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 429 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (429 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 430 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 430 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 430 ^ y is impossible.
-/
theorem diophantine1_4_6_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (430 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 430 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 431 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 431 ^ y,
this is impossible, because it implies that 431 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 431 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 432 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 432 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (432 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 433 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 433 ^ y,
this is impossible, because it implies that 433 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 433 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 434 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 434 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 434 ^ y is impossible.
-/
theorem diophantine1_4_6_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (434 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 434 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 435 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 435 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (435 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 436 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 436 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 436 ^ y is impossible.
-/
theorem diophantine1_4_6_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (436 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 436 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 437 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 437 ^ y,
this is impossible, because it implies that 437 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 437 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 437 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 438 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 438 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (438 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 439 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 439 ^ y,
this is impossible, because it implies that 439 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 439 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 440 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 440 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 440 ^ y is impossible.
-/
theorem diophantine1_4_6_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (440 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 440 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 441 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 441 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (441 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 442 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 442 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 442 ^ y is impossible.
-/
theorem diophantine1_4_6_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (442 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 442 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 443 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 443 ^ y,
this is impossible, because it implies that 443 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 443 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 444 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 444 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (444 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 445 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 445 ^ y,
this is impossible, because it implies that 445 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 445 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 445 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 446 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 446 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 446 ^ y is impossible.
-/
theorem diophantine1_4_6_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (446 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 446 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 447 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 447 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (447 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 448 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 448 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 448 ^ y is impossible.
-/
theorem diophantine1_4_6_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (448 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 448 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 449 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 449 ^ y,
this is impossible, because it implies that 449 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 449 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 450 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 450 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (450 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 451 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 451 ^ y,
this is impossible, because it implies that 451 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 451 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 451 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 452 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 452 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 452 ^ y is impossible.
-/
theorem diophantine1_4_6_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (452 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 452 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 453 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 453 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (453 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 454 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 454 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 454 ^ y is impossible.
-/
theorem diophantine1_4_6_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (454 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 454 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 455 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 455 ^ y,
this is impossible, because it implies that 455 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 455 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 455 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 456 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 456 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (456 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 457 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 457 ^ y,
this is impossible, because it implies that 457 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 457 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 458 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 458 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 458 ^ y is impossible.
-/
theorem diophantine1_4_6_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (458 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 458 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 459 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 459 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (459 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 460 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 460 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 460 ^ y is impossible.
-/
theorem diophantine1_4_6_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (460 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 460 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 461 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 461 ^ y,
this is impossible, because it implies that 461 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 461 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 462 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 462 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (462 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 463 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 463 ^ y,
this is impossible, because it implies that 463 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 463 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 464 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 464 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 464 ^ y is impossible.
-/
theorem diophantine1_4_6_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (464 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 464 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 465 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 465 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (465 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 466 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 466 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 466 ^ y is impossible.
-/
theorem diophantine1_4_6_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (466 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 466 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 467 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 467 ^ y,
this is impossible, because it implies that 467 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 467 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 468 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 468 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (468 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 469 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 469 ^ y,
this is impossible, because it implies that 469 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 469 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 469 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 470 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 470 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 470 ^ y is impossible.
-/
theorem diophantine1_4_6_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (470 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 470 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 471 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 471 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (471 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 472 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 472 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 472 ^ y is impossible.
-/
theorem diophantine1_4_6_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (472 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 472 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 473 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 473 ^ y,
this is impossible, because it implies that 473 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 473 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 473 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 474 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 474 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (474 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 475 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 475 ^ y,
this is impossible, because it implies that 475 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 475 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 475 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 476 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 476 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 476 ^ y is impossible.
-/
theorem diophantine1_4_6_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (476 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 476 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 477 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 477 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (477 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 478 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 478 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 478 ^ y is impossible.
-/
theorem diophantine1_4_6_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (478 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 478 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 479 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 479 ^ y,
this is impossible, because it implies that 479 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 479 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 480 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 480 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (480 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 481 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 481 ^ y,
this is impossible, because it implies that 481 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 481 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 481 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 482 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 482 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 482 ^ y is impossible.
-/
theorem diophantine1_4_6_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (482 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 482 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 483 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 483 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (483 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 484 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 484 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 484 ^ y is impossible.
-/
theorem diophantine1_4_6_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (484 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 484 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 485 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 485 ^ y,
this is impossible, because it implies that 485 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 485 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 485 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 486 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 486 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (486 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 487 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 487 ^ y,
this is impossible, because it implies that 487 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 487 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 488 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 488 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 488 ^ y is impossible.
-/
theorem diophantine1_4_6_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (488 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 488 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 489 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 489 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (489 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 490 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 490 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 490 ^ y is impossible.
-/
theorem diophantine1_4_6_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (490 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 490 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 491 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 491 ^ y,
this is impossible, because it implies that 491 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 491 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 492 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 492 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (492 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 493 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 493 ^ y,
this is impossible, because it implies that 493 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 493 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 493 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 494 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 494 ^ y,
if x >= 3 and y >= 3,
6 = 0 (mod 8), which is impossible.
Therefore, x < 3 or y < 3.
Further examination shows that 4 ^ x + 6 = 494 ^ y is impossible.
-/
theorem diophantine1_4_6_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 3) (y >= 3)
  have h7 := Claim (4 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (494 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 2) (y <= 2) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 494 ^ y, proof := h3},
    {prop := Or (x <= 2) (y <= 2), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 495 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 495 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (495 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 496 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 496 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 496 ^ y is impossible.
-/
theorem diophantine1_4_6_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (496 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 496 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 497 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 497 ^ y,
this is impossible, because it implies that 497 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 497 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 497 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type i)   4 ^ x + 6 = 498 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 498 ^ y,
this is impossible, because it implies that 4 ^ x = 0 (mod 3).
-/
theorem diophantine1_4_6_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (498 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 4 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   4 ^ x + 6 = 499 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 499 ^ y,
this is impossible, because it implies that 499 ^ y = 0 (mod 2).
-/
theorem diophantine1_4_6_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 499 ^ y % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   4 ^ x + 6 = 500 ^ y
For positive integers x, y satisfying 4 ^ x + 6 = 500 ^ y,
if x >= 2 and y >= 2,
6 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 4 ^ x + 6 = 500 ^ y is impossible.
-/
theorem diophantine1_4_6_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 4 ^ x + 6 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (4 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (500 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 4 ^ x + 6 = 500 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
