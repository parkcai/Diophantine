-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 10 <= a <= 10
-- 9 <= b <= 9
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   10 ^ x + 9 = 2 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 2 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 2 ^ y is impossible.
-/
theorem diophantine1_10_9_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 2 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 3 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 3 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 4 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 4 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 4 ^ y is impossible.
-/
theorem diophantine1_10_9_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 4 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 5 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 5 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 5 ^ y is impossible.
-/
theorem diophantine1_10_9_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 5 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 6 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 6 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 7 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 7 ^ y,
if x >= 4, 7 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 7 ^ y is impossible.
-/
theorem diophantine1_10_9_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 7 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 8 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 8 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 8 ^ y is impossible.
-/
theorem diophantine1_10_9_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 8 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 9 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 9 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 10 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 10 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 10 ^ y is impossible.
-/
theorem diophantine1_10_9_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 10 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 11 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 11 ^ y,
if x >= 1, 11 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 11 ^ y is impossible.
-/
theorem diophantine1_10_9_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 11 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 12 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 12 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 13 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 13 ^ y,
if x >= 2, 13 ^ y = 9 (mod 25).
So y = 6 (mod 20), 
which implies y = 6, 26 (mod 40).
Therefore, 13 ^ y = 2, 39 (mod 41).
So 10 ^ x = 34, 30 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 13 ^ y is impossible.
-/
theorem diophantine1_10_9_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 41) [2, 39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [34, 30]) [
    {prop := List.Mem (13 ^ y % 41) [2, 39], proof := h10},
    {prop := 10 ^ x + 9 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [34, 30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 13 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 14 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 14 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 14 ^ y is impossible.
-/
theorem diophantine1_10_9_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 14 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 15 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 15 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 16 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 16 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 16 ^ y is impossible.
-/
theorem diophantine1_10_9_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 16 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 17 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 17 ^ y,
if x >= 4, 17 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 17 ^ y is impossible.
-/
theorem diophantine1_10_9_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 17 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 18 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 18 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 9 = 19 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 19 ^ y,
if x >= 2, 19 ^ y = 9 (mod 25).
So y = 3 (mod 10), 
Therefore, 19 ^ y = 6 (mod 11).
So 10 ^ x = 8 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_10_9_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 19 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (19 ^ y % 11) [6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [8]) [
    {prop := List.Mem (19 ^ y % 11) [6], proof := h10},
    {prop := 10 ^ x + 9 = 19 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 19 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 20 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 20 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 20 ^ y is impossible.
-/
theorem diophantine1_10_9_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 20 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 21 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 21 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 22 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 22 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 22 ^ y is impossible.
-/
theorem diophantine1_10_9_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 22 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 23 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 23 ^ y,
if x >= 4, 23 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 23 ^ y is impossible.
-/
theorem diophantine1_10_9_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 23 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 23 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 24 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 24 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 25 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 25 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 25 ^ y is impossible.
-/
theorem diophantine1_10_9_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 25 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 26 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 26 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 26 ^ y is impossible.
-/
theorem diophantine1_10_9_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 26 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 27 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 27 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 28 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 28 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 28 ^ y is impossible.
-/
theorem diophantine1_10_9_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 28 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 9 = 29 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 29 ^ y,
if x >= 2, 29 ^ y = 9 (mod 25).
So y = 7 (mod 10), 
Therefore, 29 ^ y = 6 (mod 11).
So 10 ^ x = 8 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 29 ^ y is impossible.
-/
theorem diophantine1_10_9_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 11) [6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [8]) [
    {prop := List.Mem (29 ^ y % 11) [6], proof := h10},
    {prop := 10 ^ x + 9 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 29 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 30 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 30 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 31 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 31 ^ y,
if x >= 1, 31 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 31 ^ y is impossible.
-/
theorem diophantine1_10_9_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 32 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 32 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 32 ^ y is impossible.
-/
theorem diophantine1_10_9_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 32 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 33 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 33 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 34 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 34 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 34 ^ y is impossible.
-/
theorem diophantine1_10_9_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 34 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 35 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 35 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 35 ^ y is impossible.
-/
theorem diophantine1_10_9_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 35 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 36 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 36 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 37 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 37 ^ y,
if x >= 2, 37 ^ y = 9 (mod 25).
So y = 6 (mod 20), 
which implies y = 1 (mod 5).
Therefore, 37 ^ y = 37 (mod 41).
So 10 ^ x = 28 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 37 ^ y is impossible.
-/
theorem diophantine1_10_9_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 41) [37]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [28]) [
    {prop := List.Mem (37 ^ y % 41) [37], proof := h10},
    {prop := 10 ^ x + 9 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 38 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 38 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 38 ^ y is impossible.
-/
theorem diophantine1_10_9_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 38 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 39 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 39 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 40 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 40 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 40 ^ y is impossible.
-/
theorem diophantine1_10_9_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 40 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 41 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 41 ^ y,
if x >= 1, 41 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 41 ^ y is impossible.
-/
theorem diophantine1_10_9_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 41 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 42 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 42 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 43 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 43 ^ y,
if x >= 2, 43 ^ y = 9 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 43 ^ y is impossible.
-/
theorem diophantine1_10_9_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 25 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 43 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 44 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 44 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 44 ^ y is impossible.
-/
theorem diophantine1_10_9_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 44 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 45 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 45 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 46 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 46 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 46 ^ y is impossible.
-/
theorem diophantine1_10_9_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 46 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 47 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 47 ^ y,
if x >= 4, 47 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 47 ^ y is impossible.
-/
theorem diophantine1_10_9_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 47 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 48 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 48 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 49 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 49 ^ y,
if x >= 4, 49 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 49 ^ y is impossible.
-/
theorem diophantine1_10_9_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 49 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 50 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 50 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 50 ^ y is impossible.
-/
theorem diophantine1_10_9_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 50 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 51 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 51 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 52 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 52 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 52 ^ y is impossible.
-/
theorem diophantine1_10_9_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 52 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 53 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 53 ^ y,
if x >= 2, 53 ^ y = 9 (mod 25).
So y = 2 (mod 20), 
which implies y = 2, 22 (mod 40).
Therefore, 53 ^ y = 21, 20 (mod 41).
So 10 ^ x = 12, 11 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 53 ^ y is impossible.
-/
theorem diophantine1_10_9_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 41) [21, 20]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [12, 11]) [
    {prop := List.Mem (53 ^ y % 41) [21, 20], proof := h10},
    {prop := 10 ^ x + 9 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [12, 11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 54 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 54 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 55 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 55 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 55 ^ y is impossible.
-/
theorem diophantine1_10_9_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (55 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 55 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 56 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 56 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 56 ^ y is impossible.
-/
theorem diophantine1_10_9_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 56 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 57 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 57 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 58 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 58 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 58 ^ y is impossible.
-/
theorem diophantine1_10_9_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 58 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 9 = 59 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 59 ^ y,
if x >= 2, 59 ^ y = 9 (mod 25).
So y = 1 (mod 10), 
which implies y = 1 (mod 5).
Therefore, 59 ^ y = 4 (mod 11).
So 10 ^ x = 6 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 59 ^ y is impossible.
-/
theorem diophantine1_10_9_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 11) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [6]) [
    {prop := List.Mem (59 ^ y % 11) [4], proof := h10},
    {prop := 10 ^ x + 9 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 60 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 60 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 61 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 61 ^ y,
if x >= 1, 61 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 61 ^ y is impossible.
-/
theorem diophantine1_10_9_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 62 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 62 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 62 ^ y is impossible.
-/
theorem diophantine1_10_9_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 62 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 63 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 63 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 64 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 64 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 64 ^ y is impossible.
-/
theorem diophantine1_10_9_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 64 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 65 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 65 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 65 ^ y is impossible.
-/
theorem diophantine1_10_9_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 65 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 66 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 66 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 67 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 67 ^ y,
if x >= 2, 67 ^ y = 9 (mod 25).
So y = 18 (mod 20), 
which implies y = 18, 38 (mod 40).
Therefore, 67 ^ y = 2, 39 (mod 41).
So 10 ^ x = 34, 30 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 67 ^ y is impossible.
-/
theorem diophantine1_10_9_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 41) [2, 39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [34, 30]) [
    {prop := List.Mem (67 ^ y % 41) [2, 39], proof := h10},
    {prop := 10 ^ x + 9 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [34, 30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 68 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 68 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 68 ^ y is impossible.
-/
theorem diophantine1_10_9_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 68 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 69 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 69 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 70 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 70 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 70 ^ y is impossible.
-/
theorem diophantine1_10_9_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 70 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 71 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 71 ^ y,
if x >= 1, 71 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 71 ^ y is impossible.
-/
theorem diophantine1_10_9_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 71 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 72 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 72 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 73 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 73 ^ y,
if x >= 2, 73 ^ y = 9 (mod 25).
So y = 14 (mod 20), 
which implies y = 2 (mod 4).
Therefore, 73 ^ y = 40 (mod 41).
So 10 ^ x = 31 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 73 ^ y is impossible.
-/
theorem diophantine1_10_9_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 41) [40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [31]) [
    {prop := List.Mem (73 ^ y % 41) [40], proof := h10},
    {prop := 10 ^ x + 9 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 74 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 74 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 74 ^ y is impossible.
-/
theorem diophantine1_10_9_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 74 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 75 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 75 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 76 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 76 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 76 ^ y is impossible.
-/
theorem diophantine1_10_9_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 76 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 11 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 9 = 77 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 77 ^ y,
if y >= 1, 10 ^ x = 2 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 9 = 77 ^ y is impossible.
-/
theorem diophantine1_10_9_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 11 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 78 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 78 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 79 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 79 ^ y,
if x >= 4, 79 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 79 ^ y is impossible.
-/
theorem diophantine1_10_9_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 79 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 80 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 80 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 80 ^ y is impossible.
-/
theorem diophantine1_10_9_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 80 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 81 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 81 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 82 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 82 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 82 ^ y is impossible.
-/
theorem diophantine1_10_9_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 82 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   10 ^ x + 9 = 83 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 83 ^ y,
if x >= 2, 83 ^ y = 9 (mod 25).
So y = 18 (mod 20), 
which implies y = 18, 38, 58, 78, 98 (mod 100).
Therefore, 83 ^ y = 4, 33, 45, 43, 77 (mod 101).
So 10 ^ x = 96, 24, 36, 34, 68 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 83 ^ y is impossible.
-/
theorem diophantine1_10_9_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 101) [4, 33, 45, 43, 77]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 101) [96, 24, 36, 34, 68]) [
    {prop := List.Mem (83 ^ y % 101) [4, 33, 45, 43, 77], proof := h10},
    {prop := 10 ^ x + 9 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 101) [96, 24, 36, 34, 68], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 84 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 84 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 85 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 85 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 85 ^ y is impossible.
-/
theorem diophantine1_10_9_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 85 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 86 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 86 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 86 ^ y is impossible.
-/
theorem diophantine1_10_9_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 86 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 87 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 87 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 88 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 88 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 88 ^ y is impossible.
-/
theorem diophantine1_10_9_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 88 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 89 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 89 ^ y,
if x >= 2, 89 ^ y = 9 (mod 25).
So y = 9 (mod 10), 
which implies y = 9, 19, 29, 39 (mod 40).
Therefore, 89 ^ y = 13, 35, 28, 6 (mod 41).
So 10 ^ x = 4, 26, 19, 38 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 89 ^ y is impossible.
-/
theorem diophantine1_10_9_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 41) [13, 35, 28, 6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [4, 26, 19, 38]) [
    {prop := List.Mem (89 ^ y % 41) [13, 35, 28, 6], proof := h10},
    {prop := 10 ^ x + 9 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [4, 26, 19, 38], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 90 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 90 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 91 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 91 ^ y,
if x >= 1, 91 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 91 ^ y is impossible.
-/
theorem diophantine1_10_9_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 91 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 91 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 92 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 92 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 92 ^ y is impossible.
-/
theorem diophantine1_10_9_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 92 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 93 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 93 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 94 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 94 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 94 ^ y is impossible.
-/
theorem diophantine1_10_9_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 94 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 95 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 95 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 95 ^ y is impossible.
-/
theorem diophantine1_10_9_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 95 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 96 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 96 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 97 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 97 ^ y,
if x >= 4, 97 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 97 ^ y is impossible.
-/
theorem diophantine1_10_9_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 98 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 98 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 98 ^ y is impossible.
-/
theorem diophantine1_10_9_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 98 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 99 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 99 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 100 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 100 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 100 ^ y is impossible.
-/
theorem diophantine1_10_9_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 100 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 101 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 101 ^ y,
if x >= 1, 101 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 101 ^ y is impossible.
-/
theorem diophantine1_10_9_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 101 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 102 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 102 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 103 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 103 ^ y,
if x >= 4, 103 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 103 ^ y is impossible.
-/
theorem diophantine1_10_9_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 103 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 104 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 104 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 104 ^ y is impossible.
-/
theorem diophantine1_10_9_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 104 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 105 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 105 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 106 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 106 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 106 ^ y is impossible.
-/
theorem diophantine1_10_9_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 106 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 107 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 107 ^ y,
if x >= 2, 107 ^ y = 9 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 107 ^ y is impossible.
-/
theorem diophantine1_10_9_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 25 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 108 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 108 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove x >= 6 with prime factor 2 of 10 ...
-- Trying prime 17...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying to disprove x >= 3 with prime factor 5 of 10 ...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   10 ^ x + 9 = 109 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 109 ^ y,
if x >= 3, 109 ^ y = 9 (mod 125).
So y = 41 (mod 50), 
which implies y = 41, 91 (mod 100).
Therefore, 109 ^ y = 53, 48 (mod 101).
So 10 ^ x = 44, 39 (mod 101), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_10_9_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 109 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (10 ^ x % 125 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 125 = 9 := by omega
  have h9 := Claim (y % 50 = 41) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 125 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 101) [53, 48]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 50 = 41, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 101) [44, 39]) [
    {prop := List.Mem (109 ^ y % 101) [53, 48], proof := h10},
    {prop := 10 ^ x + 9 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 101) [44, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 109 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 110 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 110 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 110 ^ y is impossible.
-/
theorem diophantine1_10_9_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 110 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 111 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 111 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 112 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 112 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 112 ^ y is impossible.
-/
theorem diophantine1_10_9_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 112 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 113 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 113 ^ y,
if x >= 4, 113 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 113 ^ y is impossible.
-/
theorem diophantine1_10_9_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 113 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 114 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 114 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 115 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 115 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 115 ^ y is impossible.
-/
theorem diophantine1_10_9_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (115 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 115 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 116 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 116 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 116 ^ y is impossible.
-/
theorem diophantine1_10_9_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 116 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 117 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 117 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (117 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 118 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 118 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 118 ^ y is impossible.
-/
theorem diophantine1_10_9_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 118 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 119 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 119 ^ y,
if x >= 4, 119 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 119 ^ y is impossible.
-/
theorem diophantine1_10_9_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 119 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 119 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 119 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 120 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 120 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 121 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 121 ^ y,
if x >= 1, 121 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 121 ^ y is impossible.
-/
theorem diophantine1_10_9_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 122 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 122 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 122 ^ y is impossible.
-/
theorem diophantine1_10_9_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 122 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 123 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 123 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 124 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 124 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 124 ^ y is impossible.
-/
theorem diophantine1_10_9_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 124 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 125 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 125 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 125 ^ y is impossible.
-/
theorem diophantine1_10_9_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 125 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 126 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 126 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 127 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 127 ^ y,
if x >= 4, 127 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 127 ^ y is impossible.
-/
theorem diophantine1_10_9_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 127 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 128 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 128 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 128 ^ y is impossible.
-/
theorem diophantine1_10_9_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 128 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 129 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 129 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 130 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 130 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 130 ^ y is impossible.
-/
theorem diophantine1_10_9_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 130 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 131 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 131 ^ y,
if x >= 1, 131 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 131 ^ y is impossible.
-/
theorem diophantine1_10_9_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 131 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 132 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 132 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (132 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 133 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 19 of 133 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 163)   10 ^ x + 9 = 133 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 133 ^ y,
if y >= 1, 10 ^ x = 10 (mod 19).
So x = 1 (mod 18), 
which implies x = 1, 10, 19, 28, 37, 46, 55, 64, 73 (mod 81).
Therefore, 10 ^ x = 10, 41, 54, 91, 96, 35, 62, 26, 74 (mod 163).
So 133 ^ y = 19, 50, 63, 100, 105, 44, 71, 35, 83 (mod 163), but this is impossible.
Therefore, y < 1.
So 10 ^ x + 9 = 133 ^ y is impossible.
-/
theorem diophantine1_10_9_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 19 = 10 := by omega
  have h9 := Claim (x % 18 = 1) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 19 = 10, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 163) [10, 41, 54, 91, 96, 35, 62, 26, 74]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (133 ^ y % 163) [19, 50, 63, 100, 105, 44, 71, 35, 83]) [
    {prop := List.Mem (10 ^ x % 163) [10, 41, 54, 91, 96, 35, 62, 26, 74], proof := h10},
    {prop := 10 ^ x + 9 = 133 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (133 ^ y % 163) [19, 50, 63, 100, 105, 44, 71, 35, 83], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 134 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 134 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 134 ^ y is impossible.
-/
theorem diophantine1_10_9_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 134 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 135 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 135 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (135 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 136 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 136 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 136 ^ y is impossible.
-/
theorem diophantine1_10_9_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 136 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 137 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 137 ^ y,
if x >= 2, 137 ^ y = 9 (mod 25).
So y = 6 (mod 20), 
which implies y = 2, 6 (mod 8).
Therefore, 137 ^ y = 32, 9 (mod 41).
So 10 ^ x = 23, 0 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 137 ^ y is impossible.
-/
theorem diophantine1_10_9_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 41) [32, 9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [23, 0]) [
    {prop := List.Mem (137 ^ y % 41) [32, 9], proof := h10},
    {prop := 10 ^ x + 9 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [23, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 137 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 138 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 138 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (138 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 139 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 139 ^ y,
if x >= 2, 139 ^ y = 9 (mod 25).
So y = 9 (mod 10), 
which implies y = 4 (mod 5).
Therefore, 139 ^ y = 18 (mod 41).
So 10 ^ x = 9 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 139 ^ y is impossible.
-/
theorem diophantine1_10_9_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 41) [18]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [9]) [
    {prop := List.Mem (139 ^ y % 41) [18], proof := h10},
    {prop := 10 ^ x + 9 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [9], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 139 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 140 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 140 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 140 ^ y is impossible.
-/
theorem diophantine1_10_9_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (140 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 140 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 141 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 141 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 142 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 142 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 142 ^ y is impossible.
-/
theorem diophantine1_10_9_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 142 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 9 = 143 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 143 ^ y,
if y >= 1, 10 ^ x = 2 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 9 = 143 ^ y is impossible.
-/
theorem diophantine1_10_9_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 11 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 144 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 144 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (144 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 145 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 145 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 145 ^ y is impossible.
-/
theorem diophantine1_10_9_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 145 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 146 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 146 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 146 ^ y is impossible.
-/
theorem diophantine1_10_9_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 146 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 147 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 147 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 148 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 148 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 148 ^ y is impossible.
-/
theorem diophantine1_10_9_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 148 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 149 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 149 ^ y,
if x >= 2, 149 ^ y = 9 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 149 ^ y is impossible.
-/
theorem diophantine1_10_9_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 25 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 149 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 150 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 150 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 151 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 151 ^ y,
if x >= 1, 151 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 151 ^ y is impossible.
-/
theorem diophantine1_10_9_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 151 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 152 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 152 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 152 ^ y is impossible.
-/
theorem diophantine1_10_9_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 152 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 153 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 153 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (153 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 154 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 154 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 154 ^ y is impossible.
-/
theorem diophantine1_10_9_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 154 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 155 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 155 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 155 ^ y is impossible.
-/
theorem diophantine1_10_9_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 155 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 156 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 156 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (156 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 157 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 157 ^ y,
if x >= 2, 157 ^ y = 9 (mod 25).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 157 ^ y is impossible.
-/
theorem diophantine1_10_9_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 25 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 157 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 158 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 158 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 158 ^ y is impossible.
-/
theorem diophantine1_10_9_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 158 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 159 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 159 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 160 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 160 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 160 ^ y is impossible.
-/
theorem diophantine1_10_9_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 160 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 161 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 161 ^ y,
if x >= 1, 161 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 161 ^ y is impossible.
-/
theorem diophantine1_10_9_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 161 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 161 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 161 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 162 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 162 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (162 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 163 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 163 ^ y,
if x >= 2, 163 ^ y = 9 (mod 25).
So y = 6 (mod 20), 
which implies y = 0 (mod 2).
Therefore, 163 ^ y = 1 (mod 41).
So 10 ^ x = 33 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 163 ^ y is impossible.
-/
theorem diophantine1_10_9_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [33]) [
    {prop := List.Mem (163 ^ y % 41) [1], proof := h10},
    {prop := 10 ^ x + 9 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 163 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 164 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 164 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 164 ^ y is impossible.
-/
theorem diophantine1_10_9_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 164 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 165 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 165 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 166 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 166 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 166 ^ y is impossible.
-/
theorem diophantine1_10_9_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 166 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 167 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 167 ^ y,
if x >= 4, 167 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 167 ^ y is impossible.
-/
theorem diophantine1_10_9_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 167 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 168 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 168 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 9 = 169 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 169 ^ y,
if x >= 2, 169 ^ y = 9 (mod 25).
So y = 3 (mod 10), 
which implies y = 3 (mod 5).
Therefore, 169 ^ y = 9 (mod 11).
So 10 ^ x = 0 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 169 ^ y is impossible.
-/
theorem diophantine1_10_9_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (169 ^ y % 11) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [0]) [
    {prop := List.Mem (169 ^ y % 11) [9], proof := h10},
    {prop := 10 ^ x + 9 = 169 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 169 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 170 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 170 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 170 ^ y is impossible.
-/
theorem diophantine1_10_9_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 170 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 171 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 171 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (171 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 172 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 172 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 172 ^ y is impossible.
-/
theorem diophantine1_10_9_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 172 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 173 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 173 ^ y,
if x >= 2, 173 ^ y = 9 (mod 25).
So y = 14 (mod 20), 
which implies y = 2 (mod 4).
Therefore, 173 ^ y = 40 (mod 41).
So 10 ^ x = 31 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 173 ^ y is impossible.
-/
theorem diophantine1_10_9_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 41) [40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [31]) [
    {prop := List.Mem (173 ^ y % 41) [40], proof := h10},
    {prop := 10 ^ x + 9 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 173 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 174 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 174 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (174 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 175 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 175 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 175 ^ y is impossible.
-/
theorem diophantine1_10_9_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (175 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 175 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 176 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 176 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 176 ^ y is impossible.
-/
theorem diophantine1_10_9_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 176 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 177 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 177 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 178 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 178 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 178 ^ y is impossible.
-/
theorem diophantine1_10_9_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 178 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 9 = 179 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 179 ^ y,
if x >= 2, 179 ^ y = 9 (mod 25).
So y = 7 (mod 10), 
which implies y = 2 (mod 5).
Therefore, 179 ^ y = 9 (mod 11).
So 10 ^ x = 0 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 179 ^ y is impossible.
-/
theorem diophantine1_10_9_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 11) [9]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [0]) [
    {prop := List.Mem (179 ^ y % 11) [9], proof := h10},
    {prop := 10 ^ x + 9 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 179 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 180 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 180 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 181 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 181 ^ y,
if x >= 1, 181 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 181 ^ y is impossible.
-/
theorem diophantine1_10_9_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 181 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 182 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 182 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 182 ^ y is impossible.
-/
theorem diophantine1_10_9_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 182 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 183 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 183 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 184 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 184 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 184 ^ y is impossible.
-/
theorem diophantine1_10_9_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 184 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 185 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 185 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 185 ^ y is impossible.
-/
theorem diophantine1_10_9_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 185 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 186 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 186 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (186 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 9 = 187 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 187 ^ y,
if y >= 1, 10 ^ x = 2 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 9 = 187 ^ y is impossible.
-/
theorem diophantine1_10_9_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 11 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 188 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 188 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 188 ^ y is impossible.
-/
theorem diophantine1_10_9_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 188 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 189 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 189 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (189 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 190 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 190 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 190 ^ y is impossible.
-/
theorem diophantine1_10_9_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 190 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 191 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 191 ^ y,
if x >= 1, 191 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 191 ^ y is impossible.
-/
theorem diophantine1_10_9_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 191 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 192 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 192 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (192 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 193 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 193 ^ y,
if x >= 4, 193 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 193 ^ y is impossible.
-/
theorem diophantine1_10_9_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 193 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 194 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 194 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 194 ^ y is impossible.
-/
theorem diophantine1_10_9_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 194 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 195 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 195 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 196 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 196 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 196 ^ y is impossible.
-/
theorem diophantine1_10_9_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 196 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 197 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 197 ^ y,
if x >= 2, 197 ^ y = 9 (mod 25).
So y = 2 (mod 20), 
Therefore, 197 ^ y = 23 (mod 41).
So 10 ^ x = 14 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 197 ^ y is impossible.
-/
theorem diophantine1_10_9_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 41) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [14]) [
    {prop := List.Mem (197 ^ y % 41) [23], proof := h10},
    {prop := 10 ^ x + 9 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 198 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 198 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (198 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 199 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 199 ^ y,
if x >= 4, 199 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 199 ^ y is impossible.
-/
theorem diophantine1_10_9_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 199 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 200 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 200 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 200 ^ y is impossible.
-/
theorem diophantine1_10_9_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 200 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 201 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 201 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 202 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 202 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 202 ^ y is impossible.
-/
theorem diophantine1_10_9_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 202 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 203 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 203 ^ y,
if x >= 2, 203 ^ y = 9 (mod 25).
So y = 2 (mod 20), 
Therefore, 203 ^ y = 4 (mod 41).
So 10 ^ x = 36 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 203 ^ y is impossible.
-/
theorem diophantine1_10_9_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 203 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (203 ^ y % 41) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [36]) [
    {prop := List.Mem (203 ^ y % 41) [4], proof := h10},
    {prop := 10 ^ x + 9 = 203 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [36], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 203 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 204 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 204 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (204 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 205 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 205 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 205 ^ y is impossible.
-/
theorem diophantine1_10_9_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 205 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 206 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 206 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 206 ^ y is impossible.
-/
theorem diophantine1_10_9_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 206 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 207 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 207 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (207 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 208 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 208 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 208 ^ y is impossible.
-/
theorem diophantine1_10_9_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 208 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 9 = 209 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 209 ^ y,
if y >= 1, 10 ^ x = 2 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 9 = 209 ^ y is impossible.
-/
theorem diophantine1_10_9_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 11 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 11 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 210 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 210 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 211 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 211 ^ y,
if x >= 1, 211 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 211 ^ y is impossible.
-/
theorem diophantine1_10_9_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 211 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 212 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 212 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 212 ^ y is impossible.
-/
theorem diophantine1_10_9_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 212 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 213 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 213 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 214 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 214 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 214 ^ y is impossible.
-/
theorem diophantine1_10_9_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 214 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 215 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 215 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 215 ^ y is impossible.
-/
theorem diophantine1_10_9_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 215 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 216 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 216 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (216 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 217 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 217 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 217 ^ y,
if x >= 2, 217 ^ y = 9 (mod 25).
So y = 18 (mod 20), 
which implies y = 18, 38 (mod 40).
Therefore, 217 ^ y = 39, 2 (mod 41).
So 10 ^ x = 30, 34 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 217 ^ y is impossible.
-/
theorem diophantine1_10_9_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (217 ^ y % 41) [39, 2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [30, 34]) [
    {prop := List.Mem (217 ^ y % 41) [39, 2], proof := h10},
    {prop := 10 ^ x + 9 = 217 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [30, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 217 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 218 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 218 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 218 ^ y is impossible.
-/
theorem diophantine1_10_9_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 218 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 219 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 219 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 220 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 220 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 220 ^ y is impossible.
-/
theorem diophantine1_10_9_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 220 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 221 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 221 ^ y,
if x >= 1, 221 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 221 ^ y is impossible.
-/
theorem diophantine1_10_9_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 221 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 221 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 221 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 222 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 222 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (222 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 223 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 223 ^ y,
if x >= 4, 223 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 223 ^ y is impossible.
-/
theorem diophantine1_10_9_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 223 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 224 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 224 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 224 ^ y is impossible.
-/
theorem diophantine1_10_9_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 224 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 225 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 225 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (225 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 226 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 226 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 226 ^ y is impossible.
-/
theorem diophantine1_10_9_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 226 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 227 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 227 ^ y,
if x >= 2, 227 ^ y = 9 (mod 25).
So y = 14 (mod 20), 
which implies y = 14, 34 (mod 40).
Therefore, 227 ^ y = 39, 2 (mod 41).
So 10 ^ x = 30, 34 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 227 ^ y is impossible.
-/
theorem diophantine1_10_9_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 14) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 41) [39, 2]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 14, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [30, 34]) [
    {prop := List.Mem (227 ^ y % 41) [39, 2], proof := h10},
    {prop := 10 ^ x + 9 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [30, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 227 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 228 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 228 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (228 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 9 = 229 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 229 ^ y,
if x >= 2, 229 ^ y = 9 (mod 25).
So y = 7 (mod 10), 
which implies y = 2 (mod 5).
Therefore, 229 ^ y = 4 (mod 11).
So 10 ^ x = 6 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 229 ^ y is impossible.
-/
theorem diophantine1_10_9_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 10 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 11) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [6]) [
    {prop := List.Mem (229 ^ y % 11) [4], proof := h10},
    {prop := 10 ^ x + 9 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 229 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 230 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 230 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 230 ^ y is impossible.
-/
theorem diophantine1_10_9_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 230 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 231 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 231 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 232 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 232 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 232 ^ y is impossible.
-/
theorem diophantine1_10_9_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 232 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 9 = 233 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 233 ^ y,
if x >= 2, 233 ^ y = 9 (mod 25).
So y = 18 (mod 20), 
which implies y = 18, 38 (mod 40).
Therefore, 233 ^ y = 8, 33 (mod 41).
So 10 ^ x = 40, 24 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 9 = 233 ^ y is impossible.
-/
theorem diophantine1_10_9_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 25 = 9 := by omega
  have h9 := Claim (y % 20 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 25 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 41) [8, 33]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [40, 24]) [
    {prop := List.Mem (233 ^ y % 41) [8, 33], proof := h10},
    {prop := 10 ^ x + 9 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [40, 24], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 234 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 234 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (234 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 235 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 235 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 235 ^ y is impossible.
-/
theorem diophantine1_10_9_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 235 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 236 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 236 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 236 ^ y is impossible.
-/
theorem diophantine1_10_9_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 236 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 237 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 237 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 238 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 238 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 238 ^ y is impossible.
-/
theorem diophantine1_10_9_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 238 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 239 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 239 ^ y,
if x >= 4, 239 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 239 ^ y is impossible.
-/
theorem diophantine1_10_9_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 239 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 240 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 240 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 241 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 241 ^ y,
if x >= 1, 241 ^ y = 4 (mod 5).
However, this is impossible.
Therefore, x < 1.
So 10 ^ x + 9 = 241 ^ y is impossible.
-/
theorem diophantine1_10_9_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 5 = 4 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 5 = 4, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 241 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 242 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 242 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 242 ^ y is impossible.
-/
theorem diophantine1_10_9_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 242 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 243 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 243 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 9).
-/
theorem diophantine1_10_9_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (243 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 9 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 9 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 244 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 244 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 244 ^ y is impossible.
-/
theorem diophantine1_10_9_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 244 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 245 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 245 ^ y,
if x >= 2 and y >= 2,
9 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 10 ^ x + 9 = 245 ^ y is impossible.
-/
theorem diophantine1_10_9_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (245 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 245 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 246 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 246 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (246 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   10 ^ x + 9 = 247 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 247 ^ y,
if x >= 4, 247 ^ y = 9 (mod 16).
However, this is impossible.
Therefore, x < 4.
Further examination shows that 10 ^ x + 9 = 247 ^ y is impossible.
-/
theorem diophantine1_10_9_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 247 ^ y % 16 = 9 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 16 = 9, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 247 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 248 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 248 ^ y,
if x >= 4 and y >= 4,
9 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 10 ^ x + 9 = 248 ^ y is impossible.
-/
theorem diophantine1_10_9_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (10 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 248 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   10 ^ x + 9 = 249 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 249 ^ y,
this is impossible, because it implies that 10 ^ x = 0 (mod 3).
-/
theorem diophantine1_10_9_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ x % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 9 = 250 ^ y
For positive integers x, y satisfying 10 ^ x + 9 = 250 ^ y,
if x >= 1 and y >= 1,
9 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 9 = 250 ^ y is impossible.
-/
theorem diophantine1_10_9_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 9 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 9 = 250 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
