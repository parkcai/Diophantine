-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 3 <= a <= 3
-- 8 <= b <= 8
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 8 = 5 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 5 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 3, 7 (mod 8).
Therefore, 3 ^ x = 27, 14 (mod 41).
So 5 ^ y = 35, 22 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 8 = 5 ^ y is impossible.
-/
theorem diophantine1_3_8_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [27, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ y % 41) [35, 22]) [
    {prop := List.Mem (3 ^ x % 41) [27, 14], proof := h10},
    {prop := 3 ^ x + 8 = 5 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (5 ^ y % 41) [35, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 7 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 7 ^ y,
if x >= 1, 7 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 7 ^ y is impossible.
-/
theorem diophantine1_3_8_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 7 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 271)   3 ^ x + 8 = 11 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 11 ^ y,
if x >= 3, 11 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 3, 12, 21, 30, 39, 48, 57, 66, 75, 84, 93, 102, 111, 120, 129 (mod 135).
Therefore, 11 ^ y = 247, 72, 55, 106, 224, 141, 119, 185, 258, 39, 154, 80, 31, 178, 8 (mod 271).
So 3 ^ x = 239, 64, 47, 98, 216, 133, 111, 177, 250, 31, 146, 72, 23, 170, 0 (mod 271), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_3_8_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 271) [247, 72, 55, 106, 224, 141, 119, 185, 258, 39, 154, 80, 31, 178, 8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 271) [239, 64, 47, 98, 216, 133, 111, 177, 250, 31, 146, 72, 23, 170, 0]) [
    {prop := List.Mem (11 ^ y % 271) [247, 72, 55, 106, 224, 141, 119, 185, 258, 39, 154, 80, 31, 178, 8], proof := h10},
    {prop := 3 ^ x + 8 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 271) [239, 64, 47, 98, 216, 133, 111, 177, 250, 31, 146, 72, 23, 170, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 11 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 13 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 13 ^ y,
if x >= 1, 13 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 13 ^ y is impossible.
-/
theorem diophantine1_3_8_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 13 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 307)   3 ^ x + 8 = 17 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 17 ^ y,
if x >= 4, 17 ^ y = 8 (mod 81).
So y = 5 (mod 18), 
which implies y = 2 (mod 3).
Therefore, 17 ^ y = 289 (mod 307).
So 3 ^ x = 281 (mod 307), but this is impossible.
Therefore, x < 4.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_3_8_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 17 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 81 = 8 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 81 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 307) [289]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 307) [281]) [
    {prop := List.Mem (17 ^ y % 307) [289], proof := h10},
    {prop := 3 ^ x + 8 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 307) [281], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 17 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 19 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 19 ^ y,
if x >= 1, 19 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 19 ^ y is impossible.
-/
theorem diophantine1_3_8_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 19 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   3 ^ x + 8 = 23 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 23 ^ y,
if y >= 1, 3 ^ x = 15 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 23 ^ y is impossible.
-/
theorem diophantine1_3_8_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 23 = 15 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 25 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 25 ^ y,
if x >= 1, 25 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 25 ^ y is impossible.
-/
theorem diophantine1_3_8_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 25 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 25 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 29 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 29 ^ y,
if x >= 3, 29 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 3, 9 (mod 12).
Therefore, 29 ^ y = 6, 31 (mod 37).
So 3 ^ x = 35, 23 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 29 ^ y is impossible.
-/
theorem diophantine1_3_8_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 37) [6, 31]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [35, 23]) [
    {prop := List.Mem (29 ^ y % 37) [6, 31], proof := h10},
    {prop := 3 ^ x + 8 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [35, 23], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 31 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 31 ^ y,
if x >= 1, 31 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 31 ^ y is impossible.
-/
theorem diophantine1_3_8_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 181)   3 ^ x + 8 = 35 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 35 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 4, 9, 14, 19, 24, 29, 34, 39, 44 (mod 45).
Therefore, 3 ^ x = 81, 135, 44, 13, 82, 16, 87, 145, 121 (mod 181).
So 35 ^ y = 89, 143, 52, 21, 90, 24, 95, 153, 129 (mod 181), but this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_3_8_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 35 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (35 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 181) [81, 135, 44, 13, 82, 16, 87, 145, 121]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (35 ^ y % 181) [89, 143, 52, 21, 90, 24, 95, 153, 129]) [
    {prop := List.Mem (3 ^ x % 181) [81, 135, 44, 13, 82, 16, 87, 145, 121], proof := h10},
    {prop := 3 ^ x + 8 = 35 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (35 ^ y % 181) [89, 143, 52, 21, 90, 24, 95, 153, 129], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 35 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 37 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 37 ^ y,
if x >= 1, 37 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 37 ^ y is impossible.
-/
theorem diophantine1_3_8_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 37 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 73)   3 ^ x + 8 = 41 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 41 ^ y,
if x >= 3, 41 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
Therefore, 41 ^ y = 65 (mod 73).
So 3 ^ x = 57 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 41 ^ y is impossible.
-/
theorem diophantine1_3_8_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 73) [65]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 73) [57]) [
    {prop := List.Mem (41 ^ y % 73) [65], proof := h10},
    {prop := 3 ^ x + 8 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 73) [57], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 43 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 43 ^ y,
if x >= 1, 43 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 43 ^ y is impossible.
-/
theorem diophantine1_3_8_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 43 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 271)   3 ^ x + 8 = 47 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 47 ^ y,
if x >= 3, 47 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 3, 21, 39, 57, 75 (mod 90).
Therefore, 47 ^ y = 30, 3, 190, 19, 29 (mod 271).
So 3 ^ x = 22, 266, 182, 11, 21 (mod 271), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 47 ^ y is impossible.
-/
theorem diophantine1_3_8_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 271) [30, 3, 190, 19, 29]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 271) [22, 266, 182, 11, 21]) [
    {prop := List.Mem (47 ^ y % 271) [30, 3, 190, 19, 29], proof := h10},
    {prop := 3 ^ x + 8 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 271) [22, 266, 182, 11, 21], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 49 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 49 ^ y,
if x >= 1, 49 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 49 ^ y is impossible.
-/
theorem diophantine1_3_8_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 49 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 53 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 53 ^ y,
if x >= 3, 53 ^ y = 8 (mod 27).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 53 ^ y is impossible.
-/
theorem diophantine1_3_8_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 27 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 53 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 55 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 55 ^ y,
if x >= 1, 55 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 55 ^ y is impossible.
-/
theorem diophantine1_3_8_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 55 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 55 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 59 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 59 ^ y,
if x >= 3, 59 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
which implies y = 15, 33 (mod 36).
Therefore, 59 ^ y = 14, 23 (mod 37).
So 3 ^ x = 6, 15 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 59 ^ y is impossible.
-/
theorem diophantine1_3_8_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 37) [14, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [6, 15]) [
    {prop := List.Mem (59 ^ y % 37) [14, 23], proof := h10},
    {prop := 3 ^ x + 8 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [6, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 61 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 61 ^ y,
if x >= 1, 61 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 61 ^ y is impossible.
-/
theorem diophantine1_3_8_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   3 ^ x + 8 = 65 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 65 ^ y,
if y >= 1, 3 ^ x = 5 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 65 ^ y is impossible.
-/
theorem diophantine1_3_8_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 67 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 67 ^ y,
if x >= 1, 67 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 67 ^ y is impossible.
-/
theorem diophantine1_3_8_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 67 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   3 ^ x + 8 = 71 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 71 ^ y,
if y >= 1, 3 ^ x = 63 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 71 ^ y is impossible.
-/
theorem diophantine1_3_8_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 71 = 63 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 71 = 63, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 73 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 73 ^ y,
if x >= 1, 73 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 73 ^ y is impossible.
-/
theorem diophantine1_3_8_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 73 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 73)   3 ^ x + 8 = 77 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 77 ^ y,
if x >= 3, 77 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
which implies y = 6 (mod 9).
Therefore, 77 ^ y = 8 (mod 73).
So 3 ^ x = 0 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 77 ^ y is impossible.
-/
theorem diophantine1_3_8_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 77 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (77 ^ y % 73) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 73) [0]) [
    {prop := List.Mem (77 ^ y % 73) [8], proof := h10},
    {prop := 3 ^ x + 8 = 77 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 73) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 77 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 79 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 79 ^ y,
if x >= 1, 79 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 79 ^ y is impossible.
-/
theorem diophantine1_3_8_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 83 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 83 ^ y,
if x >= 3, 83 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 3 (mod 9).
Therefore, 83 ^ y = 26 (mod 37).
So 3 ^ x = 18 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 83 ^ y is impossible.
-/
theorem diophantine1_3_8_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 37) [26]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [18]) [
    {prop := List.Mem (83 ^ y % 37) [26], proof := h10},
    {prop := 3 ^ x + 8 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 85 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 85 ^ y,
if x >= 1, 85 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 85 ^ y is impossible.
-/
theorem diophantine1_3_8_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 85 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 85 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 271)   3 ^ x + 8 = 89 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 89 ^ y,
if x >= 5, 89 ^ y = 8 (mod 243).
So y = 19 (mod 54), 
which implies y = 19, 46, 73, 100, 127 (mod 135).
Therefore, 89 ^ y = 163, 129, 4, 206, 40 (mod 271).
So 3 ^ x = 155, 121, 267, 198, 32 (mod 271), but this is impossible.
Therefore, x < 5.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_3_8_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 89 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (3 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 243 = 8 := by omega
  have h9 := Claim (y % 54 = 19) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 243 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 271) [163, 129, 4, 206, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 54 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 271) [155, 121, 267, 198, 32]) [
    {prop := List.Mem (89 ^ y % 271) [163, 129, 4, 206, 40], proof := h10},
    {prop := 3 ^ x + 8 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 271) [155, 121, 267, 198, 32], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 89 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 91 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 91 ^ y,
if x >= 1, 91 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 91 ^ y is impossible.
-/
theorem diophantine1_3_8_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 91 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 91 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 8 = 95 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 95 ^ y,
if y >= 1, 3 ^ x = 11 (mod 19).
So x = 12 (mod 18).
Therefore, 3 ^ x = 10 (mod 37).
So 95 ^ y = 18 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 95 ^ y is impossible.
-/
theorem diophantine1_3_8_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 11 := by omega
  have h9 := Claim (x % 18 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [10]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (95 ^ y % 37) [18]) [
    {prop := List.Mem (3 ^ x % 37) [10], proof := h10},
    {prop := 3 ^ x + 8 = 95 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (95 ^ y % 37) [18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 97 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 97 ^ y,
if x >= 1, 97 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 97 ^ y is impossible.
-/
theorem diophantine1_3_8_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 97 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 181)   3 ^ x + 8 = 101 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 101 ^ y,
if x >= 3, 101 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
Therefore, 101 ^ y = 49 (mod 181).
So 3 ^ x = 41 (mod 181), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 101 ^ y is impossible.
-/
theorem diophantine1_3_8_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 181) [49]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 181) [41]) [
    {prop := List.Mem (101 ^ y % 181) [49], proof := h10},
    {prop := 3 ^ x + 8 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 181) [41], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 103 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 103 ^ y,
if x >= 1, 103 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 103 ^ y is impossible.
-/
theorem diophantine1_3_8_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 103 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 107 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 107 ^ y,
if x >= 3, 107 ^ y = 8 (mod 27).
However, this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 107 ^ y is impossible.
-/
theorem diophantine1_3_8_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 27 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 107 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 109 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 109 ^ y,
if x >= 1, 109 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 109 ^ y is impossible.
-/
theorem diophantine1_3_8_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 113 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 113 ^ y,
if x >= 3, 113 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
which implies y = 15, 33 (mod 36).
Therefore, 113 ^ y = 23, 14 (mod 37).
So 3 ^ x = 15, 6 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 113 ^ y is impossible.
-/
theorem diophantine1_3_8_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 37) [23, 14]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [15, 6]) [
    {prop := List.Mem (113 ^ y % 37) [23, 14], proof := h10},
    {prop := 3 ^ x + 8 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [15, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 115 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 115 ^ y,
if x >= 1, 115 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 115 ^ y is impossible.
-/
theorem diophantine1_3_8_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 115 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 115 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 115 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 8 = 119 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 119 ^ y,
if y >= 1, 3 ^ x = 9 (mod 17).
So x = 2 (mod 16), 
which implies x = 2, 18, 34 (mod 48).
Therefore, 3 ^ x = 9, 64, 24 (mod 97).
So 119 ^ y = 17, 72, 32 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 119 ^ y is impossible.
-/
theorem diophantine1_3_8_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 2) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [9, 64, 24]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (119 ^ y % 97) [17, 72, 32]) [
    {prop := List.Mem (3 ^ x % 97) [9, 64, 24], proof := h10},
    {prop := 3 ^ x + 8 = 119 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (119 ^ y % 97) [17, 72, 32], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 121 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 121 ^ y,
if x >= 1, 121 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 121 ^ y is impossible.
-/
theorem diophantine1_3_8_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 8 = 125 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 125 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 3, 7 (mod 8).
Therefore, 3 ^ x = 27, 14 (mod 41).
So 125 ^ y = 35, 22 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 8 = 125 ^ y is impossible.
-/
theorem diophantine1_3_8_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [27, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (125 ^ y % 41) [35, 22]) [
    {prop := List.Mem (3 ^ x % 41) [27, 14], proof := h10},
    {prop := 3 ^ x + 8 = 125 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (125 ^ y % 41) [35, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 125 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 127 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 127 ^ y,
if x >= 1, 127 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 127 ^ y is impossible.
-/
theorem diophantine1_3_8_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 127 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 131 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 131 ^ y,
if x >= 3, 131 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
which implies y = 15, 33 (mod 36).
Therefore, 131 ^ y = 23, 14 (mod 37).
So 3 ^ x = 15, 6 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 131 ^ y is impossible.
-/
theorem diophantine1_3_8_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 37) [23, 14]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [15, 6]) [
    {prop := List.Mem (131 ^ y % 37) [23, 14], proof := h10},
    {prop := 3 ^ x + 8 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [15, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 131 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 133 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 133 ^ y,
if x >= 1, 133 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 133 ^ y is impossible.
-/
theorem diophantine1_3_8_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 133 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 133 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 133 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 73)   3 ^ x + 8 = 137 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 137 ^ y,
if x >= 3, 137 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 137 ^ y = 1 (mod 73).
So 3 ^ x = 66 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 137 ^ y is impossible.
-/
theorem diophantine1_3_8_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 73) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 73) [66]) [
    {prop := List.Mem (137 ^ y % 73) [1], proof := h10},
    {prop := 3 ^ x + 8 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 73) [66], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 137 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 139 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 139 ^ y,
if x >= 1, 139 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 139 ^ y is impossible.
-/
theorem diophantine1_3_8_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 139 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   3 ^ x + 8 = 143 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 143 ^ y,
if y >= 1, 3 ^ x = 5 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 143 ^ y is impossible.
-/
theorem diophantine1_3_8_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 145 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 145 ^ y,
if x >= 1, 145 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 145 ^ y is impossible.
-/
theorem diophantine1_3_8_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 145 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 145 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 145 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 73)   3 ^ x + 8 = 149 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 149 ^ y,
if x >= 3, 149 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
which implies y = 3, 9 (mod 12).
Therefore, 149 ^ y = 27, 46 (mod 73).
So 3 ^ x = 19, 38 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 149 ^ y is impossible.
-/
theorem diophantine1_3_8_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 73) [27, 46]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 73) [19, 38]) [
    {prop := List.Mem (149 ^ y % 73) [27, 46], proof := h10},
    {prop := 3 ^ x + 8 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 73) [19, 38], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 149 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 151 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 151 ^ y,
if x >= 1, 151 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 151 ^ y is impossible.
-/
theorem diophantine1_3_8_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 151 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 8 = 155 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 155 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 3, 7 (mod 8).
Therefore, 3 ^ x = 27, 14 (mod 41).
So 155 ^ y = 35, 22 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 8 = 155 ^ y is impossible.
-/
theorem diophantine1_3_8_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [27, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (155 ^ y % 41) [35, 22]) [
    {prop := List.Mem (3 ^ x % 41) [27, 14], proof := h10},
    {prop := 3 ^ x + 8 = 155 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (155 ^ y % 41) [35, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 157 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 157 ^ y,
if x >= 1, 157 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 157 ^ y is impossible.
-/
theorem diophantine1_3_8_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 157 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   3 ^ x + 8 = 161 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 161 ^ y,
if y >= 1, 3 ^ x = 15 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 161 ^ y is impossible.
-/
theorem diophantine1_3_8_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 23 = 15 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 163 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 163 ^ y,
if x >= 1, 163 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 163 ^ y is impossible.
-/
theorem diophantine1_3_8_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 163 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 8 = 167 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 167 ^ y,
if x >= 3, 167 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
Therefore, 167 ^ y = 8 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 167 ^ y is impossible.
-/
theorem diophantine1_3_8_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 19) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (167 ^ y % 19) [8], proof := h10},
    {prop := 3 ^ x + 8 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 167 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 169 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 169 ^ y,
if x >= 1, 169 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 169 ^ y is impossible.
-/
theorem diophantine1_3_8_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 169 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 8 = 173 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 173 ^ y,
if x >= 3, 173 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
Therefore, 173 ^ y = 8 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 173 ^ y is impossible.
-/
theorem diophantine1_3_8_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 19) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (173 ^ y % 19) [8], proof := h10},
    {prop := 3 ^ x + 8 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 173 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 175 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 175 ^ y,
if x >= 1, 175 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 175 ^ y is impossible.
-/
theorem diophantine1_3_8_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 175 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 175 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 175 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 179 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 179 ^ y,
if x >= 4, 179 ^ y = 8 (mod 81).
So y = 5 (mod 18), 
which implies y = 1, 3 (mod 4).
Therefore, 179 ^ y = 31, 6 (mod 37).
So 3 ^ x = 23, 35 (mod 37), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 8 = 179 ^ y is impossible.
-/
theorem diophantine1_3_8_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 81 = 8 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 81 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 37) [31, 6]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [23, 35]) [
    {prop := List.Mem (179 ^ y % 37) [31, 6], proof := h10},
    {prop := 3 ^ x + 8 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [23, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 179 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 181 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 181 ^ y,
if x >= 1, 181 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 181 ^ y is impossible.
-/
theorem diophantine1_3_8_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 181 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 8 = 185 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 185 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 3, 7 (mod 8).
Therefore, 3 ^ x = 27, 14 (mod 41).
So 185 ^ y = 35, 22 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 8 = 185 ^ y is impossible.
-/
theorem diophantine1_3_8_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [27, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (185 ^ y % 41) [35, 22]) [
    {prop := List.Mem (3 ^ x % 41) [27, 14], proof := h10},
    {prop := 3 ^ x + 8 = 185 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (185 ^ y % 41) [35, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 187 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 187 ^ y,
if x >= 1, 187 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 187 ^ y is impossible.
-/
theorem diophantine1_3_8_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 187 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 187 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 187 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 191 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 191 ^ y,
if x >= 3, 191 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 1, 3 (mod 4).
Therefore, 191 ^ y = 6, 31 (mod 37).
So 3 ^ x = 35, 23 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 191 ^ y is impossible.
-/
theorem diophantine1_3_8_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 37) [6, 31]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [35, 23]) [
    {prop := List.Mem (191 ^ y % 37) [6, 31], proof := h10},
    {prop := 3 ^ x + 8 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [35, 23], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 193 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 193 ^ y,
if x >= 1, 193 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 193 ^ y is impossible.
-/
theorem diophantine1_3_8_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 193 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 73)   3 ^ x + 8 = 197 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 197 ^ y,
if x >= 4, 197 ^ y = 8 (mod 81).
So y = 7 (mod 18), 
which implies y = 1, 3, 5, 7 (mod 8).
Therefore, 197 ^ y = 51, 10, 22, 63 (mod 73).
So 3 ^ x = 43, 2, 14, 55 (mod 73), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 8 = 197 ^ y is impossible.
-/
theorem diophantine1_3_8_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 81 = 8 := by omega
  have h9 := Claim (y % 18 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 81 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 73) [51, 10, 22, 63]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 73) [43, 2, 14, 55]) [
    {prop := List.Mem (197 ^ y % 73) [51, 10, 22, 63], proof := h10},
    {prop := 3 ^ x + 8 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 73) [43, 2, 14, 55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 197 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 199 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 199 ^ y,
if x >= 1, 199 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 199 ^ y is impossible.
-/
theorem diophantine1_3_8_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 199 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 8 = 203 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 203 ^ y,
if x >= 3, 203 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
Therefore, 203 ^ y = 8 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 203 ^ y is impossible.
-/
theorem diophantine1_3_8_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 203 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (203 ^ y % 19) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (203 ^ y % 19) [8], proof := h10},
    {prop := 3 ^ x + 8 = 203 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 203 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 205 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 205 ^ y,
if x >= 1, 205 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 205 ^ y is impossible.
-/
theorem diophantine1_3_8_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 205 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 205 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 205 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 73)   3 ^ x + 8 = 209 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 209 ^ y,
if y >= 1, 3 ^ x = 11 (mod 19).
So x = 12 (mod 18), 
which implies x = 0, 6 (mod 12).
Therefore, 3 ^ x = 1, 72 (mod 73).
So 209 ^ y = 9, 7 (mod 73), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 209 ^ y is impossible.
-/
theorem diophantine1_3_8_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 11 := by omega
  have h9 := Claim (x % 18 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 11, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 73) [1, 72]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 73) [9, 7]) [
    {prop := List.Mem (3 ^ x % 73) [1, 72], proof := h10},
    {prop := 3 ^ x + 8 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 73) [9, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 211 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 211 ^ y,
if x >= 1, 211 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 211 ^ y is impossible.
-/
theorem diophantine1_3_8_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 211 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 8 = 215 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 215 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 3, 7 (mod 8).
Therefore, 3 ^ x = 27, 14 (mod 41).
So 215 ^ y = 35, 22 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 8 = 215 ^ y is impossible.
-/
theorem diophantine1_3_8_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [27, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (215 ^ y % 41) [35, 22]) [
    {prop := List.Mem (3 ^ x % 41) [27, 14], proof := h10},
    {prop := 3 ^ x + 8 = 215 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (215 ^ y % 41) [35, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 215 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 217 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 217 ^ y,
if x >= 1, 217 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 217 ^ y is impossible.
-/
theorem diophantine1_3_8_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 217 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   3 ^ x + 8 = 221 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 221 ^ y,
if y >= 1, 3 ^ x = 5 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 8 = 221 ^ y is impossible.
-/
theorem diophantine1_3_8_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 223 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 223 ^ y,
if x >= 1, 223 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 223 ^ y is impossible.
-/
theorem diophantine1_3_8_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 223 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 227 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 227 ^ y,
if x >= 3, 227 ^ y = 8 (mod 27).
So y = 3 (mod 18), 
which implies y = 3, 21 (mod 36).
Therefore, 227 ^ y = 14, 23 (mod 37).
So 3 ^ x = 6, 15 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 227 ^ y is impossible.
-/
theorem diophantine1_3_8_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 37) [14, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [6, 15]) [
    {prop := List.Mem (227 ^ y % 37) [14, 23], proof := h10},
    {prop := 3 ^ x + 8 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [6, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 227 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 229 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 229 ^ y,
if x >= 1, 229 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 229 ^ y is impossible.
-/
theorem diophantine1_3_8_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 229 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 233 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 233 ^ y,
if x >= 4, 233 ^ y = 8 (mod 81).
So y = 17 (mod 18), 
which implies y = 5 (mod 6).
Therefore, 233 ^ y = 27 (mod 37).
So 3 ^ x = 19 (mod 37), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 8 = 233 ^ y is impossible.
-/
theorem diophantine1_3_8_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 81 = 8 := by omega
  have h9 := Claim (y % 18 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 81 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 37) [27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [19]) [
    {prop := List.Mem (233 ^ y % 37) [27], proof := h10},
    {prop := 3 ^ x + 8 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 233 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 235 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 235 ^ y,
if x >= 1, 235 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 235 ^ y is impossible.
-/
theorem diophantine1_3_8_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 235 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 235 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 235 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 8 = 239 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 239 ^ y,
if x >= 3, 239 ^ y = 8 (mod 27).
So y = 15 (mod 18), 
which implies y = 15, 33 (mod 36).
Therefore, 239 ^ y = 14, 23 (mod 37).
So 3 ^ x = 6, 15 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 8 = 239 ^ y is impossible.
-/
theorem diophantine1_3_8_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 27 = 8 := by omega
  have h9 := Claim (y % 18 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 27 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 37) [14, 23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [6, 15]) [
    {prop := List.Mem (239 ^ y % 37) [14, 23], proof := h10},
    {prop := 3 ^ x + 8 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [6, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 241 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 241 ^ y,
if x >= 1, 241 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 241 ^ y is impossible.
-/
theorem diophantine1_3_8_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 241 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 8 = 245 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 245 ^ y,
if y >= 2, 3 ^ x = 17 (mod 25).
So x = 19 (mod 20), 
which implies x = 3, 7 (mod 8).
Therefore, 3 ^ x = 27, 14 (mod 41).
So 245 ^ y = 35, 22 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 8 = 245 ^ y is impossible.
-/
theorem diophantine1_3_8_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (245 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 17 := by omega
  have h9 := Claim (x % 20 = 19) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [27, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 19, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (245 ^ y % 41) [35, 22]) [
    {prop := List.Mem (3 ^ x % 41) [27, 14], proof := h10},
    {prop := 3 ^ x + 8 = 245 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (245 ^ y % 41) [35, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 245 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   3 ^ x + 8 = 247 ^ y
For positive integers x, y satisfying 3 ^ x + 8 = 247 ^ y,
if x >= 1, 247 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 3 ^ x + 8 = 247 ^ y is impossible.
-/
theorem diophantine1_3_8_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 8 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 247 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 8 = 247 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
