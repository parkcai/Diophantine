-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 5 <= a <= 5
-- 5 <= b <= 5
-- 2 <= c <= 125
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type ii)   5 ^ x + 5 = 2 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 2 ^ y,
this is impossible, because it implies that 2 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 2 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 3 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 3 ^ y,
this is impossible, because it implies that 3 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 3 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 4 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 4 ^ y,
this is impossible, because it implies that 4 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 4 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 5 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 5 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 5 ^ y is impossible.
-/
theorem diophantine1_5_5_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 5 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 6 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 6 ^ y,
this is impossible, because it implies that 6 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 6 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 6 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 7 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 7 ^ y,
this is impossible, because it implies that 7 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 8 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 8 ^ y,
this is impossible, because it implies that 8 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 8 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 8 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 9 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 9 ^ y,
this is impossible, because it implies that 9 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 10 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 10 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_5_5_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 10 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 10 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 11 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 11 ^ y,
this is impossible, because it implies that 11 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 11 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 12 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 12 ^ y,
this is impossible, because it implies that 12 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 12 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 12 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 13 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 13 ^ y,
this is impossible, because it implies that 13 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 13 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 14 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 14 ^ y,
this is impossible, because it implies that 14 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 14 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 14 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 15 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 15 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 15 ^ y is impossible.
-/
theorem diophantine1_5_5_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 15 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 16 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 16 ^ y,
this is impossible, because it implies that 16 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 16 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 16 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 17 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 17 ^ y,
this is impossible, because it implies that 17 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 17 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 18 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 18 ^ y,
this is impossible, because it implies that 18 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 18 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 18 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 19 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 19 ^ y,
this is impossible, because it implies that 19 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 19 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 20 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 20 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 20 ^ y is impossible.
-/
theorem diophantine1_5_5_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 20 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 21 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 21 ^ y,
this is impossible, because it implies that 21 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 21 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 21 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 22 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 22 ^ y,
this is impossible, because it implies that 22 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 22 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 22 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 23 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 23 ^ y,
this is impossible, because it implies that 23 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 23 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 24 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 24 ^ y,
this is impossible, because it implies that 24 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 24 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 24 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 25 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 25 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 25 ^ y is impossible.
-/
theorem diophantine1_5_5_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 25 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 26 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 26 ^ y,
this is impossible, because it implies that 26 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 26 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 26 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 27 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 27 ^ y,
this is impossible, because it implies that 27 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 27 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 28 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 28 ^ y,
this is impossible, because it implies that 28 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 28 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 28 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 29 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 29 ^ y,
this is impossible, because it implies that 29 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 29 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 30 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 30 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_5_5_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 30 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 30 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 31 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 31 ^ y,
this is impossible, because it implies that 31 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 31 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 32 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 32 ^ y,
this is impossible, because it implies that 32 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 32 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 32 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 33 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 33 ^ y,
this is impossible, because it implies that 33 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 33 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 34 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 34 ^ y,
this is impossible, because it implies that 34 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 34 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 34 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 35 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 35 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 35 ^ y is impossible.
-/
theorem diophantine1_5_5_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 35 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 36 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 36 ^ y,
this is impossible, because it implies that 36 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 36 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 36 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 37 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 37 ^ y,
this is impossible, because it implies that 37 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 37 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 38 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 38 ^ y,
this is impossible, because it implies that 38 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 38 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 38 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 39 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 39 ^ y,
this is impossible, because it implies that 39 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 39 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 40 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 40 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 40 ^ y is impossible.
-/
theorem diophantine1_5_5_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 40 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 41 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 41 ^ y,
this is impossible, because it implies that 41 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 41 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 42 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 42 ^ y,
this is impossible, because it implies that 42 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 42 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 42 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 43 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 43 ^ y,
this is impossible, because it implies that 43 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 43 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 44 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 44 ^ y,
this is impossible, because it implies that 44 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 44 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 44 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 45 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 45 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 45 ^ y is impossible.
-/
theorem diophantine1_5_5_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 45 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 46 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 46 ^ y,
this is impossible, because it implies that 46 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 46 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 46 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 47 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 47 ^ y,
this is impossible, because it implies that 47 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 47 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 48 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 48 ^ y,
this is impossible, because it implies that 48 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 48 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 48 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 49 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 49 ^ y,
this is impossible, because it implies that 49 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 49 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 50 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 50 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 50 ^ y is impossible.
-/
theorem diophantine1_5_5_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 50 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 51 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 51 ^ y,
this is impossible, because it implies that 51 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 51 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 52 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 52 ^ y,
this is impossible, because it implies that 52 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 52 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 52 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 53 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 53 ^ y,
this is impossible, because it implies that 53 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 53 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 54 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 54 ^ y,
this is impossible, because it implies that 54 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 54 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 54 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 55 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 55 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 55 ^ y is impossible.
-/
theorem diophantine1_5_5_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (55 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 55 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 56 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 56 ^ y,
this is impossible, because it implies that 56 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 56 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 56 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 57 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 57 ^ y,
this is impossible, because it implies that 57 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 57 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 57 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 58 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 58 ^ y,
this is impossible, because it implies that 58 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 58 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 58 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 59 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 59 ^ y,
this is impossible, because it implies that 59 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 59 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 60 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 60 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 60 ^ y is impossible.
-/
theorem diophantine1_5_5_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 60 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 61 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 61 ^ y,
this is impossible, because it implies that 61 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 61 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 62 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 62 ^ y,
this is impossible, because it implies that 62 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 62 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 62 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 63 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 63 ^ y,
this is impossible, because it implies that 63 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 63 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 63 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 64 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 64 ^ y,
this is impossible, because it implies that 64 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 64 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 64 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 65 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 65 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 65 ^ y is impossible.
-/
theorem diophantine1_5_5_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (65 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 65 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 66 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 66 ^ y,
this is impossible, because it implies that 66 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 66 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 66 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 67 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 67 ^ y,
this is impossible, because it implies that 67 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 67 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 68 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 68 ^ y,
this is impossible, because it implies that 68 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 68 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 68 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 69 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 69 ^ y,
this is impossible, because it implies that 69 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 69 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 69 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 70 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 70 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 70 ^ y is impossible.
-/
theorem diophantine1_5_5_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 70 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 71 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 71 ^ y,
this is impossible, because it implies that 71 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 71 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 72 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 72 ^ y,
this is impossible, because it implies that 72 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 72 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 72 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 73 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 73 ^ y,
this is impossible, because it implies that 73 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 73 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 74 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 74 ^ y,
this is impossible, because it implies that 74 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 74 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 74 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 75 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 75 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 75 ^ y is impossible.
-/
theorem diophantine1_5_5_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 75 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 76 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 76 ^ y,
this is impossible, because it implies that 76 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 76 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 76 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 77 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 77 ^ y,
this is impossible, because it implies that 77 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 77 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 78 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 78 ^ y,
this is impossible, because it implies that 78 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 78 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 78 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 79 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 79 ^ y,
this is impossible, because it implies that 79 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 79 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 80 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 80 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 80 ^ y is impossible.
-/
theorem diophantine1_5_5_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 80 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 81 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 81 ^ y,
this is impossible, because it implies that 81 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 81 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 82 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 82 ^ y,
this is impossible, because it implies that 82 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 82 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 82 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 83 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 83 ^ y,
this is impossible, because it implies that 83 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 83 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 84 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 84 ^ y,
this is impossible, because it implies that 84 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 84 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 84 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 85 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 85 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 85 ^ y is impossible.
-/
theorem diophantine1_5_5_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 85 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 86 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 86 ^ y,
this is impossible, because it implies that 86 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 86 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 86 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 87 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 87 ^ y,
this is impossible, because it implies that 87 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 87 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 87 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 88 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 88 ^ y,
this is impossible, because it implies that 88 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 88 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 88 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 89 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 89 ^ y,
this is impossible, because it implies that 89 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 89 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 90 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 90 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 90 ^ y is impossible.
-/
theorem diophantine1_5_5_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 90 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 91 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 91 ^ y,
this is impossible, because it implies that 91 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 91 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 92 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 92 ^ y,
this is impossible, because it implies that 92 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 92 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 92 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 93 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 93 ^ y,
this is impossible, because it implies that 93 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 93 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 93 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 94 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 94 ^ y,
this is impossible, because it implies that 94 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 94 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 94 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 95 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 95 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 95 ^ y is impossible.
-/
theorem diophantine1_5_5_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 95 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 96 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 96 ^ y,
this is impossible, because it implies that 96 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 96 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 96 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 97 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 97 ^ y,
this is impossible, because it implies that 97 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 97 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 98 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 98 ^ y,
this is impossible, because it implies that 98 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 98 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 98 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 99 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 99 ^ y,
this is impossible, because it implies that 99 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 99 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 99 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 100 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 100 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 100 ^ y is impossible.
-/
theorem diophantine1_5_5_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 100 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 101 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 101 ^ y,
this is impossible, because it implies that 101 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 101 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 102 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 102 ^ y,
this is impossible, because it implies that 102 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 102 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 102 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 103 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 103 ^ y,
this is impossible, because it implies that 103 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 103 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 104 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 104 ^ y,
this is impossible, because it implies that 104 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 104 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 104 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 105 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 105 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 105 ^ y is impossible.
-/
theorem diophantine1_5_5_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 105 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 106 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 106 ^ y,
this is impossible, because it implies that 106 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 106 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 106 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 107 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 107 ^ y,
this is impossible, because it implies that 107 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 107 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 108 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 108 ^ y,
this is impossible, because it implies that 108 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 108 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 108 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 109 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 109 ^ y,
this is impossible, because it implies that 109 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 109 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 110 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 110 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 110 ^ y is impossible.
-/
theorem diophantine1_5_5_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 110 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 111 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 111 ^ y,
this is impossible, because it implies that 111 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 111 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 111 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 112 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 112 ^ y,
this is impossible, because it implies that 112 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 112 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 112 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 113 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 113 ^ y,
this is impossible, because it implies that 113 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 113 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 114 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 114 ^ y,
this is impossible, because it implies that 114 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 114 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 114 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 115 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 115 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 115 ^ y is impossible.
-/
theorem diophantine1_5_5_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (115 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 115 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 116 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 116 ^ y,
this is impossible, because it implies that 116 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 116 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 116 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 117 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 117 ^ y,
this is impossible, because it implies that 117 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 117 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 117 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 118 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 118 ^ y,
this is impossible, because it implies that 118 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 118 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 118 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 119 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 119 ^ y,
this is impossible, because it implies that 119 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 119 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 119 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 120 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 120 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 120 ^ y is impossible.
-/
theorem diophantine1_5_5_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 120 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 121 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 121 ^ y,
this is impossible, because it implies that 121 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 121 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 122 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 122 ^ y,
this is impossible, because it implies that 122 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 122 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 122 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 123 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 123 ^ y,
this is impossible, because it implies that 123 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 123 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 123 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   5 ^ x + 5 = 124 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 124 ^ y,
this is impossible, because it implies that 124 ^ y = 0 (mod 5).
-/
theorem diophantine1_5_5_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (5 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 124 ^ y % 5 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 124 ^ y % 5 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   5 ^ x + 5 = 125 ^ y
For positive integers x, y satisfying 5 ^ x + 5 = 125 ^ y,
if x >= 2 and y >= 2,
5 = 0 (mod 25), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 5 ^ x + 5 = 125 ^ y is impossible.
-/
theorem diophantine1_5_5_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 5 ^ x + 5 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (5 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 5 ^ x + 5 = 125 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
