-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 8 <= a <= 8
-- 8 <= b <= 8
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   8 ^ x + 8 = 2 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 2 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that (x, y) = (1, 4).
-/
theorem diophantine1_8_8_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 2 ^ y) :
  List.Mem (x, y) [(1, 4)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 4)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 2 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 3 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 3 ^ y,
this is impossible, because it implies that 3 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 3 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 4 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 4 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (1, 2).
-/
theorem diophantine1_8_8_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 4 ^ y) :
  List.Mem (x, y) [(1, 2)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 2)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 4 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 5 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 5 ^ y,
this is impossible, because it implies that 5 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 5 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 6 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 6 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 6 ^ y is impossible.
-/
theorem diophantine1_8_8_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 6 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 7 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 7 ^ y,
this is impossible, because it implies that 7 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 8 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 8 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 8 ^ y is impossible.
-/
theorem diophantine1_8_8_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 8 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 9 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 9 ^ y,
this is impossible, because it implies that 9 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 10 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 10 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 10 ^ y is impossible.
-/
theorem diophantine1_8_8_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 10 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 11 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 11 ^ y,
this is impossible, because it implies that 11 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 11 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 12 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 12 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 12 ^ y is impossible.
-/
theorem diophantine1_8_8_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 12 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 13 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 13 ^ y,
this is impossible, because it implies that 13 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 13 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 14 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 14 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 14 ^ y is impossible.
-/
theorem diophantine1_8_8_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 14 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 15 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 15 ^ y,
this is impossible, because it implies that 15 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 15 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 15 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 16 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 16 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_8_8_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 16 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 16 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 17 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 17 ^ y,
this is impossible, because it implies that 17 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 17 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 18 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 18 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 18 ^ y is impossible.
-/
theorem diophantine1_8_8_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 18 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 19 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 19 ^ y,
this is impossible, because it implies that 19 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 19 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 20 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 20 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 20 ^ y is impossible.
-/
theorem diophantine1_8_8_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 20 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 21 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 21 ^ y,
this is impossible, because it implies that 21 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 21 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 21 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 22 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 22 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 22 ^ y is impossible.
-/
theorem diophantine1_8_8_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 22 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 23 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 23 ^ y,
this is impossible, because it implies that 23 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 23 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 24 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 24 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 24 ^ y is impossible.
-/
theorem diophantine1_8_8_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 24 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 25 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 25 ^ y,
this is impossible, because it implies that 25 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 25 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 26 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 26 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 26 ^ y is impossible.
-/
theorem diophantine1_8_8_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 26 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 27 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 27 ^ y,
this is impossible, because it implies that 27 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 27 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 28 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 28 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 28 ^ y is impossible.
-/
theorem diophantine1_8_8_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 28 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 29 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 29 ^ y,
this is impossible, because it implies that 29 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 29 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 30 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 30 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 30 ^ y is impossible.
-/
theorem diophantine1_8_8_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 30 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 31 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 31 ^ y,
this is impossible, because it implies that 31 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 31 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 32 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 32 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 32 ^ y is impossible.
-/
theorem diophantine1_8_8_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 32 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 33 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 33 ^ y,
this is impossible, because it implies that 33 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 33 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 34 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 34 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 34 ^ y is impossible.
-/
theorem diophantine1_8_8_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 34 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 35 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 35 ^ y,
this is impossible, because it implies that 35 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 35 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 35 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 36 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 36 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 36 ^ y is impossible.
-/
theorem diophantine1_8_8_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 36 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 37 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 37 ^ y,
this is impossible, because it implies that 37 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 37 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 38 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 38 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 38 ^ y is impossible.
-/
theorem diophantine1_8_8_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 38 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 39 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 39 ^ y,
this is impossible, because it implies that 39 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 39 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 40 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 40 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 40 ^ y is impossible.
-/
theorem diophantine1_8_8_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 40 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 41 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 41 ^ y,
this is impossible, because it implies that 41 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 41 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 42 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 42 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 42 ^ y is impossible.
-/
theorem diophantine1_8_8_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 42 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 43 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 43 ^ y,
this is impossible, because it implies that 43 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 43 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 44 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 44 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 44 ^ y is impossible.
-/
theorem diophantine1_8_8_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 44 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 45 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 45 ^ y,
this is impossible, because it implies that 45 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 45 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 45 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 46 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 46 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 46 ^ y is impossible.
-/
theorem diophantine1_8_8_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 46 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 47 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 47 ^ y,
this is impossible, because it implies that 47 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 47 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 48 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 48 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 48 ^ y is impossible.
-/
theorem diophantine1_8_8_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 48 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 49 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 49 ^ y,
this is impossible, because it implies that 49 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 49 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 50 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 50 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 50 ^ y is impossible.
-/
theorem diophantine1_8_8_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 50 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 51 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 51 ^ y,
this is impossible, because it implies that 51 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 51 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 52 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 52 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 52 ^ y is impossible.
-/
theorem diophantine1_8_8_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 52 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 53 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 53 ^ y,
this is impossible, because it implies that 53 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 53 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 54 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 54 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 54 ^ y is impossible.
-/
theorem diophantine1_8_8_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 54 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 55 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 55 ^ y,
this is impossible, because it implies that 55 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 55 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 56 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 56 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 56 ^ y is impossible.
-/
theorem diophantine1_8_8_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 56 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 57 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 57 ^ y,
this is impossible, because it implies that 57 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 57 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 57 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 58 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 58 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 58 ^ y is impossible.
-/
theorem diophantine1_8_8_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 58 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 59 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 59 ^ y,
this is impossible, because it implies that 59 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 59 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 60 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 60 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 60 ^ y is impossible.
-/
theorem diophantine1_8_8_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 60 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 61 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 61 ^ y,
this is impossible, because it implies that 61 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 61 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 62 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 62 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 62 ^ y is impossible.
-/
theorem diophantine1_8_8_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 62 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 63 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 63 ^ y,
this is impossible, because it implies that 63 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 63 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 63 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 64 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 64 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 64 ^ y is impossible.
-/
theorem diophantine1_8_8_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 64 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 65 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 65 ^ y,
this is impossible, because it implies that 65 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 65 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 65 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 66 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 66 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 66 ^ y is impossible.
-/
theorem diophantine1_8_8_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 66 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 67 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 67 ^ y,
this is impossible, because it implies that 67 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 67 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 68 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 68 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 68 ^ y is impossible.
-/
theorem diophantine1_8_8_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 68 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 69 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 69 ^ y,
this is impossible, because it implies that 69 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 69 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 69 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 70 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 70 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 70 ^ y is impossible.
-/
theorem diophantine1_8_8_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 70 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 71 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 71 ^ y,
this is impossible, because it implies that 71 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 71 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 72 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 72 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_8_8_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 72 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 72 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 73 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 73 ^ y,
this is impossible, because it implies that 73 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 73 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 74 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 74 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 74 ^ y is impossible.
-/
theorem diophantine1_8_8_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 74 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 75 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 75 ^ y,
this is impossible, because it implies that 75 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 75 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 75 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 76 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 76 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 76 ^ y is impossible.
-/
theorem diophantine1_8_8_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 76 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 77 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 77 ^ y,
this is impossible, because it implies that 77 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 77 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 78 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 78 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 78 ^ y is impossible.
-/
theorem diophantine1_8_8_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 78 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 79 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 79 ^ y,
this is impossible, because it implies that 79 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 79 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 80 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 80 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 80 ^ y is impossible.
-/
theorem diophantine1_8_8_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 80 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 81 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 81 ^ y,
this is impossible, because it implies that 81 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 81 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 82 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 82 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 82 ^ y is impossible.
-/
theorem diophantine1_8_8_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 82 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 83 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 83 ^ y,
this is impossible, because it implies that 83 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 83 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 84 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 84 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 84 ^ y is impossible.
-/
theorem diophantine1_8_8_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 84 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 85 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 85 ^ y,
this is impossible, because it implies that 85 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 85 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 86 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 86 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 86 ^ y is impossible.
-/
theorem diophantine1_8_8_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 86 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 87 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 87 ^ y,
this is impossible, because it implies that 87 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 87 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 87 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 88 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 88 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 88 ^ y is impossible.
-/
theorem diophantine1_8_8_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 88 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 89 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 89 ^ y,
this is impossible, because it implies that 89 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 89 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 90 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 90 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 90 ^ y is impossible.
-/
theorem diophantine1_8_8_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 90 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 91 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 91 ^ y,
this is impossible, because it implies that 91 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 91 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 92 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 92 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 92 ^ y is impossible.
-/
theorem diophantine1_8_8_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 92 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 93 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 93 ^ y,
this is impossible, because it implies that 93 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 93 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 93 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 94 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 94 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 94 ^ y is impossible.
-/
theorem diophantine1_8_8_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 94 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 95 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 95 ^ y,
this is impossible, because it implies that 95 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 95 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 96 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 96 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 96 ^ y is impossible.
-/
theorem diophantine1_8_8_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 96 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 97 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 97 ^ y,
this is impossible, because it implies that 97 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 97 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 98 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 98 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 98 ^ y is impossible.
-/
theorem diophantine1_8_8_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 98 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 99 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 99 ^ y,
this is impossible, because it implies that 99 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 99 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 99 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 100 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 100 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 100 ^ y is impossible.
-/
theorem diophantine1_8_8_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 100 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 101 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 101 ^ y,
this is impossible, because it implies that 101 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 101 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 102 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 102 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 102 ^ y is impossible.
-/
theorem diophantine1_8_8_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 102 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 103 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 103 ^ y,
this is impossible, because it implies that 103 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 103 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 104 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 104 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 104 ^ y is impossible.
-/
theorem diophantine1_8_8_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 104 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 105 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 105 ^ y,
this is impossible, because it implies that 105 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 105 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 105 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 106 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 106 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 106 ^ y is impossible.
-/
theorem diophantine1_8_8_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 106 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 107 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 107 ^ y,
this is impossible, because it implies that 107 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 107 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 108 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 108 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 108 ^ y is impossible.
-/
theorem diophantine1_8_8_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 108 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 109 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 109 ^ y,
this is impossible, because it implies that 109 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 109 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 110 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 110 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 110 ^ y is impossible.
-/
theorem diophantine1_8_8_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 110 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 111 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 111 ^ y,
this is impossible, because it implies that 111 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 111 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 111 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 112 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 112 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 112 ^ y is impossible.
-/
theorem diophantine1_8_8_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 112 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 113 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 113 ^ y,
this is impossible, because it implies that 113 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 113 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 114 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 114 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 114 ^ y is impossible.
-/
theorem diophantine1_8_8_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 114 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 115 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 115 ^ y,
this is impossible, because it implies that 115 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 115 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 115 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 116 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 116 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 116 ^ y is impossible.
-/
theorem diophantine1_8_8_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 116 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 117 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 117 ^ y,
this is impossible, because it implies that 117 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 117 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 117 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 118 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 118 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 118 ^ y is impossible.
-/
theorem diophantine1_8_8_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 118 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 119 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 119 ^ y,
this is impossible, because it implies that 119 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 119 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 119 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 120 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 120 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 120 ^ y is impossible.
-/
theorem diophantine1_8_8_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 120 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 121 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 121 ^ y,
this is impossible, because it implies that 121 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 121 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 122 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 122 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 122 ^ y is impossible.
-/
theorem diophantine1_8_8_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 122 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 123 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 123 ^ y,
this is impossible, because it implies that 123 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 123 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 123 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 124 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 124 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 124 ^ y is impossible.
-/
theorem diophantine1_8_8_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 124 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 125 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 125 ^ y,
this is impossible, because it implies that 125 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 125 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 125 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 126 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 126 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 126 ^ y is impossible.
-/
theorem diophantine1_8_8_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (126 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 126 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 127 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 127 ^ y,
this is impossible, because it implies that 127 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 127 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 128 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 128 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 128 ^ y is impossible.
-/
theorem diophantine1_8_8_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (128 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 128 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 129 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 129 ^ y,
this is impossible, because it implies that 129 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 129 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 129 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 130 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 130 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 130 ^ y is impossible.
-/
theorem diophantine1_8_8_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (130 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 130 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 131 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 131 ^ y,
this is impossible, because it implies that 131 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 131 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 132 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 132 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 132 ^ y is impossible.
-/
theorem diophantine1_8_8_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (132 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 132 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 133 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 133 ^ y,
this is impossible, because it implies that 133 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 133 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 133 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 134 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 134 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 134 ^ y is impossible.
-/
theorem diophantine1_8_8_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (134 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 134 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 135 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 135 ^ y,
this is impossible, because it implies that 135 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 135 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 135 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 136 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 136 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 136 ^ y is impossible.
-/
theorem diophantine1_8_8_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (136 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 136 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 137 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 137 ^ y,
this is impossible, because it implies that 137 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 137 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 138 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 138 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 138 ^ y is impossible.
-/
theorem diophantine1_8_8_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (138 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 138 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 139 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 139 ^ y,
this is impossible, because it implies that 139 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 139 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 140 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 140 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 140 ^ y is impossible.
-/
theorem diophantine1_8_8_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (140 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 140 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 141 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 141 ^ y,
this is impossible, because it implies that 141 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 141 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 141 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 142 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 142 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 142 ^ y is impossible.
-/
theorem diophantine1_8_8_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (142 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 142 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 143 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 143 ^ y,
this is impossible, because it implies that 143 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 143 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 143 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 144 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 144 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 144 ^ y is impossible.
-/
theorem diophantine1_8_8_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (144 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 144 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 145 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 145 ^ y,
this is impossible, because it implies that 145 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 145 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 145 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 146 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 146 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 146 ^ y is impossible.
-/
theorem diophantine1_8_8_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (146 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 146 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 147 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 147 ^ y,
this is impossible, because it implies that 147 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 147 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 147 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 148 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 148 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 148 ^ y is impossible.
-/
theorem diophantine1_8_8_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (148 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 148 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 149 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 149 ^ y,
this is impossible, because it implies that 149 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 149 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 150 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 150 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 150 ^ y is impossible.
-/
theorem diophantine1_8_8_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (150 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 150 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 151 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 151 ^ y,
this is impossible, because it implies that 151 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 151 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 152 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 152 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 152 ^ y is impossible.
-/
theorem diophantine1_8_8_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (152 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 152 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 153 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 153 ^ y,
this is impossible, because it implies that 153 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 153 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 153 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 154 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 154 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 154 ^ y is impossible.
-/
theorem diophantine1_8_8_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (154 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 154 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 155 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 155 ^ y,
this is impossible, because it implies that 155 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 155 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 155 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 156 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 156 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 156 ^ y is impossible.
-/
theorem diophantine1_8_8_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (156 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 156 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 157 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 157 ^ y,
this is impossible, because it implies that 157 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 157 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 158 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 158 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 158 ^ y is impossible.
-/
theorem diophantine1_8_8_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (158 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 158 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 159 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 159 ^ y,
this is impossible, because it implies that 159 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 159 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 159 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 160 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 160 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 160 ^ y is impossible.
-/
theorem diophantine1_8_8_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (160 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 160 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 161 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 161 ^ y,
this is impossible, because it implies that 161 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 161 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 161 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 162 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 162 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 162 ^ y is impossible.
-/
theorem diophantine1_8_8_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (162 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 162 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 163 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 163 ^ y,
this is impossible, because it implies that 163 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 163 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 164 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 164 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 164 ^ y is impossible.
-/
theorem diophantine1_8_8_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (164 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 164 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 165 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 165 ^ y,
this is impossible, because it implies that 165 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 165 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 165 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 166 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 166 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 166 ^ y is impossible.
-/
theorem diophantine1_8_8_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (166 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 166 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 167 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 167 ^ y,
this is impossible, because it implies that 167 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 167 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 168 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 168 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 168 ^ y is impossible.
-/
theorem diophantine1_8_8_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (168 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 168 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 169 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 169 ^ y,
this is impossible, because it implies that 169 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 169 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 170 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 170 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 170 ^ y is impossible.
-/
theorem diophantine1_8_8_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (170 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 170 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 171 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 171 ^ y,
this is impossible, because it implies that 171 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 171 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 171 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 172 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 172 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 172 ^ y is impossible.
-/
theorem diophantine1_8_8_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (172 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 172 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 173 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 173 ^ y,
this is impossible, because it implies that 173 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 173 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 174 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 174 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 174 ^ y is impossible.
-/
theorem diophantine1_8_8_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (174 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 174 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 175 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 175 ^ y,
this is impossible, because it implies that 175 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 175 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 175 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 176 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 176 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 176 ^ y is impossible.
-/
theorem diophantine1_8_8_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (176 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 176 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 177 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 177 ^ y,
this is impossible, because it implies that 177 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 177 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 177 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 178 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 178 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 178 ^ y is impossible.
-/
theorem diophantine1_8_8_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (178 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 178 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 179 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 179 ^ y,
this is impossible, because it implies that 179 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 179 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 180 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 180 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 180 ^ y is impossible.
-/
theorem diophantine1_8_8_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (180 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 180 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 181 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 181 ^ y,
this is impossible, because it implies that 181 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 181 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 182 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 182 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 182 ^ y is impossible.
-/
theorem diophantine1_8_8_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (182 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 182 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 183 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 183 ^ y,
this is impossible, because it implies that 183 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 183 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 183 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 184 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 184 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 184 ^ y is impossible.
-/
theorem diophantine1_8_8_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (184 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 184 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 185 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 185 ^ y,
this is impossible, because it implies that 185 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 185 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 185 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 186 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 186 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 186 ^ y is impossible.
-/
theorem diophantine1_8_8_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (186 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 186 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 187 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 187 ^ y,
this is impossible, because it implies that 187 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 187 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 187 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 188 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 188 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 188 ^ y is impossible.
-/
theorem diophantine1_8_8_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (188 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 188 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 189 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 189 ^ y,
this is impossible, because it implies that 189 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 189 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 189 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 190 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 190 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 190 ^ y is impossible.
-/
theorem diophantine1_8_8_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (190 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 190 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 191 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 191 ^ y,
this is impossible, because it implies that 191 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 191 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 192 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 192 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 192 ^ y is impossible.
-/
theorem diophantine1_8_8_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (192 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 192 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 193 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 193 ^ y,
this is impossible, because it implies that 193 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 193 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 194 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 194 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 194 ^ y is impossible.
-/
theorem diophantine1_8_8_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (194 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 194 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 195 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 195 ^ y,
this is impossible, because it implies that 195 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 195 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 195 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 196 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 196 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 196 ^ y is impossible.
-/
theorem diophantine1_8_8_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (196 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 196 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 197 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 197 ^ y,
this is impossible, because it implies that 197 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 197 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 198 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 198 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 198 ^ y is impossible.
-/
theorem diophantine1_8_8_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (198 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 198 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 199 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 199 ^ y,
this is impossible, because it implies that 199 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 199 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 200 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 200 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 200 ^ y is impossible.
-/
theorem diophantine1_8_8_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (200 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 200 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 201 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 201 ^ y,
this is impossible, because it implies that 201 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 201 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 201 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 202 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 202 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 202 ^ y is impossible.
-/
theorem diophantine1_8_8_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (202 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 202 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 203 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 203 ^ y,
this is impossible, because it implies that 203 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 203 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 204 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 204 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 204 ^ y is impossible.
-/
theorem diophantine1_8_8_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (204 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 204 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 205 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 205 ^ y,
this is impossible, because it implies that 205 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 205 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 205 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 206 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 206 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 206 ^ y is impossible.
-/
theorem diophantine1_8_8_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (206 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 206 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 207 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 207 ^ y,
this is impossible, because it implies that 207 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 207 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 207 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 208 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 208 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 208 ^ y is impossible.
-/
theorem diophantine1_8_8_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (208 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 208 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 209 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 209 ^ y,
this is impossible, because it implies that 209 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 209 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 209 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 210 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 210 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 210 ^ y is impossible.
-/
theorem diophantine1_8_8_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (210 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 210 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 211 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 211 ^ y,
this is impossible, because it implies that 211 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 211 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 212 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 212 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 212 ^ y is impossible.
-/
theorem diophantine1_8_8_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (212 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 212 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 213 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 213 ^ y,
this is impossible, because it implies that 213 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 213 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 213 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 214 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 214 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 214 ^ y is impossible.
-/
theorem diophantine1_8_8_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (214 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 214 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 215 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 215 ^ y,
this is impossible, because it implies that 215 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 215 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 215 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 216 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 216 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 216 ^ y is impossible.
-/
theorem diophantine1_8_8_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (216 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 216 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 217 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 217 ^ y,
this is impossible, because it implies that 217 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 217 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 218 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 218 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 218 ^ y is impossible.
-/
theorem diophantine1_8_8_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (218 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 218 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 219 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 219 ^ y,
this is impossible, because it implies that 219 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 219 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 219 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 220 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 220 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 220 ^ y is impossible.
-/
theorem diophantine1_8_8_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (220 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 220 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 221 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 221 ^ y,
this is impossible, because it implies that 221 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 221 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 221 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 222 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 222 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 222 ^ y is impossible.
-/
theorem diophantine1_8_8_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (222 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 222 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 223 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 223 ^ y,
this is impossible, because it implies that 223 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 223 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 224 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 224 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 224 ^ y is impossible.
-/
theorem diophantine1_8_8_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (224 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 224 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 225 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 225 ^ y,
this is impossible, because it implies that 225 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 225 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 225 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 226 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 226 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 226 ^ y is impossible.
-/
theorem diophantine1_8_8_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (226 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 226 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 227 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 227 ^ y,
this is impossible, because it implies that 227 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 227 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 228 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 228 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 228 ^ y is impossible.
-/
theorem diophantine1_8_8_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (228 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 228 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 229 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 229 ^ y,
this is impossible, because it implies that 229 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 229 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 230 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 230 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 230 ^ y is impossible.
-/
theorem diophantine1_8_8_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (230 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 230 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 231 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 231 ^ y,
this is impossible, because it implies that 231 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 231 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 231 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 232 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 232 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 232 ^ y is impossible.
-/
theorem diophantine1_8_8_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (232 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 232 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 233 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 233 ^ y,
this is impossible, because it implies that 233 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 233 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 234 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 234 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 234 ^ y is impossible.
-/
theorem diophantine1_8_8_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (234 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 234 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 235 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 235 ^ y,
this is impossible, because it implies that 235 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 235 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 235 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 236 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 236 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 236 ^ y is impossible.
-/
theorem diophantine1_8_8_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (236 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 236 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 237 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 237 ^ y,
this is impossible, because it implies that 237 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 237 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 237 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 238 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 238 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 238 ^ y is impossible.
-/
theorem diophantine1_8_8_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (238 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 238 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 239 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 239 ^ y,
this is impossible, because it implies that 239 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 239 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 240 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 240 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 240 ^ y is impossible.
-/
theorem diophantine1_8_8_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (240 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 240 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 241 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 241 ^ y,
this is impossible, because it implies that 241 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 241 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 242 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 242 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 242 ^ y is impossible.
-/
theorem diophantine1_8_8_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (242 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 242 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 243 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 243 ^ y,
this is impossible, because it implies that 243 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 243 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 243 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 244 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 244 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 244 ^ y is impossible.
-/
theorem diophantine1_8_8_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (244 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 244 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 245 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 245 ^ y,
this is impossible, because it implies that 245 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 245 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 245 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 246 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 246 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 246 ^ y is impossible.
-/
theorem diophantine1_8_8_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (246 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 246 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 247 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 247 ^ y,
this is impossible, because it implies that 247 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 247 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 248 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 248 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 248 ^ y is impossible.
-/
theorem diophantine1_8_8_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (248 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 248 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 249 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 249 ^ y,
this is impossible, because it implies that 249 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 249 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 249 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 250 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 250 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 250 ^ y is impossible.
-/
theorem diophantine1_8_8_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (250 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 250 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 251 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 251 ^ y,
this is impossible, because it implies that 251 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 251 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 252 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 252 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 252 ^ y is impossible.
-/
theorem diophantine1_8_8_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (252 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 252 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 253 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 253 ^ y,
this is impossible, because it implies that 253 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 253 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 253 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 254 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 254 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 254 ^ y is impossible.
-/
theorem diophantine1_8_8_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (254 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 254 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 255 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 255 ^ y,
this is impossible, because it implies that 255 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 255 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 255 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 256 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 256 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 256 ^ y is impossible.
-/
theorem diophantine1_8_8_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (256 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 256 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 257 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 257 ^ y,
this is impossible, because it implies that 257 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 257 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 258 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 258 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 258 ^ y is impossible.
-/
theorem diophantine1_8_8_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (258 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 258 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 259 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 259 ^ y,
this is impossible, because it implies that 259 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 259 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 259 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 260 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 260 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 260 ^ y is impossible.
-/
theorem diophantine1_8_8_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (260 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 260 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 261 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 261 ^ y,
this is impossible, because it implies that 261 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 261 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 261 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 262 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 262 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 262 ^ y is impossible.
-/
theorem diophantine1_8_8_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (262 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 262 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 263 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 263 ^ y,
this is impossible, because it implies that 263 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 263 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 264 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 264 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 264 ^ y is impossible.
-/
theorem diophantine1_8_8_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (264 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 264 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 265 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 265 ^ y,
this is impossible, because it implies that 265 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 265 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 265 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 266 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 266 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 266 ^ y is impossible.
-/
theorem diophantine1_8_8_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (266 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 266 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 267 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 267 ^ y,
this is impossible, because it implies that 267 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 267 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 267 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 268 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 268 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 268 ^ y is impossible.
-/
theorem diophantine1_8_8_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (268 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 268 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 269 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 269 ^ y,
this is impossible, because it implies that 269 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 269 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 270 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 270 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 270 ^ y is impossible.
-/
theorem diophantine1_8_8_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (270 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 270 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 271 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 271 ^ y,
this is impossible, because it implies that 271 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 271 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 272 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 272 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 272 ^ y is impossible.
-/
theorem diophantine1_8_8_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (272 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 272 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 273 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 273 ^ y,
this is impossible, because it implies that 273 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 273 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 273 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 274 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 274 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 274 ^ y is impossible.
-/
theorem diophantine1_8_8_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (274 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 274 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 275 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 275 ^ y,
this is impossible, because it implies that 275 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 275 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 275 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 276 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 276 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 276 ^ y is impossible.
-/
theorem diophantine1_8_8_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (276 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 276 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 277 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 277 ^ y,
this is impossible, because it implies that 277 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 277 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 278 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 278 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 278 ^ y is impossible.
-/
theorem diophantine1_8_8_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (278 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 278 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 279 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 279 ^ y,
this is impossible, because it implies that 279 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 279 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 279 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 280 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 280 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 280 ^ y is impossible.
-/
theorem diophantine1_8_8_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (280 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 280 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 281 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 281 ^ y,
this is impossible, because it implies that 281 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 281 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 282 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 282 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 282 ^ y is impossible.
-/
theorem diophantine1_8_8_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (282 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 282 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 283 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 283 ^ y,
this is impossible, because it implies that 283 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 283 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 284 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 284 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 284 ^ y is impossible.
-/
theorem diophantine1_8_8_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (284 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 284 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 285 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 285 ^ y,
this is impossible, because it implies that 285 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 285 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 285 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 286 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 286 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 286 ^ y is impossible.
-/
theorem diophantine1_8_8_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (286 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 286 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 287 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 287 ^ y,
this is impossible, because it implies that 287 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 287 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 287 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 288 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 288 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 288 ^ y is impossible.
-/
theorem diophantine1_8_8_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (288 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 288 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 289 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 289 ^ y,
this is impossible, because it implies that 289 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 289 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 289 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 290 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 290 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 290 ^ y is impossible.
-/
theorem diophantine1_8_8_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (290 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 290 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 291 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 291 ^ y,
this is impossible, because it implies that 291 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 291 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 291 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 292 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 292 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 292 ^ y is impossible.
-/
theorem diophantine1_8_8_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (292 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 292 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 293 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 293 ^ y,
this is impossible, because it implies that 293 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 293 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 294 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 294 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 294 ^ y is impossible.
-/
theorem diophantine1_8_8_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (294 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 294 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 295 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 295 ^ y,
this is impossible, because it implies that 295 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 295 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 295 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 296 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 296 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 296 ^ y is impossible.
-/
theorem diophantine1_8_8_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (296 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 296 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 297 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 297 ^ y,
this is impossible, because it implies that 297 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 297 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 297 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 298 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 298 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 298 ^ y is impossible.
-/
theorem diophantine1_8_8_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (298 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 298 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 299 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 299 ^ y,
this is impossible, because it implies that 299 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 299 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 299 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 300 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 300 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 300 ^ y is impossible.
-/
theorem diophantine1_8_8_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (300 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 300 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 301 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 301 ^ y,
this is impossible, because it implies that 301 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 301 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 301 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 302 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 302 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 302 ^ y is impossible.
-/
theorem diophantine1_8_8_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (302 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 302 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 303 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 303 ^ y,
this is impossible, because it implies that 303 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 303 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 303 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 304 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 304 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 304 ^ y is impossible.
-/
theorem diophantine1_8_8_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (304 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 304 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 305 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 305 ^ y,
this is impossible, because it implies that 305 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 305 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 305 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 306 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 306 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 306 ^ y is impossible.
-/
theorem diophantine1_8_8_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (306 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 306 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 307 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 307 ^ y,
this is impossible, because it implies that 307 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 307 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 308 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 308 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 308 ^ y is impossible.
-/
theorem diophantine1_8_8_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (308 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 308 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 309 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 309 ^ y,
this is impossible, because it implies that 309 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 309 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 309 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 310 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 310 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 310 ^ y is impossible.
-/
theorem diophantine1_8_8_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (310 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 310 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 311 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 311 ^ y,
this is impossible, because it implies that 311 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 311 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 312 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 312 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 312 ^ y is impossible.
-/
theorem diophantine1_8_8_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (312 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 312 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 313 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 313 ^ y,
this is impossible, because it implies that 313 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 313 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 314 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 314 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 314 ^ y is impossible.
-/
theorem diophantine1_8_8_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (314 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 314 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 315 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 315 ^ y,
this is impossible, because it implies that 315 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 315 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 315 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 316 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 316 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 316 ^ y is impossible.
-/
theorem diophantine1_8_8_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (316 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 316 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 317 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 317 ^ y,
this is impossible, because it implies that 317 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 317 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 318 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 318 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 318 ^ y is impossible.
-/
theorem diophantine1_8_8_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (318 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 318 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 319 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 319 ^ y,
this is impossible, because it implies that 319 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 319 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 319 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 320 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 320 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 320 ^ y is impossible.
-/
theorem diophantine1_8_8_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (320 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 320 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 321 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 321 ^ y,
this is impossible, because it implies that 321 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 321 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 321 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 322 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 322 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 322 ^ y is impossible.
-/
theorem diophantine1_8_8_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (322 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 322 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 323 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 323 ^ y,
this is impossible, because it implies that 323 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 323 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 323 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 324 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 324 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 324 ^ y is impossible.
-/
theorem diophantine1_8_8_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (324 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 324 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 325 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 325 ^ y,
this is impossible, because it implies that 325 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 325 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 325 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 326 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 326 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 326 ^ y is impossible.
-/
theorem diophantine1_8_8_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (326 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 326 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 327 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 327 ^ y,
this is impossible, because it implies that 327 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 327 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 327 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 328 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 328 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 328 ^ y is impossible.
-/
theorem diophantine1_8_8_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (328 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 328 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 329 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 329 ^ y,
this is impossible, because it implies that 329 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 329 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 329 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 330 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 330 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 330 ^ y is impossible.
-/
theorem diophantine1_8_8_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (330 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 330 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 331 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 331 ^ y,
this is impossible, because it implies that 331 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 331 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 332 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 332 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 332 ^ y is impossible.
-/
theorem diophantine1_8_8_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (332 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 332 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 333 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 333 ^ y,
this is impossible, because it implies that 333 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 333 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 333 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 334 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 334 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 334 ^ y is impossible.
-/
theorem diophantine1_8_8_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (334 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 334 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 335 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 335 ^ y,
this is impossible, because it implies that 335 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 335 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 335 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 336 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 336 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 336 ^ y is impossible.
-/
theorem diophantine1_8_8_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (336 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 336 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 337 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 337 ^ y,
this is impossible, because it implies that 337 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 337 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 338 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 338 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 338 ^ y is impossible.
-/
theorem diophantine1_8_8_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (338 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 338 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 339 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 339 ^ y,
this is impossible, because it implies that 339 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 339 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 339 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 340 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 340 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 340 ^ y is impossible.
-/
theorem diophantine1_8_8_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (340 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 340 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 341 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 341 ^ y,
this is impossible, because it implies that 341 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 341 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 341 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 342 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 342 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 342 ^ y is impossible.
-/
theorem diophantine1_8_8_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (342 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 342 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 343 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 343 ^ y,
this is impossible, because it implies that 343 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 343 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 343 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 344 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 344 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 344 ^ y is impossible.
-/
theorem diophantine1_8_8_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (344 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 344 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 345 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 345 ^ y,
this is impossible, because it implies that 345 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 345 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 345 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 346 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 346 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 346 ^ y is impossible.
-/
theorem diophantine1_8_8_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (346 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 346 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 347 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 347 ^ y,
this is impossible, because it implies that 347 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 347 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 348 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 348 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 348 ^ y is impossible.
-/
theorem diophantine1_8_8_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (348 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 348 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 349 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 349 ^ y,
this is impossible, because it implies that 349 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 349 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 350 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 350 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 350 ^ y is impossible.
-/
theorem diophantine1_8_8_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (350 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 350 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 351 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 351 ^ y,
this is impossible, because it implies that 351 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 351 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 351 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 352 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 352 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 352 ^ y is impossible.
-/
theorem diophantine1_8_8_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (352 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 352 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 353 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 353 ^ y,
this is impossible, because it implies that 353 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 353 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 354 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 354 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 354 ^ y is impossible.
-/
theorem diophantine1_8_8_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (354 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 354 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 355 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 355 ^ y,
this is impossible, because it implies that 355 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 355 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 355 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 356 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 356 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 356 ^ y is impossible.
-/
theorem diophantine1_8_8_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (356 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 356 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 357 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 357 ^ y,
this is impossible, because it implies that 357 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 357 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 357 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 358 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 358 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 358 ^ y is impossible.
-/
theorem diophantine1_8_8_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (358 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 358 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 359 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 359 ^ y,
this is impossible, because it implies that 359 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 359 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 360 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 360 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 360 ^ y is impossible.
-/
theorem diophantine1_8_8_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (360 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 360 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 361 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 361 ^ y,
this is impossible, because it implies that 361 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 361 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 361 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 362 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 362 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 362 ^ y is impossible.
-/
theorem diophantine1_8_8_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (362 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 362 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 363 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 363 ^ y,
this is impossible, because it implies that 363 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 363 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 363 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 364 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 364 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 364 ^ y is impossible.
-/
theorem diophantine1_8_8_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (364 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 364 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 365 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 365 ^ y,
this is impossible, because it implies that 365 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 365 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 365 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 366 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 366 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 366 ^ y is impossible.
-/
theorem diophantine1_8_8_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (366 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 366 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 367 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 367 ^ y,
this is impossible, because it implies that 367 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 367 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 368 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 368 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 368 ^ y is impossible.
-/
theorem diophantine1_8_8_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (368 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 368 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 369 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 369 ^ y,
this is impossible, because it implies that 369 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 369 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 369 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 370 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 370 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 370 ^ y is impossible.
-/
theorem diophantine1_8_8_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (370 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 370 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 371 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 371 ^ y,
this is impossible, because it implies that 371 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 371 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 371 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 372 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 372 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 372 ^ y is impossible.
-/
theorem diophantine1_8_8_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (372 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 372 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 373 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 373 ^ y,
this is impossible, because it implies that 373 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 373 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 374 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 374 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 374 ^ y is impossible.
-/
theorem diophantine1_8_8_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (374 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 374 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 375 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 375 ^ y,
this is impossible, because it implies that 375 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 375 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 375 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 376 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 376 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 376 ^ y is impossible.
-/
theorem diophantine1_8_8_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (376 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 376 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 377 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 377 ^ y,
this is impossible, because it implies that 377 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 377 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 377 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 378 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 378 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 378 ^ y is impossible.
-/
theorem diophantine1_8_8_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (378 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 378 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 379 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 379 ^ y,
this is impossible, because it implies that 379 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 379 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 380 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 380 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 380 ^ y is impossible.
-/
theorem diophantine1_8_8_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (380 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 380 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 381 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 381 ^ y,
this is impossible, because it implies that 381 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 381 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 381 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 382 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 382 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 382 ^ y is impossible.
-/
theorem diophantine1_8_8_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (382 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 382 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 383 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 383 ^ y,
this is impossible, because it implies that 383 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 383 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 384 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 384 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 384 ^ y is impossible.
-/
theorem diophantine1_8_8_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (384 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 384 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 385 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 385 ^ y,
this is impossible, because it implies that 385 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 385 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 385 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 386 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 386 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 386 ^ y is impossible.
-/
theorem diophantine1_8_8_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (386 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 386 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 387 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 387 ^ y,
this is impossible, because it implies that 387 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 387 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 387 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 388 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 388 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 388 ^ y is impossible.
-/
theorem diophantine1_8_8_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (388 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 388 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 389 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 389 ^ y,
this is impossible, because it implies that 389 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 389 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 390 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 390 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 390 ^ y is impossible.
-/
theorem diophantine1_8_8_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (390 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 390 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 391 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 391 ^ y,
this is impossible, because it implies that 391 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 391 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 391 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 392 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 392 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 392 ^ y is impossible.
-/
theorem diophantine1_8_8_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (392 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 392 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 393 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 393 ^ y,
this is impossible, because it implies that 393 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 393 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 393 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 394 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 394 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 394 ^ y is impossible.
-/
theorem diophantine1_8_8_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (394 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 394 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 395 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 395 ^ y,
this is impossible, because it implies that 395 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 395 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 395 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 396 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 396 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 396 ^ y is impossible.
-/
theorem diophantine1_8_8_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (396 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 396 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 397 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 397 ^ y,
this is impossible, because it implies that 397 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 397 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 398 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 398 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 398 ^ y is impossible.
-/
theorem diophantine1_8_8_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (398 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 398 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 399 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 399 ^ y,
this is impossible, because it implies that 399 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 399 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 399 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 400 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 400 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 400 ^ y is impossible.
-/
theorem diophantine1_8_8_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (400 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 400 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 401 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 401 ^ y,
this is impossible, because it implies that 401 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 401 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 402 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 402 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 402 ^ y is impossible.
-/
theorem diophantine1_8_8_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (402 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 402 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 403 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 403 ^ y,
this is impossible, because it implies that 403 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 403 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 403 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 404 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 404 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 404 ^ y is impossible.
-/
theorem diophantine1_8_8_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (404 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 404 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 405 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 405 ^ y,
this is impossible, because it implies that 405 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 405 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 405 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 406 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 406 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 406 ^ y is impossible.
-/
theorem diophantine1_8_8_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (406 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 406 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 407 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 407 ^ y,
this is impossible, because it implies that 407 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 407 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 407 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 408 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 408 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 408 ^ y is impossible.
-/
theorem diophantine1_8_8_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (408 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 408 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 409 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 409 ^ y,
this is impossible, because it implies that 409 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 409 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 410 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 410 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 410 ^ y is impossible.
-/
theorem diophantine1_8_8_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (410 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 410 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 411 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 411 ^ y,
this is impossible, because it implies that 411 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 411 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 411 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 412 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 412 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 412 ^ y is impossible.
-/
theorem diophantine1_8_8_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (412 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 412 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 413 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 413 ^ y,
this is impossible, because it implies that 413 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 413 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 413 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 414 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 414 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 414 ^ y is impossible.
-/
theorem diophantine1_8_8_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (414 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 414 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 415 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 415 ^ y,
this is impossible, because it implies that 415 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 415 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 415 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 416 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 416 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 416 ^ y is impossible.
-/
theorem diophantine1_8_8_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (416 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 416 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 417 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 417 ^ y,
this is impossible, because it implies that 417 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 417 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 417 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 418 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 418 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 418 ^ y is impossible.
-/
theorem diophantine1_8_8_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (418 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 418 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 419 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 419 ^ y,
this is impossible, because it implies that 419 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 419 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 420 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 420 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 420 ^ y is impossible.
-/
theorem diophantine1_8_8_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (420 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 420 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 421 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 421 ^ y,
this is impossible, because it implies that 421 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 421 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 422 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 422 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 422 ^ y is impossible.
-/
theorem diophantine1_8_8_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (422 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 422 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 423 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 423 ^ y,
this is impossible, because it implies that 423 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 423 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 423 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 424 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 424 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 424 ^ y is impossible.
-/
theorem diophantine1_8_8_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (424 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 424 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 425 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 425 ^ y,
this is impossible, because it implies that 425 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 425 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 425 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 426 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 426 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 426 ^ y is impossible.
-/
theorem diophantine1_8_8_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (426 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 426 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 427 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 427 ^ y,
this is impossible, because it implies that 427 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 427 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 427 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 428 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 428 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 428 ^ y is impossible.
-/
theorem diophantine1_8_8_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (428 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 428 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 429 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 429 ^ y,
this is impossible, because it implies that 429 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 429 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 429 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 430 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 430 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 430 ^ y is impossible.
-/
theorem diophantine1_8_8_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (430 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 430 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 431 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 431 ^ y,
this is impossible, because it implies that 431 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 431 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 432 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 432 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 432 ^ y is impossible.
-/
theorem diophantine1_8_8_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (432 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 432 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 433 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 433 ^ y,
this is impossible, because it implies that 433 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 433 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 434 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 434 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 434 ^ y is impossible.
-/
theorem diophantine1_8_8_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (434 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 434 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 435 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 435 ^ y,
this is impossible, because it implies that 435 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 435 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 435 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 436 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 436 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 436 ^ y is impossible.
-/
theorem diophantine1_8_8_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (436 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 436 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 437 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 437 ^ y,
this is impossible, because it implies that 437 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 437 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 437 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 438 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 438 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 438 ^ y is impossible.
-/
theorem diophantine1_8_8_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (438 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 438 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 439 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 439 ^ y,
this is impossible, because it implies that 439 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 439 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 440 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 440 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 440 ^ y is impossible.
-/
theorem diophantine1_8_8_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (440 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 440 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 441 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 441 ^ y,
this is impossible, because it implies that 441 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 441 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 441 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 442 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 442 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 442 ^ y is impossible.
-/
theorem diophantine1_8_8_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (442 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 442 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 443 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 443 ^ y,
this is impossible, because it implies that 443 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 443 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 444 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 444 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 444 ^ y is impossible.
-/
theorem diophantine1_8_8_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (444 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 444 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 445 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 445 ^ y,
this is impossible, because it implies that 445 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 445 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 445 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 446 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 446 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 446 ^ y is impossible.
-/
theorem diophantine1_8_8_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (446 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 446 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 447 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 447 ^ y,
this is impossible, because it implies that 447 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 447 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 447 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 448 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 448 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 448 ^ y is impossible.
-/
theorem diophantine1_8_8_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (448 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 448 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 449 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 449 ^ y,
this is impossible, because it implies that 449 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 449 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 450 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 450 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 450 ^ y is impossible.
-/
theorem diophantine1_8_8_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (450 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 450 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 451 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 451 ^ y,
this is impossible, because it implies that 451 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 451 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 451 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 452 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 452 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 452 ^ y is impossible.
-/
theorem diophantine1_8_8_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (452 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 452 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 453 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 453 ^ y,
this is impossible, because it implies that 453 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 453 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 453 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 454 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 454 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 454 ^ y is impossible.
-/
theorem diophantine1_8_8_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (454 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 454 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 455 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 455 ^ y,
this is impossible, because it implies that 455 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 455 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 455 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 456 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 456 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 456 ^ y is impossible.
-/
theorem diophantine1_8_8_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (456 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 456 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 457 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 457 ^ y,
this is impossible, because it implies that 457 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 457 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 458 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 458 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 458 ^ y is impossible.
-/
theorem diophantine1_8_8_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (458 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 458 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 459 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 459 ^ y,
this is impossible, because it implies that 459 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 459 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 459 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 460 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 460 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 460 ^ y is impossible.
-/
theorem diophantine1_8_8_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (460 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 460 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 461 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 461 ^ y,
this is impossible, because it implies that 461 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 461 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 462 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 462 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 462 ^ y is impossible.
-/
theorem diophantine1_8_8_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (462 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 462 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 463 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 463 ^ y,
this is impossible, because it implies that 463 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 463 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 464 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 464 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 464 ^ y is impossible.
-/
theorem diophantine1_8_8_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (464 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 464 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 465 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 465 ^ y,
this is impossible, because it implies that 465 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 465 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 465 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 466 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 466 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 466 ^ y is impossible.
-/
theorem diophantine1_8_8_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (466 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 466 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 467 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 467 ^ y,
this is impossible, because it implies that 467 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 467 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 468 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 468 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 468 ^ y is impossible.
-/
theorem diophantine1_8_8_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (468 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 468 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 469 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 469 ^ y,
this is impossible, because it implies that 469 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 469 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 469 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 470 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 470 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 470 ^ y is impossible.
-/
theorem diophantine1_8_8_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (470 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 470 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 471 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 471 ^ y,
this is impossible, because it implies that 471 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 471 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 471 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 472 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 472 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 472 ^ y is impossible.
-/
theorem diophantine1_8_8_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (472 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 472 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 473 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 473 ^ y,
this is impossible, because it implies that 473 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 473 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 473 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 474 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 474 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 474 ^ y is impossible.
-/
theorem diophantine1_8_8_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (474 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 474 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 475 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 475 ^ y,
this is impossible, because it implies that 475 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 475 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 475 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 476 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 476 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 476 ^ y is impossible.
-/
theorem diophantine1_8_8_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (476 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 476 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 477 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 477 ^ y,
this is impossible, because it implies that 477 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 477 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 477 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 478 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 478 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 478 ^ y is impossible.
-/
theorem diophantine1_8_8_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (478 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 478 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 479 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 479 ^ y,
this is impossible, because it implies that 479 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 479 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 480 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 480 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 480 ^ y is impossible.
-/
theorem diophantine1_8_8_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (480 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 480 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 481 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 481 ^ y,
this is impossible, because it implies that 481 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 481 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 481 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 482 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 482 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 482 ^ y is impossible.
-/
theorem diophantine1_8_8_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (482 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 482 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 483 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 483 ^ y,
this is impossible, because it implies that 483 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 483 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 483 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 484 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 484 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 484 ^ y is impossible.
-/
theorem diophantine1_8_8_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (484 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 484 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 485 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 485 ^ y,
this is impossible, because it implies that 485 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 485 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 485 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 486 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 486 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 486 ^ y is impossible.
-/
theorem diophantine1_8_8_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (486 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 486 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 487 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 487 ^ y,
this is impossible, because it implies that 487 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 487 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 488 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 488 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 488 ^ y is impossible.
-/
theorem diophantine1_8_8_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (488 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 488 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 489 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 489 ^ y,
this is impossible, because it implies that 489 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 489 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 489 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 490 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 490 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 490 ^ y is impossible.
-/
theorem diophantine1_8_8_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (490 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 490 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 491 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 491 ^ y,
this is impossible, because it implies that 491 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 491 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 492 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 492 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 492 ^ y is impossible.
-/
theorem diophantine1_8_8_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (492 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 492 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 493 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 493 ^ y,
this is impossible, because it implies that 493 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 493 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 493 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 494 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 494 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 494 ^ y is impossible.
-/
theorem diophantine1_8_8_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (494 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 494 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 495 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 495 ^ y,
this is impossible, because it implies that 495 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 495 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 495 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 496 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 496 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 64), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 496 ^ y is impossible.
-/
theorem diophantine1_8_8_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (496 ^ y % 64 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 496 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 497 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 497 ^ y,
this is impossible, because it implies that 497 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 497 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 497 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 498 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 498 ^ y,
if x >= 4 and y >= 4,
8 = 0 (mod 16), which is impossible.
Therefore, x < 4 or y < 4.
Further examination shows that 8 ^ x + 8 = 498 ^ y is impossible.
-/
theorem diophantine1_8_8_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 4) (y >= 4)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (498 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 3) (y <= 3) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 498 ^ y, proof := h3},
    {prop := Or (x <= 3) (y <= 3), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   8 ^ x + 8 = 499 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 499 ^ y,
this is impossible, because it implies that 499 ^ y = 0 (mod 8).
-/
theorem diophantine1_8_8_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ x % 8 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 499 ^ y % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   8 ^ x + 8 = 500 ^ y
For positive integers x, y satisfying 8 ^ x + 8 = 500 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 16), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 8 ^ x + 8 = 500 ^ y is impossible.
-/
theorem diophantine1_8_8_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 8 ^ x + 8 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (8 ^ x % 16 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (500 ^ y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 8 ^ x + 8 = 500 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
