-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 9 <= a <= 9
-- 2 <= b <= 2
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   9 ^ x + 2 = 2 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 2 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 3 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 3 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 3 ^ y is impossible.
-/
theorem diophantine1_9_2_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 3 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 4 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 4 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 5 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 5 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 5 ^ y is impossible.
-/
theorem diophantine1_9_2_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (5 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 5 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 6 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 6 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 7 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 7 ^ y,
if x >= 1, 7 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 7 ^ y is impossible.
-/
theorem diophantine1_9_2_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 7 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 8 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 8 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 9 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 9 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 9 ^ y is impossible.
-/
theorem diophantine1_9_2_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 9 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 10 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 10 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 73)   9 ^ x + 2 = 11 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 11 ^ y,
if x >= 3, 11 ^ y = 2 (mod 27).
So y = 7 (mod 18), 
which implies y = 7, 25, 43, 61 (mod 72).
Therefore, 11 ^ y = 40, 15, 33, 58 (mod 73).
So 9 ^ x = 38, 13, 31, 56 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_9_2_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 73) [40, 15, 33, 58]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 73) [38, 13, 31, 56]) [
    {prop := List.Mem (11 ^ y % 73) [40, 15, 33, 58], proof := h10},
    {prop := 9 ^ x + 2 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 73) [38, 13, 31, 56], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 11 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 12 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 12 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 13 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 13 ^ y,
if x >= 1, 13 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 13 ^ y is impossible.
-/
theorem diophantine1_9_2_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 13 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 14 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 14 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 15 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 15 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 15 ^ y is impossible.
-/
theorem diophantine1_9_2_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 15 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 16 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 16 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 17 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 17 ^ y,
if x >= 2, 17 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 17 ^ y is impossible.
-/
theorem diophantine1_9_2_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 18 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 18 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 19 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 19 ^ y,
if x >= 1, 19 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 19 ^ y is impossible.
-/
theorem diophantine1_9_2_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 19 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 20 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 20 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 21 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 21 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 21 ^ y is impossible.
-/
theorem diophantine1_9_2_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 21 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 22 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 22 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 23 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 23 ^ y,
if y >= 1, 9 ^ x = 21 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 23 ^ y is impossible.
-/
theorem diophantine1_9_2_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 23 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 23 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 24 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 24 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 25 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 25 ^ y,
if x >= 1, 25 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 25 ^ y is impossible.
-/
theorem diophantine1_9_2_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 25 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 25 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 26 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 26 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 27 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 27 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 27 ^ y is impossible.
-/
theorem diophantine1_9_2_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 27 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 28 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 28 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 2 = 29 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 29 ^ y,
if x >= 3, 29 ^ y = 2 (mod 27).
So y = 1 (mod 18), 
Therefore, 29 ^ y = 10 (mod 19).
So 9 ^ x = 8 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 29 ^ y is impossible.
-/
theorem diophantine1_9_2_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 19) [10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [8]) [
    {prop := List.Mem (29 ^ y % 19) [10], proof := h10},
    {prop := 9 ^ x + 2 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 30 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 30 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 31 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 31 ^ y,
if x >= 1, 31 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 31 ^ y is impossible.
-/
theorem diophantine1_9_2_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 31 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 31 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 32 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 32 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 33 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 33 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 33 ^ y is impossible.
-/
theorem diophantine1_9_2_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 33 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 34 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 34 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 35 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 35 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 35 ^ y is impossible.
-/
theorem diophantine1_9_2_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 36 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 36 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 37 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 37 ^ y,
if x >= 1, 37 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 37 ^ y is impossible.
-/
theorem diophantine1_9_2_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 37 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 38 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 38 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 39 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 39 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 39 ^ y is impossible.
-/
theorem diophantine1_9_2_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 39 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 40 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 40 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 73)   9 ^ x + 2 = 41 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 41 ^ y,
if x >= 3, 41 ^ y = 2 (mod 27).
So y = 17 (mod 18), 
Therefore, 41 ^ y = 57 (mod 73).
So 9 ^ x = 55 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 41 ^ y is impossible.
-/
theorem diophantine1_9_2_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 73) [57]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 73) [55]) [
    {prop := List.Mem (41 ^ y % 73) [57], proof := h10},
    {prop := 9 ^ x + 2 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 73) [55], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 42 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 42 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 43 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 43 ^ y,
if x >= 1, 43 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 43 ^ y is impossible.
-/
theorem diophantine1_9_2_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 43 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 43 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 44 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 44 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 45 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 45 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 45 ^ y is impossible.
-/
theorem diophantine1_9_2_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 46 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 46 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 2 = 47 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 47 ^ y,
if x >= 3, 47 ^ y = 2 (mod 27).
So y = 13 (mod 18), 
which implies y = 1 (mod 3).
Therefore, 47 ^ y = 10 (mod 37).
So 9 ^ x = 8 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 47 ^ y is impossible.
-/
theorem diophantine1_9_2_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 37) [10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [8]) [
    {prop := List.Mem (47 ^ y % 37) [10], proof := h10},
    {prop := 9 ^ x + 2 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 48 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 48 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 49 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 49 ^ y,
if x >= 1, 49 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 49 ^ y is impossible.
-/
theorem diophantine1_9_2_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 49 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 49 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 50 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 50 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 51 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 51 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 51 ^ y is impossible.
-/
theorem diophantine1_9_2_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 51 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 52 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 52 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 53 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 53 ^ y,
if x >= 2, 53 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 53 ^ y is impossible.
-/
theorem diophantine1_9_2_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 54 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 54 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 55 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 55 ^ y,
if x >= 1, 55 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 55 ^ y is impossible.
-/
theorem diophantine1_9_2_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 55 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 55 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 56 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 56 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 57 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 57 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 57 ^ y is impossible.
-/
theorem diophantine1_9_2_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 57 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 58 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 58 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 2 = 59 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 59 ^ y,
if x >= 3, 59 ^ y = 2 (mod 27).
So y = 11 (mod 18), 
Therefore, 59 ^ y = 15 (mod 19).
So 9 ^ x = 13 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 59 ^ y is impossible.
-/
theorem diophantine1_9_2_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 19) [15]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [13]) [
    {prop := List.Mem (59 ^ y % 19) [15], proof := h10},
    {prop := 9 ^ x + 2 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 60 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 60 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 61 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 61 ^ y,
if x >= 1, 61 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 61 ^ y is impossible.
-/
theorem diophantine1_9_2_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 61 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 62 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 62 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 63 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 63 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 63 ^ y is impossible.
-/
theorem diophantine1_9_2_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 63 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 64 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 64 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 65 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 65 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 65 ^ y is impossible.
-/
theorem diophantine1_9_2_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 66 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 66 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 67 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 67 ^ y,
if x >= 1, 67 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 67 ^ y is impossible.
-/
theorem diophantine1_9_2_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 67 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 68 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 68 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 69 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 69 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 69 ^ y is impossible.
-/
theorem diophantine1_9_2_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 69 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 70 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 70 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 71 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 71 ^ y,
if x >= 2, 71 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 71 ^ y is impossible.
-/
theorem diophantine1_9_2_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 71 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 71 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 72 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 72 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 73 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 73 ^ y,
if x >= 1, 73 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 73 ^ y is impossible.
-/
theorem diophantine1_9_2_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 73 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 74 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 74 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 75 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 75 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 75 ^ y is impossible.
-/
theorem diophantine1_9_2_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 75 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 76 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 76 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 77 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 77 ^ y,
if y >= 1, 9 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 77 ^ y is impossible.
-/
theorem diophantine1_9_2_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 78 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 78 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 79 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 79 ^ y,
if x >= 1, 79 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 79 ^ y is impossible.
-/
theorem diophantine1_9_2_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 79 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 80 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 80 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 81 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 81 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 81 ^ y is impossible.
-/
theorem diophantine1_9_2_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 81 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 82 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 82 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove x >= 5 with prime factor 3 of 9 ...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   9 ^ x + 2 = 83 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 83 ^ y,
if x >= 5, 83 ^ y = 2 (mod 243).
So y = 55 (mod 162), 
which implies y = 55 (mod 81).
Therefore, 83 ^ y = 156 (mod 163).
So 9 ^ x = 154 (mod 163), but this is impossible.
Therefore, x < 5.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_9_2_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 83 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (9 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 243 = 2 := by omega
  have h9 := Claim (y % 162 = 55) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 243 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 163) [156]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 162 = 55, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 163) [154]) [
    {prop := List.Mem (83 ^ y % 163) [156], proof := h10},
    {prop := 9 ^ x + 2 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 163) [154], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 83 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 84 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 84 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 85 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 85 ^ y,
if x >= 1, 85 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 85 ^ y is impossible.
-/
theorem diophantine1_9_2_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 85 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 85 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 86 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 86 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 87 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 87 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 87 ^ y is impossible.
-/
theorem diophantine1_9_2_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 87 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 88 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 88 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 89 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 89 ^ y,
if x >= 2, 89 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 89 ^ y is impossible.
-/
theorem diophantine1_9_2_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 90 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 90 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 91 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 91 ^ y,
if x >= 1, 91 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 91 ^ y is impossible.
-/
theorem diophantine1_9_2_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 91 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 91 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 92 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 92 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 93 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 93 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 93 ^ y is impossible.
-/
theorem diophantine1_9_2_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 93 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 94 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 94 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 95 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 95 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 95 ^ y is impossible.
-/
theorem diophantine1_9_2_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 96 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 96 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 97 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 97 ^ y,
if x >= 1, 97 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 97 ^ y is impossible.
-/
theorem diophantine1_9_2_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 97 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 98 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 98 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 99 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 99 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 99 ^ y is impossible.
-/
theorem diophantine1_9_2_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 99 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 100 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 100 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 2 = 101 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 101 ^ y,
if x >= 3, 101 ^ y = 2 (mod 27).
So y = 13 (mod 18), 
which implies y = 4 (mod 9).
Therefore, 101 ^ y = 4 (mod 19).
So 9 ^ x = 2 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 101 ^ y is impossible.
-/
theorem diophantine1_9_2_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 19) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [2]) [
    {prop := List.Mem (101 ^ y % 19) [4], proof := h10},
    {prop := 9 ^ x + 2 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 102 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 102 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 103 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 103 ^ y,
if x >= 1, 103 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 103 ^ y is impossible.
-/
theorem diophantine1_9_2_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 103 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 104 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 104 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (104 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 105 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 105 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 105 ^ y is impossible.
-/
theorem diophantine1_9_2_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 105 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 106 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 106 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 107 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 107 ^ y,
if x >= 2, 107 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 107 ^ y is impossible.
-/
theorem diophantine1_9_2_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 108 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 108 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 109 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 109 ^ y,
if x >= 1, 109 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 109 ^ y is impossible.
-/
theorem diophantine1_9_2_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 109 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 110 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 110 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (110 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 111 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 111 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 111 ^ y is impossible.
-/
theorem diophantine1_9_2_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 111 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 112 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 112 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (112 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 2 = 113 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 113 ^ y,
if x >= 3, 113 ^ y = 2 (mod 27).
So y = 11 (mod 18), 
which implies y = 11, 29 (mod 36).
Therefore, 113 ^ y = 13, 24 (mod 37).
So 9 ^ x = 11, 22 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 113 ^ y is impossible.
-/
theorem diophantine1_9_2_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 37) [13, 24]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [11, 22]) [
    {prop := List.Mem (113 ^ y % 37) [13, 24], proof := h10},
    {prop := 9 ^ x + 2 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [11, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 114 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 114 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 115 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 115 ^ y,
if x >= 1, 115 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 115 ^ y is impossible.
-/
theorem diophantine1_9_2_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 115 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 115 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 115 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 116 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 116 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (116 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 117 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 117 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 117 ^ y is impossible.
-/
theorem diophantine1_9_2_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (117 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 117 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 118 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 118 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 119 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 119 ^ y,
if y >= 1, 9 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 119 ^ y is impossible.
-/
theorem diophantine1_9_2_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 120 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 120 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 121 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 121 ^ y,
if x >= 1, 121 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 121 ^ y is impossible.
-/
theorem diophantine1_9_2_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 121 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 122 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 122 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 123 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 123 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 123 ^ y is impossible.
-/
theorem diophantine1_9_2_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 123 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 124 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 124 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (124 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 125 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 125 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 125 ^ y is impossible.
-/
theorem diophantine1_9_2_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (125 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 125 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 126 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 126 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 127 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 127 ^ y,
if x >= 1, 127 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 127 ^ y is impossible.
-/
theorem diophantine1_9_2_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 127 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 127 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 127 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 128 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 128 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (128 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 129 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 129 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 129 ^ y is impossible.
-/
theorem diophantine1_9_2_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 129 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 130 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 130 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (130 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 73)   9 ^ x + 2 = 131 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 131 ^ y,
if x >= 3, 131 ^ y = 2 (mod 27).
So y = 5 (mod 18), 
which implies y = 5, 23, 41, 59 (mod 72).
Therefore, 131 ^ y = 44, 53, 29, 20 (mod 73).
So 9 ^ x = 42, 51, 27, 18 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 131 ^ y is impossible.
-/
theorem diophantine1_9_2_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 73) [44, 53, 29, 20]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 73) [42, 51, 27, 18]) [
    {prop := List.Mem (131 ^ y % 73) [44, 53, 29, 20], proof := h10},
    {prop := 9 ^ x + 2 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 73) [42, 51, 27, 18], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 131 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 132 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 132 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (132 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 133 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 133 ^ y,
if x >= 1, 133 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 133 ^ y is impossible.
-/
theorem diophantine1_9_2_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 133 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 133 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 133 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 134 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 134 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (134 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 135 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 135 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 135 ^ y is impossible.
-/
theorem diophantine1_9_2_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (135 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 135 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 136 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 136 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (136 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 2 = 137 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 137 ^ y,
if x >= 3, 137 ^ y = 2 (mod 27).
So y = 1 (mod 18), 
which implies y = 1 (mod 9).
Therefore, 137 ^ y = 4 (mod 19).
So 9 ^ x = 2 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 137 ^ y is impossible.
-/
theorem diophantine1_9_2_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 19) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [2]) [
    {prop := List.Mem (137 ^ y % 19) [4], proof := h10},
    {prop := 9 ^ x + 2 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 137 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 138 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 138 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (138 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 139 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 139 ^ y,
if x >= 1, 139 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 139 ^ y is impossible.
-/
theorem diophantine1_9_2_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 139 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 140 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 140 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (140 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 141 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 141 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 141 ^ y is impossible.
-/
theorem diophantine1_9_2_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 141 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 142 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 142 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (142 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 143 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 143 ^ y,
if x >= 2, 143 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 143 ^ y is impossible.
-/
theorem diophantine1_9_2_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 143 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 143 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 143 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 144 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 144 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (144 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 145 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 145 ^ y,
if x >= 1, 145 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 145 ^ y is impossible.
-/
theorem diophantine1_9_2_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 145 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 145 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 145 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 146 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 146 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (146 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 147 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 147 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 147 ^ y is impossible.
-/
theorem diophantine1_9_2_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 147 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 148 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 148 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (148 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 73)   9 ^ x + 2 = 149 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 149 ^ y,
if x >= 3, 149 ^ y = 2 (mod 27).
So y = 17 (mod 18), 
which implies y = 5, 11 (mod 12).
Therefore, 149 ^ y = 24, 49 (mod 73).
So 9 ^ x = 22, 47 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 149 ^ y is impossible.
-/
theorem diophantine1_9_2_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 17) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 73) [24, 49]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 73) [22, 47]) [
    {prop := List.Mem (149 ^ y % 73) [24, 49], proof := h10},
    {prop := 9 ^ x + 2 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 73) [22, 47], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 149 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 150 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 150 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 151 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 151 ^ y,
if x >= 1, 151 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 151 ^ y is impossible.
-/
theorem diophantine1_9_2_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 151 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 152 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 152 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (152 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 153 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 153 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 153 ^ y is impossible.
-/
theorem diophantine1_9_2_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (153 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 153 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 154 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 154 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (154 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 155 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 155 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 155 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 155 ^ y is impossible.
-/
theorem diophantine1_9_2_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (155 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 155 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 156 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 156 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (156 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 157 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 157 ^ y,
if x >= 1, 157 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 157 ^ y is impossible.
-/
theorem diophantine1_9_2_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 157 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 158 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 158 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (158 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 159 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 159 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 159 ^ y is impossible.
-/
theorem diophantine1_9_2_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 159 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 160 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 160 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (160 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 161 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 161 ^ y,
if y >= 1, 9 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 161 ^ y is impossible.
-/
theorem diophantine1_9_2_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 162 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 162 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (162 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 163 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 163 ^ y,
if x >= 1, 163 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 163 ^ y is impossible.
-/
theorem diophantine1_9_2_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 163 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 164 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 164 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (164 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 165 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 165 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 165 ^ y is impossible.
-/
theorem diophantine1_9_2_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 165 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 166 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 166 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (166 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 2 = 167 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 167 ^ y,
if x >= 3, 167 ^ y = 2 (mod 27).
So y = 11 (mod 18), 
which implies y = 11, 29 (mod 36).
Therefore, 167 ^ y = 20, 17 (mod 37).
So 9 ^ x = 18, 15 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 167 ^ y is impossible.
-/
theorem diophantine1_9_2_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 11) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 37) [20, 17]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [18, 15]) [
    {prop := List.Mem (167 ^ y % 37) [20, 17], proof := h10},
    {prop := 9 ^ x + 2 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [18, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 167 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 168 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 168 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 169 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 169 ^ y,
if x >= 1, 169 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 169 ^ y is impossible.
-/
theorem diophantine1_9_2_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 169 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 169 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 169 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 170 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 170 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (170 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 171 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 171 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 171 ^ y is impossible.
-/
theorem diophantine1_9_2_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (171 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 171 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 172 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 172 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (172 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 2 = 173 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 173 ^ y,
if x >= 3, 173 ^ y = 2 (mod 27).
So y = 7 (mod 18), 
Therefore, 173 ^ y = 14 (mod 19).
So 9 ^ x = 12 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 173 ^ y is impossible.
-/
theorem diophantine1_9_2_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 19) [14]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [12]) [
    {prop := List.Mem (173 ^ y % 19) [14], proof := h10},
    {prop := 9 ^ x + 2 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 173 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 174 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 174 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (174 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 175 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 175 ^ y,
if x >= 1, 175 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 175 ^ y is impossible.
-/
theorem diophantine1_9_2_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 175 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 175 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 175 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 176 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 176 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (176 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 177 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 177 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 177 ^ y is impossible.
-/
theorem diophantine1_9_2_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 177 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 178 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 178 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (178 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 179 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 179 ^ y,
if x >= 2, 179 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 179 ^ y is impossible.
-/
theorem diophantine1_9_2_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 179 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 180 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 180 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 181 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 181 ^ y,
if x >= 1, 181 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 181 ^ y is impossible.
-/
theorem diophantine1_9_2_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 181 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 182 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 182 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (182 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 183 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 183 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 183 ^ y is impossible.
-/
theorem diophantine1_9_2_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 183 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 184 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 184 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (184 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 185 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 185 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 185 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 185 ^ y is impossible.
-/
theorem diophantine1_9_2_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (185 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 185 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 186 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 186 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (186 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 187 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 187 ^ y,
if x >= 1, 187 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 187 ^ y is impossible.
-/
theorem diophantine1_9_2_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 187 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 187 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 187 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 188 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 188 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (188 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 189 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 189 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 189 ^ y is impossible.
-/
theorem diophantine1_9_2_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (189 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 189 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 190 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 190 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (190 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   9 ^ x + 2 = 191 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 191 ^ y,
if x >= 3, 191 ^ y = 2 (mod 27).
So y = 1 (mod 18), 
which implies y = 1, 3 (mod 4).
Therefore, 191 ^ y = 6, 31 (mod 37).
So 9 ^ x = 4, 29 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 191 ^ y is impossible.
-/
theorem diophantine1_9_2_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 1) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 37) [6, 31]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 1, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 37) [4, 29]) [
    {prop := List.Mem (191 ^ y % 37) [6, 31], proof := h10},
    {prop := 9 ^ x + 2 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 37) [4, 29], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 192 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 192 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (192 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 193 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 193 ^ y,
if x >= 1, 193 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 193 ^ y is impossible.
-/
theorem diophantine1_9_2_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 193 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 194 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 194 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (194 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 195 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 195 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 195 ^ y is impossible.
-/
theorem diophantine1_9_2_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 195 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 196 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 196 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (196 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 197 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 197 ^ y,
if x >= 2, 197 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 197 ^ y is impossible.
-/
theorem diophantine1_9_2_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 198 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 198 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (198 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 199 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 199 ^ y,
if x >= 1, 199 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 199 ^ y is impossible.
-/
theorem diophantine1_9_2_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 199 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 200 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 200 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (200 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 201 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 201 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 201 ^ y is impossible.
-/
theorem diophantine1_9_2_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 201 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 202 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 202 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (202 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 203 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 203 ^ y,
if y >= 1, 9 ^ x = 5 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 203 ^ y is impossible.
-/
theorem diophantine1_9_2_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (203 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 5 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 5, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 203 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 204 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 204 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (204 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 205 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 205 ^ y,
if x >= 1, 205 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 205 ^ y is impossible.
-/
theorem diophantine1_9_2_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 205 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 205 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 205 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 206 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 206 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (206 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 207 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 207 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 207 ^ y is impossible.
-/
theorem diophantine1_9_2_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (207 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 207 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 208 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 208 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (208 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Trying to disprove y >= 1 with prime factor 19 of 209 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 2 = 209 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 209 ^ y,
if x >= 3, 209 ^ y = 2 (mod 27).
So y = 13 (mod 18), 
which implies y = 13, 31, 49 (mod 54).
Therefore, 209 ^ y = 36, 88, 94 (mod 109).
So 9 ^ x = 34, 86, 92 (mod 109), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 209 ^ y is impossible.
-/
theorem diophantine1_9_2_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 209 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 13) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 209 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (209 ^ y % 109) [36, 88, 94]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [34, 86, 92]) [
    {prop := List.Mem (209 ^ y % 109) [36, 88, 94], proof := h10},
    {prop := 9 ^ x + 2 = 209 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [34, 86, 92], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 209 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 210 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 210 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 211 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 211 ^ y,
if x >= 1, 211 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 211 ^ y is impossible.
-/
theorem diophantine1_9_2_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 211 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 212 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 212 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (212 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 213 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 213 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 213 ^ y is impossible.
-/
theorem diophantine1_9_2_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 213 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 214 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 214 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (214 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 215 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 215 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 215 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 215 ^ y is impossible.
-/
theorem diophantine1_9_2_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (215 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 215 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 216 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 216 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (216 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 217 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 217 ^ y,
if x >= 1, 217 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 217 ^ y is impossible.
-/
theorem diophantine1_9_2_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 217 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 217 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 217 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 218 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 218 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (218 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 219 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 219 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 219 ^ y is impossible.
-/
theorem diophantine1_9_2_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 219 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 220 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 220 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (220 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 221 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 221 ^ y,
if y >= 1, 9 ^ x = 11 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 221 ^ y is impossible.
-/
theorem diophantine1_9_2_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 13 = 11 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 13 = 11, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 222 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 222 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (222 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 223 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 223 ^ y,
if x >= 1, 223 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 223 ^ y is impossible.
-/
theorem diophantine1_9_2_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 223 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 224 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 224 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (224 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 225 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 225 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 225 ^ y is impossible.
-/
theorem diophantine1_9_2_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (225 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 225 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 226 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 226 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (226 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 73)   9 ^ x + 2 = 227 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 227 ^ y,
if x >= 3, 227 ^ y = 2 (mod 27).
So y = 7 (mod 18), 
which implies y = 1 (mod 3).
Therefore, 227 ^ y = 8 (mod 73).
So 9 ^ x = 6 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 227 ^ y is impossible.
-/
theorem diophantine1_9_2_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 7) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 73) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 7, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 73) [6]) [
    {prop := List.Mem (227 ^ y % 73) [8], proof := h10},
    {prop := 9 ^ x + 2 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 73) [6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 227 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 228 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 228 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (228 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 229 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 229 ^ y,
if x >= 1, 229 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 229 ^ y is impossible.
-/
theorem diophantine1_9_2_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 229 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 230 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 230 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (230 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 231 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 231 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 231 ^ y is impossible.
-/
theorem diophantine1_9_2_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 231 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 232 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 232 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (232 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 233 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 233 ^ y,
if x >= 2, 233 ^ y = 2 (mod 9).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 9 ^ x + 2 = 233 ^ y is impossible.
-/
theorem diophantine1_9_2_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 9 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 9 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 234 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 234 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (234 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 235 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 235 ^ y,
if x >= 1, 235 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 235 ^ y is impossible.
-/
theorem diophantine1_9_2_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 235 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 235 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 235 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 236 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 236 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (236 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 237 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 237 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 237 ^ y is impossible.
-/
theorem diophantine1_9_2_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 237 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 238 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 238 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (238 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Trying prime 37...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 73)   9 ^ x + 2 = 239 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 239 ^ y,
if x >= 3, 239 ^ y = 2 (mod 27).
So y = 5 (mod 18), 
which implies y = 5, 23, 41, 59 (mod 72).
Therefore, 239 ^ y = 45, 47, 28, 26 (mod 73).
So 9 ^ x = 43, 45, 26, 24 (mod 73), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 2 = 239 ^ y is impossible.
-/
theorem diophantine1_9_2_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 27 = 2 := by omega
  have h9 := Claim (y % 18 = 5) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 27 = 2, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 73) [45, 47, 28, 26]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 73) [43, 45, 26, 24]) [
    {prop := List.Mem (239 ^ y % 73) [45, 47, 28, 26], proof := h10},
    {prop := 9 ^ x + 2 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 73) [43, 45, 26, 24], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 240 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 240 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 241 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 241 ^ y,
if x >= 1, 241 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 241 ^ y is impossible.
-/
theorem diophantine1_9_2_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 241 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 242 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 242 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (242 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 243 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 243 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 243 ^ y is impossible.
-/
theorem diophantine1_9_2_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (243 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 243 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 244 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 244 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (244 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 245 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 2 = 245 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 245 ^ y,
if y >= 1, 9 ^ x = 3 (mod 5).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 2 = 245 ^ y is impossible.
-/
theorem diophantine1_9_2_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (245 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 5 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 5 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 245 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 246 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 246 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (246 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   9 ^ x + 2 = 247 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 247 ^ y,
if x >= 1, 247 ^ y = 2 (mod 3).
However, this is impossible.
Therefore, x < 1.
So 9 ^ x + 2 = 247 ^ y is impossible.
-/
theorem diophantine1_9_2_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 1
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 247 ^ y % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 247 ^ y % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 247 ^ y, proof := h3},
    {prop := x <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 248 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 248 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (248 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 2 = 249 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 249 ^ y,
if x >= 1 and y >= 1,
2 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 2 = 249 ^ y is impossible.
-/
theorem diophantine1_9_2_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 2 = 249 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   9 ^ x + 2 = 250 ^ y
For positive integers x, y satisfying 9 ^ x + 2 = 250 ^ y,
this is impossible, because it implies that 9 ^ x = 0 (mod 2).
-/
theorem diophantine1_9_2_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 2 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (250 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 9 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
