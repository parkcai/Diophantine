-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 3 <= a <= 3
-- 3 <= b <= 3
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type ii)   3 ^ x + 3 = 2 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 2 ^ y,
this is impossible, because it implies that 2 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 2 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 2 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 3 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 3 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 3 ^ y is impossible.
-/
theorem diophantine1_3_3_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 3 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 4 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 4 ^ y,
this is impossible, because it implies that 4 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 4 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 4 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 5 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 5 ^ y,
this is impossible, because it implies that 5 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 5 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 5 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 6 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 6 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_3_3_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 6 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 6 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 7 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 7 ^ y,
this is impossible, because it implies that 7 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 7 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 8 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 8 ^ y,
this is impossible, because it implies that 8 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 8 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 8 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 9 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 9 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 9 ^ y is impossible.
-/
theorem diophantine1_3_3_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 9 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 10 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 10 ^ y,
this is impossible, because it implies that 10 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 10 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 10 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 11 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 11 ^ y,
this is impossible, because it implies that 11 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 11 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 12 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 12 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_3_3_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 12 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 12 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 13 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 13 ^ y,
this is impossible, because it implies that 13 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 13 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 14 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 14 ^ y,
this is impossible, because it implies that 14 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 14 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 14 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 15 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 15 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 15 ^ y is impossible.
-/
theorem diophantine1_3_3_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 15 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 16 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 16 ^ y,
this is impossible, because it implies that 16 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 16 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 16 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 17 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 17 ^ y,
this is impossible, because it implies that 17 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 17 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 18 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 18 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 18 ^ y is impossible.
-/
theorem diophantine1_3_3_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 18 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 19 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 19 ^ y,
this is impossible, because it implies that 19 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 19 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 20 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 20 ^ y,
this is impossible, because it implies that 20 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 20 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 20 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 21 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 21 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 21 ^ y is impossible.
-/
theorem diophantine1_3_3_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 21 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 22 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 22 ^ y,
this is impossible, because it implies that 22 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 22 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 22 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 23 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 23 ^ y,
this is impossible, because it implies that 23 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 23 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 23 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 24 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 24 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 24 ^ y is impossible.
-/
theorem diophantine1_3_3_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 24 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 25 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 25 ^ y,
this is impossible, because it implies that 25 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 25 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 25 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 26 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 26 ^ y,
this is impossible, because it implies that 26 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 26 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 26 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 27 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 27 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 27 ^ y is impossible.
-/
theorem diophantine1_3_3_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 27 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 28 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 28 ^ y,
this is impossible, because it implies that 28 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 28 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 28 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 29 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 29 ^ y,
this is impossible, because it implies that 29 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 29 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 30 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 30 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_3_3_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 30 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 30 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 31 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 31 ^ y,
this is impossible, because it implies that 31 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 31 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 31 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 32 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 32 ^ y,
this is impossible, because it implies that 32 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 32 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 32 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 33 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 33 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 33 ^ y is impossible.
-/
theorem diophantine1_3_3_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 33 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 34 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 34 ^ y,
this is impossible, because it implies that 34 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 34 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 34 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 35 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 35 ^ y,
this is impossible, because it implies that 35 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 35 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 35 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 36 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 36 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 36 ^ y is impossible.
-/
theorem diophantine1_3_3_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 36 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 37 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 37 ^ y,
this is impossible, because it implies that 37 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 37 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 38 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 38 ^ y,
this is impossible, because it implies that 38 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 38 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 38 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 39 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 39 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 39 ^ y is impossible.
-/
theorem diophantine1_3_3_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 39 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 40 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 40 ^ y,
this is impossible, because it implies that 40 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 40 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 40 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 41 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 41 ^ y,
this is impossible, because it implies that 41 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 41 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 42 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 42 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 42 ^ y is impossible.
-/
theorem diophantine1_3_3_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 42 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 43 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 43 ^ y,
this is impossible, because it implies that 43 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 43 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 43 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 44 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 44 ^ y,
this is impossible, because it implies that 44 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 44 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 44 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 45 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 45 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 45 ^ y is impossible.
-/
theorem diophantine1_3_3_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 45 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 46 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 46 ^ y,
this is impossible, because it implies that 46 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 46 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 46 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 47 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 47 ^ y,
this is impossible, because it implies that 47 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 47 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 48 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 48 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 48 ^ y is impossible.
-/
theorem diophantine1_3_3_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 48 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 49 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 49 ^ y,
this is impossible, because it implies that 49 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 49 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 49 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 50 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 50 ^ y,
this is impossible, because it implies that 50 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 50 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 50 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 51 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 51 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 51 ^ y is impossible.
-/
theorem diophantine1_3_3_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 51 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 52 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 52 ^ y,
this is impossible, because it implies that 52 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 52 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 52 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 53 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 53 ^ y,
this is impossible, because it implies that 53 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 53 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 54 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 54 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 54 ^ y is impossible.
-/
theorem diophantine1_3_3_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 54 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 55 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 55 ^ y,
this is impossible, because it implies that 55 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 55 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 55 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 56 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 56 ^ y,
this is impossible, because it implies that 56 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 56 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 56 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 57 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 57 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 57 ^ y is impossible.
-/
theorem diophantine1_3_3_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 57 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 58 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 58 ^ y,
this is impossible, because it implies that 58 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 58 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 58 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 59 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 59 ^ y,
this is impossible, because it implies that 59 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 59 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 60 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 60 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 60 ^ y is impossible.
-/
theorem diophantine1_3_3_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 60 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 61 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 61 ^ y,
this is impossible, because it implies that 61 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 61 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 62 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 62 ^ y,
this is impossible, because it implies that 62 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 62 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 62 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 63 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 63 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 63 ^ y is impossible.
-/
theorem diophantine1_3_3_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 63 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 64 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 64 ^ y,
this is impossible, because it implies that 64 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 64 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 64 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 65 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 65 ^ y,
this is impossible, because it implies that 65 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 65 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 65 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 66 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 66 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 66 ^ y is impossible.
-/
theorem diophantine1_3_3_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 66 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 67 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 67 ^ y,
this is impossible, because it implies that 67 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 67 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 68 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 68 ^ y,
this is impossible, because it implies that 68 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 68 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 68 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 69 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 69 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 69 ^ y is impossible.
-/
theorem diophantine1_3_3_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 69 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 70 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 70 ^ y,
this is impossible, because it implies that 70 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 70 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 70 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 71 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 71 ^ y,
this is impossible, because it implies that 71 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 71 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 71 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 72 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 72 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 72 ^ y is impossible.
-/
theorem diophantine1_3_3_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 72 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 73 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 73 ^ y,
this is impossible, because it implies that 73 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 73 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 74 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 74 ^ y,
this is impossible, because it implies that 74 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 74 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 74 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 75 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 75 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 75 ^ y is impossible.
-/
theorem diophantine1_3_3_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 75 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 76 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 76 ^ y,
this is impossible, because it implies that 76 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 76 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 76 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 77 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 77 ^ y,
this is impossible, because it implies that 77 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 77 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 78 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 78 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 78 ^ y is impossible.
-/
theorem diophantine1_3_3_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 78 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 79 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 79 ^ y,
this is impossible, because it implies that 79 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 79 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 80 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 80 ^ y,
this is impossible, because it implies that 80 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 80 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 80 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 81 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 81 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 81 ^ y is impossible.
-/
theorem diophantine1_3_3_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 81 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 82 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 82 ^ y,
this is impossible, because it implies that 82 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 82 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 82 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 83 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 83 ^ y,
this is impossible, because it implies that 83 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 83 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 84 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 84 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_3_3_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 84 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 84 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 85 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 85 ^ y,
this is impossible, because it implies that 85 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 85 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 85 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 86 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 86 ^ y,
this is impossible, because it implies that 86 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 86 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 86 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 87 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 87 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 87 ^ y is impossible.
-/
theorem diophantine1_3_3_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 87 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 88 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 88 ^ y,
this is impossible, because it implies that 88 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 88 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 88 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 89 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 89 ^ y,
this is impossible, because it implies that 89 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 89 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 90 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 90 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 90 ^ y is impossible.
-/
theorem diophantine1_3_3_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 90 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 91 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 91 ^ y,
this is impossible, because it implies that 91 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 91 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 91 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 92 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 92 ^ y,
this is impossible, because it implies that 92 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 92 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 92 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 93 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 93 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 93 ^ y is impossible.
-/
theorem diophantine1_3_3_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 93 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 94 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 94 ^ y,
this is impossible, because it implies that 94 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 94 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 94 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 95 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 95 ^ y,
this is impossible, because it implies that 95 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 95 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 95 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 96 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 96 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 96 ^ y is impossible.
-/
theorem diophantine1_3_3_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 96 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 97 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 97 ^ y,
this is impossible, because it implies that 97 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 97 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 98 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 98 ^ y,
this is impossible, because it implies that 98 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 98 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 98 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 3 = 99 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 99 ^ y,
if x >= 2 and y >= 2,
3 = 0 (mod 9), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 3 ^ x + 3 = 99 ^ y is impossible.
-/
theorem diophantine1_3_3_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (3 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 3 = 99 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type ii)   3 ^ x + 3 = 100 ^ y
For positive integers x, y satisfying 3 ^ x + 3 = 100 ^ y,
this is impossible, because it implies that 100 ^ y = 0 (mod 3).
-/
theorem diophantine1_3_3_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 3 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
  ] "pow_mod_eq_zero"
  have h7 : 100 ^ y % 3 = 0 := by omega
  have h8 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 100 ^ y % 3 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
