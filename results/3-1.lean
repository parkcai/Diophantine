-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 3 <= a <= 3
-- 1 <= b <= 1
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


-- Verbose mode on.
-- Trying to disprove y >= 3 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 2 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 2 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (1, 2).
-/
theorem diophantine1_3_1_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 2 ^ y) :
  List.Mem (x, y) [(1, 2)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (2 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 2)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 2 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 3 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 3 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 3 ^ y is impossible.
-/
theorem diophantine1_3_1_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 3 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 4 ...
-- Trying to disprove y >= 3 with prime factor 2 of 4 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 4 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 4 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_3_1_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 4 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (4 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 4 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 5 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 5 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 5 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 5 ^ y is impossible.
-/
theorem diophantine1_3_1_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 5 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (5 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 6 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 6 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 6 ^ y is impossible.
-/
theorem diophantine1_3_1_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 6 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 7 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 7 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 7 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 7 ^ y is impossible.
-/
theorem diophantine1_3_1_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (7 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 7 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (7 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 7 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 8 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 8 ...
-- Trying to disprove y >= 3 with prime factor 2 of 8 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 8 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 8 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 8 ^ y is impossible.
-/
theorem diophantine1_3_1_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (8 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 8 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 9 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 9 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 9 ^ y is impossible.
-/
theorem diophantine1_3_1_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 9 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 10 ...
-- Trying to disprove y >= 3 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 10 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 10 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_3_1_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 10 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (10 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 10 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 11 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 11 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 11 ^ y is impossible.
-/
theorem diophantine1_3_1_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 12 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 12 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 12 ^ y is impossible.
-/
theorem diophantine1_3_1_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 12 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 13 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 13 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 13 ^ y is impossible.
-/
theorem diophantine1_3_1_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 14 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 14 ...
-- Trying to disprove y >= 1 with prime factor 7 of 14 ...
-- Trying to disprove y >= 3 with prime factor 2 of 14 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 14 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 14 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 14 ^ y is impossible.
-/
theorem diophantine1_3_1_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (14 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 14 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 15 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 15 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 15 ^ y is impossible.
-/
theorem diophantine1_3_1_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 15 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 16 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 16 ...
-- Trying to disprove y >= 3 with prime factor 2 of 16 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 16 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 16 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 16 ^ y is impossible.
-/
theorem diophantine1_3_1_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (16 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 16 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 193)   3 ^ x + 1 = 17 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 17 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16).
Therefore, 3 ^ x = 192 (mod 193).
So 17 ^ y = 0 (mod 193), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 17 ^ y is impossible.
-/
theorem diophantine1_3_1_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (17 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 193) [192]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (17 ^ y % 193) [0]) [
    {prop := List.Mem (3 ^ x % 193) [192], proof := h10},
    {prop := 3 ^ x + 1 = 17 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (17 ^ y % 193) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 17 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 18 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 18 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 18 ^ y is impossible.
-/
theorem diophantine1_3_1_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 1 = 19 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 19 ^ y,
if y >= 1, 3 ^ x = 18 (mod 19).
So x = 9 (mod 18).
Therefore, 3 ^ x = 36 (mod 37).
So 19 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 19 ^ y is impossible.
-/
theorem diophantine1_3_1_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (19 ^ y % 37) [0]) [
    {prop := List.Mem (3 ^ x % 37) [36], proof := h10},
    {prop := 3 ^ x + 1 = 19 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (19 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 20 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 20 ...
-- Trying to disprove y >= 1 with prime factor 5 of 20 ...
-- Trying to disprove y >= 3 with prime factor 2 of 20 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 20 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 20 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 20 ^ y is impossible.
-/
theorem diophantine1_3_1_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (20 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 20 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 21 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 21 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 21 ^ y is impossible.
-/
theorem diophantine1_3_1_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 21 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 22 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 22 ...
-- Trying to disprove y >= 3 with prime factor 2 of 22 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 22 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 22 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 22 ^ y is impossible.
-/
theorem diophantine1_3_1_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (22 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 22 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 23 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 23 ^ y,
if y >= 1, 3 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 23 ^ y is impossible.
-/
theorem diophantine1_3_1_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 24 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 24 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 24 ^ y is impossible.
-/
theorem diophantine1_3_1_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 25 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 25 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 25 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 25 ^ y is impossible.
-/
theorem diophantine1_3_1_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 26 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 26 ...
-- Trying to disprove y >= 3 with prime factor 2 of 26 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 26 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 26 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 26 ^ y is impossible.
-/
theorem diophantine1_3_1_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (26 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 26 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 27 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 27 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 27 ^ y is impossible.
-/
theorem diophantine1_3_1_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 27 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 28 ...
-- Trying to disprove y >= 3 with prime factor 2 of 28 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 28 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 28 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_3_1_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 28 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (28 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 28 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 29 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 29 ^ y,
if x >= 3, 29 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 29 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 29 ^ y is impossible.
-/
theorem diophantine1_3_1_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (29 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 30 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 30 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 30 ^ y is impossible.
-/
theorem diophantine1_3_1_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 30 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 31 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 31 ^ y,
if y >= 1, 3 ^ x = 30 (mod 31).
So x = 15 (mod 30), 
which implies x = 5 (mod 10).
Therefore, 3 ^ x = 60 (mod 61).
So 31 ^ y = 0 (mod 61), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 31 ^ y is impossible.
-/
theorem diophantine1_3_1_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 31 = 30 := by omega
  have h9 := Claim (x % 30 = 15) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 31 = 30, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [60]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 30 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (31 ^ y % 61) [0]) [
    {prop := List.Mem (3 ^ x % 61) [60], proof := h10},
    {prop := 3 ^ x + 1 = 31 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (31 ^ y % 61) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 32 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 32 ...
-- Trying to disprove y >= 3 with prime factor 2 of 32 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 32 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 32 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 32 ^ y is impossible.
-/
theorem diophantine1_3_1_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (32 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 32 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 33 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 33 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 33 ^ y is impossible.
-/
theorem diophantine1_3_1_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 33 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 34 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 34 ...
-- Trying to disprove y >= 3 with prime factor 2 of 34 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 34 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 34 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 34 ^ y is impossible.
-/
theorem diophantine1_3_1_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (34 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 34 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Trying to disprove y >= 1 with prime factor 7 of 35 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 35 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 35 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 35 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 35 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 35 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 35 ^ y is impossible.
-/
theorem diophantine1_3_1_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (35 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (35 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 35 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (35 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 35 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 36 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 36 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 36 ^ y is impossible.
-/
theorem diophantine1_3_1_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   3 ^ x + 1 = 37 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 37 ^ y,
if y >= 1, 3 ^ x = 36 (mod 37).
So x = 9 (mod 18).
Therefore, 3 ^ x = 18 (mod 19).
So 37 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 37 ^ y is impossible.
-/
theorem diophantine1_3_1_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 37 = 36 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 37 = 36, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (37 ^ y % 19) [0]) [
    {prop := List.Mem (3 ^ x % 19) [18], proof := h10},
    {prop := 3 ^ x + 1 = 37 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (37 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 38 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 38 ...
-- Trying to disprove y >= 3 with prime factor 2 of 38 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 38 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 38 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 38 ^ y is impossible.
-/
theorem diophantine1_3_1_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (38 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 38 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 39 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 39 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 39 ^ y is impossible.
-/
theorem diophantine1_3_1_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 39 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 40 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 40 ...
-- Trying to disprove y >= 1 with prime factor 5 of 40 ...
-- Trying to disprove y >= 3 with prime factor 2 of 40 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 40 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 40 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 40 ^ y is impossible.
-/
theorem diophantine1_3_1_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (40 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 40 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 41 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 41 ^ y,
if x >= 3, 41 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 41 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 41 ^ y is impossible.
-/
theorem diophantine1_3_1_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (41 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 42 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 42 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 42 ^ y is impossible.
-/
theorem diophantine1_3_1_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Trying prime 127...
-- Trying prime 211...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 211)   3 ^ x + 1 = 43 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 43 ^ y,
if y >= 1, 3 ^ x = 42 (mod 43).
So x = 21 (mod 42), 
which implies x = 21, 63, 105, 147, 189 (mod 210).
Therefore, 3 ^ x = 140, 156, 210, 23, 104 (mod 211).
So 43 ^ y = 141, 157, 0, 24, 105 (mod 211), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 43 ^ y is impossible.
-/
theorem diophantine1_3_1_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 43 = 42 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 43 = 42, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 211) [140, 156, 210, 23, 104]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (43 ^ y % 211) [141, 157, 0, 24, 105]) [
    {prop := List.Mem (3 ^ x % 211) [140, 156, 210, 23, 104], proof := h10},
    {prop := 3 ^ x + 1 = 43 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (43 ^ y % 211) [141, 157, 0, 24, 105], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 44 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 44 ...
-- Trying to disprove y >= 3 with prime factor 2 of 44 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 44 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 44 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 44 ^ y is impossible.
-/
theorem diophantine1_3_1_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (44 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 44 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 45 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 45 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 45 ^ y is impossible.
-/
theorem diophantine1_3_1_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 46 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 46 ...
-- Trying to disprove y >= 3 with prime factor 2 of 46 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 46 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 46 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 46 ^ y is impossible.
-/
theorem diophantine1_3_1_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (46 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 46 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 47 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 47 ^ y,
if x >= 3, 47 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 47 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 47 ^ y is impossible.
-/
theorem diophantine1_3_1_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (47 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 48 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 48 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 48 ^ y is impossible.
-/
theorem diophantine1_3_1_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 49 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 49 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 49 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 49 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 49 ^ y is impossible.
-/
theorem diophantine1_3_1_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (49 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (49 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 49 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (49 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 49 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 50 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 50 ...
-- Trying to disprove y >= 1 with prime factor 5 of 50 ...
-- Trying to disprove y >= 3 with prime factor 2 of 50 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 50 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 50 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 50 ^ y is impossible.
-/
theorem diophantine1_3_1_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (50 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 50 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 51 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 51 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 51 ^ y is impossible.
-/
theorem diophantine1_3_1_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 51 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 52 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 52 ...
-- Trying to disprove y >= 3 with prime factor 2 of 52 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 52 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 52 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 52 ^ y is impossible.
-/
theorem diophantine1_3_1_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (52 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 52 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 53 of 53 ...
-- Trying prime 157...
-- Trying prime 313...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 313)   3 ^ x + 1 = 53 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 53 ^ y,
if y >= 1, 3 ^ x = 52 (mod 53).
So x = 26 (mod 52), 
which implies x = 0, 13, 26 (mod 39).
Therefore, 3 ^ x = 1, 214, 98 (mod 313).
So 53 ^ y = 2, 215, 99 (mod 313), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 53 ^ y is impossible.
-/
theorem diophantine1_3_1_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 53 = 52 := by omega
  have h9 := Claim (x % 52 = 26) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 53 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 313) [1, 214, 98]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 52 = 26, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 313) [2, 215, 99]) [
    {prop := List.Mem (3 ^ x % 313) [1, 214, 98], proof := h10},
    {prop := 3 ^ x + 1 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 313) [2, 215, 99], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 54 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 54 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 54 ^ y is impossible.
-/
theorem diophantine1_3_1_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 55 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 55 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 55 ^ y is impossible.
-/
theorem diophantine1_3_1_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 56 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 56 ...
-- Trying to disprove y >= 1 with prime factor 7 of 56 ...
-- Trying to disprove y >= 3 with prime factor 2 of 56 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 56 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 56 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 56 ^ y is impossible.
-/
theorem diophantine1_3_1_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (56 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 56 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 57 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 57 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 57 ^ y is impossible.
-/
theorem diophantine1_3_1_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 57 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 58 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 58 ...
-- Trying to disprove y >= 3 with prime factor 2 of 58 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 58 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 58 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 58 ^ y is impossible.
-/
theorem diophantine1_3_1_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (58 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 58 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 59 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 59 ^ y,
if x >= 3, 59 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 59 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 59 ^ y is impossible.
-/
theorem diophantine1_3_1_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (59 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 60 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 60 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 60 ^ y is impossible.
-/
theorem diophantine1_3_1_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 60 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   3 ^ x + 1 = 61 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 61 ^ y,
if y >= 1, 3 ^ x = 60 (mod 61).
So x = 5 (mod 10), 
which implies x = 5, 15, 25 (mod 30).
Therefore, 3 ^ x = 26, 30, 6 (mod 31).
So 61 ^ y = 27, 0, 7 (mod 31), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 61 ^ y is impossible.
-/
theorem diophantine1_3_1_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 61 = 60 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 61 = 60, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 31) [26, 30, 6]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 31) [27, 0, 7]) [
    {prop := List.Mem (3 ^ x % 31) [26, 30, 6], proof := h10},
    {prop := 3 ^ x + 1 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 31) [27, 0, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 62 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 62 ...
-- Trying to disprove y >= 3 with prime factor 2 of 62 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 62 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 62 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 62 ^ y is impossible.
-/
theorem diophantine1_3_1_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (62 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 62 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 63 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 63 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 63 ^ y is impossible.
-/
theorem diophantine1_3_1_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 63 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 64 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 64 ...
-- Trying to disprove y >= 3 with prime factor 2 of 64 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 64 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 64 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 64 ^ y is impossible.
-/
theorem diophantine1_3_1_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (64 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 64 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 65 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 65 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 65 ^ y is impossible.
-/
theorem diophantine1_3_1_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 66 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 66 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 66 ^ y is impossible.
-/
theorem diophantine1_3_1_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 66 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Trying prime 23...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying prime 163...
-- Trying prime 487...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 487)   3 ^ x + 1 = 67 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 67 ^ y,
if x >= 5, 67 ^ y = 1 (mod 243).
So y = 0 (mod 81), 
Therefore, 67 ^ y = 1 (mod 487).
So 3 ^ x = 0 (mod 487), but this is impossible.
Therefore, x < 5.
Further examination shows that 3 ^ x + 1 = 67 ^ y is impossible.
-/
theorem diophantine1_3_1_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (3 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 243 = 1 := by omega
  have h9 := Claim (y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 243 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 487) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 81 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 487) [0]) [
    {prop := List.Mem (67 ^ y % 487) [1], proof := h10},
    {prop := 3 ^ x + 1 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 487) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 67 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 68 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 68 ...
-- Trying to disprove y >= 3 with prime factor 2 of 68 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 68 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 68 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 68 ^ y is impossible.
-/
theorem diophantine1_3_1_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (68 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 68 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 69 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 69 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 69 ^ y is impossible.
-/
theorem diophantine1_3_1_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 69 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 70 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 70 ...
-- Trying to disprove y >= 1 with prime factor 5 of 70 ...
-- Trying to disprove y >= 1 with prime factor 7 of 70 ...
-- Trying to disprove y >= 3 with prime factor 2 of 70 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 70 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 70 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 70 ^ y is impossible.
-/
theorem diophantine1_3_1_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (70 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 70 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 71 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 71 ^ y,
if y >= 1, 3 ^ x = 70 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 71 ^ y is impossible.
-/
theorem diophantine1_3_1_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 71 = 70 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 71 = 70, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 72 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 72 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 72 ^ y is impossible.
-/
theorem diophantine1_3_1_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 73 of 73 ...
-- Trying prime 13...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 13)   3 ^ x + 1 = 73 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 73 ^ y,
if y >= 1, 3 ^ x = 72 (mod 73).
So x = 6 (mod 12), 
which implies x = 0 (mod 3).
Therefore, 3 ^ x = 1 (mod 13).
So 73 ^ y = 2 (mod 13), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 73 ^ y is impossible.
-/
theorem diophantine1_3_1_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (73 ^ y % 73 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 73 = 72 := by omega
  have h9 := Claim (x % 12 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 73 = 72, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 13) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (73 ^ y % 13) [2]) [
    {prop := List.Mem (3 ^ x % 13) [1], proof := h10},
    {prop := 3 ^ x + 1 = 73 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (73 ^ y % 13) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 73 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 74 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 74 ...
-- Trying to disprove y >= 3 with prime factor 2 of 74 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 74 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 74 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 74 ^ y is impossible.
-/
theorem diophantine1_3_1_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (74 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 74 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 75 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 75 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 75 ^ y is impossible.
-/
theorem diophantine1_3_1_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 75 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 76 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 76 ...
-- Trying to disprove y >= 3 with prime factor 2 of 76 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 76 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 76 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 76 ^ y is impossible.
-/
theorem diophantine1_3_1_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (76 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 76 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 77 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 77 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 77 ^ y is impossible.
-/
theorem diophantine1_3_1_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 78 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 78 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 78 ^ y is impossible.
-/
theorem diophantine1_3_1_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 78 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 79 of 79 ...
-- Trying prime 157...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 157)   3 ^ x + 1 = 79 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 79 ^ y,
if y >= 1, 3 ^ x = 78 (mod 79).
So x = 39 (mod 78).
Therefore, 3 ^ x = 156 (mod 157).
So 79 ^ y = 0 (mod 157), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 79 ^ y is impossible.
-/
theorem diophantine1_3_1_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (79 ^ y % 79 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 79 = 78 := by omega
  have h9 := Claim (x % 78 = 39) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 79 = 78, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 157) [156]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 78 = 39, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (79 ^ y % 157) [0]) [
    {prop := List.Mem (3 ^ x % 157) [156], proof := h10},
    {prop := 3 ^ x + 1 = 79 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (79 ^ y % 157) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 79 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 80 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 80 ...
-- Trying to disprove y >= 1 with prime factor 5 of 80 ...
-- Trying to disprove y >= 3 with prime factor 2 of 80 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 80 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 80 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 80 ^ y is impossible.
-/
theorem diophantine1_3_1_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (80 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 80 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 81 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 81 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 81 ^ y is impossible.
-/
theorem diophantine1_3_1_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 81 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 82 ...
-- Trying to disprove y >= 3 with prime factor 2 of 82 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 82 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 82 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (4, 1).
-/
theorem diophantine1_3_1_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 82 ^ y) :
  List.Mem (x, y) [(4, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (82 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(4, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 82 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 83 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 83 ^ y,
if x >= 3, 83 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 83 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 83 ^ y is impossible.
-/
theorem diophantine1_3_1_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (83 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 84 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 84 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 84 ^ y is impossible.
-/
theorem diophantine1_3_1_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 1 = 85 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 85 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40 (mod 48).
Therefore, 3 ^ x = 62, 96, 36 (mod 97).
So 85 ^ y = 63, 0, 37 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 85 ^ y is impossible.
-/
theorem diophantine1_3_1_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (85 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [62, 96, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 97) [63, 0, 37]) [
    {prop := List.Mem (3 ^ x % 97) [62, 96, 36], proof := h10},
    {prop := 3 ^ x + 1 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 97) [63, 0, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 85 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 86 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 86 ...
-- Trying to disprove y >= 3 with prime factor 2 of 86 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 86 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 86 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 86 ^ y is impossible.
-/
theorem diophantine1_3_1_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (86 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 86 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 87 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 87 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 87 ^ y is impossible.
-/
theorem diophantine1_3_1_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 87 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 88 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 88 ...
-- Trying to disprove y >= 3 with prime factor 2 of 88 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 88 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 88 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 88 ^ y is impossible.
-/
theorem diophantine1_3_1_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (88 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 88 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 89 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 89 ^ y,
if x >= 4, 89 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
Therefore, 89 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 89 ^ y is impossible.
-/
theorem diophantine1_3_1_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (89 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 89 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 90 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 90 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 90 ^ y is impossible.
-/
theorem diophantine1_3_1_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 90 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 91 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 91 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 91 ^ y is impossible.
-/
theorem diophantine1_3_1_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 92 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 92 ...
-- Trying to disprove y >= 3 with prime factor 2 of 92 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 92 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 92 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 92 ^ y is impossible.
-/
theorem diophantine1_3_1_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (92 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 92 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 93 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 93 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 93 ^ y is impossible.
-/
theorem diophantine1_3_1_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 93 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 94 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 94 ...
-- Trying to disprove y >= 3 with prime factor 2 of 94 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 94 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 94 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 94 ^ y is impossible.
-/
theorem diophantine1_3_1_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (94 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 94 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 19 of 95 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 1 = 95 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 95 ^ y,
if y >= 1, 3 ^ x = 18 (mod 19).
So x = 9 (mod 18).
Therefore, 3 ^ x = 36 (mod 37).
So 95 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 95 ^ y is impossible.
-/
theorem diophantine1_3_1_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (95 ^ y % 37) [0]) [
    {prop := List.Mem (3 ^ x % 37) [36], proof := h10},
    {prop := 3 ^ x + 1 = 95 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (95 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 96 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 96 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 96 ^ y is impossible.
-/
theorem diophantine1_3_1_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 97 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 97 ^ y,
if x >= 4, 97 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 97 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 97 ^ y is impossible.
-/
theorem diophantine1_3_1_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (97 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 98 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 98 ...
-- Trying to disprove y >= 1 with prime factor 7 of 98 ...
-- Trying to disprove y >= 3 with prime factor 2 of 98 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 98 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 98 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 98 ^ y is impossible.
-/
theorem diophantine1_3_1_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (98 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 98 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 99 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 99 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 99 ^ y is impossible.
-/
theorem diophantine1_3_1_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 99 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 100 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 100 ...
-- Trying to disprove y >= 1 with prime factor 5 of 100 ...
-- Trying to disprove y >= 3 with prime factor 2 of 100 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 100 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 100 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 100 ^ y is impossible.
-/
theorem diophantine1_3_1_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (100 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 100 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 101 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 101 ^ y,
if x >= 3, 101 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 101 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 101 ^ y is impossible.
-/
theorem diophantine1_3_1_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (101 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 102 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 102 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 102 ^ y is impossible.
-/
theorem diophantine1_3_1_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 102 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove y >= 1 with prime factor 103 of 103 ...
-- Trying prime 137...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 137)   3 ^ x + 1 = 103 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 103 ^ y,
if y >= 1, 3 ^ x = 102 (mod 103).
So x = 17 (mod 34), 
which implies x = 17, 51, 85, 119 (mod 136).
Therefore, 3 ^ x = 127, 96, 10, 41 (mod 137).
So 103 ^ y = 128, 97, 11, 42 (mod 137), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 103 ^ y is impossible.
-/
theorem diophantine1_3_1_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (103 ^ y % 103 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 103 = 102 := by omega
  have h9 := Claim (x % 34 = 17) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 103 = 102, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 137) [127, 96, 10, 41]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 34 = 17, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (103 ^ y % 137) [128, 97, 11, 42]) [
    {prop := List.Mem (3 ^ x % 137) [127, 96, 10, 41], proof := h10},
    {prop := 3 ^ x + 1 = 103 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (103 ^ y % 137) [128, 97, 11, 42], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 103 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 104 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 104 ...
-- Trying to disprove y >= 3 with prime factor 2 of 104 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 104 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 104 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 104 ^ y is impossible.
-/
theorem diophantine1_3_1_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (104 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 104 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 105 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 105 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 105 ^ y is impossible.
-/
theorem diophantine1_3_1_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 105 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 106 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 106 ...
-- Trying to disprove y >= 3 with prime factor 2 of 106 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 106 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 106 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 106 ^ y is impossible.
-/
theorem diophantine1_3_1_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (106 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 106 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 107 of 107 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 107 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 107 ^ y,
if y >= 1, 3 ^ x = 106 (mod 107).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 107 ^ y is impossible.
-/
theorem diophantine1_3_1_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (107 ^ y % 107 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 107 = 106 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 107 = 106, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 107 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 108 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 108 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 108 ^ y is impossible.
-/
theorem diophantine1_3_1_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 108 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 109 of 109 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 109 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 109 ^ y,
if y >= 1, 3 ^ x = 108 (mod 109).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 109 ^ y is impossible.
-/
theorem diophantine1_3_1_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (109 ^ y % 109 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 109 = 108 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 109 = 108, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 109 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 110 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 110 ...
-- Trying to disprove y >= 1 with prime factor 5 of 110 ...
-- Trying to disprove y >= 3 with prime factor 2 of 110 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 110 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 110 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 110 ^ y is impossible.
-/
theorem diophantine1_3_1_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (110 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 110 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 111 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 111 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 111 ^ y is impossible.
-/
theorem diophantine1_3_1_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 111 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 112 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 112 ...
-- Trying to disprove y >= 1 with prime factor 7 of 112 ...
-- Trying to disprove y >= 3 with prime factor 2 of 112 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 112 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 112 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 112 ^ y is impossible.
-/
theorem diophantine1_3_1_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (112 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 112 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 113 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 113 ^ y,
if x >= 3, 113 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 2).
Therefore, 113 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 113 ^ y is impossible.
-/
theorem diophantine1_3_1_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (113 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 114 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 114 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 114 ^ y is impossible.
-/
theorem diophantine1_3_1_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 114 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 115 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 23 of 115 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 115 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 115 ^ y,
if y >= 1, 3 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 115 ^ y is impossible.
-/
theorem diophantine1_3_1_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 116 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 116 ...
-- Trying to disprove y >= 3 with prime factor 2 of 116 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 116 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 116 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 116 ^ y is impossible.
-/
theorem diophantine1_3_1_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (116 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 116 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 117 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 117 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 117 ^ y is impossible.
-/
theorem diophantine1_3_1_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (117 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 117 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 118 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 118 ...
-- Trying to disprove y >= 3 with prime factor 2 of 118 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 118 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 118 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 118 ^ y is impossible.
-/
theorem diophantine1_3_1_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (118 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 118 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 119 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 1 = 119 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 119 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40 (mod 48).
Therefore, 3 ^ x = 62, 96, 36 (mod 97).
So 119 ^ y = 63, 0, 37 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 119 ^ y is impossible.
-/
theorem diophantine1_3_1_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [62, 96, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (119 ^ y % 97) [63, 0, 37]) [
    {prop := List.Mem (3 ^ x % 97) [62, 96, 36], proof := h10},
    {prop := 3 ^ x + 1 = 119 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (119 ^ y % 97) [63, 0, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 120 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 120 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 120 ^ y is impossible.
-/
theorem diophantine1_3_1_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 120 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 121 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 121 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 121 ^ y is impossible.
-/
theorem diophantine1_3_1_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (121 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 121 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 122 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 122 ...
-- Trying to disprove y >= 3 with prime factor 2 of 122 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 122 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 122 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 122 ^ y is impossible.
-/
theorem diophantine1_3_1_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (122 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 122 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 123 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 123 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 123 ^ y is impossible.
-/
theorem diophantine1_3_1_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 123 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 124 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 124 ...
-- Trying to disprove y >= 3 with prime factor 2 of 124 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 124 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 124 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 124 ^ y is impossible.
-/
theorem diophantine1_3_1_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (124 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 124 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 125 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 125 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 125 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 125 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 125 ^ y is impossible.
-/
theorem diophantine1_3_1_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (125 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 125 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (125 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 125 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 126 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 126 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 126 ^ y is impossible.
-/
theorem diophantine1_3_1_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (126 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 126 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 127 of 127 ...
-- Trying prime 379...
-- Trying prime 631...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 631)   3 ^ x + 1 = 127 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 127 ^ y,
if y >= 1, 3 ^ x = 126 (mod 127).
So x = 63 (mod 126), 
which implies x = 63, 189, 315, 441, 567 (mod 630).
Therefore, 3 ^ x = 403, 352, 630, 389, 119 (mod 631).
So 127 ^ y = 404, 353, 0, 390, 120 (mod 631), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 127 ^ y is impossible.
-/
theorem diophantine1_3_1_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (127 ^ y % 127 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 127 = 126 := by omega
  have h9 := Claim (x % 126 = 63) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 127 = 126, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 631) [403, 352, 630, 389, 119]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 126 = 63, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (127 ^ y % 631) [404, 353, 0, 390, 120]) [
    {prop := List.Mem (3 ^ x % 631) [403, 352, 630, 389, 119], proof := h10},
    {prop := 3 ^ x + 1 = 127 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (127 ^ y % 631) [404, 353, 0, 390, 120], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 127 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 128 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 128 ...
-- Trying to disprove y >= 3 with prime factor 2 of 128 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 128 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 128 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 128 ^ y is impossible.
-/
theorem diophantine1_3_1_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (128 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 128 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 129 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 129 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 129 ^ y is impossible.
-/
theorem diophantine1_3_1_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (129 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 129 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 130 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 130 ...
-- Trying to disprove y >= 1 with prime factor 5 of 130 ...
-- Trying to disprove y >= 3 with prime factor 2 of 130 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 130 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 130 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 130 ^ y is impossible.
-/
theorem diophantine1_3_1_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (130 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 130 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 131 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 131 ^ y,
if x >= 3, 131 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 131 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 131 ^ y is impossible.
-/
theorem diophantine1_3_1_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (131 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 131 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 132 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 132 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 132 ^ y is impossible.
-/
theorem diophantine1_3_1_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (132 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 132 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 133 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 19 of 133 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 1 = 133 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 133 ^ y,
if y >= 1, 3 ^ x = 18 (mod 19).
So x = 9 (mod 18).
Therefore, 3 ^ x = 36 (mod 37).
So 133 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 133 ^ y is impossible.
-/
theorem diophantine1_3_1_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (133 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (133 ^ y % 37) [0]) [
    {prop := List.Mem (3 ^ x % 37) [36], proof := h10},
    {prop := 3 ^ x + 1 = 133 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (133 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 133 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 134 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 134 ...
-- Trying to disprove y >= 3 with prime factor 2 of 134 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 134 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 134 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 134 ^ y is impossible.
-/
theorem diophantine1_3_1_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (134 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 134 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 135 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 135 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 135 ^ y is impossible.
-/
theorem diophantine1_3_1_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (135 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 135 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 136 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 136 ...
-- Trying to disprove y >= 3 with prime factor 2 of 136 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 136 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 136 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 136 ^ y is impossible.
-/
theorem diophantine1_3_1_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (136 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 136 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 137 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 137 ^ y,
if x >= 3, 137 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 137 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 137 ^ y is impossible.
-/
theorem diophantine1_3_1_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (137 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 137 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 138 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 138 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 138 ^ y is impossible.
-/
theorem diophantine1_3_1_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (138 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 138 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 433)   3 ^ x + 1 = 139 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 139 ^ y,
if x >= 4, 139 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 139 ^ y = 1 (mod 433).
So 3 ^ x = 0 (mod 433), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 139 ^ y is impossible.
-/
theorem diophantine1_3_1_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 433) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 433) [0]) [
    {prop := List.Mem (139 ^ y % 433) [1], proof := h10},
    {prop := 3 ^ x + 1 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 433) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 139 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 140 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 140 ...
-- Trying to disprove y >= 1 with prime factor 5 of 140 ...
-- Trying to disprove y >= 1 with prime factor 7 of 140 ...
-- Trying to disprove y >= 3 with prime factor 2 of 140 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 140 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 140 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 140 ^ y is impossible.
-/
theorem diophantine1_3_1_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (140 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 140 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 141 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 141 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 141 ^ y is impossible.
-/
theorem diophantine1_3_1_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (141 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 141 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 142 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 142 ...
-- Trying to disprove y >= 3 with prime factor 2 of 142 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 142 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 142 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 142 ^ y is impossible.
-/
theorem diophantine1_3_1_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (142 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 142 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 143 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 143 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 143 ^ y is impossible.
-/
theorem diophantine1_3_1_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 144 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 144 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 144 ^ y is impossible.
-/
theorem diophantine1_3_1_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (144 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 144 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 145 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 145 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 145 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 145 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 145 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 145 ^ y is impossible.
-/
theorem diophantine1_3_1_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (145 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 145 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (145 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 145 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 146 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 146 ...
-- Trying to disprove y >= 3 with prime factor 2 of 146 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 146 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 146 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 146 ^ y is impossible.
-/
theorem diophantine1_3_1_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (146 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 146 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 147 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 147 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 147 ^ y is impossible.
-/
theorem diophantine1_3_1_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (147 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 147 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 148 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 148 ...
-- Trying to disprove y >= 3 with prime factor 2 of 148 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 148 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 148 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 148 ^ y is impossible.
-/
theorem diophantine1_3_1_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (148 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 148 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 149 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 149 ^ y,
if x >= 3, 149 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 149 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 149 ^ y is impossible.
-/
theorem diophantine1_3_1_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (149 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 149 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 150 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 150 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 150 ^ y is impossible.
-/
theorem diophantine1_3_1_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (150 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 150 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 379)   3 ^ x + 1 = 151 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 151 ^ y,
if x >= 4, 151 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 151 ^ y = 1 (mod 379).
So 3 ^ x = 0 (mod 379), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 151 ^ y is impossible.
-/
theorem diophantine1_3_1_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (151 ^ y % 379) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 379) [0]) [
    {prop := List.Mem (151 ^ y % 379) [1], proof := h10},
    {prop := 3 ^ x + 1 = 151 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 379) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 151 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 152 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 152 ...
-- Trying to disprove y >= 3 with prime factor 2 of 152 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 152 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 152 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 152 ^ y is impossible.
-/
theorem diophantine1_3_1_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (152 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 152 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 153 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 153 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 153 ^ y is impossible.
-/
theorem diophantine1_3_1_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (153 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 153 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 154 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 154 ...
-- Trying to disprove y >= 1 with prime factor 7 of 154 ...
-- Trying to disprove y >= 3 with prime factor 2 of 154 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 154 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 154 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 154 ^ y is impossible.
-/
theorem diophantine1_3_1_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (154 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 154 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 155 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 155 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 1 = 155 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 155 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 2, 6 (mod 8).
Therefore, 3 ^ x = 9, 32 (mod 41).
So 155 ^ y = 10, 33 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 155 ^ y is impossible.
-/
theorem diophantine1_3_1_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [9, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (155 ^ y % 41) [10, 33]) [
    {prop := List.Mem (3 ^ x % 41) [9, 32], proof := h10},
    {prop := 3 ^ x + 1 = 155 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (155 ^ y % 41) [10, 33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 156 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 156 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 156 ^ y is impossible.
-/
theorem diophantine1_3_1_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (156 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 156 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 157 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 157 ^ y,
if x >= 4, 157 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 157 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 157 ^ y is impossible.
-/
theorem diophantine1_3_1_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (157 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 157 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 158 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 158 ...
-- Trying to disprove y >= 3 with prime factor 2 of 158 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 158 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 158 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 158 ^ y is impossible.
-/
theorem diophantine1_3_1_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (158 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 158 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 159 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 159 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 159 ^ y is impossible.
-/
theorem diophantine1_3_1_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (159 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 159 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 160 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 160 ...
-- Trying to disprove y >= 1 with prime factor 5 of 160 ...
-- Trying to disprove y >= 3 with prime factor 2 of 160 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 160 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 160 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 160 ^ y is impossible.
-/
theorem diophantine1_3_1_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (160 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 160 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 161 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 23 of 161 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 161 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 161 ^ y,
if y >= 1, 3 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 161 ^ y is impossible.
-/
theorem diophantine1_3_1_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (161 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 161 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 162 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 162 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 162 ^ y is impossible.
-/
theorem diophantine1_3_1_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (162 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 162 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 163 of 163 ...
-- Trying prime 487...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 487)   3 ^ x + 1 = 163 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 163 ^ y,
if y >= 1, 3 ^ x = 162 (mod 163).
So x = 81 (mod 162), 
which implies x = 81, 243, 405 (mod 486).
Therefore, 3 ^ x = 233, 486, 255 (mod 487).
So 163 ^ y = 234, 0, 256 (mod 487), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 163 ^ y is impossible.
-/
theorem diophantine1_3_1_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (163 ^ y % 163 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 163 = 162 := by omega
  have h9 := Claim (x % 162 = 81) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 163 = 162, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 487) [233, 486, 255]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 162 = 81, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (163 ^ y % 487) [234, 0, 256]) [
    {prop := List.Mem (3 ^ x % 487) [233, 486, 255], proof := h10},
    {prop := 3 ^ x + 1 = 163 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (163 ^ y % 487) [234, 0, 256], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 163 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 164 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 164 ...
-- Trying to disprove y >= 3 with prime factor 2 of 164 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 164 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 164 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 164 ^ y is impossible.
-/
theorem diophantine1_3_1_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (164 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 164 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 165 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 165 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 165 ^ y is impossible.
-/
theorem diophantine1_3_1_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (165 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 165 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 166 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 166 ...
-- Trying to disprove y >= 3 with prime factor 2 of 166 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 166 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 166 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 166 ^ y is impossible.
-/
theorem diophantine1_3_1_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (166 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 166 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 167 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 167 ^ y,
if x >= 3, 167 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 167 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 167 ^ y is impossible.
-/
theorem diophantine1_3_1_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (167 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 167 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 168 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 168 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 168 ^ y is impossible.
-/
theorem diophantine1_3_1_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (168 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 168 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 169 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 169 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 169 ^ y is impossible.
-/
theorem diophantine1_3_1_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 170 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 170 ...
-- Trying to disprove y >= 1 with prime factor 5 of 170 ...
-- Trying to disprove y >= 3 with prime factor 2 of 170 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 170 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 170 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 170 ^ y is impossible.
-/
theorem diophantine1_3_1_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (170 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 170 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 171 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 171 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 171 ^ y is impossible.
-/
theorem diophantine1_3_1_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (171 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 171 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 172 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 172 ...
-- Trying to disprove y >= 3 with prime factor 2 of 172 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 172 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 172 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 172 ^ y is impossible.
-/
theorem diophantine1_3_1_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (172 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 172 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 173 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 173 ^ y,
if x >= 3, 173 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 173 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 173 ^ y is impossible.
-/
theorem diophantine1_3_1_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (173 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 173 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 174 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 174 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 174 ^ y is impossible.
-/
theorem diophantine1_3_1_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (174 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 174 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 175 ...
-- Trying to disprove y >= 1 with prime factor 7 of 175 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 175 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 175 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 175 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 175 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 175 ^ y is impossible.
-/
theorem diophantine1_3_1_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (175 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (175 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 175 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (175 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 175 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 176 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 176 ...
-- Trying to disprove y >= 3 with prime factor 2 of 176 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 176 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 176 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 176 ^ y is impossible.
-/
theorem diophantine1_3_1_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (176 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 176 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 177 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 177 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 177 ^ y is impossible.
-/
theorem diophantine1_3_1_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (177 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 177 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 178 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 178 ...
-- Trying to disprove y >= 3 with prime factor 2 of 178 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 178 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 178 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 178 ^ y is impossible.
-/
theorem diophantine1_3_1_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (178 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 178 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 179 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 179 ^ y,
if x >= 4, 179 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 6).
Therefore, 179 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 179 ^ y is impossible.
-/
theorem diophantine1_3_1_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (179 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 179 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 180 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 180 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 180 ^ y is impossible.
-/
theorem diophantine1_3_1_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (180 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 180 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 181 of 181 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 181 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 181 ^ y,
if y >= 1, 3 ^ x = 180 (mod 181).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 181 ^ y is impossible.
-/
theorem diophantine1_3_1_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (181 ^ y % 181 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 181 = 180 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 181 = 180, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 181 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 182 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 182 ...
-- Trying to disprove y >= 1 with prime factor 7 of 182 ...
-- Trying to disprove y >= 3 with prime factor 2 of 182 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 182 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 182 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 182 ^ y is impossible.
-/
theorem diophantine1_3_1_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (182 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 182 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 183 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 183 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 183 ^ y is impossible.
-/
theorem diophantine1_3_1_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (183 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 183 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 184 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 184 ...
-- Trying to disprove y >= 3 with prime factor 2 of 184 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 184 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 184 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 184 ^ y is impossible.
-/
theorem diophantine1_3_1_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (184 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 184 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 185 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 185 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   3 ^ x + 1 = 185 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 185 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 10, 30, 50, 70, 90 (mod 100).
Therefore, 3 ^ x = 65, 6, 100, 17, 14 (mod 101).
So 185 ^ y = 66, 7, 0, 18, 15 (mod 101), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 185 ^ y is impossible.
-/
theorem diophantine1_3_1_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 101) [65, 6, 100, 17, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (185 ^ y % 101) [66, 7, 0, 18, 15]) [
    {prop := List.Mem (3 ^ x % 101) [65, 6, 100, 17, 14], proof := h10},
    {prop := 3 ^ x + 1 = 185 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (185 ^ y % 101) [66, 7, 0, 18, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 186 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 186 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 186 ^ y is impossible.
-/
theorem diophantine1_3_1_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (186 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 186 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 187 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 187 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 187 ^ y is impossible.
-/
theorem diophantine1_3_1_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 188 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 188 ...
-- Trying to disprove y >= 3 with prime factor 2 of 188 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 188 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 188 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 188 ^ y is impossible.
-/
theorem diophantine1_3_1_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (188 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 188 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 189 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 189 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 189 ^ y is impossible.
-/
theorem diophantine1_3_1_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (189 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 189 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 190 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 190 ...
-- Trying to disprove y >= 1 with prime factor 5 of 190 ...
-- Trying to disprove y >= 3 with prime factor 2 of 190 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 190 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 190 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 190 ^ y is impossible.
-/
theorem diophantine1_3_1_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (190 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 190 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 1 = 191 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 191 ^ y,
if x >= 3, 191 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0, 2 (mod 4).
Therefore, 191 ^ y = 1, 36 (mod 37).
So 3 ^ x = 0, 35 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 191 ^ y is impossible.
-/
theorem diophantine1_3_1_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 37) [1, 36]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [0, 35]) [
    {prop := List.Mem (191 ^ y % 37) [1, 36], proof := h10},
    {prop := 3 ^ x + 1 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [0, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 191 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 192 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 192 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 192 ^ y is impossible.
-/
theorem diophantine1_3_1_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (192 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 192 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 193 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 193 ^ y,
if x >= 4, 193 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27 (mod 54).
Therefore, 193 ^ y = 1, 108 (mod 109).
So 3 ^ x = 0, 107 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 193 ^ y is impossible.
-/
theorem diophantine1_3_1_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (193 ^ y % 109) [1, 108]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0, 107]) [
    {prop := List.Mem (193 ^ y % 109) [1, 108], proof := h10},
    {prop := 3 ^ x + 1 = 193 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0, 107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 193 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 194 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 194 ...
-- Trying to disprove y >= 3 with prime factor 2 of 194 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 194 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 194 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 194 ^ y is impossible.
-/
theorem diophantine1_3_1_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (194 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 194 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 195 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 195 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 195 ^ y is impossible.
-/
theorem diophantine1_3_1_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (195 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 195 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 196 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 196 ...
-- Trying to disprove y >= 1 with prime factor 7 of 196 ...
-- Trying to disprove y >= 3 with prime factor 2 of 196 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 196 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 196 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 196 ^ y is impossible.
-/
theorem diophantine1_3_1_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (196 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 196 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 197 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 197 ^ y,
if x >= 4, 197 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 197 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 197 ^ y is impossible.
-/
theorem diophantine1_3_1_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (197 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (197 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 197 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 197 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 198 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 198 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 198 ^ y is impossible.
-/
theorem diophantine1_3_1_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (198 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 198 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 199 of 199 ...
-- Trying prime 397...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 397)   3 ^ x + 1 = 199 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 199 ^ y,
if y >= 1, 3 ^ x = 198 (mod 199).
So x = 99 (mod 198).
Therefore, 3 ^ x = 396 (mod 397).
So 199 ^ y = 0 (mod 397), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 199 ^ y is impossible.
-/
theorem diophantine1_3_1_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (199 ^ y % 199 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 199 = 198 := by omega
  have h9 := Claim (x % 198 = 99) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 199 = 198, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 397) [396]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 198 = 99, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (199 ^ y % 397) [0]) [
    {prop := List.Mem (3 ^ x % 397) [396], proof := h10},
    {prop := 3 ^ x + 1 = 199 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (199 ^ y % 397) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 199 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 200 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 200 ...
-- Trying to disprove y >= 1 with prime factor 5 of 200 ...
-- Trying to disprove y >= 3 with prime factor 2 of 200 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 200 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 200 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 200 ^ y is impossible.
-/
theorem diophantine1_3_1_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (200 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 200 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 201 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 201 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 201 ^ y is impossible.
-/
theorem diophantine1_3_1_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (201 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 201 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 202 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 202 ...
-- Trying to disprove y >= 3 with prime factor 2 of 202 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 202 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 202 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 202 ^ y is impossible.
-/
theorem diophantine1_3_1_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (202 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 202 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 203 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 203 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 203 ^ y,
if x >= 3, 203 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 203 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 203 ^ y is impossible.
-/
theorem diophantine1_3_1_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 203 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 203 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (203 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (203 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 203 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 203 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 204 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 204 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 204 ^ y is impossible.
-/
theorem diophantine1_3_1_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (204 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 204 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 205 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 205 ...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 205 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 205 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 205 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 205 ^ y is impossible.
-/
theorem diophantine1_3_1_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (205 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 205 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (205 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 205 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 206 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 206 ...
-- Trying to disprove y >= 3 with prime factor 2 of 206 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 206 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 206 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 206 ^ y is impossible.
-/
theorem diophantine1_3_1_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (206 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 206 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 207 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 207 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 207 ^ y is impossible.
-/
theorem diophantine1_3_1_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (207 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 207 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 208 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 208 ...
-- Trying to disprove y >= 3 with prime factor 2 of 208 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 208 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 208 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 208 ^ y is impossible.
-/
theorem diophantine1_3_1_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (208 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 208 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 209 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 209 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 209 ^ y is impossible.
-/
theorem diophantine1_3_1_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 210 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 210 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 210 ^ y is impossible.
-/
theorem diophantine1_3_1_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (210 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 210 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 211 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 211 ^ y,
if x >= 4, 211 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27 (mod 54).
Therefore, 211 ^ y = 1, 108 (mod 109).
So 3 ^ x = 0, 107 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 211 ^ y is impossible.
-/
theorem diophantine1_3_1_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 211 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 211 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (211 ^ y % 109) [1, 108]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0, 107]) [
    {prop := List.Mem (211 ^ y % 109) [1, 108], proof := h10},
    {prop := 3 ^ x + 1 = 211 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0, 107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 211 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 212 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 212 ...
-- Trying to disprove y >= 3 with prime factor 2 of 212 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 212 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 212 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 212 ^ y is impossible.
-/
theorem diophantine1_3_1_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (212 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 212 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 213 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 213 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 213 ^ y is impossible.
-/
theorem diophantine1_3_1_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (213 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 213 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 214 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 214 ...
-- Trying to disprove y >= 3 with prime factor 2 of 214 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 214 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 214 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 214 ^ y is impossible.
-/
theorem diophantine1_3_1_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (214 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 214 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 215 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 215 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 215 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 215 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 215 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 215 ^ y is impossible.
-/
theorem diophantine1_3_1_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (215 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 215 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (215 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 215 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 216 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 216 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 216 ^ y is impossible.
-/
theorem diophantine1_3_1_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (216 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 216 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 217 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 31 of 217 ...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 217 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 217 ^ y,
if y >= 1, 3 ^ x = 30 (mod 31).
So x = 15 (mod 30), 
which implies x = 5 (mod 10).
Therefore, 3 ^ x = 60 (mod 61).
So 217 ^ y = 0 (mod 61), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 217 ^ y is impossible.
-/
theorem diophantine1_3_1_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (217 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 31 = 30 := by omega
  have h9 := Claim (x % 30 = 15) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 31 = 30, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [60]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 30 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (217 ^ y % 61) [0]) [
    {prop := List.Mem (3 ^ x % 61) [60], proof := h10},
    {prop := 3 ^ x + 1 = 217 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (217 ^ y % 61) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 217 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 218 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 218 ...
-- Trying to disprove y >= 3 with prime factor 2 of 218 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 218 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 218 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 218 ^ y is impossible.
-/
theorem diophantine1_3_1_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (218 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 218 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 219 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 219 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 219 ^ y is impossible.
-/
theorem diophantine1_3_1_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (219 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 219 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 220 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 220 ...
-- Trying to disprove y >= 1 with prime factor 5 of 220 ...
-- Trying to disprove y >= 3 with prime factor 2 of 220 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 220 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 220 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 220 ^ y is impossible.
-/
theorem diophantine1_3_1_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (220 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 220 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 221 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 221 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 221 ^ y is impossible.
-/
theorem diophantine1_3_1_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 222 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 222 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 222 ^ y is impossible.
-/
theorem diophantine1_3_1_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (222 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 222 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 223 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 223 ^ y,
if x >= 4, 223 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 223 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 223 ^ y is impossible.
-/
theorem diophantine1_3_1_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (223 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 223 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 224 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 224 ...
-- Trying to disprove y >= 1 with prime factor 7 of 224 ...
-- Trying to disprove y >= 3 with prime factor 2 of 224 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 224 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 224 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 224 ^ y is impossible.
-/
theorem diophantine1_3_1_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (224 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 224 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 225 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 225 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 225 ^ y is impossible.
-/
theorem diophantine1_3_1_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (225 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 225 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 226 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 226 ...
-- Trying to disprove y >= 3 with prime factor 2 of 226 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 226 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 226 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 226 ^ y is impossible.
-/
theorem diophantine1_3_1_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (226 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 226 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 227 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 227 ^ y,
if x >= 3, 227 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 2).
Therefore, 227 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 227 ^ y is impossible.
-/
theorem diophantine1_3_1_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (227 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (227 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 227 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 227 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 228 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 228 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 228 ^ y is impossible.
-/
theorem diophantine1_3_1_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (228 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 228 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 433)   3 ^ x + 1 = 229 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 229 ^ y,
if x >= 4, 229 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27, 54, 81 (mod 108).
Therefore, 229 ^ y = 1, 179, 432, 254 (mod 433).
So 3 ^ x = 0, 178, 431, 253 (mod 433), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 229 ^ y is impossible.
-/
theorem diophantine1_3_1_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 433) [1, 179, 432, 254]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 433) [0, 178, 431, 253]) [
    {prop := List.Mem (229 ^ y % 433) [1, 179, 432, 254], proof := h10},
    {prop := 3 ^ x + 1 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 433) [0, 178, 431, 253], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 229 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 230 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 230 ...
-- Trying to disprove y >= 1 with prime factor 5 of 230 ...
-- Trying to disprove y >= 3 with prime factor 2 of 230 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 230 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 230 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 230 ^ y is impossible.
-/
theorem diophantine1_3_1_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (230 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 230 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 231 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 231 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 231 ^ y is impossible.
-/
theorem diophantine1_3_1_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (231 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 231 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 232 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 232 ...
-- Trying to disprove y >= 3 with prime factor 2 of 232 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 232 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 232 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 232 ^ y is impossible.
-/
theorem diophantine1_3_1_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (232 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 232 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 233 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 233 ^ y,
if x >= 4, 233 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 233 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 233 ^ y is impossible.
-/
theorem diophantine1_3_1_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (233 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 233 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 234 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 234 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 234 ^ y is impossible.
-/
theorem diophantine1_3_1_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (234 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 234 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 235 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 235 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 235 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 235 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 235 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 235 ^ y is impossible.
-/
theorem diophantine1_3_1_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (235 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 235 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (235 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 235 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 236 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 236 ...
-- Trying to disprove y >= 3 with prime factor 2 of 236 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 236 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 236 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 236 ^ y is impossible.
-/
theorem diophantine1_3_1_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (236 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 236 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 237 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 237 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 237 ^ y is impossible.
-/
theorem diophantine1_3_1_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (237 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 237 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 238 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 238 ...
-- Trying to disprove y >= 1 with prime factor 7 of 238 ...
-- Trying to disprove y >= 3 with prime factor 2 of 238 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 238 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 238 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 238 ^ y is impossible.
-/
theorem diophantine1_3_1_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (238 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 238 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 239 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 239 ^ y,
if x >= 3, 239 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 239 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 239 ^ y is impossible.
-/
theorem diophantine1_3_1_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (239 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 240 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 240 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 240 ^ y is impossible.
-/
theorem diophantine1_3_1_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (240 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 240 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 433)   3 ^ x + 1 = 241 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 241 ^ y,
if x >= 4, 241 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27, 54, 81 (mod 108).
Therefore, 241 ^ y = 1, 254, 432, 179 (mod 433).
So 3 ^ x = 0, 253, 431, 178 (mod 433), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 241 ^ y is impossible.
-/
theorem diophantine1_3_1_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (241 ^ y % 433) [1, 254, 432, 179]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 433) [0, 253, 431, 178]) [
    {prop := List.Mem (241 ^ y % 433) [1, 254, 432, 179], proof := h10},
    {prop := 3 ^ x + 1 = 241 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 433) [0, 253, 431, 178], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 241 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 242 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 242 ...
-- Trying to disprove y >= 3 with prime factor 2 of 242 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 242 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 242 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 242 ^ y is impossible.
-/
theorem diophantine1_3_1_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (242 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 242 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 243 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 243 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 243 ^ y is impossible.
-/
theorem diophantine1_3_1_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (243 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 243 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 244 ...
-- Trying to disprove y >= 3 with prime factor 2 of 244 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 244 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 244 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that (x, y) = (5, 1).
-/
theorem diophantine1_3_1_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 244 ^ y) :
  List.Mem (x, y) [(5, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (244 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim (List.Mem (x, y) [(5, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 244 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 245 ...
-- Trying to disprove y >= 1 with prime factor 7 of 245 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 245 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 1 = 245 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 245 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 2, 6 (mod 8).
Therefore, 3 ^ x = 9, 32 (mod 41).
So 245 ^ y = 10, 33 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 245 ^ y is impossible.
-/
theorem diophantine1_3_1_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (245 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [9, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (245 ^ y % 41) [10, 33]) [
    {prop := List.Mem (3 ^ x % 41) [9, 32], proof := h10},
    {prop := 3 ^ x + 1 = 245 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (245 ^ y % 41) [10, 33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 245 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 246 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 246 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 246 ^ y is impossible.
-/
theorem diophantine1_3_1_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (246 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 246 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 247 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 247 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 247 ^ y is impossible.
-/
theorem diophantine1_3_1_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 248 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 248 ...
-- Trying to disprove y >= 3 with prime factor 2 of 248 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 248 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 248 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 248 ^ y is impossible.
-/
theorem diophantine1_3_1_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (248 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 248 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 249 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 249 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 249 ^ y is impossible.
-/
theorem diophantine1_3_1_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (249 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 249 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 250 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 250 ...
-- Trying to disprove y >= 1 with prime factor 5 of 250 ...
-- Trying to disprove y >= 3 with prime factor 2 of 250 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 250 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 250 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 250 ^ y is impossible.
-/
theorem diophantine1_3_1_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (250 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 250 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 251 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 251 ^ y,
if x >= 4, 251 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 251 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 251 ^ y is impossible.
-/
theorem diophantine1_3_1_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (251 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (251 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 251 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 251 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 252 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 252 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 252 ^ y is impossible.
-/
theorem diophantine1_3_1_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (252 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 252 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 253 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 253 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 253 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 253 ^ y is impossible.
-/
theorem diophantine1_3_1_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (253 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 253 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 254 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 254 ...
-- Trying to disprove y >= 3 with prime factor 2 of 254 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 254 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 254 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 254 ^ y is impossible.
-/
theorem diophantine1_3_1_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (254 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 254 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 255 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 255 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 255 ^ y is impossible.
-/
theorem diophantine1_3_1_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (255 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 255 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 256 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 256 ...
-- Trying to disprove y >= 3 with prime factor 2 of 256 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 256 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 256 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 256 ^ y is impossible.
-/
theorem diophantine1_3_1_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (256 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 256 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 257 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 257 ^ y,
if x >= 3, 257 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 257 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 257 ^ y is impossible.
-/
theorem diophantine1_3_1_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (257 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (257 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 257 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 257 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 258 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 258 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 258 ^ y is impossible.
-/
theorem diophantine1_3_1_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (258 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 258 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 259 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 37 of 259 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 19)   3 ^ x + 1 = 259 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 259 ^ y,
if y >= 1, 3 ^ x = 36 (mod 37).
So x = 9 (mod 18).
Therefore, 3 ^ x = 18 (mod 19).
So 259 ^ y = 0 (mod 19), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 259 ^ y is impossible.
-/
theorem diophantine1_3_1_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (259 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 37 = 36 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 37 = 36, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 19) [18]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (259 ^ y % 19) [0]) [
    {prop := List.Mem (3 ^ x % 19) [18], proof := h10},
    {prop := 3 ^ x + 1 = 259 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (259 ^ y % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 259 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 260 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 260 ...
-- Trying to disprove y >= 1 with prime factor 5 of 260 ...
-- Trying to disprove y >= 3 with prime factor 2 of 260 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 260 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 260 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 260 ^ y is impossible.
-/
theorem diophantine1_3_1_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (260 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 260 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 261 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 261 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 261 ^ y is impossible.
-/
theorem diophantine1_3_1_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (261 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 261 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 262 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 262 ...
-- Trying to disprove y >= 3 with prime factor 2 of 262 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 262 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 262 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 262 ^ y is impossible.
-/
theorem diophantine1_3_1_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (262 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 262 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 263 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 263 ^ y,
if x >= 3, 263 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 263 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 263 ^ y is impossible.
-/
theorem diophantine1_3_1_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (263 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (263 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 263 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 263 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 264 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 264 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 264 ^ y is impossible.
-/
theorem diophantine1_3_1_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (264 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 264 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 265 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 265 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 265 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 265 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 265 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 265 ^ y is impossible.
-/
theorem diophantine1_3_1_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (265 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (265 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 265 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (265 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 265 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 266 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 266 ...
-- Trying to disprove y >= 1 with prime factor 7 of 266 ...
-- Trying to disprove y >= 3 with prime factor 2 of 266 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 266 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 266 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 266 ^ y is impossible.
-/
theorem diophantine1_3_1_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (266 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 266 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 267 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 267 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 267 ^ y is impossible.
-/
theorem diophantine1_3_1_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (267 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 267 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 268 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 268 ...
-- Trying to disprove y >= 3 with prime factor 2 of 268 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 268 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 268 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 268 ^ y is impossible.
-/
theorem diophantine1_3_1_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (268 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 268 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 269 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 269 ^ y,
if x >= 5, 269 ^ y = 1 (mod 243).
So y = 0 (mod 18), 
Therefore, 269 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 5.
Further examination shows that 3 ^ x + 1 = 269 ^ y is impossible.
-/
theorem diophantine1_3_1_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (3 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 243 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 243 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (269 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (269 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 269 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 269 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 270 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 270 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 270 ^ y is impossible.
-/
theorem diophantine1_3_1_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (270 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 270 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 271 of 271 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   3 ^ x + 1 = 271 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 271 ^ y,
if y >= 1, 3 ^ x = 270 (mod 271).
So x = 15 (mod 30).
Therefore, 3 ^ x = 30 (mod 31).
So 271 ^ y = 0 (mod 31), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 271 ^ y is impossible.
-/
theorem diophantine1_3_1_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (271 ^ y % 271 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 271 = 270 := by omega
  have h9 := Claim (x % 30 = 15) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 271 = 270, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 31) [30]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 30 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (271 ^ y % 31) [0]) [
    {prop := List.Mem (3 ^ x % 31) [30], proof := h10},
    {prop := 3 ^ x + 1 = 271 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (271 ^ y % 31) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 271 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 272 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 272 ...
-- Trying to disprove y >= 3 with prime factor 2 of 272 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 272 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 272 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 272 ^ y is impossible.
-/
theorem diophantine1_3_1_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (272 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 272 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 273 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 273 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 273 ^ y is impossible.
-/
theorem diophantine1_3_1_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (273 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 273 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 274 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 274 ...
-- Trying to disprove y >= 3 with prime factor 2 of 274 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 274 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 274 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 274 ^ y is impossible.
-/
theorem diophantine1_3_1_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (274 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 274 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 275 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 275 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 275 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 275 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 275 ^ y is impossible.
-/
theorem diophantine1_3_1_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (275 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 275 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 276 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 276 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 276 ^ y is impossible.
-/
theorem diophantine1_3_1_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (276 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 276 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying prime 487...
-- Trying prime 541...
-- Trying prime 757...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 757)   3 ^ x + 1 = 277 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 277 ^ y,
if x >= 4, 277 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117 (mod 126).
Therefore, 277 ^ y = 1, 698, 453, 525, 62, 127, 77, 756, 59, 304, 232, 695, 630, 680 (mod 757).
So 3 ^ x = 0, 697, 452, 524, 61, 126, 76, 755, 58, 303, 231, 694, 629, 679 (mod 757), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 277 ^ y is impossible.
-/
theorem diophantine1_3_1_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (277 ^ y % 757) [1, 698, 453, 525, 62, 127, 77, 756, 59, 304, 232, 695, 630, 680]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 757) [0, 697, 452, 524, 61, 126, 76, 755, 58, 303, 231, 694, 629, 679]) [
    {prop := List.Mem (277 ^ y % 757) [1, 698, 453, 525, 62, 127, 77, 756, 59, 304, 232, 695, 630, 680], proof := h10},
    {prop := 3 ^ x + 1 = 277 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 757) [0, 697, 452, 524, 61, 126, 76, 755, 58, 303, 231, 694, 629, 679], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 277 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 278 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 278 ...
-- Trying to disprove y >= 3 with prime factor 2 of 278 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 278 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 278 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 278 ^ y is impossible.
-/
theorem diophantine1_3_1_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (278 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 278 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 279 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 279 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 279 ^ y is impossible.
-/
theorem diophantine1_3_1_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (279 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 279 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 280 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 280 ...
-- Trying to disprove y >= 1 with prime factor 5 of 280 ...
-- Trying to disprove y >= 1 with prime factor 7 of 280 ...
-- Trying to disprove y >= 3 with prime factor 2 of 280 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 280 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 280 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 280 ^ y is impossible.
-/
theorem diophantine1_3_1_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (280 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 280 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 281 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 281 ^ y,
if x >= 3, 281 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 281 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 281 ^ y is impossible.
-/
theorem diophantine1_3_1_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 281 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 281 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (281 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (281 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 281 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 281 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 282 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 282 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 282 ^ y is impossible.
-/
theorem diophantine1_3_1_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (282 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 282 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 271)   3 ^ x + 1 = 283 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 283 ^ y,
if x >= 4, 283 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27 (mod 54).
Therefore, 283 ^ y = 1, 270 (mod 271).
So 3 ^ x = 0, 269 (mod 271), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 283 ^ y is impossible.
-/
theorem diophantine1_3_1_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (283 ^ y % 271) [1, 270]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 271) [0, 269]) [
    {prop := List.Mem (283 ^ y % 271) [1, 270], proof := h10},
    {prop := 3 ^ x + 1 = 283 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 271) [0, 269], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 283 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 284 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 284 ...
-- Trying to disprove y >= 3 with prime factor 2 of 284 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 284 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 284 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 284 ^ y is impossible.
-/
theorem diophantine1_3_1_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (284 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 284 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 285 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 285 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 285 ^ y is impossible.
-/
theorem diophantine1_3_1_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (285 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 285 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 286 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 286 ...
-- Trying to disprove y >= 3 with prime factor 2 of 286 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 286 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 286 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 286 ^ y is impossible.
-/
theorem diophantine1_3_1_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (286 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 286 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 287 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 41 of 287 ...
-- Trying to disprove y >= 2 with prime factor 7 of 287 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 287 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 287 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 287 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 287 ^ y is impossible.
-/
theorem diophantine1_3_1_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (287 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (287 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 287 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (287 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 287 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 288 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 288 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 288 ^ y is impossible.
-/
theorem diophantine1_3_1_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (288 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 288 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 289 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 1 = 289 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 289 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40 (mod 48).
Therefore, 3 ^ x = 62, 96, 36 (mod 97).
So 289 ^ y = 63, 0, 37 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 289 ^ y is impossible.
-/
theorem diophantine1_3_1_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (289 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [62, 96, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (289 ^ y % 97) [63, 0, 37]) [
    {prop := List.Mem (3 ^ x % 97) [62, 96, 36], proof := h10},
    {prop := 3 ^ x + 1 = 289 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (289 ^ y % 97) [63, 0, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 289 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 290 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 290 ...
-- Trying to disprove y >= 1 with prime factor 5 of 290 ...
-- Trying to disprove y >= 3 with prime factor 2 of 290 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 290 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 290 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 290 ^ y is impossible.
-/
theorem diophantine1_3_1_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (290 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 290 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 291 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 291 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 291 ^ y is impossible.
-/
theorem diophantine1_3_1_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (291 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 291 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 292 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 292 ...
-- Trying to disprove y >= 3 with prime factor 2 of 292 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 292 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 292 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 292 ^ y is impossible.
-/
theorem diophantine1_3_1_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (292 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 292 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 293 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 293 ^ y,
if x >= 3, 293 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 6).
Therefore, 293 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 293 ^ y is impossible.
-/
theorem diophantine1_3_1_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (293 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (293 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 293 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 293 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 294 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 294 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 294 ^ y is impossible.
-/
theorem diophantine1_3_1_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (294 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 294 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 295 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 295 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   3 ^ x + 1 = 295 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 295 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0, 5, 10, 15, 20, 25, 30, 35, 40 (mod 45).
Therefore, 3 ^ x = 1, 62, 43, 132, 39, 65, 48, 80, 73 (mod 181).
So 295 ^ y = 2, 63, 44, 133, 40, 66, 49, 81, 74 (mod 181), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 295 ^ y is impossible.
-/
theorem diophantine1_3_1_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (295 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 181) [1, 62, 43, 132, 39, 65, 48, 80, 73]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (295 ^ y % 181) [2, 63, 44, 133, 40, 66, 49, 81, 74]) [
    {prop := List.Mem (3 ^ x % 181) [1, 62, 43, 132, 39, 65, 48, 80, 73], proof := h10},
    {prop := 3 ^ x + 1 = 295 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (295 ^ y % 181) [2, 63, 44, 133, 40, 66, 49, 81, 74], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 295 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 296 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 296 ...
-- Trying to disprove y >= 3 with prime factor 2 of 296 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 296 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 296 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 296 ^ y is impossible.
-/
theorem diophantine1_3_1_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (296 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 296 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 297 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 297 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 297 ^ y is impossible.
-/
theorem diophantine1_3_1_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (297 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 297 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 298 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 298 ...
-- Trying to disprove y >= 3 with prime factor 2 of 298 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 298 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 298 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 298 ^ y is impossible.
-/
theorem diophantine1_3_1_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (298 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 298 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 299 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 299 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 299 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 299 ^ y is impossible.
-/
theorem diophantine1_3_1_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (299 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 299 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 300 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 300 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 300 ^ y is impossible.
-/
theorem diophantine1_3_1_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (300 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 300 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 301 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 43 of 301 ...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   3 ^ x + 1 = 301 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 301 ^ y,
if y >= 1, 3 ^ x = 42 (mod 43).
So x = 21 (mod 42), 
which implies x = 21, 63, 105 (mod 126).
Therefore, 3 ^ x = 108, 126, 20 (mod 127).
So 301 ^ y = 109, 0, 21 (mod 127), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 301 ^ y is impossible.
-/
theorem diophantine1_3_1_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (301 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 43 = 42 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 43 = 42, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 127) [108, 126, 20]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (301 ^ y % 127) [109, 0, 21]) [
    {prop := List.Mem (3 ^ x % 127) [108, 126, 20], proof := h10},
    {prop := 3 ^ x + 1 = 301 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (301 ^ y % 127) [109, 0, 21], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 301 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 302 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 302 ...
-- Trying to disprove y >= 3 with prime factor 2 of 302 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 302 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 302 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 302 ^ y is impossible.
-/
theorem diophantine1_3_1_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (302 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 302 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 303 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 303 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 303 ^ y is impossible.
-/
theorem diophantine1_3_1_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (303 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 303 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 304 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 304 ...
-- Trying to disprove y >= 3 with prime factor 2 of 304 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 304 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 304 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 304 ^ y is impossible.
-/
theorem diophantine1_3_1_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (304 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 304 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 305 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 305 ...
-- Trying prime 41...
-- Trying prime 101...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   3 ^ x + 1 = 305 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 305 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 10, 30, 50, 70, 90, 110 (mod 120).
Therefore, 3 ^ x = 4, 64, 60, 237, 177, 181 (mod 241).
So 305 ^ y = 5, 65, 61, 238, 178, 182 (mod 241), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 305 ^ y is impossible.
-/
theorem diophantine1_3_1_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (305 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 241) [4, 64, 60, 237, 177, 181]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (305 ^ y % 241) [5, 65, 61, 238, 178, 182]) [
    {prop := List.Mem (3 ^ x % 241) [4, 64, 60, 237, 177, 181], proof := h10},
    {prop := 3 ^ x + 1 = 305 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (305 ^ y % 241) [5, 65, 61, 238, 178, 182], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 305 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 306 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 306 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 306 ^ y is impossible.
-/
theorem diophantine1_3_1_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (306 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 306 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 307 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 307 ^ y,
if x >= 5, 307 ^ y = 1 (mod 243).
So y = 0 (mod 27), 
Therefore, 307 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 5.
Further examination shows that 3 ^ x + 1 = 307 ^ y is impossible.
-/
theorem diophantine1_3_1_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (3 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 243 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 243 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (307 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (307 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 307 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 307 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 308 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 308 ...
-- Trying to disprove y >= 1 with prime factor 7 of 308 ...
-- Trying to disprove y >= 3 with prime factor 2 of 308 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 308 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 308 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 308 ^ y is impossible.
-/
theorem diophantine1_3_1_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (308 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 308 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 309 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 309 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 309 ^ y is impossible.
-/
theorem diophantine1_3_1_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (309 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 309 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 310 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 310 ...
-- Trying to disprove y >= 1 with prime factor 5 of 310 ...
-- Trying to disprove y >= 3 with prime factor 2 of 310 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 310 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 310 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 310 ^ y is impossible.
-/
theorem diophantine1_3_1_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (310 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 310 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 311 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 311 ^ y,
if x >= 3, 311 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 311 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 311 ^ y is impossible.
-/
theorem diophantine1_3_1_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (311 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (311 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 311 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 311 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 312 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 312 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 312 ^ y is impossible.
-/
theorem diophantine1_3_1_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (312 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 312 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 163)   3 ^ x + 1 = 313 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 313 ^ y,
if x >= 4, 313 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 313 ^ y = 1 (mod 163).
So 3 ^ x = 0 (mod 163), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 313 ^ y is impossible.
-/
theorem diophantine1_3_1_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (313 ^ y % 163) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 163) [0]) [
    {prop := List.Mem (313 ^ y % 163) [1], proof := h10},
    {prop := 3 ^ x + 1 = 313 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 163) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 313 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 314 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 314 ...
-- Trying to disprove y >= 3 with prime factor 2 of 314 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 314 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 314 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 314 ^ y is impossible.
-/
theorem diophantine1_3_1_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (314 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 314 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 315 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 315 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 315 ^ y is impossible.
-/
theorem diophantine1_3_1_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (315 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 315 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 316 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 316 ...
-- Trying to disprove y >= 3 with prime factor 2 of 316 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 316 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 316 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 316 ^ y is impossible.
-/
theorem diophantine1_3_1_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (316 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 316 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 317 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 317 ^ y,
if x >= 3, 317 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 317 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 317 ^ y is impossible.
-/
theorem diophantine1_3_1_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (317 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 317 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 318 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 318 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 318 ^ y is impossible.
-/
theorem diophantine1_3_1_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (318 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 318 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 319 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 319 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 319 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 319 ^ y is impossible.
-/
theorem diophantine1_3_1_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (319 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 319 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 320 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 320 ...
-- Trying to disprove y >= 1 with prime factor 5 of 320 ...
-- Trying to disprove y >= 3 with prime factor 2 of 320 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 320 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 320 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 320 ^ y is impossible.
-/
theorem diophantine1_3_1_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (320 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 320 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 321 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 321 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 321 ^ y is impossible.
-/
theorem diophantine1_3_1_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (321 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 321 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 322 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 322 ...
-- Trying to disprove y >= 1 with prime factor 7 of 322 ...
-- Trying to disprove y >= 3 with prime factor 2 of 322 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 322 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 322 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 322 ^ y is impossible.
-/
theorem diophantine1_3_1_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (322 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 322 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 323 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 1 = 323 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 323 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40 (mod 48).
Therefore, 3 ^ x = 62, 96, 36 (mod 97).
So 323 ^ y = 63, 0, 37 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 323 ^ y is impossible.
-/
theorem diophantine1_3_1_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (323 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [62, 96, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (323 ^ y % 97) [63, 0, 37]) [
    {prop := List.Mem (3 ^ x % 97) [62, 96, 36], proof := h10},
    {prop := 3 ^ x + 1 = 323 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (323 ^ y % 97) [63, 0, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 323 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 324 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 324 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 324 ^ y is impossible.
-/
theorem diophantine1_3_1_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (324 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 324 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 325 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 325 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 325 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 325 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 325 ^ y is impossible.
-/
theorem diophantine1_3_1_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (325 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 325 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 326 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 326 ...
-- Trying to disprove y >= 3 with prime factor 2 of 326 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 326 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 326 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 326 ^ y is impossible.
-/
theorem diophantine1_3_1_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (326 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 326 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 327 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 327 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 327 ^ y is impossible.
-/
theorem diophantine1_3_1_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (327 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 327 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 328 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 328 ...
-- Trying to disprove y >= 3 with prime factor 2 of 328 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 328 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 328 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 328 ^ y is impossible.
-/
theorem diophantine1_3_1_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (328 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 328 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 329 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 329 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 329 ^ y,
if x >= 3, 329 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 329 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 329 ^ y is impossible.
-/
theorem diophantine1_3_1_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 329 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 329 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (329 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (329 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 329 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 329 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 330 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 330 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 330 ^ y is impossible.
-/
theorem diophantine1_3_1_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (330 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 330 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 331 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 331 ^ y,
if x >= 4, 331 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 9 (mod 18).
Therefore, 331 ^ y = 1, 108 (mod 109).
So 3 ^ x = 0, 107 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 331 ^ y is impossible.
-/
theorem diophantine1_3_1_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (331 ^ y % 109) [1, 108]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0, 107]) [
    {prop := List.Mem (331 ^ y % 109) [1, 108], proof := h10},
    {prop := 3 ^ x + 1 = 331 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0, 107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 331 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 332 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 332 ...
-- Trying to disprove y >= 3 with prime factor 2 of 332 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 332 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 332 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 332 ^ y is impossible.
-/
theorem diophantine1_3_1_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (332 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 332 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 333 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 333 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 333 ^ y is impossible.
-/
theorem diophantine1_3_1_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (333 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 333 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 334 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 334 ...
-- Trying to disprove y >= 3 with prime factor 2 of 334 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 334 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 334 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 334 ^ y is impossible.
-/
theorem diophantine1_3_1_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (334 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 334 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 335 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 335 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   3 ^ x + 1 = 335 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 335 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 10, 30, 50, 70, 90 (mod 100).
Therefore, 3 ^ x = 65, 6, 100, 17, 14 (mod 101).
So 335 ^ y = 66, 7, 0, 18, 15 (mod 101), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 335 ^ y is impossible.
-/
theorem diophantine1_3_1_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (335 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 101) [65, 6, 100, 17, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (335 ^ y % 101) [66, 7, 0, 18, 15]) [
    {prop := List.Mem (3 ^ x % 101) [65, 6, 100, 17, 14], proof := h10},
    {prop := 3 ^ x + 1 = 335 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (335 ^ y % 101) [66, 7, 0, 18, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 335 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 336 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 336 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 336 ^ y is impossible.
-/
theorem diophantine1_3_1_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (336 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 336 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying prime 487...
-- Trying prime 541...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 541)   3 ^ x + 1 = 337 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 337 ^ y,
if x >= 4, 337 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27, 54, 81 (mod 108).
Therefore, 337 ^ y = 1, 489, 540, 52 (mod 541).
So 3 ^ x = 0, 488, 539, 51 (mod 541), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 337 ^ y is impossible.
-/
theorem diophantine1_3_1_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 337 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 337 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (337 ^ y % 541) [1, 489, 540, 52]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 541) [0, 488, 539, 51]) [
    {prop := List.Mem (337 ^ y % 541) [1, 489, 540, 52], proof := h10},
    {prop := 3 ^ x + 1 = 337 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 541) [0, 488, 539, 51], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 337 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 338 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 338 ...
-- Trying to disprove y >= 3 with prime factor 2 of 338 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 338 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 338 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 338 ^ y is impossible.
-/
theorem diophantine1_3_1_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (338 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 338 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 339 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 339 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 339 ^ y is impossible.
-/
theorem diophantine1_3_1_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (339 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 339 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 340 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 340 ...
-- Trying to disprove y >= 1 with prime factor 5 of 340 ...
-- Trying to disprove y >= 3 with prime factor 2 of 340 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 340 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 340 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 340 ^ y is impossible.
-/
theorem diophantine1_3_1_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (340 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 340 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 341 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 341 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 341 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 341 ^ y is impossible.
-/
theorem diophantine1_3_1_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (341 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 341 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 342 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 342 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 342 ^ y is impossible.
-/
theorem diophantine1_3_1_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (342 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 342 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 343 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 343 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 343 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 343 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 343 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 343 ^ y is impossible.
-/
theorem diophantine1_3_1_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (343 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (343 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 343 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (343 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 343 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 344 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 344 ...
-- Trying to disprove y >= 3 with prime factor 2 of 344 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 344 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 344 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 344 ^ y is impossible.
-/
theorem diophantine1_3_1_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (344 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 344 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 345 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 345 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 345 ^ y is impossible.
-/
theorem diophantine1_3_1_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (345 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 345 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 346 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 346 ...
-- Trying to disprove y >= 3 with prime factor 2 of 346 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 346 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 346 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 346 ^ y is impossible.
-/
theorem diophantine1_3_1_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (346 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 346 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 347 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 347 ^ y,
if x >= 3, 347 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 347 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 347 ^ y is impossible.
-/
theorem diophantine1_3_1_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (347 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (347 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 347 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 347 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 348 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 348 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 348 ^ y is impossible.
-/
theorem diophantine1_3_1_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (348 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 348 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 349 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 349 ^ y,
if x >= 4, 349 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 349 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 349 ^ y is impossible.
-/
theorem diophantine1_3_1_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (349 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (349 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 349 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 349 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 350 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 350 ...
-- Trying to disprove y >= 1 with prime factor 5 of 350 ...
-- Trying to disprove y >= 1 with prime factor 7 of 350 ...
-- Trying to disprove y >= 3 with prime factor 2 of 350 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 350 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 350 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 350 ^ y is impossible.
-/
theorem diophantine1_3_1_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (350 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 350 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 351 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 351 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 351 ^ y is impossible.
-/
theorem diophantine1_3_1_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 351 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (351 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 351 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 352 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 352 ...
-- Trying to disprove y >= 3 with prime factor 2 of 352 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 352 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 352 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 352 ^ y is impossible.
-/
theorem diophantine1_3_1_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (352 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 352 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 353 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 353 ^ y,
if x >= 3, 353 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 353 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 353 ^ y is impossible.
-/
theorem diophantine1_3_1_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (353 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (353 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 353 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 353 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 354 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 354 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 354 ^ y is impossible.
-/
theorem diophantine1_3_1_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (354 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 354 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 355 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 355 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   3 ^ x + 1 = 355 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 355 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 2, 6 (mod 8).
Therefore, 3 ^ x = 9, 32 (mod 41).
So 355 ^ y = 10, 33 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 355 ^ y is impossible.
-/
theorem diophantine1_3_1_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (355 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 41) [9, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (355 ^ y % 41) [10, 33]) [
    {prop := List.Mem (3 ^ x % 41) [9, 32], proof := h10},
    {prop := 3 ^ x + 1 = 355 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (355 ^ y % 41) [10, 33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 355 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 356 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 356 ...
-- Trying to disprove y >= 3 with prime factor 2 of 356 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 356 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 356 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 356 ^ y is impossible.
-/
theorem diophantine1_3_1_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (356 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 356 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 357 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 357 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 357 ^ y is impossible.
-/
theorem diophantine1_3_1_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (357 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 357 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 358 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 358 ...
-- Trying to disprove y >= 3 with prime factor 2 of 358 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 358 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 358 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 358 ^ y is impossible.
-/
theorem diophantine1_3_1_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (358 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 358 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 359 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 359 ^ y,
if x >= 4, 359 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 359 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 359 ^ y is impossible.
-/
theorem diophantine1_3_1_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (359 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (359 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 359 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 359 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 360 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 360 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 360 ^ y is impossible.
-/
theorem diophantine1_3_1_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (360 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 360 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 19 of 361 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 1 = 361 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 361 ^ y,
if y >= 1, 3 ^ x = 18 (mod 19).
So x = 9 (mod 18).
Therefore, 3 ^ x = 36 (mod 37).
So 361 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 361 ^ y is impossible.
-/
theorem diophantine1_3_1_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (361 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (361 ^ y % 37) [0]) [
    {prop := List.Mem (3 ^ x % 37) [36], proof := h10},
    {prop := 3 ^ x + 1 = 361 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (361 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 361 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 362 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 362 ...
-- Trying to disprove y >= 3 with prime factor 2 of 362 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 362 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 362 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 362 ^ y is impossible.
-/
theorem diophantine1_3_1_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (362 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 362 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 363 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 363 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 363 ^ y is impossible.
-/
theorem diophantine1_3_1_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (363 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 363 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 364 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 364 ...
-- Trying to disprove y >= 1 with prime factor 7 of 364 ...
-- Trying to disprove y >= 3 with prime factor 2 of 364 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 364 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 364 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 364 ^ y is impossible.
-/
theorem diophantine1_3_1_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (364 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 364 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 365 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 365 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 365 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 365 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 365 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 365 ^ y is impossible.
-/
theorem diophantine1_3_1_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (365 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (365 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 365 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (365 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 365 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 366 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 366 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 366 ^ y is impossible.
-/
theorem diophantine1_3_1_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (366 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 366 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 433)   3 ^ x + 1 = 367 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 367 ^ y,
if x >= 4, 367 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27 (mod 54).
Therefore, 367 ^ y = 1, 432 (mod 433).
So 3 ^ x = 0, 431 (mod 433), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 367 ^ y is impossible.
-/
theorem diophantine1_3_1_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (367 ^ y % 433) [1, 432]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 433) [0, 431]) [
    {prop := List.Mem (367 ^ y % 433) [1, 432], proof := h10},
    {prop := 3 ^ x + 1 = 367 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 433) [0, 431], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 367 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 368 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 368 ...
-- Trying to disprove y >= 3 with prime factor 2 of 368 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 368 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 368 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 368 ^ y is impossible.
-/
theorem diophantine1_3_1_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (368 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 368 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 369 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 369 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 369 ^ y is impossible.
-/
theorem diophantine1_3_1_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (369 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 369 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 370 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 370 ...
-- Trying to disprove y >= 1 with prime factor 5 of 370 ...
-- Trying to disprove y >= 3 with prime factor 2 of 370 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 370 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 370 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 370 ^ y is impossible.
-/
theorem diophantine1_3_1_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (370 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 370 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 371 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 371 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 371 ^ y,
if x >= 3, 371 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 371 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 371 ^ y is impossible.
-/
theorem diophantine1_3_1_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 371 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 371 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (371 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (371 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 371 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 371 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 372 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 372 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 372 ^ y is impossible.
-/
theorem diophantine1_3_1_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (372 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 372 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 373 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 373 ^ y,
if x >= 4, 373 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 3 (mod 6).
Therefore, 373 ^ y = 1, 108 (mod 109).
So 3 ^ x = 0, 107 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 373 ^ y is impossible.
-/
theorem diophantine1_3_1_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (373 ^ y % 109) [1, 108]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0, 107]) [
    {prop := List.Mem (373 ^ y % 109) [1, 108], proof := h10},
    {prop := 3 ^ x + 1 = 373 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0, 107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 373 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 374 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 374 ...
-- Trying to disprove y >= 3 with prime factor 2 of 374 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 374 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 374 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 374 ^ y is impossible.
-/
theorem diophantine1_3_1_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (374 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 374 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 375 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 375 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 375 ^ y is impossible.
-/
theorem diophantine1_3_1_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (375 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 375 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 376 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 376 ...
-- Trying to disprove y >= 3 with prime factor 2 of 376 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 376 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 376 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 376 ^ y is impossible.
-/
theorem diophantine1_3_1_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (376 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 376 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 377 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 377 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 377 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 377 ^ y is impossible.
-/
theorem diophantine1_3_1_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (377 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 377 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 378 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 378 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 378 ^ y is impossible.
-/
theorem diophantine1_3_1_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (378 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 378 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 379 of 379 ...
-- Trying prime 757...
-- Trying prime 2269...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 2269)   3 ^ x + 1 = 379 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 379 ^ y,
if y >= 1, 3 ^ x = 378 (mod 379).
So x = 189 (mod 378), 
which implies x = 21 (mod 42).
Therefore, 3 ^ x = 2268 (mod 2269).
So 379 ^ y = 0 (mod 2269), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 379 ^ y is impossible.
-/
theorem diophantine1_3_1_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (379 ^ y % 379 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 379 = 378 := by omega
  have h9 := Claim (x % 378 = 189) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 379 = 378, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 2269) [2268]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 378 = 189, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (379 ^ y % 2269) [0]) [
    {prop := List.Mem (3 ^ x % 2269) [2268], proof := h10},
    {prop := 3 ^ x + 1 = 379 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (379 ^ y % 2269) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 379 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 380 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 380 ...
-- Trying to disprove y >= 1 with prime factor 5 of 380 ...
-- Trying to disprove y >= 3 with prime factor 2 of 380 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 380 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 380 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 380 ^ y is impossible.
-/
theorem diophantine1_3_1_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (380 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 380 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 381 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 381 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 381 ^ y is impossible.
-/
theorem diophantine1_3_1_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (381 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 381 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 382 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 382 ...
-- Trying to disprove y >= 3 with prime factor 2 of 382 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 382 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 382 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 382 ^ y is impossible.
-/
theorem diophantine1_3_1_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (382 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 382 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 383 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 383 ^ y,
if x >= 3, 383 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 383 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 383 ^ y is impossible.
-/
theorem diophantine1_3_1_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 383 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (383 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (383 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 383 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 383 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 384 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 384 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 384 ^ y is impossible.
-/
theorem diophantine1_3_1_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (384 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 384 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 385 ...
-- Trying to disprove y >= 1 with prime factor 7 of 385 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 385 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 385 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 385 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 385 ^ y is impossible.
-/
theorem diophantine1_3_1_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (385 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 385 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 386 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 386 ...
-- Trying to disprove y >= 3 with prime factor 2 of 386 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 386 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 386 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 386 ^ y is impossible.
-/
theorem diophantine1_3_1_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (386 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 386 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 387 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 387 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 387 ^ y is impossible.
-/
theorem diophantine1_3_1_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (387 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 387 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 388 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 388 ...
-- Trying to disprove y >= 3 with prime factor 2 of 388 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 388 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 388 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 388 ^ y is impossible.
-/
theorem diophantine1_3_1_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (388 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 388 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 389 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 389 ^ y,
if x >= 3, 389 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 389 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 389 ^ y is impossible.
-/
theorem diophantine1_3_1_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (389 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (389 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 389 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 389 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 390 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 390 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 390 ^ y is impossible.
-/
theorem diophantine1_3_1_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (390 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 390 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 391 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 1 = 391 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 391 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40 (mod 48).
Therefore, 3 ^ x = 62, 96, 36 (mod 97).
So 391 ^ y = 63, 0, 37 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 391 ^ y is impossible.
-/
theorem diophantine1_3_1_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (391 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [62, 96, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (391 ^ y % 97) [63, 0, 37]) [
    {prop := List.Mem (3 ^ x % 97) [62, 96, 36], proof := h10},
    {prop := 3 ^ x + 1 = 391 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (391 ^ y % 97) [63, 0, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 391 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 392 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 392 ...
-- Trying to disprove y >= 1 with prime factor 7 of 392 ...
-- Trying to disprove y >= 3 with prime factor 2 of 392 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 392 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 392 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 392 ^ y is impossible.
-/
theorem diophantine1_3_1_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (392 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 392 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 393 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 393 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 393 ^ y is impossible.
-/
theorem diophantine1_3_1_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (393 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 393 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 394 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 394 ...
-- Trying to disprove y >= 3 with prime factor 2 of 394 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 394 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 394 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 394 ^ y is impossible.
-/
theorem diophantine1_3_1_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (394 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 394 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 395 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 395 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 395 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 395 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 395 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 395 ^ y is impossible.
-/
theorem diophantine1_3_1_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (395 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (395 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 395 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (395 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 395 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 396 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 396 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 396 ^ y is impossible.
-/
theorem diophantine1_3_1_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (396 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 396 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 271)   3 ^ x + 1 = 397 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 397 ^ y,
if x >= 5, 397 ^ y = 1 (mod 243).
So y = 0 (mod 27), 
Therefore, 397 ^ y = 1 (mod 271).
So 3 ^ x = 0 (mod 271), but this is impossible.
Therefore, x < 5.
Further examination shows that 3 ^ x + 1 = 397 ^ y is impossible.
-/
theorem diophantine1_3_1_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (3 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 243 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 243 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (397 ^ y % 271) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 271) [0]) [
    {prop := List.Mem (397 ^ y % 271) [1], proof := h10},
    {prop := 3 ^ x + 1 = 397 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 271) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 397 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 398 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 398 ...
-- Trying to disprove y >= 3 with prime factor 2 of 398 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 398 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 398 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 398 ^ y is impossible.
-/
theorem diophantine1_3_1_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (398 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 398 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 399 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 399 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 399 ^ y is impossible.
-/
theorem diophantine1_3_1_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (399 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 399 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 400 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 400 ...
-- Trying to disprove y >= 1 with prime factor 5 of 400 ...
-- Trying to disprove y >= 3 with prime factor 2 of 400 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 400 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 400 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 400 ^ y is impossible.
-/
theorem diophantine1_3_1_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (400 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 400 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 401 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 401 ^ y,
if x >= 3, 401 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 401 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 401 ^ y is impossible.
-/
theorem diophantine1_3_1_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (401 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (401 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 401 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 401 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 402 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 402 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 402 ^ y is impossible.
-/
theorem diophantine1_3_1_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (402 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 402 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 403 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 403 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 403 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 403 ^ y is impossible.
-/
theorem diophantine1_3_1_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (403 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 403 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 404 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 404 ...
-- Trying to disprove y >= 3 with prime factor 2 of 404 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 404 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 404 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 404 ^ y is impossible.
-/
theorem diophantine1_3_1_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (404 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 404 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 405 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 405 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 405 ^ y is impossible.
-/
theorem diophantine1_3_1_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (405 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 405 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 406 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 406 ...
-- Trying to disprove y >= 1 with prime factor 7 of 406 ...
-- Trying to disprove y >= 3 with prime factor 2 of 406 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 406 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 406 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 406 ^ y is impossible.
-/
theorem diophantine1_3_1_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (406 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 406 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 407 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 407 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 407 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 407 ^ y is impossible.
-/
theorem diophantine1_3_1_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (407 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 407 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 408 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 408 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 408 ^ y is impossible.
-/
theorem diophantine1_3_1_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (408 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 408 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 409 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 409 ^ y,
if x >= 4, 409 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 9 (mod 18).
Therefore, 409 ^ y = 1, 108 (mod 109).
So 3 ^ x = 0, 107 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 409 ^ y is impossible.
-/
theorem diophantine1_3_1_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (409 ^ y % 109) [1, 108]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0, 107]) [
    {prop := List.Mem (409 ^ y % 109) [1, 108], proof := h10},
    {prop := 3 ^ x + 1 = 409 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0, 107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 409 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 410 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 410 ...
-- Trying to disprove y >= 1 with prime factor 5 of 410 ...
-- Trying to disprove y >= 3 with prime factor 2 of 410 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 410 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 410 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 410 ^ y is impossible.
-/
theorem diophantine1_3_1_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (410 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 410 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 411 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 411 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 411 ^ y is impossible.
-/
theorem diophantine1_3_1_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (411 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 411 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 412 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 412 ...
-- Trying to disprove y >= 3 with prime factor 2 of 412 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 412 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 412 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 412 ^ y is impossible.
-/
theorem diophantine1_3_1_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (412 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 412 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 413 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 413 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 413 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 413 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 413 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 413 ^ y is impossible.
-/
theorem diophantine1_3_1_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (413 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (413 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 413 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (413 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 413 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 414 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 414 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 414 ^ y is impossible.
-/
theorem diophantine1_3_1_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (414 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 414 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 415 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 415 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 415 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 415 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 415 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 415 ^ y is impossible.
-/
theorem diophantine1_3_1_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (415 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (415 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 415 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (415 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 415 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 416 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 416 ...
-- Trying to disprove y >= 3 with prime factor 2 of 416 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 416 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 416 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 416 ^ y is impossible.
-/
theorem diophantine1_3_1_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (416 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 416 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 417 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 417 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 417 ^ y is impossible.
-/
theorem diophantine1_3_1_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (417 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 417 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 418 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 418 ...
-- Trying to disprove y >= 3 with prime factor 2 of 418 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 418 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 418 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 418 ^ y is impossible.
-/
theorem diophantine1_3_1_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (418 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 418 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 37)   3 ^ x + 1 = 419 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 419 ^ y,
if x >= 3, 419 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 419 ^ y = 1 (mod 37).
So 3 ^ x = 0 (mod 37), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 419 ^ y is impossible.
-/
theorem diophantine1_3_1_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (419 ^ y % 37) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 37) [0]) [
    {prop := List.Mem (419 ^ y % 37) [1], proof := h10},
    {prop := 3 ^ x + 1 = 419 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 419 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 420 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 420 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 420 ^ y is impossible.
-/
theorem diophantine1_3_1_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (420 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 420 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 421 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 421 ^ y,
if x >= 4, 421 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0, 27 (mod 54).
Therefore, 421 ^ y = 1, 108 (mod 109).
So 3 ^ x = 0, 107 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 421 ^ y is impossible.
-/
theorem diophantine1_3_1_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (421 ^ y % 109) [1, 108]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0, 107]) [
    {prop := List.Mem (421 ^ y % 109) [1, 108], proof := h10},
    {prop := 3 ^ x + 1 = 421 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0, 107], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 421 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 422 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 422 ...
-- Trying to disprove y >= 3 with prime factor 2 of 422 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 422 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 422 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 422 ^ y is impossible.
-/
theorem diophantine1_3_1_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (422 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 422 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 423 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 423 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 423 ^ y is impossible.
-/
theorem diophantine1_3_1_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (423 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 423 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 424 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 424 ...
-- Trying to disprove y >= 3 with prime factor 2 of 424 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 424 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 424 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 424 ^ y is impossible.
-/
theorem diophantine1_3_1_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (424 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 424 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 425 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 425 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 193)   3 ^ x + 1 = 425 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 425 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16).
Therefore, 3 ^ x = 192 (mod 193).
So 425 ^ y = 0 (mod 193), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 425 ^ y is impossible.
-/
theorem diophantine1_3_1_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (425 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 193) [192]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (425 ^ y % 193) [0]) [
    {prop := List.Mem (3 ^ x % 193) [192], proof := h10},
    {prop := 3 ^ x + 1 = 425 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (425 ^ y % 193) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 425 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 426 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 426 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 426 ^ y is impossible.
-/
theorem diophantine1_3_1_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (426 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 426 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 427 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 427 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 427 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 427 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 427 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 427 ^ y is impossible.
-/
theorem diophantine1_3_1_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (427 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (427 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 427 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (427 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 427 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 428 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 428 ...
-- Trying to disprove y >= 3 with prime factor 2 of 428 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 428 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 428 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 428 ^ y is impossible.
-/
theorem diophantine1_3_1_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (428 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 428 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 429 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 429 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 429 ^ y is impossible.
-/
theorem diophantine1_3_1_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (429 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 429 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 430 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 430 ...
-- Trying to disprove y >= 1 with prime factor 5 of 430 ...
-- Trying to disprove y >= 3 with prime factor 2 of 430 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 430 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 430 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 430 ^ y is impossible.
-/
theorem diophantine1_3_1_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (430 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 430 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 431 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 431 ^ y,
if x >= 5, 431 ^ y = 1 (mod 243).
So y = 0 (mod 18), 
Therefore, 431 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 5.
Further examination shows that 3 ^ x + 1 = 431 ^ y is impossible.
-/
theorem diophantine1_3_1_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (3 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 243 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 243 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (431 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (431 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 431 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 431 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 432 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 432 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 432 ^ y is impossible.
-/
theorem diophantine1_3_1_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (432 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 432 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 433 of 433 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 433 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 433 ^ y,
if y >= 1, 3 ^ x = 432 (mod 433).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 433 ^ y is impossible.
-/
theorem diophantine1_3_1_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (433 ^ y % 433 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 433 = 432 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 433 = 432, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 433 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 434 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 434 ...
-- Trying to disprove y >= 1 with prime factor 7 of 434 ...
-- Trying to disprove y >= 3 with prime factor 2 of 434 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 434 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 434 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 434 ^ y is impossible.
-/
theorem diophantine1_3_1_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (434 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 434 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 435 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 435 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 435 ^ y is impossible.
-/
theorem diophantine1_3_1_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (435 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 435 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 436 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 436 ...
-- Trying to disprove y >= 3 with prime factor 2 of 436 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 436 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 436 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 436 ^ y is impossible.
-/
theorem diophantine1_3_1_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (436 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 436 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 1 = 437 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 437 ^ y,
if y >= 1, 3 ^ x = 18 (mod 19).
So x = 9 (mod 18).
Therefore, 3 ^ x = 36 (mod 37).
So 437 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 437 ^ y is impossible.
-/
theorem diophantine1_3_1_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (437 ^ y % 37) [0]) [
    {prop := List.Mem (3 ^ x % 37) [36], proof := h10},
    {prop := 3 ^ x + 1 = 437 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (437 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 438 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 438 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 438 ^ y is impossible.
-/
theorem diophantine1_3_1_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (438 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 438 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 439 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 439 ^ y,
if x >= 4, 439 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 439 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 439 ^ y is impossible.
-/
theorem diophantine1_3_1_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (439 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (439 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 439 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 439 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 440 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 440 ...
-- Trying to disprove y >= 1 with prime factor 5 of 440 ...
-- Trying to disprove y >= 3 with prime factor 2 of 440 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 440 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 440 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 440 ^ y is impossible.
-/
theorem diophantine1_3_1_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (440 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 440 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 441 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 441 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 441 ^ y is impossible.
-/
theorem diophantine1_3_1_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (441 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 441 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 442 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 442 ...
-- Trying to disprove y >= 3 with prime factor 2 of 442 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 442 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 442 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 442 ^ y is impossible.
-/
theorem diophantine1_3_1_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (442 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 442 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 443 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 443 ^ y,
if x >= 3, 443 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 443 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 443 ^ y is impossible.
-/
theorem diophantine1_3_1_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (443 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (443 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 443 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 443 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 444 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 444 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 444 ^ y is impossible.
-/
theorem diophantine1_3_1_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (444 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 444 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 445 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 445 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   3 ^ x + 1 = 445 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 445 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 10, 30, 50, 70, 90 (mod 100).
Therefore, 3 ^ x = 65, 6, 100, 17, 14 (mod 101).
So 445 ^ y = 66, 7, 0, 18, 15 (mod 101), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 445 ^ y is impossible.
-/
theorem diophantine1_3_1_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (445 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 101) [65, 6, 100, 17, 14]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (445 ^ y % 101) [66, 7, 0, 18, 15]) [
    {prop := List.Mem (3 ^ x % 101) [65, 6, 100, 17, 14], proof := h10},
    {prop := 3 ^ x + 1 = 445 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (445 ^ y % 101) [66, 7, 0, 18, 15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 445 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 446 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 446 ...
-- Trying to disprove y >= 3 with prime factor 2 of 446 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 446 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 446 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 446 ^ y is impossible.
-/
theorem diophantine1_3_1_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (446 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 446 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 447 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 447 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 447 ^ y is impossible.
-/
theorem diophantine1_3_1_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (447 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 447 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 448 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 448 ...
-- Trying to disprove y >= 1 with prime factor 7 of 448 ...
-- Trying to disprove y >= 3 with prime factor 2 of 448 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 448 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 448 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 448 ^ y is impossible.
-/
theorem diophantine1_3_1_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (448 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 448 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 449 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 449 ^ y,
if x >= 4, 449 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 6).
Therefore, 449 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 449 ^ y is impossible.
-/
theorem diophantine1_3_1_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 449 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (449 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (449 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 449 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 449 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 450 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 450 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 450 ^ y is impossible.
-/
theorem diophantine1_3_1_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (450 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 450 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 451 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 451 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 451 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 451 ^ y is impossible.
-/
theorem diophantine1_3_1_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (451 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 451 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 452 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 452 ...
-- Trying to disprove y >= 3 with prime factor 2 of 452 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 452 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 452 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 452 ^ y is impossible.
-/
theorem diophantine1_3_1_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (452 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 452 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 453 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 453 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 453 ^ y is impossible.
-/
theorem diophantine1_3_1_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (453 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 453 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 454 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 454 ...
-- Trying to disprove y >= 3 with prime factor 2 of 454 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 454 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 454 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 454 ^ y is impossible.
-/
theorem diophantine1_3_1_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (454 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 454 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 455 ...
-- Trying to disprove y >= 1 with prime factor 7 of 455 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 455 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 455 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 455 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 455 ^ y is impossible.
-/
theorem diophantine1_3_1_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (455 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 455 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 456 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 456 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 456 ^ y is impossible.
-/
theorem diophantine1_3_1_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (456 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 456 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 457 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 457 ^ y,
if x >= 4, 457 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 457 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 457 ^ y is impossible.
-/
theorem diophantine1_3_1_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (457 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (457 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 457 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 457 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 458 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 458 ...
-- Trying to disprove y >= 3 with prime factor 2 of 458 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 458 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 458 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 458 ^ y is impossible.
-/
theorem diophantine1_3_1_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (458 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 458 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 459 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 459 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 459 ^ y is impossible.
-/
theorem diophantine1_3_1_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (459 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 459 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 460 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 460 ...
-- Trying to disprove y >= 1 with prime factor 5 of 460 ...
-- Trying to disprove y >= 3 with prime factor 2 of 460 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 460 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 460 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 460 ^ y is impossible.
-/
theorem diophantine1_3_1_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (460 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 460 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 461 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 461 ^ y,
if x >= 3, 461 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 461 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 461 ^ y is impossible.
-/
theorem diophantine1_3_1_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (461 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (461 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 461 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 461 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 462 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 462 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 462 ^ y is impossible.
-/
theorem diophantine1_3_1_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (462 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 462 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 463 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 463 ^ y,
if x >= 4, 463 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0 (mod 9).
Therefore, 463 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 463 ^ y is impossible.
-/
theorem diophantine1_3_1_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 463 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 463 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (463 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (463 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 463 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 463 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 464 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 464 ...
-- Trying to disprove y >= 3 with prime factor 2 of 464 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 464 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 464 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 464 ^ y is impossible.
-/
theorem diophantine1_3_1_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (464 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 464 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 465 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 465 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 465 ^ y is impossible.
-/
theorem diophantine1_3_1_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (465 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 465 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 466 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 466 ...
-- Trying to disprove y >= 3 with prime factor 2 of 466 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 466 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 466 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 466 ^ y is impossible.
-/
theorem diophantine1_3_1_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (466 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 466 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 467 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 467 ^ y,
if x >= 4, 467 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 467 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 467 ^ y is impossible.
-/
theorem diophantine1_3_1_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (467 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (467 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 467 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 467 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 468 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 468 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 468 ^ y is impossible.
-/
theorem diophantine1_3_1_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (468 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 468 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 469 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 7 of 469 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   3 ^ x + 1 = 469 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 469 ^ y,
if y >= 2, 3 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 3 ^ x = 42 (mod 43).
So 469 ^ y = 0 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 469 ^ y is impossible.
-/
theorem diophantine1_3_1_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (469 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 43) [42]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (469 ^ y % 43) [0]) [
    {prop := List.Mem (3 ^ x % 43) [42], proof := h10},
    {prop := 3 ^ x + 1 = 469 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (469 ^ y % 43) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 469 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 470 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 470 ...
-- Trying to disprove y >= 1 with prime factor 5 of 470 ...
-- Trying to disprove y >= 3 with prime factor 2 of 470 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 470 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 470 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 470 ^ y is impossible.
-/
theorem diophantine1_3_1_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (470 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 470 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 471 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 471 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 471 ^ y is impossible.
-/
theorem diophantine1_3_1_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (471 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 471 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 472 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 472 ...
-- Trying to disprove y >= 3 with prime factor 2 of 472 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 472 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 472 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 472 ^ y is impossible.
-/
theorem diophantine1_3_1_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (472 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 472 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 11 of 473 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 473 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 473 ^ y,
if y >= 1, 3 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 473 ^ y is impossible.
-/
theorem diophantine1_3_1_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (473 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 473 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 474 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 474 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 474 ^ y is impossible.
-/
theorem diophantine1_3_1_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (474 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 474 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 475 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 19 of 475 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   3 ^ x + 1 = 475 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 475 ^ y,
if y >= 1, 3 ^ x = 18 (mod 19).
So x = 9 (mod 18).
Therefore, 3 ^ x = 36 (mod 37).
So 475 ^ y = 0 (mod 37), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 475 ^ y is impossible.
-/
theorem diophantine1_3_1_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (475 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 37) [36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (475 ^ y % 37) [0]) [
    {prop := List.Mem (3 ^ x % 37) [36], proof := h10},
    {prop := 3 ^ x + 1 = 475 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (475 ^ y % 37) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 475 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 476 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 476 ...
-- Trying to disprove y >= 1 with prime factor 7 of 476 ...
-- Trying to disprove y >= 3 with prime factor 2 of 476 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 476 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 476 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 476 ^ y is impossible.
-/
theorem diophantine1_3_1_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (476 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 476 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 477 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 477 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 477 ^ y is impossible.
-/
theorem diophantine1_3_1_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (477 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 477 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 478 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 478 ...
-- Trying to disprove y >= 3 with prime factor 2 of 478 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 478 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 478 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 478 ^ y is impossible.
-/
theorem diophantine1_3_1_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (478 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 478 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 479 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 479 ^ y,
if x >= 3, 479 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 479 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 479 ^ y is impossible.
-/
theorem diophantine1_3_1_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 479 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (479 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (479 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 479 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 479 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 480 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 480 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 480 ^ y is impossible.
-/
theorem diophantine1_3_1_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (480 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 480 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 13 of 481 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 481 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 481 ^ y,
if y >= 1, 3 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 481 ^ y is impossible.
-/
theorem diophantine1_3_1_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (481 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 481 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 482 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 482 ...
-- Trying to disprove y >= 3 with prime factor 2 of 482 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 482 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 482 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 482 ^ y is impossible.
-/
theorem diophantine1_3_1_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (482 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 482 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 483 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 483 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 483 ^ y is impossible.
-/
theorem diophantine1_3_1_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (483 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 483 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 484 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 484 ...
-- Trying to disprove y >= 3 with prime factor 2 of 484 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 484 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 484 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 484 ^ y is impossible.
-/
theorem diophantine1_3_1_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (484 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 484 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 5 of 485 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 5 of 485 ...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   3 ^ x + 1 = 485 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 485 ^ y,
if y >= 2, 3 ^ x = 24 (mod 25).
So x = 10 (mod 20), 
which implies x = 0 (mod 10).
Therefore, 3 ^ x = 1 (mod 61).
So 485 ^ y = 2 (mod 61), but this is impossible.
Therefore, y < 2.
Further examination shows that 3 ^ x + 1 = 485 ^ y is impossible.
-/
theorem diophantine1_3_1_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (485 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 20 = 10) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 61) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 20 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (485 ^ y % 61) [2]) [
    {prop := List.Mem (3 ^ x % 61) [1], proof := h10},
    {prop := 3 ^ x + 1 = 485 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (485 ^ y % 61) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 485 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 486 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 486 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 486 ^ y is impossible.
-/
theorem diophantine1_3_1_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (486 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 486 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying to disprove x >= 5 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 487 of 487 ...
-- Trying prime 1459...
-- Trying prime 2917...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 2917)   3 ^ x + 1 = 487 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 487 ^ y,
if y >= 1, 3 ^ x = 486 (mod 487).
So x = 243 (mod 486), 
which implies x = 243, 729, 1215 (mod 1458).
Therefore, 3 ^ x = 2670, 2916, 248 (mod 2917).
So 487 ^ y = 2671, 0, 249 (mod 2917), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 487 ^ y is impossible.
-/
theorem diophantine1_3_1_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (487 ^ y % 487 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 487 = 486 := by omega
  have h9 := Claim (x % 486 = 243) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 487 = 486, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 2917) [2670, 2916, 248]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 486 = 243, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (487 ^ y % 2917) [2671, 0, 249]) [
    {prop := List.Mem (3 ^ x % 2917) [2670, 2916, 248], proof := h10},
    {prop := 3 ^ x + 1 = 487 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (487 ^ y % 2917) [2671, 0, 249], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 487 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 488 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 488 ...
-- Trying to disprove y >= 3 with prime factor 2 of 488 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 488 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 488 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 488 ^ y is impossible.
-/
theorem diophantine1_3_1_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (488 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 488 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 489 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 489 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 489 ^ y is impossible.
-/
theorem diophantine1_3_1_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (489 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 489 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 490 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 490 ...
-- Trying to disprove y >= 1 with prime factor 5 of 490 ...
-- Trying to disprove y >= 1 with prime factor 7 of 490 ...
-- Trying to disprove y >= 3 with prime factor 2 of 490 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 490 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 490 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 490 ^ y is impossible.
-/
theorem diophantine1_3_1_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (490 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 490 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 491 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 491 ^ y,
if x >= 3, 491 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 491 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 491 ^ y is impossible.
-/
theorem diophantine1_3_1_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (491 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (491 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 491 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 491 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 492 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 492 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 492 ^ y is impossible.
-/
theorem diophantine1_3_1_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (492 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 492 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 17 of 493 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   3 ^ x + 1 = 493 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 493 ^ y,
if y >= 1, 3 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40 (mod 48).
Therefore, 3 ^ x = 62, 96, 36 (mod 97).
So 493 ^ y = 63, 0, 37 (mod 97), but this is impossible.
Therefore, y < 1.
So 3 ^ x + 1 = 493 ^ y is impossible.
-/
theorem diophantine1_3_1_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (493 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ x % 97) [62, 96, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (493 ^ y % 97) [63, 0, 37]) [
    {prop := List.Mem (3 ^ x % 97) [62, 96, 36], proof := h10},
    {prop := 3 ^ x + 1 = 493 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (493 ^ y % 97) [63, 0, 37], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 493 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 494 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 494 ...
-- Trying to disprove y >= 3 with prime factor 2 of 494 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 494 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 494 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 494 ^ y is impossible.
-/
theorem diophantine1_3_1_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (494 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 494 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 495 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 495 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 495 ^ y is impossible.
-/
theorem diophantine1_3_1_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (495 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 495 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 496 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 496 ...
-- Trying to disprove y >= 3 with prime factor 2 of 496 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 496 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 496 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 496 ^ y is impossible.
-/
theorem diophantine1_3_1_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (496 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 496 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 1 with prime factor 7 of 497 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   3 ^ x + 1 = 497 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 497 ^ y,
if x >= 3, 497 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 497 ^ y = 1 (mod 19).
So 3 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 3 ^ x + 1 = 497 ^ y is impossible.
-/
theorem diophantine1_3_1_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (3 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 497 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 497 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (497 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 19) [0]) [
    {prop := List.Mem (497 ^ y % 19) [1], proof := h10},
    {prop := 3 ^ x + 1 = 497 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 497 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   3 ^ x + 1 = 498 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 498 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 3 ^ x + 1 = 498 ^ y is impossible.
-/
theorem diophantine1_3_1_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (3 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (498 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 498 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 3 of 3 ...
-- Trying to disprove x >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 4 with prime factor 3 of 3 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   3 ^ x + 1 = 499 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 499 ^ y,
if x >= 4, 499 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
which implies y = 0 (mod 3).
Therefore, 499 ^ y = 1 (mod 109).
So 3 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 3 ^ x + 1 = 499 ^ y is impossible.
-/
theorem diophantine1_3_1_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (3 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (499 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (3 ^ x % 109) [0]) [
    {prop := List.Mem (499 ^ y % 109) [1], proof := h10},
    {prop := 3 ^ x + 1 = 499 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (3 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 499 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 500 ...
-- Trying to disprove x >= 1 with prime factor 3 of 3 ...
-- Trying to disprove y >= 2 with prime factor 2 of 500 ...
-- Trying to disprove y >= 1 with prime factor 5 of 500 ...
-- Trying to disprove y >= 3 with prime factor 2 of 500 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   3 ^ x + 1 = 500 ^ y
For positive integers x, y satisfying 3 ^ x + 1 = 500 ^ y,
if y >= 3, 3 ^ x = 7 (mod 8).
However, this is impossible.
Therefore, y < 3.
Further examination shows that 3 ^ x + 1 = 500 ^ y is impossible.
-/
theorem diophantine1_3_1_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 3 ^ x + 1 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 3
  have h7 := Claim (500 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ x % 8 = 7 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 3 ^ x % 8 = 7, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 3 ^ x + 1 = 500 ^ y, proof := h3},
    {prop := y <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
