-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 7 <= a <= 7
-- 8 <= b <= 8
-- 2 <= c <= 250
-- trivial cases where a, b, c are not pairwise coprime are skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 3 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 3 ^ y,
if x >= 2, 3 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
Therefore, 3 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 3 ^ y is impossible.
-/
theorem diophantine1_7_8_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (3 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 3 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 3 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 5 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 5 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 5 ^ y is impossible.
-/
theorem diophantine1_7_8_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 9 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 9 ^ y,
if x >= 2, 9 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
Therefore, 9 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 9 ^ y is impossible.
-/
theorem diophantine1_7_8_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (9 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 9 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 9 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 191)   7 ^ x + 8 = 11 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 11 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10).
Therefore, 7 ^ x = 109 (mod 191).
So 11 ^ y = 117 (mod 191), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 11 ^ y is impossible.
-/
theorem diophantine1_7_8_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 191) [109]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (11 ^ y % 191) [117]) [
    {prop := List.Mem (7 ^ x % 191) [109], proof := h10},
    {prop := 7 ^ x + 8 = 11 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (11 ^ y % 191) [117], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 13 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 13 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 13 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 13 ^ y is impossible.
-/
theorem diophantine1_7_8_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (13 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 13 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (13 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 15 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 15 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_7_8_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 15 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 15 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 353)   7 ^ x + 8 = 17 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 17 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22 (mod 32).
Therefore, 7 ^ x = 100, 253 (mod 353).
So 17 ^ y = 108, 261 (mod 353), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 17 ^ y is impossible.
-/
theorem diophantine1_7_8_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (17 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 353) [100, 253]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (17 ^ y % 353) [108, 261]) [
    {prop := List.Mem (7 ^ x % 353) [100, 253], proof := h10},
    {prop := 7 ^ x + 8 = 17 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (17 ^ y % 353) [108, 261], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 17 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 19 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 19 ^ y,
if x >= 2, 19 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 19 ^ y is impossible.
-/
theorem diophantine1_7_8_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 19 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 23 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 23 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 23 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 23 ^ y is impossible.
-/
theorem diophantine1_7_8_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 25 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 25 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 25 ^ y is impossible.
-/
theorem diophantine1_7_8_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 27 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 27 ^ y,
if x >= 2, 27 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
which implies y = 12, 26 (mod 28).
Therefore, 27 ^ y = 7, 22 (mod 29).
So 7 ^ x = 28, 14 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 27 ^ y is impossible.
-/
theorem diophantine1_7_8_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 27 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (27 ^ y % 29) [7, 22]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [28, 14]) [
    {prop := List.Mem (27 ^ y % 29) [7, 22], proof := h10},
    {prop := 7 ^ x + 8 = 27 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [28, 14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 27 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 29 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 29 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 29 ^ y is impossible.
-/
theorem diophantine1_7_8_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 31 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 31 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 31 ^ y is impossible.
-/
theorem diophantine1_7_8_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 151)   7 ^ x + 8 = 33 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 33 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144 (mod 150).
Therefore, 7 ^ x = 136, 121, 91, 31, 62, 124, 97, 43, 86, 21, 42, 84, 17, 34, 68 (mod 151).
So 33 ^ y = 144, 129, 99, 39, 70, 132, 105, 51, 94, 29, 50, 92, 25, 42, 76 (mod 151), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 33 ^ y is impossible.
-/
theorem diophantine1_7_8_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (33 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 151) [136, 121, 91, 31, 62, 124, 97, 43, 86, 21, 42, 84, 17, 34, 68]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (33 ^ y % 151) [144, 129, 99, 39, 70, 132, 105, 51, 94, 29, 50, 92, 25, 42, 76]) [
    {prop := List.Mem (7 ^ x % 151) [136, 121, 91, 31, 62, 124, 97, 43, 86, 21, 42, 84, 17, 34, 68], proof := h10},
    {prop := 7 ^ x + 8 = 33 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (33 ^ y % 151) [144, 129, 99, 39, 70, 132, 105, 51, 94, 29, 50, 92, 25, 42, 76], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 33 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 37 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 37 ^ y,
if y >= 1, 7 ^ x = 29 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 37 ^ y is impossible.
-/
theorem diophantine1_7_8_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 37 = 29 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 181)   7 ^ x + 8 = 39 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 39 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12).
Therefore, 7 ^ x = 162 (mod 181).
So 39 ^ y = 170 (mod 181), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 39 ^ y is impossible.
-/
theorem diophantine1_7_8_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (39 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 181) [162]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (39 ^ y % 181) [170]) [
    {prop := List.Mem (7 ^ x % 181) [162], proof := h10},
    {prop := 7 ^ x + 8 = 39 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (39 ^ y % 181) [170], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 39 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 881)   7 ^ x + 8 = 41 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 41 ^ y,
if y >= 1, 7 ^ x = 33 (mod 41).
So x = 22 (mod 40), 
which implies x = 22, 62 (mod 80).
Therefore, 7 ^ x = 462, 419 (mod 881).
So 41 ^ y = 470, 427 (mod 881), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 41 ^ y is impossible.
-/
theorem diophantine1_7_8_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 41 = 33 := by omega
  have h9 := Claim (x % 40 = 22) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 41 = 33, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 881) [462, 419]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 40 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (41 ^ y % 881) [470, 427]) [
    {prop := List.Mem (7 ^ x % 881) [462, 419], proof := h10},
    {prop := 7 ^ x + 8 = 41 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (41 ^ y % 881) [470, 427], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 43 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 43 ^ y,
if y >= 1, 7 ^ x = 35 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 43 ^ y is impossible.
-/
theorem diophantine1_7_8_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 43 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 43 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 45 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 45 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 45 ^ y is impossible.
-/
theorem diophantine1_7_8_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 45 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 47 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 47 ^ y,
if y >= 1, 7 ^ x = 39 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 47 ^ y is impossible.
-/
theorem diophantine1_7_8_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (47 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 47 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 51 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 51 ^ y,
if x >= 2, 51 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
which implies y = 3, 10 (mod 14).
Therefore, 51 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 51 ^ y is impossible.
-/
theorem diophantine1_7_8_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 51 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (51 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (51 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 51 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 51 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 53 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 53 ^ y,
if x >= 2, 53 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
Therefore, 53 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 53 ^ y is impossible.
-/
theorem diophantine1_7_8_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (53 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 55 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 55 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 55 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 55 ^ y is impossible.
-/
theorem diophantine1_7_8_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 57 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 57 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 57 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_7_8_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 57 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (57 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (57 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 57 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (57 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 57 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 59 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 59 ^ y,
if x >= 2, 59 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 7).
Therefore, 59 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 59 ^ y is impossible.
-/
theorem diophantine1_7_8_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (59 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 61 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 61 ^ y,
if x >= 2, 61 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
Therefore, 61 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 61 ^ y is impossible.
-/
theorem diophantine1_7_8_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (61 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (61 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 61 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 61 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 73)   7 ^ x + 8 = 65 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 65 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15 (mod 24).
Therefore, 7 ^ x = 51, 22 (mod 73).
So 65 ^ y = 59, 30 (mod 73), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 65 ^ y is impossible.
-/
theorem diophantine1_7_8_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 73) [51, 22]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 73) [59, 30]) [
    {prop := List.Mem (7 ^ x % 73) [51, 22], proof := h10},
    {prop := 7 ^ x + 8 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 73) [59, 30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 67 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 67 ^ y,
if x >= 2, 67 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 67 ^ y is impossible.
-/
theorem diophantine1_7_8_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 1453)   7 ^ x + 8 = 69 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 69 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 20, 31, 42, 53, 64, 75, 86, 97, 108, 119 (mod 121).
Therefore, 7 ^ x = 891, 453, 744, 481, 1223, 113, 532, 383, 273, 1401, 771 (mod 1453).
So 69 ^ y = 899, 461, 752, 489, 1231, 121, 540, 391, 281, 1409, 779 (mod 1453), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 69 ^ y is impossible.
-/
theorem diophantine1_7_8_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (69 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 1453) [891, 453, 744, 481, 1223, 113, 532, 383, 273, 1401, 771]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (69 ^ y % 1453) [899, 461, 752, 489, 1231, 121, 540, 391, 281, 1409, 779]) [
    {prop := List.Mem (7 ^ x % 1453) [891, 453, 744, 481, 1223, 113, 532, 383, 273, 1401, 771], proof := h10},
    {prop := 7 ^ x + 8 = 69 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (69 ^ y % 1453) [899, 461, 752, 489, 1231, 121, 540, 391, 281, 1409, 779], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 69 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 211)   7 ^ x + 8 = 71 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 71 ^ y,
if y >= 1, 7 ^ x = 63 (mod 71).
So x = 53 (mod 70), 
which implies x = 53, 123, 193 (mod 210).
Therefore, 7 ^ x = 41, 18, 152 (mod 211).
So 71 ^ y = 49, 26, 160 (mod 211), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 71 ^ y is impossible.
-/
theorem diophantine1_7_8_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 71 = 63 := by omega
  have h9 := Claim (x % 70 = 53) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 71 = 63, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 211) [41, 18, 152]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 70 = 53, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (71 ^ y % 211) [49, 26, 160]) [
    {prop := List.Mem (7 ^ x % 211) [41, 18, 152], proof := h10},
    {prop := 7 ^ x + 8 = 71 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (71 ^ y % 211) [49, 26, 160], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 73 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 73 ^ y,
if x >= 2, 73 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
Therefore, 73 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 73 ^ y is impossible.
-/
theorem diophantine1_7_8_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (73 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 75 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 75 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 75 ^ y is impossible.
-/
theorem diophantine1_7_8_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 75 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 79 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 79 ^ y,
if x >= 2, 79 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 79 ^ y is impossible.
-/
theorem diophantine1_7_8_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 79 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 81 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 81 ^ y,
if x >= 2, 81 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
Therefore, 81 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 81 ^ y is impossible.
-/
theorem diophantine1_7_8_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 81 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (81 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (81 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 81 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 81 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 83 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 83 ^ y,
if x >= 2, 83 ^ y = 8 (mod 49).
So y = 4 (mod 14), 
which implies y = 4, 11, 18 (mod 21).
Therefore, 83 ^ y = 38, 13, 35 (mod 43).
So 7 ^ x = 30, 5, 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 83 ^ y is impossible.
-/
theorem diophantine1_7_8_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 43) [38, 13, 35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [30, 5, 27]) [
    {prop := List.Mem (83 ^ y % 43) [38, 13, 35], proof := h10},
    {prop := 7 ^ x + 8 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [30, 5, 27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 97)   7 ^ x + 8 = 85 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 85 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86 (mod 96).
Therefore, 7 ^ x = 85, 53, 65, 12, 44, 32 (mod 97).
So 85 ^ y = 93, 61, 73, 20, 52, 40 (mod 97), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 85 ^ y is impossible.
-/
theorem diophantine1_7_8_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (85 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 97) [93, 61, 73, 20, 52, 40]) [
    {prop := List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32], proof := h10},
    {prop := 7 ^ x + 8 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 97) [93, 61, 73, 20, 52, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 85 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 87 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 87 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 87 ^ y is impossible.
-/
theorem diophantine1_7_8_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (87 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 87 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 89 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 89 ^ y,
if x >= 2, 89 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
Therefore, 89 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 89 ^ y is impossible.
-/
theorem diophantine1_7_8_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (89 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 93 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 93 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 93 ^ y is impossible.
-/
theorem diophantine1_7_8_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (93 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 93 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 95 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 95 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 95 ^ y is impossible.
-/
theorem diophantine1_7_8_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 95 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 97 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 97 ^ y,
if x >= 2, 97 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 97 ^ y is impossible.
-/
theorem diophantine1_7_8_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 99 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 99 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 99 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 99 ^ y is impossible.
-/
theorem diophantine1_7_8_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (99 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (99 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 99 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (99 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 99 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 101 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 101 ^ y,
if x >= 2, 101 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 15 (mod 21).
Therefore, 101 ^ y = 4 (mod 43).
So 7 ^ x = 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 101 ^ y is impossible.
-/
theorem diophantine1_7_8_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 43) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39]) [
    {prop := List.Mem (101 ^ y % 43) [4], proof := h10},
    {prop := 7 ^ x + 8 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 101 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 103 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 103 ^ y,
if x >= 2, 103 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 15 (mod 21).
Therefore, 103 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 103 ^ y is impossible.
-/
theorem diophantine1_7_8_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (103 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 107 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 107 ^ y,
if x >= 2, 107 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
which implies y = 4 (mod 7).
Therefore, 107 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 107 ^ y is impossible.
-/
theorem diophantine1_7_8_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (107 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 109 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 109 ^ y,
if x >= 2, 109 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
Therefore, 109 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 109 ^ y is impossible.
-/
theorem diophantine1_7_8_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (109 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 109 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 111 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 111 ^ y,
if y >= 1, 7 ^ x = 29 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 111 ^ y is impossible.
-/
theorem diophantine1_7_8_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (111 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 37 = 29 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 111 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 113 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 113 ^ y,
if y >= 1, 7 ^ x = 105 (mod 113).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 113 ^ y is impossible.
-/
theorem diophantine1_7_8_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (113 ^ y % 113 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 113 = 105 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 113 = 105, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 113 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 115 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 115 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 115 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 115 ^ y is impossible.
-/
theorem diophantine1_7_8_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (115 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 115 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (115 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 117 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 117 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 117 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 117 ^ y is impossible.
-/
theorem diophantine1_7_8_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (117 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (117 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 117 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (117 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 117 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 121 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 121 ^ y,
if x >= 2, 121 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 5 (mod 7).
Therefore, 121 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 121 ^ y is impossible.
-/
theorem diophantine1_7_8_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 121 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 121 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (121 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (121 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 121 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 121 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 281)   7 ^ x + 8 = 123 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 123 ^ y,
if y >= 1, 7 ^ x = 33 (mod 41).
So x = 22 (mod 40), 
which implies x = 2 (mod 20).
Therefore, 7 ^ x = 49 (mod 281).
So 123 ^ y = 57 (mod 281), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 123 ^ y is impossible.
-/
theorem diophantine1_7_8_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (123 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 41 = 33 := by omega
  have h9 := Claim (x % 40 = 22) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 41 = 33, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 281) [49]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 40 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (123 ^ y % 281) [57]) [
    {prop := List.Mem (7 ^ x % 281) [49], proof := h10},
    {prop := 7 ^ x + 8 = 123 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (123 ^ y % 281) [57], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 123 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 125 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 125 ^ y,
if x >= 2, 125 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
Therefore, 125 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 125 ^ y is impossible.
-/
theorem diophantine1_7_8_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 125 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 125 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (125 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (125 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 125 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 125 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 631)   7 ^ x + 8 = 127 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 127 ^ y,
if y >= 1, 7 ^ x = 119 (mod 127).
So x = 9 (mod 126), 
which implies x = 9, 135, 261, 387, 513 (mod 630).
Therefore, 7 ^ x = 526, 362, 38, 506, 461 (mod 631).
So 127 ^ y = 534, 370, 46, 514, 469 (mod 631), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 127 ^ y is impossible.
-/
theorem diophantine1_7_8_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (127 ^ y % 127 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 127 = 119 := by omega
  have h9 := Claim (x % 126 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 127 = 119, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 631) [526, 362, 38, 506, 461]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 126 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (127 ^ y % 631) [534, 370, 46, 514, 469]) [
    {prop := List.Mem (7 ^ x % 631) [526, 362, 38, 506, 461], proof := h10},
    {prop := 7 ^ x + 8 = 127 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (127 ^ y % 631) [534, 370, 46, 514, 469], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 127 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 129 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 129 ^ y,
if y >= 1, 7 ^ x = 35 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 129 ^ y is impossible.
-/
theorem diophantine1_7_8_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (129 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 43 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 43 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 129 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 131 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 131 ^ y,
if x >= 2, 131 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 14).
Therefore, 131 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 131 ^ y is impossible.
-/
theorem diophantine1_7_8_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (131 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 131 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 135 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 135 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 135 ^ y is impossible.
-/
theorem diophantine1_7_8_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (135 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 135 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 137 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 137 ^ y,
if x >= 2, 137 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 13 (mod 14).
Therefore, 137 ^ y = 16, 27 (mod 43).
So 7 ^ x = 8, 19 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 137 ^ y is impossible.
-/
theorem diophantine1_7_8_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 43) [16, 27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8, 19]) [
    {prop := List.Mem (137 ^ y % 43) [16, 27], proof := h10},
    {prop := 7 ^ x + 8 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 137 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 139 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 139 ^ y,
if x >= 2, 139 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
which implies y = 1 (mod 7).
Therefore, 139 ^ y = 23 (mod 29).
So 7 ^ x = 15 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 139 ^ y is impossible.
-/
theorem diophantine1_7_8_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 29) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [15]) [
    {prop := List.Mem (139 ^ y % 29) [23], proof := h10},
    {prop := 7 ^ x + 8 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 139 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 141 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 141 ^ y,
if y >= 1, 7 ^ x = 39 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 141 ^ y is impossible.
-/
theorem diophantine1_7_8_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (141 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 141 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 71)   7 ^ x + 8 = 143 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 143 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64 (mod 70).
Therefore, 7 ^ x = 58, 54, 16, 10, 24, 15, 36 (mod 71).
So 143 ^ y = 66, 62, 24, 18, 32, 23, 44 (mod 71), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 143 ^ y is impossible.
-/
theorem diophantine1_7_8_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (143 ^ y % 71) [66, 62, 24, 18, 32, 23, 44]) [
    {prop := List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36], proof := h10},
    {prop := 7 ^ x + 8 = 143 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (143 ^ y % 71) [66, 62, 24, 18, 32, 23, 44], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 145 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 145 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 145 ^ y is impossible.
-/
theorem diophantine1_7_8_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 145 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 421)   7 ^ x + 8 = 149 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 149 ^ y,
if x >= 2, 149 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
Therefore, 149 ^ y = 152 (mod 421).
So 7 ^ x = 144 (mod 421), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 149 ^ y is impossible.
-/
theorem diophantine1_7_8_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 421) [152]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 421) [144]) [
    {prop := List.Mem (149 ^ y % 421) [152], proof := h10},
    {prop := 7 ^ x + 8 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 421) [144], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 149 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 151 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 151 ^ y,
if x >= 2, 151 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 5, 12 (mod 14).
Therefore, 151 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 151 ^ y is impossible.
-/
theorem diophantine1_7_8_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (151 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (151 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 151 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 151 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 1201)   7 ^ x + 8 = 153 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 153 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6 (mod 8).
Therefore, 7 ^ x = 1152 (mod 1201).
So 153 ^ y = 1160 (mod 1201), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 153 ^ y is impossible.
-/
theorem diophantine1_7_8_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (153 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 1201) [1152]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (153 ^ y % 1201) [1160]) [
    {prop := List.Mem (7 ^ x % 1201) [1152], proof := h10},
    {prop := 7 ^ x + 8 = 153 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (153 ^ y % 1201) [1160], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 153 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 155 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 155 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 155 ^ y is impossible.
-/
theorem diophantine1_7_8_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 157 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 157 ^ y,
if x >= 2, 157 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
Therefore, 157 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 157 ^ y is impossible.
-/
theorem diophantine1_7_8_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (157 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 157 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 159 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 159 ^ y,
if x >= 2, 159 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
Therefore, 159 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 159 ^ y is impossible.
-/
theorem diophantine1_7_8_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 159 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 159 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (159 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (159 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 159 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 159 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 163 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 163 ^ y,
if x >= 2, 163 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 27 (mod 42).
Therefore, 163 ^ y = 4, 39 (mod 43).
So 7 ^ x = 39, 31 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 163 ^ y is impossible.
-/
theorem diophantine1_7_8_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 43) [4, 39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39, 31]) [
    {prop := List.Mem (163 ^ y % 43) [4, 39], proof := h10},
    {prop := 7 ^ x + 8 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39, 31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 163 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 165 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 165 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 165 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 165 ^ y is impossible.
-/
theorem diophantine1_7_8_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (165 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (165 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 165 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (165 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 165 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 167 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 167 ^ y,
if x >= 2, 167 ^ y = 8 (mod 49).
So y = 2 (mod 14), 
Therefore, 167 ^ y = 20 (mod 29).
So 7 ^ x = 12 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 167 ^ y is impossible.
-/
theorem diophantine1_7_8_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 29) [20]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [12]) [
    {prop := List.Mem (167 ^ y % 29) [20], proof := h10},
    {prop := 7 ^ x + 8 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 167 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 313)   7 ^ x + 8 = 169 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 169 ^ y,
if y >= 2, 7 ^ x = 161 (mod 169).
So x = 27 (mod 156), 
which implies x = 27, 79 (mod 104).
Therefore, 7 ^ x = 175, 138 (mod 313).
So 169 ^ y = 183, 146 (mod 313), but this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 169 ^ y is impossible.
-/
theorem diophantine1_7_8_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (169 ^ y % 169 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 169 = 161 := by omega
  have h9 := Claim (x % 156 = 27) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 169 = 161, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 313) [175, 138]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 156 = 27, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (169 ^ y % 313) [183, 146]) [
    {prop := List.Mem (7 ^ x % 313) [175, 138], proof := h10},
    {prop := 7 ^ x + 8 = 169 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (169 ^ y % 313) [183, 146], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 169 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 171 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 171 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 171 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 8 = 171 ^ y is impossible.
-/
theorem diophantine1_7_8_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (171 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (171 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 171 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (171 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 171 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 337)   7 ^ x + 8 = 173 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 173 ^ y,
if x >= 2, 173 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
which implies y = 12, 26 (mod 28).
Therefore, 173 ^ y = 79, 258 (mod 337).
So 7 ^ x = 71, 250 (mod 337), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 173 ^ y is impossible.
-/
theorem diophantine1_7_8_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 337) [79, 258]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 337) [71, 250]) [
    {prop := List.Mem (173 ^ y % 337) [79, 258], proof := h10},
    {prop := 7 ^ x + 8 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 337) [71, 250], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 173 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 177 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 177 ^ y,
if x >= 2, 177 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 177 ^ y is impossible.
-/
theorem diophantine1_7_8_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 177 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 177 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 177 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 337)   7 ^ x + 8 = 179 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 179 ^ y,
if x >= 2, 179 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
which implies y = 9, 30 (mod 42).
Therefore, 179 ^ y = 42, 295 (mod 337).
So 7 ^ x = 34, 287 (mod 337), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 179 ^ y is impossible.
-/
theorem diophantine1_7_8_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 337) [42, 295]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 337) [34, 287]) [
    {prop := List.Mem (179 ^ y % 337) [42, 295], proof := h10},
    {prop := 7 ^ x + 8 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 337) [34, 287], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 179 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 181 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 181 ^ y,
if x >= 2, 181 ^ y = 8 (mod 49).
So y = 4 (mod 14), 
which implies y = 4 (mod 7).
Therefore, 181 ^ y = 23 (mod 29).
So 7 ^ x = 15 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 181 ^ y is impossible.
-/
theorem diophantine1_7_8_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 29) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [15]) [
    {prop := List.Mem (181 ^ y % 29) [23], proof := h10},
    {prop := 7 ^ x + 8 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 181 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 241)   7 ^ x + 8 = 183 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 183 ^ y,
if y >= 1, 7 ^ x = 53 (mod 61).
So x = 57 (mod 60), 
which implies x = 57, 117, 177, 237 (mod 240).
Therefore, 7 ^ x = 23, 215, 218, 26 (mod 241).
So 183 ^ y = 31, 223, 226, 34 (mod 241), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 183 ^ y is impossible.
-/
theorem diophantine1_7_8_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (183 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 61 = 53 := by omega
  have h9 := Claim (x % 60 = 57) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 61 = 53, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 241) [23, 215, 218, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 57, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (183 ^ y % 241) [31, 223, 226, 34]) [
    {prop := List.Mem (7 ^ x % 241) [23, 215, 218, 26], proof := h10},
    {prop := 7 ^ x + 8 = 183 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (183 ^ y % 241) [31, 223, 226, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 183 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 185 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 185 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 185 ^ y is impossible.
-/
theorem diophantine1_7_8_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 187 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 187 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 187 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 187 ^ y is impossible.
-/
theorem diophantine1_7_8_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 191 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 191 ^ y,
if x >= 2, 191 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
which implies y = 15, 36 (mod 42).
Therefore, 191 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 191 ^ y is impossible.
-/
theorem diophantine1_7_8_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (191 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 191 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 193 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 193 ^ y,
if x >= 2, 193 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
which implies y = 1 (mod 7).
Therefore, 193 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 193 ^ y is impossible.
-/
theorem diophantine1_7_8_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (193 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (193 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 193 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 193 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 195 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 195 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 195 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 195 ^ y is impossible.
-/
theorem diophantine1_7_8_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (195 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (195 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 195 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (195 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 195 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 197 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 197 ^ y,
if x >= 2, 197 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 197 ^ y is impossible.
-/
theorem diophantine1_7_8_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 199 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 199 ^ y,
if x >= 2, 199 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 8 (mod 14).
Therefore, 199 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 199 ^ y is impossible.
-/
theorem diophantine1_7_8_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (199 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (199 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 199 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 199 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 201 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 201 ^ y,
if x >= 2, 201 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
Therefore, 201 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 201 ^ y is impossible.
-/
theorem diophantine1_7_8_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 201 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 201 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (201 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (201 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 201 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 201 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 205 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 205 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 205 ^ y is impossible.
-/
theorem diophantine1_7_8_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 205 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 207 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 207 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 207 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 207 ^ y is impossible.
-/
theorem diophantine1_7_8_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (207 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (207 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 207 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (207 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 207 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 541)   7 ^ x + 8 = 209 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 209 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64, 74, 84 (mod 90).
Therefore, 7 ^ x = 237, 405, 110, 277, 309, 124, 27, 368, 307 (mod 541).
So 209 ^ y = 245, 413, 118, 285, 317, 132, 35, 376, 315 (mod 541), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 209 ^ y is impossible.
-/
theorem diophantine1_7_8_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 541) [237, 405, 110, 277, 309, 124, 27, 368, 307]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 541) [245, 413, 118, 285, 317, 132, 35, 376, 315]) [
    {prop := List.Mem (7 ^ x % 541) [237, 405, 110, 277, 309, 124, 27, 368, 307], proof := h10},
    {prop := 7 ^ x + 8 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 541) [245, 413, 118, 285, 317, 132, 35, 376, 315], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 3361)   7 ^ x + 8 = 211 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 211 ^ y,
if y >= 1, 7 ^ x = 203 (mod 211).
So x = 102 (mod 210), 
which implies x = 18, 60, 102, 144 (mod 168).
Therefore, 7 ^ x = 2744, 735, 617, 2626 (mod 3361).
So 211 ^ y = 2752, 743, 625, 2634 (mod 3361), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 211 ^ y is impossible.
-/
theorem diophantine1_7_8_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (211 ^ y % 211 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 211 = 203 := by omega
  have h9 := Claim (x % 210 = 102) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 211 = 203, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 3361) [2744, 735, 617, 2626]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 210 = 102, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (211 ^ y % 3361) [2752, 743, 625, 2634]) [
    {prop := List.Mem (7 ^ x % 3361) [2744, 735, 617, 2626], proof := h10},
    {prop := 7 ^ x + 8 = 211 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (211 ^ y % 3361) [2752, 743, 625, 2634], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 211 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 213 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 213 ^ y,
if x >= 2, 213 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 2 (mod 7).
Therefore, 213 ^ y = 4 (mod 43).
So 7 ^ x = 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 213 ^ y is impossible.
-/
theorem diophantine1_7_8_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 213 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 213 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (213 ^ y % 43) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39]) [
    {prop := List.Mem (213 ^ y % 43) [4], proof := h10},
    {prop := 7 ^ x + 8 = 213 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 213 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 215 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 215 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 215 ^ y is impossible.
-/
theorem diophantine1_7_8_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 215 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 219 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 219 ^ y,
if x >= 2, 219 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 5 (mod 7).
Therefore, 219 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 219 ^ y is impossible.
-/
theorem diophantine1_7_8_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 219 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 219 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (219 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (219 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 219 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 219 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 221 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 221 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 221 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 221 ^ y is impossible.
-/
theorem diophantine1_7_8_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (221 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 221 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (221 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 223 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 223 ^ y,
if x >= 2, 223 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
Therefore, 223 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 223 ^ y is impossible.
-/
theorem diophantine1_7_8_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (223 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 223 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 225 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 225 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 225 ^ y is impossible.
-/
theorem diophantine1_7_8_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (225 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 225 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 227 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 227 ^ y,
if x >= 2, 227 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 227 ^ y is impossible.
-/
theorem diophantine1_7_8_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 227 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 229 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 229 ^ y,
if x >= 2, 229 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 21).
Therefore, 229 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 229 ^ y is impossible.
-/
theorem diophantine1_7_8_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (229 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 229 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 233 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 233 ^ y,
if x >= 2, 233 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
which implies y = 9, 30 (mod 42).
Therefore, 233 ^ y = 32, 11 (mod 43).
So 7 ^ x = 24, 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 233 ^ y is impossible.
-/
theorem diophantine1_7_8_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 43) [32, 11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [24, 3]) [
    {prop := List.Mem (233 ^ y % 43) [32, 11], proof := h10},
    {prop := 7 ^ x + 8 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [24, 3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 235 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 235 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 235 ^ y is impossible.
-/
theorem diophantine1_7_8_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 235 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 237 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 237 ^ y,
if x >= 2, 237 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
Therefore, 237 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 237 ^ y is impossible.
-/
theorem diophantine1_7_8_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 237 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 237 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (237 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (237 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 237 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 237 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 197)   7 ^ x + 8 = 239 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 239 ^ y,
if x >= 3, 239 ^ y = 8 (mod 343).
So y = 20 (mod 49), 
Therefore, 239 ^ y = 40 (mod 197).
So 7 ^ x = 32 (mod 197), but this is impossible.
Therefore, x < 3.
Further examination shows that 7 ^ x + 8 = 239 ^ y is impossible.
-/
theorem diophantine1_7_8_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (7 ^ x % 343 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 343 = 8 := by omega
  have h9 := Claim (y % 49 = 20) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 343 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 197) [40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 49 = 20, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 197) [32]) [
    {prop := List.Mem (239 ^ y % 197) [40], proof := h10},
    {prop := 7 ^ x + 8 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 197) [32], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 241 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 241 ^ y,
if x >= 2, 241 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
Therefore, 241 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 241 ^ y is impossible.
-/
theorem diophantine1_7_8_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (241 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (241 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 241 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 241 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 243 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 243 ^ y,
if x >= 2, 243 ^ y = 8 (mod 49).
So y = 24 (mod 42), 
Therefore, 243 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 243 ^ y is impossible.
-/
theorem diophantine1_7_8_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 243 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 243 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (243 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (243 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 243 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 243 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 247 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 247 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 247 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 247 ^ y is impossible.
-/
theorem diophantine1_7_8_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (247 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 247 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (247 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_back_enumeration"
  exact h8

/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 249 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 249 ^ y,
if x >= 2, 249 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 12, 33 (mod 42).
Therefore, 249 ^ y = 16, 27 (mod 43).
So 7 ^ x = 8, 19 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 249 ^ y is impossible.
-/
theorem diophantine1_7_8_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 249 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 249 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (249 ^ y % 43) [16, 27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8, 19]) [
    {prop := List.Mem (249 ^ y % 43) [16, 27], proof := h10},
    {prop := 7 ^ x + 8 = 249 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 249 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_front_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
