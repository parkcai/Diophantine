-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 7 <= a <= 7
-- 8 <= b <= 8
-- 2 <= c <= 500
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   7 ^ x + 8 = 2 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 2 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 3 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 3 ^ y,
if x >= 2, 3 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
Therefore, 3 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 3 ^ y is impossible.
-/
theorem diophantine1_7_8_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (3 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 3 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 3 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 4 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 4 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 5 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 5 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 5 ^ y is impossible.
-/
theorem diophantine1_7_8_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 6 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 6 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 7 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 7 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 7 ^ y is impossible.
-/
theorem diophantine1_7_8_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (7 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 7 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 8 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 8 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 9 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 9 ^ y,
if x >= 2, 9 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
Therefore, 9 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 9 ^ y is impossible.
-/
theorem diophantine1_7_8_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (9 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 9 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 9 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 10 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 10 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 11 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 11 ^ y,
if x >= 2, 11 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
which implies y = 3 (mod 7).
Therefore, 11 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 11 ^ y is impossible.
-/
theorem diophantine1_7_8_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (11 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 11 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 12 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 12 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 13 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 13 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 13 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 13 ^ y is impossible.
-/
theorem diophantine1_7_8_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (13 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 13 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (13 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 14 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 14 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 15 ...
-- Trying to disprove y >= 2 with prime factor 5 of 15 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 15 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 15 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_7_8_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 15 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 15 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 16 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 16 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 17 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 17 ^ y,
if x >= 2, 17 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 9 (mod 21).
Therefore, 17 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 17 ^ y is impossible.
-/
theorem diophantine1_7_8_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (17 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 18 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 18 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 19 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 19 ^ y,
if x >= 2, 19 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 19 ^ y is impossible.
-/
theorem diophantine1_7_8_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 19 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 20 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 20 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 21 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 21 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 21 ^ y is impossible.
-/
theorem diophantine1_7_8_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 21 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 22 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 22 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 23 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 23 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 23 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 23 ^ y is impossible.
-/
theorem diophantine1_7_8_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 24 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 24 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 25 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 25 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 25 ^ y is impossible.
-/
theorem diophantine1_7_8_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 26 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 26 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 27 ...
-- Trying to disprove y >= 3 with prime factor 3 of 27 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 27 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 27 ^ y,
if x >= 2, 27 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
which implies y = 12, 26 (mod 28).
Therefore, 27 ^ y = 7, 22 (mod 29).
So 7 ^ x = 28, 14 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 27 ^ y is impossible.
-/
theorem diophantine1_7_8_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 27 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (27 ^ y % 29) [7, 22]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [28, 14]) [
    {prop := List.Mem (27 ^ y % 29) [7, 22], proof := h10},
    {prop := 7 ^ x + 8 = 27 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [28, 14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 27 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 28 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 28 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 29 of 29 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 29 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 29 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 29 ^ y is impossible.
-/
theorem diophantine1_7_8_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 30 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 30 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 31 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 31 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 31 ^ y is impossible.
-/
theorem diophantine1_7_8_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 32 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 32 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 33 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 33 ...
-- Trying to disprove y >= 1 with prime factor 11 of 33 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying to disprove y >= 3 with prime factor 3 of 33 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 33 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 33 ^ y,
if x >= 2, 33 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
Therefore, 33 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 33 ^ y is impossible.
-/
theorem diophantine1_7_8_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 33 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (33 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (33 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 33 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 33 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 34 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 34 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 35 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 35 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 35 ^ y is impossible.
-/
theorem diophantine1_7_8_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 35 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 36 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 36 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 37 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 37 ^ y,
if y >= 1, 7 ^ x = 29 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 37 ^ y is impossible.
-/
theorem diophantine1_7_8_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 37 = 29 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 38 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 38 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 39 ...
-- Trying to disprove y >= 1 with prime factor 13 of 39 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying to disprove y >= 3 with prime factor 3 of 39 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 39 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 39 ^ y,
if x >= 2, 39 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 13 (mod 14).
Therefore, 39 ^ y = 11, 32 (mod 43).
So 7 ^ x = 3, 24 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 39 ^ y is impossible.
-/
theorem diophantine1_7_8_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 39 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (39 ^ y % 43) [11, 32]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3, 24]) [
    {prop := List.Mem (39 ^ y % 43) [11, 32], proof := h10},
    {prop := 7 ^ x + 8 = 39 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3, 24], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 39 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 40 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 40 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 41 of 41 ...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 521...
-- Trying prime 601...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 41 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 41 ^ y,
if x >= 2, 41 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
which implies y = 1 (mod 7).
Therefore, 41 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 41 ^ y is impossible.
-/
theorem diophantine1_7_8_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (41 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 41 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 42 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 42 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 43 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 43 ^ y,
if y >= 1, 7 ^ x = 35 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 43 ^ y is impossible.
-/
theorem diophantine1_7_8_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 43 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 43 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 44 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 44 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 45 ...
-- Trying to disprove y >= 1 with prime factor 5 of 45 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 45 ...
-- Trying to disprove y >= 2 with prime factor 5 of 45 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 45 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 45 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 45 ^ y is impossible.
-/
theorem diophantine1_7_8_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 45 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 46 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 46 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 47 of 47 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 47 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 47 ^ y,
if y >= 1, 7 ^ x = 39 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 47 ^ y is impossible.
-/
theorem diophantine1_7_8_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (47 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 47 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 48 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 48 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 49 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 49 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 49 ^ y is impossible.
-/
theorem diophantine1_7_8_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (49 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 49 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 50 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 50 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 51 ...
-- Trying to disprove y >= 1 with prime factor 17 of 51 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove y >= 3 with prime factor 3 of 51 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 51 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 51 ^ y,
if x >= 2, 51 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
which implies y = 3, 10 (mod 14).
Therefore, 51 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 51 ^ y is impossible.
-/
theorem diophantine1_7_8_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 51 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (51 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (51 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 51 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 51 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 52 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 52 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 53 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 53 ^ y,
if x >= 2, 53 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
Therefore, 53 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 53 ^ y is impossible.
-/
theorem diophantine1_7_8_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (53 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 54 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 54 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 55 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 55 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 55 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 55 ^ y is impossible.
-/
theorem diophantine1_7_8_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 56 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 56 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 57 ...
-- Trying to disprove y >= 3 with prime factor 3 of 57 ...
-- Trying to disprove y >= 4 with prime factor 3 of 57 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 57 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 57 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 57 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_7_8_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 57 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (57 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (57 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 57 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (57 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 57 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 58 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 58 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 59 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 59 ^ y,
if x >= 2, 59 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 7).
Therefore, 59 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 59 ^ y is impossible.
-/
theorem diophantine1_7_8_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (59 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 60 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 60 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 61 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 61 ^ y,
if x >= 2, 61 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
Therefore, 61 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 61 ^ y is impossible.
-/
theorem diophantine1_7_8_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (61 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (61 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 61 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 61 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 62 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 62 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 63 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 63 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 63 ^ y is impossible.
-/
theorem diophantine1_7_8_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 63 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 64 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 64 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   7 ^ x + 8 = 65 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 65 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15 (mod 24).
Therefore, 7 ^ x = 51, 22 (mod 73).
So 65 ^ y = 59, 30 (mod 73), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 65 ^ y is impossible.
-/
theorem diophantine1_7_8_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 73) [51, 22]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 73) [59, 30]) [
    {prop := List.Mem (7 ^ x % 73) [51, 22], proof := h10},
    {prop := 7 ^ x + 8 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 73) [59, 30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 66 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 66 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 67 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 67 ^ y,
if x >= 2, 67 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 67 ^ y is impossible.
-/
theorem diophantine1_7_8_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 68 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 68 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 69 ...
-- Trying to disprove y >= 1 with prime factor 23 of 69 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Trying to disprove y >= 3 with prime factor 3 of 69 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Trying prime 71...
-- Trying prime 113...
-- Trying prime 127...
-- Trying to disprove y >= 4 with prime factor 3 of 69 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 69 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 69 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 69 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 8 = 69 ^ y is impossible.
-/
theorem diophantine1_7_8_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (69 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (69 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 69 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (69 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 69 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 70 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 70 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Trying prime 211...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 211)   7 ^ x + 8 = 71 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 71 ^ y,
if y >= 1, 7 ^ x = 63 (mod 71).
So x = 53 (mod 70), 
which implies x = 53, 123, 193 (mod 210).
Therefore, 7 ^ x = 41, 18, 152 (mod 211).
So 71 ^ y = 49, 26, 160 (mod 211), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 71 ^ y is impossible.
-/
theorem diophantine1_7_8_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 71 = 63 := by omega
  have h9 := Claim (x % 70 = 53) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 71 = 63, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 211) [41, 18, 152]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 70 = 53, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (71 ^ y % 211) [49, 26, 160]) [
    {prop := List.Mem (7 ^ x % 211) [41, 18, 152], proof := h10},
    {prop := 7 ^ x + 8 = 71 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (71 ^ y % 211) [49, 26, 160], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 72 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 72 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 73 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 73 ^ y,
if x >= 2, 73 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
Therefore, 73 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 73 ^ y is impossible.
-/
theorem diophantine1_7_8_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (73 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 74 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 74 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 75 ...
-- Trying to disprove y >= 1 with prime factor 5 of 75 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 75 ...
-- Trying to disprove y >= 2 with prime factor 5 of 75 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 75 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 75 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 75 ^ y is impossible.
-/
theorem diophantine1_7_8_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 75 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 76 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 76 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 77 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 77 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 77 ^ y is impossible.
-/
theorem diophantine1_7_8_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (77 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 77 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 78 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 78 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 79 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 79 ^ y,
if x >= 2, 79 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 79 ^ y is impossible.
-/
theorem diophantine1_7_8_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 79 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 80 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 80 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 81 ...
-- Trying to disprove y >= 3 with prime factor 3 of 81 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 81 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 81 ^ y,
if x >= 2, 81 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
Therefore, 81 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 81 ^ y is impossible.
-/
theorem diophantine1_7_8_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 81 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (81 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (81 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 81 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 81 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 82 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 82 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 83 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 83 ^ y,
if x >= 2, 83 ^ y = 8 (mod 49).
So y = 4 (mod 14), 
which implies y = 4, 11, 18 (mod 21).
Therefore, 83 ^ y = 38, 13, 35 (mod 43).
So 7 ^ x = 30, 5, 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 83 ^ y is impossible.
-/
theorem diophantine1_7_8_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 43) [38, 13, 35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [30, 5, 27]) [
    {prop := List.Mem (83 ^ y % 43) [38, 13, 35], proof := h10},
    {prop := 7 ^ x + 8 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [30, 5, 27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 84 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 84 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   7 ^ x + 8 = 85 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 85 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86 (mod 96).
Therefore, 7 ^ x = 85, 53, 65, 12, 44, 32 (mod 97).
So 85 ^ y = 93, 61, 73, 20, 52, 40 (mod 97), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 85 ^ y is impossible.
-/
theorem diophantine1_7_8_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (85 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 97) [93, 61, 73, 20, 52, 40]) [
    {prop := List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32], proof := h10},
    {prop := 7 ^ x + 8 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 97) [93, 61, 73, 20, 52, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 85 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 86 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 86 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 87 ...
-- Trying to disprove y >= 3 with prime factor 3 of 87 ...
-- Trying to disprove y >= 1 with prime factor 29 of 87 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 87 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 87 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 87 ^ y is impossible.
-/
theorem diophantine1_7_8_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (87 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 87 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 88 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 88 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 89 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 89 ^ y,
if x >= 2, 89 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
Therefore, 89 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 89 ^ y is impossible.
-/
theorem diophantine1_7_8_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (89 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 90 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 90 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 91 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 91 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 91 ^ y is impossible.
-/
theorem diophantine1_7_8_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (91 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 91 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 92 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 92 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 93 ...
-- Trying to disprove y >= 3 with prime factor 3 of 93 ...
-- Trying to disprove y >= 1 with prime factor 31 of 93 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 93 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 93 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 93 ^ y is impossible.
-/
theorem diophantine1_7_8_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (93 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 93 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 94 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 94 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 95 ...
-- Trying to disprove y >= 2 with prime factor 5 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 95 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 95 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 95 ^ y is impossible.
-/
theorem diophantine1_7_8_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 95 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 96 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 96 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 97 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 97 ^ y,
if x >= 2, 97 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 97 ^ y is impossible.
-/
theorem diophantine1_7_8_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 98 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 98 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 99 ...
-- Trying to disprove y >= 1 with prime factor 11 of 99 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 99 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 99 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 99 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 99 ^ y is impossible.
-/
theorem diophantine1_7_8_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (99 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (99 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 99 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (99 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 99 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 100 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 100 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 101 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 101 ^ y,
if x >= 2, 101 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 15 (mod 21).
Therefore, 101 ^ y = 4 (mod 43).
So 7 ^ x = 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 101 ^ y is impossible.
-/
theorem diophantine1_7_8_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 43) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39]) [
    {prop := List.Mem (101 ^ y % 43) [4], proof := h10},
    {prop := 7 ^ x + 8 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 101 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 102 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 102 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (102 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 103 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 103 ^ y,
if x >= 2, 103 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 15 (mod 21).
Therefore, 103 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 103 ^ y is impossible.
-/
theorem diophantine1_7_8_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (103 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 104 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 104 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (104 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 105 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 105 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 105 ^ y is impossible.
-/
theorem diophantine1_7_8_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 105 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 106 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 106 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 107 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 107 ^ y,
if x >= 2, 107 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
which implies y = 4 (mod 7).
Therefore, 107 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 107 ^ y is impossible.
-/
theorem diophantine1_7_8_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (107 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 107 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 108 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 108 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (108 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 109 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 109 ^ y,
if x >= 2, 109 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
Therefore, 109 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 109 ^ y is impossible.
-/
theorem diophantine1_7_8_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (109 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 109 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 110 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 110 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (110 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 111 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 111 ...
-- Trying to disprove y >= 3 with prime factor 3 of 111 ...
-- Trying to disprove y >= 1 with prime factor 37 of 111 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 111 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 111 ^ y,
if y >= 1, 7 ^ x = 29 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 111 ^ y is impossible.
-/
theorem diophantine1_7_8_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (111 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 37 = 29 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 111 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 112 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 112 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (112 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 113 of 113 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 113 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 113 ^ y,
if y >= 1, 7 ^ x = 105 (mod 113).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 113 ^ y is impossible.
-/
theorem diophantine1_7_8_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (113 ^ y % 113 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 113 = 105 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 113 = 105, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 113 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 114 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 114 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (114 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 115 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 23 of 115 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 115 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 115 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 115 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 115 ^ y is impossible.
-/
theorem diophantine1_7_8_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (115 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 115 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (115 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 116 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 116 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (116 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 117 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 117 ...
-- Trying to disprove y >= 1 with prime factor 13 of 117 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 117 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 117 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 117 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 117 ^ y is impossible.
-/
theorem diophantine1_7_8_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (117 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (117 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 117 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (117 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 117 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 118 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 118 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 119 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 119 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 119 ^ y is impossible.
-/
theorem diophantine1_7_8_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (119 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 119 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 120 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 120 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (120 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 121 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 121 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54 (mod 60).
Therefore, 7 ^ x = 22, 19, 58, 39, 42, 3 (mod 61).
So 121 ^ y = 30, 27, 5, 47, 50, 11 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 121 ^ y is impossible.
-/
theorem diophantine1_7_8_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (121 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [22, 19, 58, 39, 42, 3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 61) [30, 27, 5, 47, 50, 11]) [
    {prop := List.Mem (7 ^ x % 61) [22, 19, 58, 39, 42, 3], proof := h10},
    {prop := 7 ^ x + 8 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 61) [30, 27, 5, 47, 50, 11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 121 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 122 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 122 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 123 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 123 ...
-- Trying to disprove y >= 3 with prime factor 3 of 123 ...
-- Trying to disprove y >= 1 with prime factor 41 of 123 ...
-- Trying prime 241...
-- Trying prime 281...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 281)   7 ^ x + 8 = 123 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 123 ^ y,
if y >= 1, 7 ^ x = 33 (mod 41).
So x = 22 (mod 40), 
which implies x = 2 (mod 20).
Therefore, 7 ^ x = 49 (mod 281).
So 123 ^ y = 57 (mod 281), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 123 ^ y is impossible.
-/
theorem diophantine1_7_8_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (123 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 41 = 33 := by omega
  have h9 := Claim (x % 40 = 22) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 41 = 33, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 281) [49]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 40 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (123 ^ y % 281) [57]) [
    {prop := List.Mem (7 ^ x % 281) [49], proof := h10},
    {prop := 7 ^ x + 8 = 123 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (123 ^ y % 281) [57], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 123 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 124 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 124 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (124 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 125 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 125 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 125 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 125 ^ y is impossible.
-/
theorem diophantine1_7_8_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 125 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 126 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 126 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_126 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 126 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (126 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 127 of 127 ...
-- Trying prime 379...
-- Trying prime 631...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 631)   7 ^ x + 8 = 127 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 127 ^ y,
if y >= 1, 7 ^ x = 119 (mod 127).
So x = 9 (mod 126), 
which implies x = 9, 135, 261, 387, 513 (mod 630).
Therefore, 7 ^ x = 526, 362, 38, 506, 461 (mod 631).
So 127 ^ y = 534, 370, 46, 514, 469 (mod 631), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 127 ^ y is impossible.
-/
theorem diophantine1_7_8_127 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 127 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (127 ^ y % 127 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 127 = 119 := by omega
  have h9 := Claim (x % 126 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 127 = 119, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 631) [526, 362, 38, 506, 461]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 126 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (127 ^ y % 631) [534, 370, 46, 514, 469]) [
    {prop := List.Mem (7 ^ x % 631) [526, 362, 38, 506, 461], proof := h10},
    {prop := 7 ^ x + 8 = 127 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (127 ^ y % 631) [534, 370, 46, 514, 469], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 127 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 128 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 128 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_128 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 128 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (128 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 129 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 129 ...
-- Trying to disprove y >= 3 with prime factor 3 of 129 ...
-- Trying to disprove y >= 1 with prime factor 43 of 129 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 129 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 129 ^ y,
if y >= 1, 7 ^ x = 35 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 129 ^ y is impossible.
-/
theorem diophantine1_7_8_129 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 129 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (129 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 43 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 43 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 129 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 130 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 130 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_130 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 130 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (130 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 131 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 131 ^ y,
if x >= 2, 131 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 14).
Therefore, 131 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 131 ^ y is impossible.
-/
theorem diophantine1_7_8_131 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 131 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 131 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 131 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (131 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (131 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 131 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 131 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 132 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 132 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_132 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 132 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (132 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 133 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 133 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 133 ^ y is impossible.
-/
theorem diophantine1_7_8_133 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 133 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (133 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 133 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 134 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 134 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_134 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 134 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (134 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 135 ...
-- Trying to disprove y >= 1 with prime factor 5 of 135 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 135 ...
-- Trying to disprove y >= 2 with prime factor 5 of 135 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 135 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 135 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 135 ^ y is impossible.
-/
theorem diophantine1_7_8_135 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 135 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (135 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 135 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 136 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 136 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_136 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 136 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (136 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 137 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 137 ^ y,
if x >= 2, 137 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 13 (mod 14).
Therefore, 137 ^ y = 16, 27 (mod 43).
So 7 ^ x = 8, 19 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 137 ^ y is impossible.
-/
theorem diophantine1_7_8_137 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 137 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 137 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 137 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (137 ^ y % 43) [16, 27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8, 19]) [
    {prop := List.Mem (137 ^ y % 43) [16, 27], proof := h10},
    {prop := 7 ^ x + 8 = 137 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 137 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 138 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 138 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_138 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 138 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (138 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 139 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 139 ^ y,
if x >= 2, 139 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
which implies y = 1 (mod 7).
Therefore, 139 ^ y = 23 (mod 29).
So 7 ^ x = 15 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 139 ^ y is impossible.
-/
theorem diophantine1_7_8_139 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 139 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 139 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 139 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (139 ^ y % 29) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [15]) [
    {prop := List.Mem (139 ^ y % 29) [23], proof := h10},
    {prop := 7 ^ x + 8 = 139 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 139 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 140 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 140 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_140 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 140 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (140 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 141 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 141 ...
-- Trying to disprove y >= 3 with prime factor 3 of 141 ...
-- Trying to disprove y >= 1 with prime factor 47 of 141 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 141 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 141 ^ y,
if y >= 1, 7 ^ x = 39 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 141 ^ y is impossible.
-/
theorem diophantine1_7_8_141 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 141 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (141 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 141 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 142 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 142 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_142 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 142 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (142 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 143 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   7 ^ x + 8 = 143 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 143 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64 (mod 70).
Therefore, 7 ^ x = 58, 54, 16, 10, 24, 15, 36 (mod 71).
So 143 ^ y = 66, 62, 24, 18, 32, 23, 44 (mod 71), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 143 ^ y is impossible.
-/
theorem diophantine1_7_8_143 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 143 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (143 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (143 ^ y % 71) [66, 62, 24, 18, 32, 23, 44]) [
    {prop := List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36], proof := h10},
    {prop := 7 ^ x + 8 = 143 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (143 ^ y % 71) [66, 62, 24, 18, 32, 23, 44], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 143 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 144 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 144 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_144 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 144 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (144 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 145 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 145 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 145 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 145 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 145 ^ y is impossible.
-/
theorem diophantine1_7_8_145 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 145 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (145 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 145 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 146 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 146 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_146 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 146 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (146 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 147 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 147 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 147 ^ y is impossible.
-/
theorem diophantine1_7_8_147 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 147 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (147 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 147 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 148 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 148 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_148 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 148 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (148 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 421)   7 ^ x + 8 = 149 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 149 ^ y,
if x >= 2, 149 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
Therefore, 149 ^ y = 152 (mod 421).
So 7 ^ x = 144 (mod 421), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 149 ^ y is impossible.
-/
theorem diophantine1_7_8_149 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 149 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 149 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 149 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (149 ^ y % 421) [152]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 421) [144]) [
    {prop := List.Mem (149 ^ y % 421) [152], proof := h10},
    {prop := 7 ^ x + 8 = 149 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 421) [144], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 149 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 150 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 150 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_150 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 150 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (150 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 151 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 151 ^ y,
if x >= 2, 151 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 5, 12 (mod 14).
Therefore, 151 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 151 ^ y is impossible.
-/
theorem diophantine1_7_8_151 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 151 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 151 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 151 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (151 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (151 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 151 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 151 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 152 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 152 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_152 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 152 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (152 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 153 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 153 ...
-- Trying to disprove y >= 1 with prime factor 17 of 153 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Trying prime 401...
-- Trying prime 433...
-- Trying prime 449...
-- Trying prime 577...
-- Trying prime 593...
-- Trying prime 641...
-- Trying prime 673...
-- Trying prime 769...
-- Trying prime 881...
-- Trying prime 929...
-- Trying prime 977...
-- Trying prime 1009...
-- Trying prime 1153...
-- Trying prime 1201...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 1201)   7 ^ x + 8 = 153 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 153 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6 (mod 8).
Therefore, 7 ^ x = 1152 (mod 1201).
So 153 ^ y = 1160 (mod 1201), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 153 ^ y is impossible.
-/
theorem diophantine1_7_8_153 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 153 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (153 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 1201) [1152]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (153 ^ y % 1201) [1160]) [
    {prop := List.Mem (7 ^ x % 1201) [1152], proof := h10},
    {prop := 7 ^ x + 8 = 153 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (153 ^ y % 1201) [1160], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 153 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 154 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 154 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_154 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 154 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (154 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 155 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 155 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 155 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 155 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 155 ^ y is impossible.
-/
theorem diophantine1_7_8_155 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 155 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (155 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 155 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 156 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 156 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_156 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 156 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (156 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 157 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 157 ^ y,
if x >= 2, 157 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
Therefore, 157 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 157 ^ y is impossible.
-/
theorem diophantine1_7_8_157 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 157 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 157 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 157 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (157 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (157 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 157 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 157 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 158 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 158 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_158 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 158 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (158 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 159 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 159 ...
-- Trying to disprove y >= 3 with prime factor 3 of 159 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 159 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 159 ^ y,
if x >= 2, 159 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
Therefore, 159 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 159 ^ y is impossible.
-/
theorem diophantine1_7_8_159 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 159 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 159 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 159 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (159 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (159 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 159 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 159 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 160 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 160 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_160 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 160 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (160 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 161 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 161 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 161 ^ y is impossible.
-/
theorem diophantine1_7_8_161 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 161 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (161 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 161 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 162 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 162 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_162 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 162 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (162 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 163 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 163 ^ y,
if x >= 2, 163 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 27 (mod 42).
Therefore, 163 ^ y = 4, 39 (mod 43).
So 7 ^ x = 39, 31 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 163 ^ y is impossible.
-/
theorem diophantine1_7_8_163 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 163 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 163 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 163 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (163 ^ y % 43) [4, 39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39, 31]) [
    {prop := List.Mem (163 ^ y % 43) [4, 39], proof := h10},
    {prop := 7 ^ x + 8 = 163 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39, 31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 163 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 164 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 164 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_164 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 164 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (164 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 165 ...
-- Trying to disprove y >= 1 with prime factor 5 of 165 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 165 ...
-- Trying to disprove y >= 1 with prime factor 11 of 165 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 165 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 165 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 165 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 165 ^ y is impossible.
-/
theorem diophantine1_7_8_165 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 165 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (165 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (165 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 165 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (165 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 165 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 166 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 166 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_166 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 166 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (166 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 167 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 167 ^ y,
if x >= 2, 167 ^ y = 8 (mod 49).
So y = 2 (mod 14), 
Therefore, 167 ^ y = 20 (mod 29).
So 7 ^ x = 12 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 167 ^ y is impossible.
-/
theorem diophantine1_7_8_167 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 167 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 167 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 167 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (167 ^ y % 29) [20]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [12]) [
    {prop := List.Mem (167 ^ y % 29) [20], proof := h10},
    {prop := 7 ^ x + 8 = 167 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [12], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 167 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 168 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 168 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_168 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 168 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (168 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 169 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 169 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 169 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 169 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 169 ^ y is impossible.
-/
theorem diophantine1_7_8_169 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 169 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (169 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (169 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 169 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (169 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 169 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 170 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 170 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_170 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 170 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (170 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 171 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 171 ...
-- Trying to disprove y >= 1 with prime factor 19 of 171 ...
-- Trying to disprove y >= 3 with prime factor 3 of 171 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Trying prime 463...
-- Trying prime 547...
-- Trying prime 631...
-- Trying prime 673...
-- Trying prime 757...
-- Trying prime 883...
-- Trying prime 967...
-- Trying prime 1009...
-- Trying prime 1051...
-- Trying prime 1093...
-- Trying prime 1303...
-- Trying prime 1429...
-- Trying prime 1471...
-- Trying prime 1597...
-- Trying prime 1723...
-- Trying prime 1933...
-- Trying prime 2017...
-- Trying prime 2143...
-- Trying prime 2269...
-- Trying to disprove y >= 4 with prime factor 3 of 171 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 171 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 171 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 171 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 8 = 171 ^ y is impossible.
-/
theorem diophantine1_7_8_171 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 171 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (171 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (171 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 171 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (171 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 171 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 172 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 172 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_172 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 172 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (172 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 337)   7 ^ x + 8 = 173 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 173 ^ y,
if x >= 2, 173 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
which implies y = 12, 26 (mod 28).
Therefore, 173 ^ y = 79, 258 (mod 337).
So 7 ^ x = 71, 250 (mod 337), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 173 ^ y is impossible.
-/
theorem diophantine1_7_8_173 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 173 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 173 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 173 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (173 ^ y % 337) [79, 258]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 337) [71, 250]) [
    {prop := List.Mem (173 ^ y % 337) [79, 258], proof := h10},
    {prop := 7 ^ x + 8 = 173 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 337) [71, 250], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 173 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 174 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 174 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_174 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 174 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (174 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 175 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 175 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 175 ^ y is impossible.
-/
theorem diophantine1_7_8_175 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 175 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (175 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 175 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 176 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 176 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_176 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 176 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (176 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 177 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 177 ...
-- Trying to disprove y >= 3 with prime factor 3 of 177 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 177 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 177 ^ y,
if x >= 2, 177 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 177 ^ y is impossible.
-/
theorem diophantine1_7_8_177 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 177 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 177 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 177 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 177 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 178 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 178 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_178 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 178 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (178 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 337)   7 ^ x + 8 = 179 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 179 ^ y,
if x >= 2, 179 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
which implies y = 9, 30 (mod 42).
Therefore, 179 ^ y = 42, 295 (mod 337).
So 7 ^ x = 34, 287 (mod 337), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 179 ^ y is impossible.
-/
theorem diophantine1_7_8_179 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 179 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 179 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 179 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (179 ^ y % 337) [42, 295]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 337) [34, 287]) [
    {prop := List.Mem (179 ^ y % 337) [42, 295], proof := h10},
    {prop := 7 ^ x + 8 = 179 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 337) [34, 287], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 179 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 180 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 180 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_180 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 180 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (180 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 181 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 181 ^ y,
if x >= 2, 181 ^ y = 8 (mod 49).
So y = 4 (mod 14), 
which implies y = 4 (mod 7).
Therefore, 181 ^ y = 23 (mod 29).
So 7 ^ x = 15 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 181 ^ y is impossible.
-/
theorem diophantine1_7_8_181 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 181 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 181 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 181 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (181 ^ y % 29) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [15]) [
    {prop := List.Mem (181 ^ y % 29) [23], proof := h10},
    {prop := 7 ^ x + 8 = 181 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 181 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 182 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 182 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_182 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 182 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (182 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 183 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 183 ...
-- Trying to disprove y >= 3 with prime factor 3 of 183 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 61 of 183 ...
-- Trying prime 181...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   7 ^ x + 8 = 183 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 183 ^ y,
if y >= 1, 7 ^ x = 53 (mod 61).
So x = 57 (mod 60), 
which implies x = 57, 117, 177, 237 (mod 240).
Therefore, 7 ^ x = 23, 215, 218, 26 (mod 241).
So 183 ^ y = 31, 223, 226, 34 (mod 241), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 183 ^ y is impossible.
-/
theorem diophantine1_7_8_183 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 183 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (183 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 61 = 53 := by omega
  have h9 := Claim (x % 60 = 57) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 61 = 53, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 241) [23, 215, 218, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 57, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (183 ^ y % 241) [31, 223, 226, 34]) [
    {prop := List.Mem (7 ^ x % 241) [23, 215, 218, 26], proof := h10},
    {prop := 7 ^ x + 8 = 183 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (183 ^ y % 241) [31, 223, 226, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 183 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 184 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 184 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_184 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 184 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (184 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 185 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 185 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 185 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 185 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 185 ^ y is impossible.
-/
theorem diophantine1_7_8_185 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 185 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (185 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 185 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 186 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 186 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_186 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 186 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (186 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 187 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 187 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 187 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 187 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 187 ^ y is impossible.
-/
theorem diophantine1_7_8_187 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 187 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (187 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (187 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 187 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (187 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 187 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 188 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 188 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_188 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 188 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (188 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 189 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 189 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 189 ^ y is impossible.
-/
theorem diophantine1_7_8_189 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 189 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (189 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 189 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 190 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 190 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_190 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 190 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (190 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 191 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 191 ^ y,
if x >= 2, 191 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
which implies y = 15, 36 (mod 42).
Therefore, 191 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 191 ^ y is impossible.
-/
theorem diophantine1_7_8_191 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 191 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 191 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 191 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (191 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (191 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 191 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 191 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 192 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 192 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_192 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 192 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (192 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 193 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 193 ^ y,
if x >= 2, 193 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
which implies y = 1 (mod 7).
Therefore, 193 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 193 ^ y is impossible.
-/
theorem diophantine1_7_8_193 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 193 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 193 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 193 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (193 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (193 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 193 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 193 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 194 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 194 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_194 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 194 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (194 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 195 ...
-- Trying to disprove y >= 1 with prime factor 5 of 195 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 195 ...
-- Trying to disprove y >= 1 with prime factor 13 of 195 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 195 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 195 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 195 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 195 ^ y is impossible.
-/
theorem diophantine1_7_8_195 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 195 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (195 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (195 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 195 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (195 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 195 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 196 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 196 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_196 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 196 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (196 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 197 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 197 ^ y,
if x >= 2, 197 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 197 ^ y is impossible.
-/
theorem diophantine1_7_8_197 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 197 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 197 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 197 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 197 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 198 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 198 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_198 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 198 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (198 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 199 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 199 ^ y,
if x >= 2, 199 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 8 (mod 14).
Therefore, 199 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 199 ^ y is impossible.
-/
theorem diophantine1_7_8_199 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 199 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 199 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 199 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (199 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (199 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 199 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 199 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 200 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 200 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_200 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 200 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (200 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 201 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 201 ...
-- Trying to disprove y >= 3 with prime factor 3 of 201 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 201 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 201 ^ y,
if x >= 2, 201 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
Therefore, 201 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 201 ^ y is impossible.
-/
theorem diophantine1_7_8_201 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 201 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 201 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 201 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (201 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (201 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 201 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 201 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 202 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 202 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_202 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 202 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (202 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 203 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 203 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 203 ^ y is impossible.
-/
theorem diophantine1_7_8_203 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 203 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (203 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 203 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 204 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 204 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_204 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 204 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (204 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 205 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 205 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 205 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 205 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 205 ^ y is impossible.
-/
theorem diophantine1_7_8_205 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 205 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (205 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 205 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 206 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 206 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_206 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 206 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (206 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 207 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 207 ...
-- Trying to disprove y >= 1 with prime factor 23 of 207 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 207 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 207 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 207 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 207 ^ y is impossible.
-/
theorem diophantine1_7_8_207 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 207 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (207 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (207 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 207 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (207 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 207 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 208 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 208 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_208 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 208 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (208 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 209 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying prime 131...
-- Trying prime 151...
-- Trying prime 181...
-- Trying prime 191...
-- Trying prime 211...
-- Trying prime 241...
-- Trying prime 251...
-- Trying prime 271...
-- Trying prime 281...
-- Trying prime 311...
-- Trying prime 331...
-- Trying prime 401...
-- Trying prime 421...
-- Trying prime 431...
-- Trying prime 461...
-- Trying prime 491...
-- Trying prime 521...
-- Trying prime 541...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 541)   7 ^ x + 8 = 209 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 209 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64, 74, 84 (mod 90).
Therefore, 7 ^ x = 237, 405, 110, 277, 309, 124, 27, 368, 307 (mod 541).
So 209 ^ y = 245, 413, 118, 285, 317, 132, 35, 376, 315 (mod 541), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 209 ^ y is impossible.
-/
theorem diophantine1_7_8_209 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 209 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (209 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 541) [237, 405, 110, 277, 309, 124, 27, 368, 307]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (209 ^ y % 541) [245, 413, 118, 285, 317, 132, 35, 376, 315]) [
    {prop := List.Mem (7 ^ x % 541) [237, 405, 110, 277, 309, 124, 27, 368, 307], proof := h10},
    {prop := 7 ^ x + 8 = 209 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (209 ^ y % 541) [245, 413, 118, 285, 317, 132, 35, 376, 315], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 209 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 210 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 210 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_210 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 210 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (210 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 211 of 211 ...
-- Trying prime 421...
-- Trying prime 631...
-- Trying prime 1051...
-- Trying prime 1471...
-- Trying prime 2311...
-- Trying prime 2521...
-- Trying prime 2731...
-- Trying prime 3361...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 3361)   7 ^ x + 8 = 211 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 211 ^ y,
if y >= 1, 7 ^ x = 203 (mod 211).
So x = 102 (mod 210), 
which implies x = 18, 60, 102, 144 (mod 168).
Therefore, 7 ^ x = 2744, 735, 617, 2626 (mod 3361).
So 211 ^ y = 2752, 743, 625, 2634 (mod 3361), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 211 ^ y is impossible.
-/
theorem diophantine1_7_8_211 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 211 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (211 ^ y % 211 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 211 = 203 := by omega
  have h9 := Claim (x % 210 = 102) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 211 = 203, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 3361) [2744, 735, 617, 2626]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 210 = 102, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (211 ^ y % 3361) [2752, 743, 625, 2634]) [
    {prop := List.Mem (7 ^ x % 3361) [2744, 735, 617, 2626], proof := h10},
    {prop := 7 ^ x + 8 = 211 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (211 ^ y % 3361) [2752, 743, 625, 2634], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 211 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 212 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 212 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_212 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 212 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (212 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 213 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 213 ...
-- Trying to disprove y >= 3 with prime factor 3 of 213 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 213 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 213 ^ y,
if x >= 2, 213 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 2 (mod 7).
Therefore, 213 ^ y = 4 (mod 43).
So 7 ^ x = 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 213 ^ y is impossible.
-/
theorem diophantine1_7_8_213 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 213 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 213 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 213 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (213 ^ y % 43) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39]) [
    {prop := List.Mem (213 ^ y % 43) [4], proof := h10},
    {prop := 7 ^ x + 8 = 213 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 213 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 214 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 214 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_214 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 214 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (214 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 215 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 215 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 215 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 215 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 215 ^ y is impossible.
-/
theorem diophantine1_7_8_215 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 215 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (215 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 215 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 216 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 216 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_216 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 216 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (216 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 217 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 217 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 217 ^ y is impossible.
-/
theorem diophantine1_7_8_217 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 217 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (217 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 217 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 218 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 218 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_218 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 218 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (218 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 219 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 219 ...
-- Trying to disprove y >= 3 with prime factor 3 of 219 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 219 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 219 ^ y,
if x >= 2, 219 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 5 (mod 7).
Therefore, 219 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 219 ^ y is impossible.
-/
theorem diophantine1_7_8_219 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 219 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 219 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 219 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (219 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (219 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 219 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 219 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 220 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 220 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_220 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 220 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (220 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 221 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 221 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 221 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 221 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 221 ^ y is impossible.
-/
theorem diophantine1_7_8_221 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 221 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (221 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (221 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 221 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (221 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 221 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 222 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 222 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_222 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 222 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (222 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 223 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 223 ^ y,
if x >= 2, 223 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
Therefore, 223 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 223 ^ y is impossible.
-/
theorem diophantine1_7_8_223 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 223 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 223 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 223 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (223 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (223 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 223 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 223 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 224 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 224 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_224 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 224 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (224 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 225 ...
-- Trying to disprove y >= 1 with prime factor 5 of 225 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 225 ...
-- Trying to disprove y >= 2 with prime factor 5 of 225 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 225 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 225 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 225 ^ y is impossible.
-/
theorem diophantine1_7_8_225 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 225 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (225 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 225 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 226 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 226 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_226 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 226 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (226 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 227 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 227 ^ y,
if x >= 2, 227 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 227 ^ y is impossible.
-/
theorem diophantine1_7_8_227 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 227 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 227 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 227 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 227 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 228 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 228 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_228 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 228 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (228 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 229 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 229 ^ y,
if x >= 2, 229 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 21).
Therefore, 229 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 229 ^ y is impossible.
-/
theorem diophantine1_7_8_229 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 229 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 229 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 229 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (229 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (229 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 229 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 229 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 230 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 230 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_230 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 230 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (230 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 231 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 231 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 231 ^ y is impossible.
-/
theorem diophantine1_7_8_231 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 231 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (231 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 231 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 232 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 232 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_232 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 232 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (232 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 233 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 233 ^ y,
if x >= 2, 233 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
which implies y = 9, 30 (mod 42).
Therefore, 233 ^ y = 32, 11 (mod 43).
So 7 ^ x = 24, 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 233 ^ y is impossible.
-/
theorem diophantine1_7_8_233 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 233 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 233 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 233 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (233 ^ y % 43) [32, 11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [24, 3]) [
    {prop := List.Mem (233 ^ y % 43) [32, 11], proof := h10},
    {prop := 7 ^ x + 8 = 233 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [24, 3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 233 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 234 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 234 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_234 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 234 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (234 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 235 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 235 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 235 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 235 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 235 ^ y is impossible.
-/
theorem diophantine1_7_8_235 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 235 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (235 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 235 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 236 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 236 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_236 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 236 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (236 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 237 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 237 ...
-- Trying to disprove y >= 3 with prime factor 3 of 237 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 237 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 237 ^ y,
if x >= 2, 237 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
Therefore, 237 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 237 ^ y is impossible.
-/
theorem diophantine1_7_8_237 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 237 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 237 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 237 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (237 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (237 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 237 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 237 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 238 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 238 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_238 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 238 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (238 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 239 of 239 ...
-- Trying prime 953...
-- Trying prime 1429...
-- Trying prime 1667...
-- Trying prime 2143...
-- Trying prime 2381...
-- Trying prime 2857...
-- Trying prime 3571...
-- Trying prime 4523...
-- Trying prime 4999...
-- Trying prime 5237...
-- Trying prime 6427...
-- Trying prime 8093...
-- Trying prime 8807...
-- Trying prime 9283...
-- Trying prime 9521...
-- Trying prime 10711...
-- Trying prime 10949...
-- Trying prime 12377...
-- Trying prime 12853...
-- Trying prime 13567...
-- Trying prime 14281...
-- Trying prime 14519...
-- Trying prime 15233...
-- Trying prime 16661...
-- Trying prime 17137...
-- Trying to disprove x >= 3 with prime factor 7 of 7 ...
-- Trying prime 197...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 197)   7 ^ x + 8 = 239 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 239 ^ y,
if x >= 3, 239 ^ y = 8 (mod 343).
So y = 20 (mod 49), 
Therefore, 239 ^ y = 40 (mod 197).
So 7 ^ x = 32 (mod 197), but this is impossible.
Therefore, x < 3.
Further examination shows that 7 ^ x + 8 = 239 ^ y is impossible.
-/
theorem diophantine1_7_8_239 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 239 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (7 ^ x % 343 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 239 ^ y % 343 = 8 := by omega
  have h9 := Claim (y % 49 = 20) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 239 ^ y % 343 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (239 ^ y % 197) [40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 49 = 20, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 197) [32]) [
    {prop := List.Mem (239 ^ y % 197) [40], proof := h10},
    {prop := 7 ^ x + 8 = 239 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 197) [32], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 239 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 240 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 240 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_240 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 240 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (240 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 241 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 241 ^ y,
if x >= 2, 241 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
Therefore, 241 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 241 ^ y is impossible.
-/
theorem diophantine1_7_8_241 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 241 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 241 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 241 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (241 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (241 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 241 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 241 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 242 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 242 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_242 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 242 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (242 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 243 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 243 ...
-- Trying to disprove y >= 3 with prime factor 3 of 243 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 243 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 243 ^ y,
if x >= 2, 243 ^ y = 8 (mod 49).
So y = 24 (mod 42), 
Therefore, 243 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 243 ^ y is impossible.
-/
theorem diophantine1_7_8_243 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 243 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 243 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 243 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (243 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (243 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 243 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 243 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 244 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 244 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_244 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 244 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (244 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 245 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 245 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 245 ^ y is impossible.
-/
theorem diophantine1_7_8_245 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 245 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (245 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 245 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 246 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 246 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_246 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 246 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (246 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 247 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 247 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 247 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 247 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 247 ^ y is impossible.
-/
theorem diophantine1_7_8_247 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 247 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (247 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (247 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 247 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (247 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 247 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 248 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 248 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_248 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 248 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (248 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 249 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 249 ...
-- Trying to disprove y >= 3 with prime factor 3 of 249 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 249 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 249 ^ y,
if x >= 2, 249 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 12, 33 (mod 42).
Therefore, 249 ^ y = 16, 27 (mod 43).
So 7 ^ x = 8, 19 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 249 ^ y is impossible.
-/
theorem diophantine1_7_8_249 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 249 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 249 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 249 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (249 ^ y % 43) [16, 27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8, 19]) [
    {prop := List.Mem (249 ^ y % 43) [16, 27], proof := h10},
    {prop := 7 ^ x + 8 = 249 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 249 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 250 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 250 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_250 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 250 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (250 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 251 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 251 ^ y,
if x >= 2, 251 ^ y = 8 (mod 49).
So y = 6 (mod 14), 
which implies y = 6, 20 (mod 28).
Therefore, 251 ^ y = 22, 7 (mod 29).
So 7 ^ x = 14, 28 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 251 ^ y is impossible.
-/
theorem diophantine1_7_8_251 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 251 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 251 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 251 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (251 ^ y % 29) [22, 7]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [14, 28]) [
    {prop := List.Mem (251 ^ y % 29) [22, 7], proof := h10},
    {prop := 7 ^ x + 8 = 251 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [14, 28], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 251 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 252 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 252 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_252 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 252 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (252 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 253 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 253 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 253 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 253 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 253 ^ y is impossible.
-/
theorem diophantine1_7_8_253 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 253 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (253 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (253 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 253 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (253 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 253 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 254 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 254 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_254 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 254 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (254 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 255 ...
-- Trying to disprove y >= 1 with prime factor 5 of 255 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 255 ...
-- Trying to disprove y >= 1 with prime factor 17 of 255 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 257)   7 ^ x + 8 = 255 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 255 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246 (mod 256).
Therefore, 7 ^ x = 200, 157, 50, 232, 141, 58, 228, 143, 57, 100, 207, 25, 116, 199, 29, 114 (mod 257).
So 255 ^ y = 208, 165, 58, 240, 149, 66, 236, 151, 65, 108, 215, 33, 124, 207, 37, 122 (mod 257), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 255 ^ y is impossible.
-/
theorem diophantine1_7_8_255 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 255 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (255 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 257) [200, 157, 50, 232, 141, 58, 228, 143, 57, 100, 207, 25, 116, 199, 29, 114]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (255 ^ y % 257) [208, 165, 58, 240, 149, 66, 236, 151, 65, 108, 215, 33, 124, 207, 37, 122]) [
    {prop := List.Mem (7 ^ x % 257) [200, 157, 50, 232, 141, 58, 228, 143, 57, 100, 207, 25, 116, 199, 29, 114], proof := h10},
    {prop := 7 ^ x + 8 = 255 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (255 ^ y % 257) [208, 165, 58, 240, 149, 66, 236, 151, 65, 108, 215, 33, 124, 207, 37, 122], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 255 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 256 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 256 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_256 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 256 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (256 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Trying prime 463...
-- Trying prime 547...
-- Trying prime 631...
-- Trying prime 673...
-- Trying prime 757...
-- Trying prime 883...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 883)   7 ^ x + 8 = 257 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 257 ^ y,
if x >= 2, 257 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 2 (mod 14).
Therefore, 257 ^ y = 707 (mod 883).
So 7 ^ x = 699 (mod 883), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 257 ^ y is impossible.
-/
theorem diophantine1_7_8_257 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 257 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 257 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 257 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (257 ^ y % 883) [707]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 883) [699]) [
    {prop := List.Mem (257 ^ y % 883) [707], proof := h10},
    {prop := 7 ^ x + 8 = 257 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 883) [699], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 257 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 258 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 258 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_258 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 258 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (258 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 259 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 259 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 259 ^ y is impossible.
-/
theorem diophantine1_7_8_259 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 259 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (259 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 259 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 260 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 260 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_260 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 260 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (260 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 261 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 261 ...
-- Trying to disprove y >= 3 with prime factor 3 of 261 ...
-- Trying to disprove y >= 1 with prime factor 29 of 261 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 261 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 261 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 261 ^ y is impossible.
-/
theorem diophantine1_7_8_261 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 261 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (261 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 261 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 262 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 262 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_262 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 262 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (262 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 263 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 263 ^ y,
if x >= 2, 263 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 263 ^ y is impossible.
-/
theorem diophantine1_7_8_263 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 263 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 263 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 263 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 263 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 264 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 264 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_264 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 264 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (264 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 265 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 265 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 265 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 265 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 265 ^ y is impossible.
-/
theorem diophantine1_7_8_265 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 265 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (265 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 265 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 266 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 266 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_266 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 266 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (266 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 267 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 267 ...
-- Trying to disprove y >= 3 with prime factor 3 of 267 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 4 with prime factor 3 of 267 ...
-- Trying prime 109...
-- Trying prime 163...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 163)   7 ^ x + 8 = 267 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 267 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120, 147 (mod 162).
Therefore, 7 ^ x = 65, 142, 77, 98, 21, 86 (mod 163).
So 267 ^ y = 73, 150, 85, 106, 29, 94 (mod 163), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 8 = 267 ^ y is impossible.
-/
theorem diophantine1_7_8_267 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 267 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (267 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 163) [65, 142, 77, 98, 21, 86]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (267 ^ y % 163) [73, 150, 85, 106, 29, 94]) [
    {prop := List.Mem (7 ^ x % 163) [65, 142, 77, 98, 21, 86], proof := h10},
    {prop := 7 ^ x + 8 = 267 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (267 ^ y % 163) [73, 150, 85, 106, 29, 94], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 267 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 268 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 268 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_268 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 268 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (268 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 269 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 269 ^ y,
if x >= 2, 269 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
which implies y = 4 (mod 7).
Therefore, 269 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 269 ^ y is impossible.
-/
theorem diophantine1_7_8_269 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 269 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 269 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 269 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (269 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (269 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 269 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 269 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 270 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 270 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_270 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 270 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (270 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 271 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 271 ^ y,
if x >= 2, 271 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
which implies y = 12 (mod 21).
Therefore, 271 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 271 ^ y is impossible.
-/
theorem diophantine1_7_8_271 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 271 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 271 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 271 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (271 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (271 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 271 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 271 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 272 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 272 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_272 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 272 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (272 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 273 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 273 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 273 ^ y is impossible.
-/
theorem diophantine1_7_8_273 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 273 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (273 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 273 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 274 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 274 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_274 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 274 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (274 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 275 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 275 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying prime 131...
-- Trying prime 151...
-- Trying prime 181...
-- Trying prime 191...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 191)   7 ^ x + 8 = 275 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 275 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10).
Therefore, 7 ^ x = 109 (mod 191).
So 275 ^ y = 117 (mod 191), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 275 ^ y is impossible.
-/
theorem diophantine1_7_8_275 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 275 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (275 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 191) [109]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (275 ^ y % 191) [117]) [
    {prop := List.Mem (7 ^ x % 191) [109], proof := h10},
    {prop := 7 ^ x + 8 = 275 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (275 ^ y % 191) [117], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 275 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 276 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 276 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_276 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 276 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (276 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 277 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 277 ^ y,
if x >= 2, 277 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
which implies y = 9, 30 (mod 42).
Therefore, 277 ^ y = 27, 16 (mod 43).
So 7 ^ x = 19, 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 277 ^ y is impossible.
-/
theorem diophantine1_7_8_277 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 277 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 277 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 277 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (277 ^ y % 43) [27, 16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [19, 8]) [
    {prop := List.Mem (277 ^ y % 43) [27, 16], proof := h10},
    {prop := 7 ^ x + 8 = 277 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [19, 8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 277 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 278 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 278 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_278 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 278 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (278 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 279 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 279 ...
-- Trying to disprove y >= 3 with prime factor 3 of 279 ...
-- Trying to disprove y >= 1 with prime factor 31 of 279 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 279 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 279 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 279 ^ y is impossible.
-/
theorem diophantine1_7_8_279 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 279 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (279 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 279 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 280 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 280 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_280 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 280 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (280 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 281 of 281 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 281 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 281 ^ y,
if y >= 1, 7 ^ x = 273 (mod 281).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 281 ^ y is impossible.
-/
theorem diophantine1_7_8_281 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 281 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (281 ^ y % 281 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 281 = 273 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 281 = 273, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 281 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 282 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 282 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_282 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 282 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (282 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 283 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 283 ^ y,
if x >= 2, 283 ^ y = 8 (mod 49).
So y = 24 (mod 42), 
which implies y = 3 (mod 21).
Therefore, 283 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 283 ^ y is impossible.
-/
theorem diophantine1_7_8_283 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 283 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 283 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 283 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (283 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (283 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 283 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 283 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 284 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 284 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_284 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 284 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (284 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 285 ...
-- Trying to disprove y >= 1 with prime factor 5 of 285 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 285 ...
-- Trying to disprove y >= 1 with prime factor 19 of 285 ...
-- Trying to disprove y >= 2 with prime factor 5 of 285 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 285 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 285 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 285 ^ y is impossible.
-/
theorem diophantine1_7_8_285 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 285 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (285 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 285 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 286 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 286 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_286 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 286 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (286 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 287 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 287 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 287 ^ y is impossible.
-/
theorem diophantine1_7_8_287 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 287 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (287 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 287 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 288 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 288 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_288 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 288 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (288 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 289 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 257)   7 ^ x + 8 = 289 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 289 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246 (mod 256).
Therefore, 7 ^ x = 200, 157, 50, 232, 141, 58, 228, 143, 57, 100, 207, 25, 116, 199, 29, 114 (mod 257).
So 289 ^ y = 208, 165, 58, 240, 149, 66, 236, 151, 65, 108, 215, 33, 124, 207, 37, 122 (mod 257), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 289 ^ y is impossible.
-/
theorem diophantine1_7_8_289 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 289 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (289 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 257) [200, 157, 50, 232, 141, 58, 228, 143, 57, 100, 207, 25, 116, 199, 29, 114]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (289 ^ y % 257) [208, 165, 58, 240, 149, 66, 236, 151, 65, 108, 215, 33, 124, 207, 37, 122]) [
    {prop := List.Mem (7 ^ x % 257) [200, 157, 50, 232, 141, 58, 228, 143, 57, 100, 207, 25, 116, 199, 29, 114], proof := h10},
    {prop := 7 ^ x + 8 = 289 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (289 ^ y % 257) [208, 165, 58, 240, 149, 66, 236, 151, 65, 108, 215, 33, 124, 207, 37, 122], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 289 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 290 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 290 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_290 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 290 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (290 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 291 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 291 ...
-- Trying to disprove y >= 3 with prime factor 3 of 291 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 291 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 291 ^ y,
if x >= 2, 291 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
which implies y = 15, 36 (mod 42).
Therefore, 291 ^ y = 27, 16 (mod 43).
So 7 ^ x = 19, 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 291 ^ y is impossible.
-/
theorem diophantine1_7_8_291 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 291 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 291 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 291 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (291 ^ y % 43) [27, 16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [19, 8]) [
    {prop := List.Mem (291 ^ y % 43) [27, 16], proof := h10},
    {prop := 7 ^ x + 8 = 291 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [19, 8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 291 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 292 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 292 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_292 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 292 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (292 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 293 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 293 ^ y,
if x >= 2, 293 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 293 ^ y is impossible.
-/
theorem diophantine1_7_8_293 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 293 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 293 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 293 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 293 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 294 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 294 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_294 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 294 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (294 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 295 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 295 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 295 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 295 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 295 ^ y is impossible.
-/
theorem diophantine1_7_8_295 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 295 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (295 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 295 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 296 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 296 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_296 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 296 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (296 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 297 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 297 ...
-- Trying to disprove y >= 1 with prime factor 11 of 297 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   7 ^ x + 8 = 297 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 297 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64, 74, 84, 94 (mod 100).
Therefore, 7 ^ x = 78, 20, 88, 64, 19, 23, 81, 13, 37, 82 (mod 101).
So 297 ^ y = 86, 28, 96, 72, 27, 31, 89, 21, 45, 90 (mod 101), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 297 ^ y is impossible.
-/
theorem diophantine1_7_8_297 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 297 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (297 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 101) [78, 20, 88, 64, 19, 23, 81, 13, 37, 82]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (297 ^ y % 101) [86, 28, 96, 72, 27, 31, 89, 21, 45, 90]) [
    {prop := List.Mem (7 ^ x % 101) [78, 20, 88, 64, 19, 23, 81, 13, 37, 82], proof := h10},
    {prop := 7 ^ x + 8 = 297 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (297 ^ y % 101) [86, 28, 96, 72, 27, 31, 89, 21, 45, 90], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 297 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 298 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 298 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_298 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 298 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (298 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 299 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying prime 157...
-- Trying prime 181...
-- Trying prime 193...
-- Trying prime 229...
-- Trying prime 241...
-- Trying prime 277...
-- Trying prime 313...
-- Trying prime 337...
-- Trying prime 349...
-- Trying prime 373...
-- Trying to disprove y >= 1 with prime factor 23 of 299 ...
-- Trying prime 67...
-- Trying prime 89...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 89)   7 ^ x + 8 = 299 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 299 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75 (mod 88).
Therefore, 7 ^ x = 28, 62, 61, 27 (mod 89).
So 299 ^ y = 36, 70, 69, 35 (mod 89), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 299 ^ y is impossible.
-/
theorem diophantine1_7_8_299 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 299 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (299 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 89) [28, 62, 61, 27]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (299 ^ y % 89) [36, 70, 69, 35]) [
    {prop := List.Mem (7 ^ x % 89) [28, 62, 61, 27], proof := h10},
    {prop := 7 ^ x + 8 = 299 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (299 ^ y % 89) [36, 70, 69, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 299 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 300 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 300 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_300 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 300 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (300 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 301 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 301 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 301 ^ y is impossible.
-/
theorem diophantine1_7_8_301 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 301 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (301 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 301 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 302 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 302 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_302 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 302 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (302 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 303 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 303 ...
-- Trying to disprove y >= 3 with prime factor 3 of 303 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 303 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 303 ^ y,
if x >= 2, 303 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
which implies y = 4, 11 (mod 14).
Therefore, 303 ^ y = 16, 27 (mod 43).
So 7 ^ x = 8, 19 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 303 ^ y is impossible.
-/
theorem diophantine1_7_8_303 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 303 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 303 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 303 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (303 ^ y % 43) [16, 27]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8, 19]) [
    {prop := List.Mem (303 ^ y % 43) [16, 27], proof := h10},
    {prop := 7 ^ x + 8 = 303 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8, 19], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 303 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 304 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 304 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_304 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 304 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (304 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 305 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 305 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 305 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 305 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 305 ^ y is impossible.
-/
theorem diophantine1_7_8_305 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 305 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (305 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 305 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 306 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 306 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_306 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 306 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (306 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Trying prime 71...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 113)   7 ^ x + 8 = 307 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 307 ^ y,
if x >= 2, 307 ^ y = 8 (mod 49).
So y = 10 (mod 14), 
which implies y = 10, 24 (mod 28).
Therefore, 307 ^ y = 83, 30 (mod 113).
So 7 ^ x = 75, 22 (mod 113), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 307 ^ y is impossible.
-/
theorem diophantine1_7_8_307 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 307 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 307 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 10) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 307 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (307 ^ y % 113) [83, 30]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 10, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 113) [75, 22]) [
    {prop := List.Mem (307 ^ y % 113) [83, 30], proof := h10},
    {prop := 7 ^ x + 8 = 307 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 113) [75, 22], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 307 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 308 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 308 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_308 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 308 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (308 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 309 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 309 ...
-- Trying to disprove y >= 3 with prime factor 3 of 309 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 4 with prime factor 3 of 309 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying prime 487...
-- Trying prime 541...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 541)   7 ^ x + 8 = 309 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 309 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 3, 12, 21, 30, 39, 48, 57, 66, 75, 84 (mod 90).
Therefore, 7 ^ x = 343, 207, 300, 129, 234, 198, 334, 241, 412, 307 (mod 541).
So 309 ^ y = 351, 215, 308, 137, 242, 206, 342, 249, 420, 315 (mod 541), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 8 = 309 ^ y is impossible.
-/
theorem diophantine1_7_8_309 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 309 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (309 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 541) [343, 207, 300, 129, 234, 198, 334, 241, 412, 307]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (309 ^ y % 541) [351, 215, 308, 137, 242, 206, 342, 249, 420, 315]) [
    {prop := List.Mem (7 ^ x % 541) [343, 207, 300, 129, 234, 198, 334, 241, 412, 307], proof := h10},
    {prop := 7 ^ x + 8 = 309 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (309 ^ y % 541) [351, 215, 308, 137, 242, 206, 342, 249, 420, 315], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 309 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 310 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 310 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_310 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 310 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (310 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 311 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 311 ^ y,
if x >= 2, 311 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 9 (mod 21).
Therefore, 311 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 311 ^ y is impossible.
-/
theorem diophantine1_7_8_311 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 311 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 311 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 311 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (311 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (311 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 311 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 311 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 312 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 312 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_312 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 312 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (312 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 313 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 313 ^ y,
if x >= 2, 313 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 313 ^ y is impossible.
-/
theorem diophantine1_7_8_313 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 313 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 313 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 313 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 313 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 314 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 314 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_314 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 314 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (314 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 315 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 315 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 315 ^ y is impossible.
-/
theorem diophantine1_7_8_315 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 315 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (315 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 315 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 316 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 316 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_316 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 316 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (316 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 317 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 317 ^ y,
if x >= 2, 317 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 5 (mod 7).
Therefore, 317 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 317 ^ y is impossible.
-/
theorem diophantine1_7_8_317 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 317 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 317 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 317 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (317 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (317 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 317 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 317 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 318 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 318 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_318 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 318 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (318 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 319 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 319 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 319 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 319 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 319 ^ y is impossible.
-/
theorem diophantine1_7_8_319 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 319 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (319 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (319 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 319 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (319 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 319 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 320 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 320 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_320 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 320 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (320 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 321 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 321 ...
-- Trying to disprove y >= 3 with prime factor 3 of 321 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 321 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 321 ^ y,
if x >= 2, 321 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
which implies y = 12, 26 (mod 28).
Therefore, 321 ^ y = 7, 22 (mod 29).
So 7 ^ x = 28, 14 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 321 ^ y is impossible.
-/
theorem diophantine1_7_8_321 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 321 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 321 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 321 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (321 ^ y % 29) [7, 22]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [28, 14]) [
    {prop := List.Mem (321 ^ y % 29) [7, 22], proof := h10},
    {prop := 7 ^ x + 8 = 321 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [28, 14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 321 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 322 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 322 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_322 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 322 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (322 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 323 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 193)   7 ^ x + 8 = 323 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 323 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 14, 22 (mod 24).
Therefore, 7 ^ x = 112, 144, 130 (mod 193).
So 323 ^ y = 120, 152, 138 (mod 193), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 323 ^ y is impossible.
-/
theorem diophantine1_7_8_323 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 323 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (323 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 193) [112, 144, 130]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (323 ^ y % 193) [120, 152, 138]) [
    {prop := List.Mem (7 ^ x % 193) [112, 144, 130], proof := h10},
    {prop := 7 ^ x + 8 = 323 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (323 ^ y % 193) [120, 152, 138], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 323 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 324 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 324 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_324 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 324 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (324 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 325 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 325 ...
-- Trying prime 37...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 37)   7 ^ x + 8 = 325 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 325 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6 (mod 9).
Therefore, 7 ^ x = 1, 10, 26 (mod 37).
So 325 ^ y = 9, 18, 34 (mod 37), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 325 ^ y is impossible.
-/
theorem diophantine1_7_8_325 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 325 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (325 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 37) [1, 10, 26]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (325 ^ y % 37) [9, 18, 34]) [
    {prop := List.Mem (7 ^ x % 37) [1, 10, 26], proof := h10},
    {prop := 7 ^ x + 8 = 325 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (325 ^ y % 37) [9, 18, 34], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 325 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 326 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 326 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_326 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 326 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (326 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 327 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 327 ...
-- Trying to disprove y >= 3 with prime factor 3 of 327 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 327 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 327 ^ y,
if x >= 2, 327 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
Therefore, 327 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 327 ^ y is impossible.
-/
theorem diophantine1_7_8_327 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 327 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 327 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 327 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (327 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (327 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 327 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 327 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 328 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 328 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_328 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 328 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (328 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 329 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 329 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 329 ^ y is impossible.
-/
theorem diophantine1_7_8_329 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 329 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (329 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 329 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 330 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 330 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_330 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 330 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (330 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 331 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 331 ^ y,
if x >= 2, 331 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
which implies y = 9, 30 (mod 42).
Therefore, 331 ^ y = 22, 21 (mod 43).
So 7 ^ x = 14, 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 331 ^ y is impossible.
-/
theorem diophantine1_7_8_331 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 331 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 331 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 331 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (331 ^ y % 43) [22, 21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [14, 13]) [
    {prop := List.Mem (331 ^ y % 43) [22, 21], proof := h10},
    {prop := 7 ^ x + 8 = 331 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [14, 13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 331 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 332 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 332 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_332 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 332 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (332 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 333 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 333 ...
-- Trying to disprove y >= 3 with prime factor 3 of 333 ...
-- Trying to disprove y >= 1 with prime factor 37 of 333 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 333 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 333 ^ y,
if y >= 1, 7 ^ x = 29 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 333 ^ y is impossible.
-/
theorem diophantine1_7_8_333 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 333 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (333 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 37 = 29 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 333 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 334 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 334 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_334 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 334 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (334 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 335 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 335 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 335 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 335 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 335 ^ y is impossible.
-/
theorem diophantine1_7_8_335 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 335 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (335 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 335 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 336 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 336 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_336 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 336 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (336 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 337 of 337 ...
-- Trying prime 113...
-- Trying prime 281...
-- Trying prime 449...
-- Trying prime 617...
-- Trying prime 673...
-- Trying prime 953...
-- Trying prime 1009...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 1009)   7 ^ x + 8 = 337 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 337 ^ y,
if y >= 1, 7 ^ x = 329 (mod 337).
So x = 52 (mod 56), 
which implies x = 24, 52, 80, 108, 136, 164, 192, 220, 248 (mod 252).
Therefore, 7 ^ x = 42, 591, 28, 394, 355, 599, 573, 63, 382 (mod 1009).
So 337 ^ y = 50, 599, 36, 402, 363, 607, 581, 71, 390 (mod 1009), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 337 ^ y is impossible.
-/
theorem diophantine1_7_8_337 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 337 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (337 ^ y % 337 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 337 = 329 := by omega
  have h9 := Claim (x % 56 = 52) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 337 = 329, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 1009) [42, 591, 28, 394, 355, 599, 573, 63, 382]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 56 = 52, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (337 ^ y % 1009) [50, 599, 36, 402, 363, 607, 581, 71, 390]) [
    {prop := List.Mem (7 ^ x % 1009) [42, 591, 28, 394, 355, 599, 573, 63, 382], proof := h10},
    {prop := 7 ^ x + 8 = 337 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (337 ^ y % 1009) [50, 599, 36, 402, 363, 607, 581, 71, 390], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 337 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 338 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 338 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_338 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 338 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (338 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 339 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 339 ...
-- Trying to disprove y >= 3 with prime factor 3 of 339 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 339 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 339 ^ y,
if x >= 2, 339 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
which implies y = 12 (mod 21).
Therefore, 339 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 339 ^ y is impossible.
-/
theorem diophantine1_7_8_339 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 339 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 339 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 339 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (339 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (339 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 339 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 339 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 340 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 340 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_340 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 340 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (340 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 341 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   7 ^ x + 8 = 341 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 341 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64 (mod 70).
Therefore, 7 ^ x = 58, 54, 16, 10, 24, 15, 36 (mod 71).
So 341 ^ y = 66, 62, 24, 18, 32, 23, 44 (mod 71), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 341 ^ y is impossible.
-/
theorem diophantine1_7_8_341 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 341 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (341 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (341 ^ y % 71) [66, 62, 24, 18, 32, 23, 44]) [
    {prop := List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36], proof := h10},
    {prop := 7 ^ x + 8 = 341 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (341 ^ y % 71) [66, 62, 24, 18, 32, 23, 44], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 341 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 342 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 342 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_342 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 342 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (342 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 343 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 343 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 343 ^ y is impossible.
-/
theorem diophantine1_7_8_343 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 343 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (343 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 343 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 344 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 344 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_344 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 344 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (344 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 345 ...
-- Trying to disprove y >= 1 with prime factor 5 of 345 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 345 ...
-- Trying to disprove y >= 1 with prime factor 23 of 345 ...
-- Trying prime 67...
-- Trying prime 89...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 89)   7 ^ x + 8 = 345 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 345 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75 (mod 88).
Therefore, 7 ^ x = 28, 62, 61, 27 (mod 89).
So 345 ^ y = 36, 70, 69, 35 (mod 89), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 345 ^ y is impossible.
-/
theorem diophantine1_7_8_345 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 345 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (345 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 89) [28, 62, 61, 27]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (345 ^ y % 89) [36, 70, 69, 35]) [
    {prop := List.Mem (7 ^ x % 89) [28, 62, 61, 27], proof := h10},
    {prop := 7 ^ x + 8 = 345 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (345 ^ y % 89) [36, 70, 69, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 345 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 346 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 346 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_346 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 346 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (346 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 347 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 347 ^ y,
if x >= 2, 347 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
which implies y = 12, 33 (mod 42).
Therefore, 347 ^ y = 4, 39 (mod 43).
So 7 ^ x = 39, 31 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 347 ^ y is impossible.
-/
theorem diophantine1_7_8_347 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 347 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 347 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 347 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (347 ^ y % 43) [4, 39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39, 31]) [
    {prop := List.Mem (347 ^ y % 43) [4, 39], proof := h10},
    {prop := 7 ^ x + 8 = 347 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39, 31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 347 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 348 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 348 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_348 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 348 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (348 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 349 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 349 ^ y,
if x >= 2, 349 ^ y = 8 (mod 49).
So y = 6 (mod 14), 
which implies y = 6, 20, 34 (mod 42).
Therefore, 349 ^ y = 16, 17, 10 (mod 43).
So 7 ^ x = 8, 9, 2 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 349 ^ y is impossible.
-/
theorem diophantine1_7_8_349 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 349 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 349 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 349 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (349 ^ y % 43) [16, 17, 10]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8, 9, 2]) [
    {prop := List.Mem (349 ^ y % 43) [16, 17, 10], proof := h10},
    {prop := 7 ^ x + 8 = 349 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8, 9, 2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 349 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 350 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 350 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_350 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 350 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (350 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 351 ...
-- Trying to disprove y >= 3 with prime factor 3 of 351 ...
-- Trying to disprove y >= 4 with prime factor 3 of 351 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 351 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 351 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 351 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that (x, y) = (3, 1).
-/
theorem diophantine1_7_8_351 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 351 ^ y) :
  List.Mem (x, y) [(3, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (351 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (351 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 351 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (351 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(3, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 351 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 352 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 352 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_352 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 352 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (352 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 353 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 353 ^ y,
if x >= 2, 353 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 21).
Therefore, 353 ^ y = 4 (mod 43).
So 7 ^ x = 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 353 ^ y is impossible.
-/
theorem diophantine1_7_8_353 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 353 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 353 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 353 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (353 ^ y % 43) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39]) [
    {prop := List.Mem (353 ^ y % 43) [4], proof := h10},
    {prop := 7 ^ x + 8 = 353 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 353 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 354 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 354 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_354 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 354 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (354 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 355 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 355 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 355 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 355 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 355 ^ y is impossible.
-/
theorem diophantine1_7_8_355 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 355 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (355 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 355 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 356 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 356 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_356 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 356 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (356 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 357 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 357 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 357 ^ y is impossible.
-/
theorem diophantine1_7_8_357 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 357 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (357 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 357 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 358 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 358 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_358 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 358 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (358 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 359 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 359 ^ y,
if x >= 2, 359 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
Therefore, 359 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 359 ^ y is impossible.
-/
theorem diophantine1_7_8_359 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 359 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 359 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 359 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (359 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (359 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 359 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 359 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 360 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 360 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_360 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 360 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (360 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 361 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 361 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 361 ^ y,
if x >= 2, 361 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 361 ^ y is impossible.
-/
theorem diophantine1_7_8_361 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 361 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 361 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 361 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 361 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 362 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 362 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_362 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 362 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (362 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 363 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 363 ...
-- Trying to disprove y >= 1 with prime factor 11 of 363 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 363 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 363 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54 (mod 60).
Therefore, 7 ^ x = 22, 19, 58, 39, 42, 3 (mod 61).
So 363 ^ y = 30, 27, 5, 47, 50, 11 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 363 ^ y is impossible.
-/
theorem diophantine1_7_8_363 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 363 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (363 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [22, 19, 58, 39, 42, 3]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (363 ^ y % 61) [30, 27, 5, 47, 50, 11]) [
    {prop := List.Mem (7 ^ x % 61) [22, 19, 58, 39, 42, 3], proof := h10},
    {prop := 7 ^ x + 8 = 363 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (363 ^ y % 61) [30, 27, 5, 47, 50, 11], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 363 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 364 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 364 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_364 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 364 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (364 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 365 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 365 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 365 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 365 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 365 ^ y is impossible.
-/
theorem diophantine1_7_8_365 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 365 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (365 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 365 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 366 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 366 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_366 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 366 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (366 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 367 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 367 ^ y,
if x >= 2, 367 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
which implies y = 18 (mod 21).
Therefore, 367 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 367 ^ y is impossible.
-/
theorem diophantine1_7_8_367 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 367 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 367 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 367 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (367 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (367 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 367 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 367 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 368 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 368 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_368 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 368 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (368 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 369 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 369 ...
-- Trying to disprove y >= 3 with prime factor 3 of 369 ...
-- Trying to disprove y >= 1 with prime factor 41 of 369 ...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   7 ^ x + 8 = 369 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 369 ^ y,
if y >= 1, 7 ^ x = 33 (mod 41).
So x = 22 (mod 40), 
which implies x = 22, 62, 102, 142, 182, 222 (mod 240).
Therefore, 7 ^ x = 45, 238, 193, 196, 3, 48 (mod 241).
So 369 ^ y = 53, 5, 201, 204, 11, 56 (mod 241), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 369 ^ y is impossible.
-/
theorem diophantine1_7_8_369 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 369 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (369 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 41 = 33 := by omega
  have h9 := Claim (x % 40 = 22) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 41 = 33, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 241) [45, 238, 193, 196, 3, 48]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 40 = 22, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (369 ^ y % 241) [53, 5, 201, 204, 11, 56]) [
    {prop := List.Mem (7 ^ x % 241) [45, 238, 193, 196, 3, 48], proof := h10},
    {prop := 7 ^ x + 8 = 369 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (369 ^ y % 241) [53, 5, 201, 204, 11, 56], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 369 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 370 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 370 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_370 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 370 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (370 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 371 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 371 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 371 ^ y is impossible.
-/
theorem diophantine1_7_8_371 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 371 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (371 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 371 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 372 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 372 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_372 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 372 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (372 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 373 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 373 ^ y,
if x >= 2, 373 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 373 ^ y is impossible.
-/
theorem diophantine1_7_8_373 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 373 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 373 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 373 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 373 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 374 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 374 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_374 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 374 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (374 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 375 ...
-- Trying to disprove y >= 1 with prime factor 5 of 375 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 375 ...
-- Trying to disprove y >= 2 with prime factor 5 of 375 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 375 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 375 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 375 ^ y is impossible.
-/
theorem diophantine1_7_8_375 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 375 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (375 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 375 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 376 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 376 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_376 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 376 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (376 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 377 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 377 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 377 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 377 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 377 ^ y is impossible.
-/
theorem diophantine1_7_8_377 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 377 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (377 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (377 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 377 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (377 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 377 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 378 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 378 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_378 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 378 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (378 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove x >= 3 with prime factor 7 of 7 ...
-- Trying prime 197...
-- Trying prime 491...
-- Trying prime 883...
-- Trying prime 1373...
-- Trying prime 1471...
-- Trying prime 1667...
-- Trying prime 2549...
-- Trying prime 2647...
-- Trying prime 2843...
-- Trying prime 3137...
-- Trying prime 3529...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 3529)   7 ^ x + 8 = 379 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 379 ^ y,
if x >= 3, 379 ^ y = 8 (mod 343).
So y = 3 (mod 49), 
which implies y = 3, 52, 101, 150, 199, 248 (mod 294).
Therefore, 379 ^ y = 1585, 2336, 751, 1944, 1193, 2778 (mod 3529).
So 7 ^ x = 1577, 2328, 743, 1936, 1185, 2770 (mod 3529), but this is impossible.
Therefore, x < 3.
Further examination shows that 7 ^ x + 8 = 379 ^ y is impossible.
-/
theorem diophantine1_7_8_379 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 379 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (7 ^ x % 343 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 379 ^ y % 343 = 8 := by omega
  have h9 := Claim (y % 49 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 379 ^ y % 343 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (379 ^ y % 3529) [1585, 2336, 751, 1944, 1193, 2778]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 49 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 3529) [1577, 2328, 743, 1936, 1185, 2770]) [
    {prop := List.Mem (379 ^ y % 3529) [1585, 2336, 751, 1944, 1193, 2778], proof := h10},
    {prop := 7 ^ x + 8 = 379 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 3529) [1577, 2328, 743, 1936, 1185, 2770], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 379 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 380 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 380 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_380 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 380 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (380 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 381 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 381 ...
-- Trying to disprove y >= 3 with prime factor 3 of 381 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Trying prime 463...
-- Trying prime 547...
-- Trying prime 631...
-- Trying prime 673...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 673)   7 ^ x + 8 = 381 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 381 ^ y,
if x >= 2, 381 ^ y = 8 (mod 49).
So y = 24 (mod 42), 
which implies y = 24, 66, 108, 150 (mod 168).
Therefore, 381 ^ y = 650, 661, 23, 12 (mod 673).
So 7 ^ x = 642, 653, 15, 4 (mod 673), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 381 ^ y is impossible.
-/
theorem diophantine1_7_8_381 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 381 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 381 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 381 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (381 ^ y % 673) [650, 661, 23, 12]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 673) [642, 653, 15, 4]) [
    {prop := List.Mem (381 ^ y % 673) [650, 661, 23, 12], proof := h10},
    {prop := 7 ^ x + 8 = 381 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 673) [642, 653, 15, 4], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 381 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 382 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 382 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_382 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 382 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (382 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 383 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 383 ^ y,
if x >= 2, 383 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
which implies y = 4 (mod 14).
Therefore, 383 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 383 ^ y is impossible.
-/
theorem diophantine1_7_8_383 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 383 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 383 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 383 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (383 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (383 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 383 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 383 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 384 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 384 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_384 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 384 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (384 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 385 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 385 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 385 ^ y is impossible.
-/
theorem diophantine1_7_8_385 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 385 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (385 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 385 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 386 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 386 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_386 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 386 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (386 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 387 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 387 ...
-- Trying to disprove y >= 3 with prime factor 3 of 387 ...
-- Trying to disprove y >= 1 with prime factor 43 of 387 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 387 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 387 ^ y,
if y >= 1, 7 ^ x = 35 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 387 ^ y is impossible.
-/
theorem diophantine1_7_8_387 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 387 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (387 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 43 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 43 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 387 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 388 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 388 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_388 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 388 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (388 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 127)   7 ^ x + 8 = 389 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 389 ^ y,
if x >= 2, 389 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
which implies y = 1 (mod 7).
Therefore, 389 ^ y = 8 (mod 127).
So 7 ^ x = 0 (mod 127), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 389 ^ y is impossible.
-/
theorem diophantine1_7_8_389 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 389 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 389 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 389 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (389 ^ y % 127) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 127) [0]) [
    {prop := List.Mem (389 ^ y % 127) [8], proof := h10},
    {prop := 7 ^ x + 8 = 389 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 127) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 389 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 390 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 390 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_390 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 390 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (390 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 391 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 241)   7 ^ x + 8 = 391 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 391 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230 (mod 240).
Therefore, 7 ^ x = 41, 45, 20, 116, 239, 133, 193, 59, 53, 211, 67, 3, 162, 72, 32 (mod 241).
So 391 ^ y = 49, 53, 28, 124, 6, 141, 201, 67, 61, 219, 75, 11, 170, 80, 40 (mod 241), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 391 ^ y is impossible.
-/
theorem diophantine1_7_8_391 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 391 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (391 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 241) [41, 45, 20, 116, 239, 133, 193, 59, 53, 211, 67, 3, 162, 72, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (391 ^ y % 241) [49, 53, 28, 124, 6, 141, 201, 67, 61, 219, 75, 11, 170, 80, 40]) [
    {prop := List.Mem (7 ^ x % 241) [41, 45, 20, 116, 239, 133, 193, 59, 53, 211, 67, 3, 162, 72, 32], proof := h10},
    {prop := 7 ^ x + 8 = 391 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (391 ^ y % 241) [49, 53, 28, 124, 6, 141, 201, 67, 61, 219, 75, 11, 170, 80, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 391 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 392 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 392 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_392 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 392 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (392 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 393 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 393 ...
-- Trying to disprove y >= 3 with prime factor 3 of 393 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 393 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 393 ^ y,
if x >= 2, 393 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 393 ^ y is impossible.
-/
theorem diophantine1_7_8_393 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 393 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 393 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 393 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 393 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 394 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 394 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_394 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 394 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (394 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 395 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 395 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 395 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 395 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 395 ^ y is impossible.
-/
theorem diophantine1_7_8_395 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 395 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (395 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 395 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 396 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 396 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_396 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 396 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (396 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 397 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 397 ^ y,
if x >= 2, 397 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
which implies y = 15 (mod 21).
Therefore, 397 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 397 ^ y is impossible.
-/
theorem diophantine1_7_8_397 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 397 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 397 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 397 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (397 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (397 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 397 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 397 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 398 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 398 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_398 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 398 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (398 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 399 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 399 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 399 ^ y is impossible.
-/
theorem diophantine1_7_8_399 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 399 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (399 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 399 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 400 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 400 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_400 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 400 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (400 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 401 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 401 ^ y,
if x >= 2, 401 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
Therefore, 401 ^ y = 16 (mod 43).
So 7 ^ x = 8 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 401 ^ y is impossible.
-/
theorem diophantine1_7_8_401 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 401 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 401 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 401 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (401 ^ y % 43) [16]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [8]) [
    {prop := List.Mem (401 ^ y % 43) [16], proof := h10},
    {prop := 7 ^ x + 8 = 401 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [8], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 401 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 402 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 402 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_402 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 402 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (402 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 403 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 403 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 403 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 403 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 403 ^ y is impossible.
-/
theorem diophantine1_7_8_403 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 403 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (403 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (403 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 403 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (403 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 403 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 404 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 404 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_404 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 404 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (404 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 405 ...
-- Trying to disprove y >= 1 with prime factor 5 of 405 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 405 ...
-- Trying to disprove y >= 2 with prime factor 5 of 405 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 405 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 405 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 405 ^ y is impossible.
-/
theorem diophantine1_7_8_405 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 405 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (405 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 405 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 406 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 406 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_406 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 406 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (406 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 407 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 407 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 407 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 407 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 407 ^ y is impossible.
-/
theorem diophantine1_7_8_407 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 407 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (407 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (407 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 407 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (407 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 407 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 408 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 408 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_408 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 408 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (408 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 409 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 409 ^ y,
if x >= 2, 409 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 2 (mod 14).
Therefore, 409 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 409 ^ y is impossible.
-/
theorem diophantine1_7_8_409 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 409 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 409 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 409 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (409 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (409 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 409 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 409 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 410 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 410 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_410 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 410 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (410 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 411 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 411 ...
-- Trying to disprove y >= 3 with prime factor 3 of 411 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 411 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 411 ^ y,
if x >= 2, 411 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 411 ^ y is impossible.
-/
theorem diophantine1_7_8_411 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 411 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 411 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 411 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 411 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 412 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 412 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_412 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 412 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (412 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 413 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 413 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 413 ^ y is impossible.
-/
theorem diophantine1_7_8_413 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 413 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (413 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 413 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 414 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 414 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_414 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 414 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (414 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 415 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 415 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 415 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 415 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 415 ^ y is impossible.
-/
theorem diophantine1_7_8_415 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 415 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (415 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 415 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 416 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 416 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_416 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 416 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (416 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 417 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 417 ...
-- Trying to disprove y >= 3 with prime factor 3 of 417 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 417 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 417 ^ y,
if x >= 2, 417 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
which implies y = 18, 39 (mod 42).
Therefore, 417 ^ y = 11, 32 (mod 43).
So 7 ^ x = 3, 24 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 417 ^ y is impossible.
-/
theorem diophantine1_7_8_417 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 417 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 417 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 417 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (417 ^ y % 43) [11, 32]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3, 24]) [
    {prop := List.Mem (417 ^ y % 43) [11, 32], proof := h10},
    {prop := 7 ^ x + 8 = 417 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3, 24], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 417 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 418 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 418 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_418 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 418 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (418 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 419 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 419 ^ y,
if x >= 2, 419 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
Therefore, 419 ^ y = 23 (mod 29).
So 7 ^ x = 15 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 419 ^ y is impossible.
-/
theorem diophantine1_7_8_419 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 419 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 419 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 419 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (419 ^ y % 29) [23]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [15]) [
    {prop := List.Mem (419 ^ y % 29) [23], proof := h10},
    {prop := 7 ^ x + 8 = 419 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [15], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 419 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 420 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 420 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_420 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 420 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (420 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove x >= 3 with prime factor 7 of 7 ...
-- Trying prime 197...
-- Trying prime 491...
-- Trying prime 883...
-- Trying prime 1373...
-- Trying prime 1471...
-- Trying prime 1667...
-- Trying prime 2549...
-- Trying prime 2647...
-- Trying prime 2843...
-- Trying prime 3137...
-- Trying prime 3529...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 3529)   7 ^ x + 8 = 421 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 421 ^ y,
if x >= 3, 421 ^ y = 8 (mod 343).
So y = 30 (mod 49), 
which implies y = 30, 79, 128, 177, 226, 275, 324, 373, 422, 471, 520, 569, 618, 667, 716, 765, 814, 863, 912, 961, 1010, 1059, 1108, 1157 (mod 1176).
Therefore, 421 ^ y = 863, 1844, 3384, 553, 1566, 3203, 1438, 2815, 703, 1359, 1583, 2262, 2666, 1685, 145, 2976, 1963, 326, 2091, 714, 2826, 2170, 1946, 1267 (mod 3529).
So 7 ^ x = 855, 1836, 3376, 545, 1558, 3195, 1430, 2807, 695, 1351, 1575, 2254, 2658, 1677, 137, 2968, 1955, 318, 2083, 706, 2818, 2162, 1938, 1259 (mod 3529), but this is impossible.
Therefore, x < 3.
Further examination shows that 7 ^ x + 8 = 421 ^ y is impossible.
-/
theorem diophantine1_7_8_421 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 421 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (7 ^ x % 343 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 421 ^ y % 343 = 8 := by omega
  have h9 := Claim (y % 49 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 421 ^ y % 343 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (421 ^ y % 3529) [863, 1844, 3384, 553, 1566, 3203, 1438, 2815, 703, 1359, 1583, 2262, 2666, 1685, 145, 2976, 1963, 326, 2091, 714, 2826, 2170, 1946, 1267]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 49 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 3529) [855, 1836, 3376, 545, 1558, 3195, 1430, 2807, 695, 1351, 1575, 2254, 2658, 1677, 137, 2968, 1955, 318, 2083, 706, 2818, 2162, 1938, 1259]) [
    {prop := List.Mem (421 ^ y % 3529) [863, 1844, 3384, 553, 1566, 3203, 1438, 2815, 703, 1359, 1583, 2262, 2666, 1685, 145, 2976, 1963, 326, 2091, 714, 2826, 2170, 1946, 1267], proof := h10},
    {prop := 7 ^ x + 8 = 421 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 3529) [855, 1836, 3376, 545, 1558, 3195, 1430, 2807, 695, 1351, 1575, 2254, 2658, 1677, 137, 2968, 1955, 318, 2083, 706, 2818, 2162, 1938, 1259], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 421 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 422 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 422 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_422 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 422 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (422 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 423 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 423 ...
-- Trying to disprove y >= 3 with prime factor 3 of 423 ...
-- Trying to disprove y >= 1 with prime factor 47 of 423 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 423 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 423 ^ y,
if y >= 1, 7 ^ x = 39 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 423 ^ y is impossible.
-/
theorem diophantine1_7_8_423 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 423 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (423 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 423 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 424 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 424 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_424 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 424 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (424 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 425 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 425 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 193)   7 ^ x + 8 = 425 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 425 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 14, 22 (mod 24).
Therefore, 7 ^ x = 112, 144, 130 (mod 193).
So 425 ^ y = 120, 152, 138 (mod 193), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 425 ^ y is impossible.
-/
theorem diophantine1_7_8_425 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 425 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (425 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 193) [112, 144, 130]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (425 ^ y % 193) [120, 152, 138]) [
    {prop := List.Mem (7 ^ x % 193) [112, 144, 130], proof := h10},
    {prop := 7 ^ x + 8 = 425 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (425 ^ y % 193) [120, 152, 138], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 425 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 426 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 426 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_426 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 426 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (426 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 427 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 427 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 427 ^ y is impossible.
-/
theorem diophantine1_7_8_427 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 427 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (427 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 427 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 428 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 428 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_428 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 428 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (428 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 429 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 429 ...
-- Trying to disprove y >= 1 with prime factor 11 of 429 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 429 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 429 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 429 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 429 ^ y is impossible.
-/
theorem diophantine1_7_8_429 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 429 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (429 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (429 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 429 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (429 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 429 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 430 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 430 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_430 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 430 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (430 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 127)   7 ^ x + 8 = 431 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 431 ^ y,
if x >= 2, 431 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
Therefore, 431 ^ y = 8 (mod 127).
So 7 ^ x = 0 (mod 127), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 431 ^ y is impossible.
-/
theorem diophantine1_7_8_431 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 431 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 431 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 431 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (431 ^ y % 127) [8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 127) [0]) [
    {prop := List.Mem (431 ^ y % 127) [8], proof := h10},
    {prop := 7 ^ x + 8 = 431 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 127) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 431 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 432 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 432 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_432 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 432 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (432 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 433 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 433 ^ y,
if x >= 2, 433 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
which implies y = 8, 22, 36 (mod 42).
Therefore, 433 ^ y = 25, 40, 21 (mod 43).
So 7 ^ x = 17, 32, 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 433 ^ y is impossible.
-/
theorem diophantine1_7_8_433 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 433 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 433 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 433 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (433 ^ y % 43) [25, 40, 21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [17, 32, 13]) [
    {prop := List.Mem (433 ^ y % 43) [25, 40, 21], proof := h10},
    {prop := 7 ^ x + 8 = 433 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [17, 32, 13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 433 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 434 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 434 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_434 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 434 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (434 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 435 ...
-- Trying to disprove y >= 1 with prime factor 5 of 435 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 435 ...
-- Trying to disprove y >= 2 with prime factor 5 of 435 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 435 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 435 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 435 ^ y is impossible.
-/
theorem diophantine1_7_8_435 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 435 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (435 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 435 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 436 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 436 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_436 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 436 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (436 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 437 ...
-- Trying to disprove y >= 1 with prime factor 23 of 437 ...
-- Trying prime 67...
-- Trying prime 89...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 89)   7 ^ x + 8 = 437 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 437 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75 (mod 88).
Therefore, 7 ^ x = 28, 62, 61, 27 (mod 89).
So 437 ^ y = 36, 70, 69, 35 (mod 89), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 437 ^ y is impossible.
-/
theorem diophantine1_7_8_437 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 437 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (437 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 89) [28, 62, 61, 27]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (437 ^ y % 89) [36, 70, 69, 35]) [
    {prop := List.Mem (7 ^ x % 89) [28, 62, 61, 27], proof := h10},
    {prop := 7 ^ x + 8 = 437 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (437 ^ y % 89) [36, 70, 69, 35], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 437 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 438 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 438 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_438 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 438 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (438 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 439 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 439 ^ y,
if x >= 2, 439 ^ y = 8 (mod 49).
So y = 24 (mod 42), 
which implies y = 3 (mod 21).
Therefore, 439 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 439 ^ y is impossible.
-/
theorem diophantine1_7_8_439 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 439 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 439 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 439 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (439 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (439 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 439 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 439 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 440 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 440 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_440 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 440 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (440 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 441 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 441 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 441 ^ y is impossible.
-/
theorem diophantine1_7_8_441 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 441 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (441 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 441 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 442 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 442 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_442 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 442 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (442 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 443 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 443 ^ y,
if x >= 2, 443 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
Therefore, 443 ^ y = 4 (mod 43).
So 7 ^ x = 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 443 ^ y is impossible.
-/
theorem diophantine1_7_8_443 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 443 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 443 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 443 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (443 ^ y % 43) [4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39]) [
    {prop := List.Mem (443 ^ y % 43) [4], proof := h10},
    {prop := 7 ^ x + 8 = 443 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 443 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 444 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 444 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_444 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 444 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (444 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 445 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 445 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 445 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 445 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 445 ^ y is impossible.
-/
theorem diophantine1_7_8_445 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 445 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (445 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 445 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 446 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 446 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_446 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 446 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (446 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 447 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 447 ...
-- Trying to disprove y >= 3 with prime factor 3 of 447 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 447 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 447 ^ y,
if x >= 2, 447 ^ y = 8 (mod 49).
So y = 6 (mod 14), 
which implies y = 6, 13, 20 (mod 21).
Therefore, 447 ^ y = 35, 13, 38 (mod 43).
So 7 ^ x = 27, 5, 30 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 447 ^ y is impossible.
-/
theorem diophantine1_7_8_447 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 447 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 447 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 447 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (447 ^ y % 43) [35, 13, 38]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27, 5, 30]) [
    {prop := List.Mem (447 ^ y % 43) [35, 13, 38], proof := h10},
    {prop := 7 ^ x + 8 = 447 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27, 5, 30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 447 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 448 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 448 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_448 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 448 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (448 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove x >= 3 with prime factor 7 of 7 ...
-- Trying prime 197...
-- Trying prime 491...
-- Trying prime 883...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 883)   7 ^ x + 8 = 449 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 449 ^ y,
if x >= 3, 449 ^ y = 8 (mod 343).
So y = 36 (mod 49), 
which implies y = 36, 85, 134, 183, 232, 281, 330, 379, 428, 477, 526, 575, 624, 673, 722, 771, 820, 869 (mod 882).
Therefore, 449 ^ y = 652, 762, 273, 143, 159, 714, 374, 280, 441, 231, 121, 610, 740, 724, 169, 509, 603, 442 (mod 883).
So 7 ^ x = 644, 754, 265, 135, 151, 706, 366, 272, 433, 223, 113, 602, 732, 716, 161, 501, 595, 434 (mod 883), but this is impossible.
Therefore, x < 3.
Further examination shows that 7 ^ x + 8 = 449 ^ y is impossible.
-/
theorem diophantine1_7_8_449 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 449 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (7 ^ x % 343 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 449 ^ y % 343 = 8 := by omega
  have h9 := Claim (y % 49 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 449 ^ y % 343 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (449 ^ y % 883) [652, 762, 273, 143, 159, 714, 374, 280, 441, 231, 121, 610, 740, 724, 169, 509, 603, 442]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 49 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 883) [644, 754, 265, 135, 151, 706, 366, 272, 433, 223, 113, 602, 732, 716, 161, 501, 595, 434]) [
    {prop := List.Mem (449 ^ y % 883) [652, 762, 273, 143, 159, 714, 374, 280, 441, 231, 121, 610, 740, 724, 169, 509, 603, 442], proof := h10},
    {prop := 7 ^ x + 8 = 449 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 883) [644, 754, 265, 135, 151, 706, 366, 272, 433, 223, 113, 602, 732, 716, 161, 501, 595, 434], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 449 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 450 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 450 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_450 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 450 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (450 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 451 ...
-- Trying prime 31...
-- Trying prime 61...
-- Trying prime 71...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 71)   7 ^ x + 8 = 451 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 451 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64 (mod 70).
Therefore, 7 ^ x = 58, 54, 16, 10, 24, 15, 36 (mod 71).
So 451 ^ y = 66, 62, 24, 18, 32, 23, 44 (mod 71), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 451 ^ y is impossible.
-/
theorem diophantine1_7_8_451 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 451 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (451 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (451 ^ y % 71) [66, 62, 24, 18, 32, 23, 44]) [
    {prop := List.Mem (7 ^ x % 71) [58, 54, 16, 10, 24, 15, 36], proof := h10},
    {prop := 7 ^ x + 8 = 451 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (451 ^ y % 71) [66, 62, 24, 18, 32, 23, 44], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 451 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 452 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 452 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_452 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 452 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (452 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 453 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 453 ...
-- Trying to disprove y >= 3 with prime factor 3 of 453 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 453 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 453 ^ y,
if x >= 2, 453 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 9 (mod 21).
Therefore, 453 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 453 ^ y is impossible.
-/
theorem diophantine1_7_8_453 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 453 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 453 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 453 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (453 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (453 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 453 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 453 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 454 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 454 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_454 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 454 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (454 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 455 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 455 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 455 ^ y is impossible.
-/
theorem diophantine1_7_8_455 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 455 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (455 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 455 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 456 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 456 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_456 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 456 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (456 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 457 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 457 ^ y,
if x >= 2, 457 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 13 (mod 14).
Therefore, 457 ^ y = 35, 8 (mod 43).
So 7 ^ x = 27, 0 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 457 ^ y is impossible.
-/
theorem diophantine1_7_8_457 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 457 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 457 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 457 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (457 ^ y % 43) [35, 8]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27, 0]) [
    {prop := List.Mem (457 ^ y % 43) [35, 8], proof := h10},
    {prop := 7 ^ x + 8 = 457 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27, 0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 457 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 458 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 458 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_458 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 458 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (458 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 459 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 459 ...
-- Trying to disprove y >= 1 with prime factor 17 of 459 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying prime 337...
-- Trying prime 353...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 353)   7 ^ x + 8 = 459 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 459 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22 (mod 32).
Therefore, 7 ^ x = 100, 253 (mod 353).
So 459 ^ y = 108, 261 (mod 353), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 459 ^ y is impossible.
-/
theorem diophantine1_7_8_459 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 459 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (459 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 353) [100, 253]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (459 ^ y % 353) [108, 261]) [
    {prop := List.Mem (7 ^ x % 353) [100, 253], proof := h10},
    {prop := 7 ^ x + 8 = 459 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (459 ^ y % 353) [108, 261], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 459 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 460 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 460 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_460 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 460 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (460 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Trying prime 71...
-- Trying prime 113...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 113)   7 ^ x + 8 = 461 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 461 ^ y,
if x >= 2, 461 ^ y = 8 (mod 49).
So y = 2 (mod 14), 
which implies y = 2, 16, 30, 44 (mod 56).
Therefore, 461 ^ y = 81, 28, 32, 85 (mod 113).
So 7 ^ x = 73, 20, 24, 77 (mod 113), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 461 ^ y is impossible.
-/
theorem diophantine1_7_8_461 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 461 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 461 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 2) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 461 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (461 ^ y % 113) [81, 28, 32, 85]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 2, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 113) [73, 20, 24, 77]) [
    {prop := List.Mem (461 ^ y % 113) [81, 28, 32, 85], proof := h10},
    {prop := 7 ^ x + 8 = 461 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 113) [73, 20, 24, 77], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 461 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 462 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 462 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_462 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 462 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (462 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove x >= 3 with prime factor 7 of 7 ...
-- Trying prime 197...
-- Trying prime 491...
-- Trying prime 883...
-- Trying prime 1373...
-- Trying prime 1471...
-- Trying prime 1667...
-- Trying prime 2549...
-- Trying prime 2647...
-- Trying prime 2843...
-- Trying prime 3137...
-- Trying prime 3529...
-- Trying prime 3823...
-- Trying prime 4019...
-- Trying prime 4999...
-- Trying prime 5783...
-- Trying to disprove y >= 1 with prime factor 463 of 463 ...
-- Trying prime 617...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 617)   7 ^ x + 8 = 463 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 463 ^ y,
if y >= 1, 7 ^ x = 455 (mod 463).
So x = 129 (mod 154), 
which implies x = 129, 283 (mod 308).
Therefore, 7 ^ x = 50, 567 (mod 617).
So 463 ^ y = 58, 575 (mod 617), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 463 ^ y is impossible.
-/
theorem diophantine1_7_8_463 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 463 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (463 ^ y % 463 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 463 = 455 := by omega
  have h9 := Claim (x % 154 = 129) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 463 = 455, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 617) [50, 567]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 154 = 129, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (463 ^ y % 617) [58, 575]) [
    {prop := List.Mem (7 ^ x % 617) [50, 567], proof := h10},
    {prop := 7 ^ x + 8 = 463 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (463 ^ y % 617) [58, 575], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 463 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 464 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 464 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_464 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 464 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (464 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 465 ...
-- Trying to disprove y >= 1 with prime factor 5 of 465 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 465 ...
-- Trying to disprove y >= 2 with prime factor 5 of 465 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 465 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 465 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 465 ^ y is impossible.
-/
theorem diophantine1_7_8_465 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 465 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (465 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 465 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 466 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 466 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_466 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 466 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (466 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 421)   7 ^ x + 8 = 467 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 467 ^ y,
if x >= 2, 467 ^ y = 8 (mod 49).
So y = 12 (mod 42), 
which implies y = 12, 33, 54, 75, 96 (mod 105).
Therefore, 467 ^ y = 414, 308, 341, 152, 48 (mod 421).
So 7 ^ x = 406, 300, 333, 144, 40 (mod 421), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 467 ^ y is impossible.
-/
theorem diophantine1_7_8_467 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 467 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 467 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 467 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (467 ^ y % 421) [414, 308, 341, 152, 48]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 421) [406, 300, 333, 144, 40]) [
    {prop := List.Mem (467 ^ y % 421) [414, 308, 341, 152, 48], proof := h10},
    {prop := 7 ^ x + 8 = 467 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 421) [406, 300, 333, 144, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 467 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 468 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 468 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_468 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 468 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (468 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 469 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 469 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 469 ^ y is impossible.
-/
theorem diophantine1_7_8_469 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 469 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (469 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 469 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 470 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 470 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_470 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 470 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (470 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 471 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 471 ...
-- Trying to disprove y >= 3 with prime factor 3 of 471 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 471 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 471 ^ y,
if x >= 2, 471 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 471 ^ y is impossible.
-/
theorem diophantine1_7_8_471 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 471 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 471 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 471 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 471 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 472 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 472 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_472 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 472 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (472 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 473 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 101)   7 ^ x + 8 = 473 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 473 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34, 44, 54, 64, 74, 84, 94 (mod 100).
Therefore, 7 ^ x = 78, 20, 88, 64, 19, 23, 81, 13, 37, 82 (mod 101).
So 473 ^ y = 86, 28, 96, 72, 27, 31, 89, 21, 45, 90 (mod 101), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 473 ^ y is impossible.
-/
theorem diophantine1_7_8_473 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 473 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (473 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 101) [78, 20, 88, 64, 19, 23, 81, 13, 37, 82]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (473 ^ y % 101) [86, 28, 96, 72, 27, 31, 89, 21, 45, 90]) [
    {prop := List.Mem (7 ^ x % 101) [78, 20, 88, 64, 19, 23, 81, 13, 37, 82], proof := h10},
    {prop := 7 ^ x + 8 = 473 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (473 ^ y % 101) [86, 28, 96, 72, 27, 31, 89, 21, 45, 90], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 473 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 474 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 474 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_474 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 474 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (474 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 475 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 475 ...
-- Trying to disprove y >= 2 with prime factor 5 of 475 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 475 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 475 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 475 ^ y is impossible.
-/
theorem diophantine1_7_8_475 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 475 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (475 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 475 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 476 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 476 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_476 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 476 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (476 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 477 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 477 ...
-- Trying to disprove y >= 3 with prime factor 3 of 477 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 53 of 477 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 477 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 477 ^ y,
if y >= 1, 7 ^ x = 45 (mod 53).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 477 ^ y is impossible.
-/
theorem diophantine1_7_8_477 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 477 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (477 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 53 = 45 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 53 = 45, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 477 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 478 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 478 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_478 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 478 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (478 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Trying prime 127...
-- Trying prime 211...
-- Trying prime 337...
-- Trying prime 379...
-- Trying prime 421...
-- Trying prime 463...
-- Trying prime 547...
-- Trying prime 631...
-- Trying prime 673...
-- Trying prime 757...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 757)   7 ^ x + 8 = 479 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 479 ^ y,
if x >= 2, 479 ^ y = 8 (mod 49).
So y = 24 (mod 42), 
which implies y = 24, 66, 108 (mod 126).
Therefore, 479 ^ y = 160, 535, 62 (mod 757).
So 7 ^ x = 152, 527, 54 (mod 757), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 479 ^ y is impossible.
-/
theorem diophantine1_7_8_479 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 479 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 479 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 24) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 479 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (479 ^ y % 757) [160, 535, 62]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 24, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 757) [152, 527, 54]) [
    {prop := List.Mem (479 ^ y % 757) [160, 535, 62], proof := h10},
    {prop := 7 ^ x + 8 = 479 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 757) [152, 527, 54], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 479 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 480 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 480 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_480 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 480 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (480 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 481 ...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 109)   7 ^ x + 8 = 481 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 481 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 0, 3, 6, 9, 12, 15, 18, 21, 24 (mod 27).
Therefore, 7 ^ x = 1, 16, 38, 63, 27, 105, 45, 66, 75 (mod 109).
So 481 ^ y = 9, 24, 46, 71, 35, 4, 53, 74, 83 (mod 109), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 481 ^ y is impossible.
-/
theorem diophantine1_7_8_481 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 481 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (481 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 109) [1, 16, 38, 63, 27, 105, 45, 66, 75]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (481 ^ y % 109) [9, 24, 46, 71, 35, 4, 53, 74, 83]) [
    {prop := List.Mem (7 ^ x % 109) [1, 16, 38, 63, 27, 105, 45, 66, 75], proof := h10},
    {prop := 7 ^ x + 8 = 481 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (481 ^ y % 109) [9, 24, 46, 71, 35, 4, 53, 74, 83], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 481 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 482 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 482 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_482 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 482 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (482 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 483 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 483 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 483 ^ y is impossible.
-/
theorem diophantine1_7_8_483 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 483 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (483 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 483 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 484 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 484 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_484 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 484 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (484 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 485 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 485 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 485 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 485 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 485 ^ y is impossible.
-/
theorem diophantine1_7_8_485 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 485 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (485 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 485 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 486 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 486 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_486 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 486 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (486 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 487 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 487 ^ y,
if x >= 2, 487 ^ y = 8 (mod 49).
So y = 15 (mod 21), 
Therefore, 487 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 487 ^ y is impossible.
-/
theorem diophantine1_7_8_487 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 487 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 487 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 15) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 487 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (487 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 15, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (487 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 487 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 487 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 488 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 488 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_488 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 488 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (488 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 489 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 489 ...
-- Trying to disprove y >= 3 with prime factor 3 of 489 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 489 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 489 ^ y,
if x >= 2, 489 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 489 ^ y is impossible.
-/
theorem diophantine1_7_8_489 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 489 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 489 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 489 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 489 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 490 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 490 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_490 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 490 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (490 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 491 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 491 ^ y,
if x >= 2, 491 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 491 ^ y is impossible.
-/
theorem diophantine1_7_8_491 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 491 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 491 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 491 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 491 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 492 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 492 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_492 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 492 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (492 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 493 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   7 ^ x + 8 = 493 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 493 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86 (mod 96).
Therefore, 7 ^ x = 85, 53, 65, 12, 44, 32 (mod 97).
So 493 ^ y = 93, 61, 73, 20, 52, 40 (mod 97), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 493 ^ y is impossible.
-/
theorem diophantine1_7_8_493 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 493 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (493 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (493 ^ y % 97) [93, 61, 73, 20, 52, 40]) [
    {prop := List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32], proof := h10},
    {prop := 7 ^ x + 8 = 493 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (493 ^ y % 97) [93, 61, 73, 20, 52, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 493 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 494 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 494 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_494 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 494 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (494 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 495 ...
-- Trying to disprove y >= 1 with prime factor 5 of 495 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 495 ...
-- Trying to disprove y >= 1 with prime factor 11 of 495 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 495 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 495 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 495 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 495 ^ y is impossible.
-/
theorem diophantine1_7_8_495 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 495 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (495 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (495 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 495 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (495 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 495 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 496 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 496 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_496 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 496 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (496 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 497 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 497 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 497 ^ y is impossible.
-/
theorem diophantine1_7_8_497 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 497 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (497 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 497 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 498 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 498 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_498 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 498 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (498 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 499 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 499 ^ y,
if x >= 2, 499 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
which implies y = 18, 39 (mod 42).
Therefore, 499 ^ y = 4, 39 (mod 43).
So 7 ^ x = 39, 31 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 499 ^ y is impossible.
-/
theorem diophantine1_7_8_499 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 499 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 499 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 499 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (499 ^ y % 43) [4, 39]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [39, 31]) [
    {prop := List.Mem (499 ^ y % 43) [4, 39], proof := h10},
    {prop := 7 ^ x + 8 = 499 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [39, 31], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 499 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 500 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 500 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_500 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 500 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (500 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
