-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 7 <= a <= 7
-- 8 <= b <= 8
-- 2 <= c <= 100
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type i)   7 ^ x + 8 = 2 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 2 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 3 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 3 ...
-- Trying to disprove y >= 3 with prime factor 3 of 3 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 3 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 3 ^ y,
if x >= 2, 3 ^ y = 8 (mod 49).
So y = 36 (mod 42), 
Therefore, 3 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 3 ^ y is impossible.
-/
theorem diophantine1_7_8_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 3 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 36) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 3 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (3 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 36, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (3 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 3 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 3 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 4 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 4 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (4 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 5 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 5 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 5 ^ y is impossible.
-/
theorem diophantine1_7_8_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 6 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 6 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 7 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 7 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 7 ^ y is impossible.
-/
theorem diophantine1_7_8_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (7 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 7 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 8 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 8 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (8 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 9 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 9 ^ y,
if x >= 2, 9 ^ y = 8 (mod 49).
So y = 18 (mod 21), 
Therefore, 9 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 9 ^ y is impossible.
-/
theorem diophantine1_7_8_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 9 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (9 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 9 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 9 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 10 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 10 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (10 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 11 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 11 ^ y,
if x >= 2, 11 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
which implies y = 3 (mod 7).
Therefore, 11 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 11 ^ y is impossible.
-/
theorem diophantine1_7_8_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (11 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 11 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 12 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 12 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (12 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Trying prime 37...
-- Trying prime 61...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 61)   7 ^ x + 8 = 13 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 13 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15, 27, 39, 51 (mod 60).
Therefore, 7 ^ x = 38, 11, 8, 28, 37 (mod 61).
So 13 ^ y = 46, 19, 16, 36, 45 (mod 61), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 13 ^ y is impossible.
-/
theorem diophantine1_7_8_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (13 ^ y % 61) [46, 19, 16, 36, 45]) [
    {prop := List.Mem (7 ^ x % 61) [38, 11, 8, 28, 37], proof := h10},
    {prop := 7 ^ x + 8 = 13 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (13 ^ y % 61) [46, 19, 16, 36, 45], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 14 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 14 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 15 ...
-- Trying to disprove y >= 2 with prime factor 5 of 15 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 15 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 15 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_7_8_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 15 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (15 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 15 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 16 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 16 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (16 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 17 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 17 ^ y,
if x >= 2, 17 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
which implies y = 9 (mod 21).
Therefore, 17 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 17 ^ y is impossible.
-/
theorem diophantine1_7_8_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (17 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 18 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 18 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 19 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 19 ^ y,
if x >= 2, 19 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 19 ^ y is impossible.
-/
theorem diophantine1_7_8_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 19 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 19 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 19 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 20 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 20 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (20 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 21 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 21 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 21 ^ y is impossible.
-/
theorem diophantine1_7_8_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 21 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 22 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 22 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 331)   7 ^ x + 8 = 23 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 23 ^ y,
if y >= 1, 7 ^ x = 15 (mod 23).
So x = 9 (mod 22), 
which implies x = 9, 31, 53, 75, 97 (mod 110).
Therefore, 7 ^ x = 73, 115, 27, 38, 78 (mod 331).
So 23 ^ y = 81, 123, 35, 46, 86 (mod 331), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 23 ^ y is impossible.
-/
theorem diophantine1_7_8_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 23 = 15 := by omega
  have h9 := Claim (x % 22 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 23 = 15, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 331) [81, 123, 35, 46, 86]) [
    {prop := List.Mem (7 ^ x % 331) [73, 115, 27, 38, 78], proof := h10},
    {prop := 7 ^ x + 8 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 331) [81, 123, 35, 46, 86], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 24 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 24 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (24 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 25 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 25 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 25 ^ y is impossible.
-/
theorem diophantine1_7_8_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 26 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 26 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 27 ...
-- Trying to disprove y >= 3 with prime factor 3 of 27 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 29)   7 ^ x + 8 = 27 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 27 ^ y,
if x >= 2, 27 ^ y = 8 (mod 49).
So y = 12 (mod 14), 
which implies y = 12, 26 (mod 28).
Therefore, 27 ^ y = 7, 22 (mod 29).
So 7 ^ x = 28, 14 (mod 29), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 27 ^ y is impossible.
-/
theorem diophantine1_7_8_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 27 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 27 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (27 ^ y % 29) [7, 22]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 29) [28, 14]) [
    {prop := List.Mem (27 ^ y % 29) [7, 22], proof := h10},
    {prop := 7 ^ x + 8 = 27 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 29) [28, 14], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 27 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 28 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 28 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (28 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 29 of 29 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 29 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 29 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 29 ^ y is impossible.
-/
theorem diophantine1_7_8_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (29 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 29 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 30 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 30 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (30 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 31 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 31 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 31 ^ y is impossible.
-/
theorem diophantine1_7_8_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 32 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 32 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (32 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 33 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 33 ...
-- Trying to disprove y >= 1 with prime factor 11 of 33 ...
-- Trying prime 31...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 71...
-- Trying prime 101...
-- Trying to disprove y >= 3 with prime factor 3 of 33 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 33 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 33 ^ y,
if x >= 2, 33 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
Therefore, 33 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 33 ^ y is impossible.
-/
theorem diophantine1_7_8_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 33 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 33 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (33 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (33 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 33 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 33 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 34 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 34 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 35 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 35 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 35 ^ y is impossible.
-/
theorem diophantine1_7_8_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 35 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 36 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 36 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (36 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 37 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 37 ^ y,
if y >= 1, 7 ^ x = 29 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 37 ^ y is impossible.
-/
theorem diophantine1_7_8_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 37 = 29 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 37 = 29, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 38 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 38 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 39 ...
-- Trying to disprove y >= 1 with prime factor 13 of 39 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Trying prime 97...
-- Trying prime 109...
-- Trying to disprove y >= 3 with prime factor 3 of 39 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 39 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 39 ^ y,
if x >= 2, 39 ^ y = 8 (mod 49).
So y = 6 (mod 21), 
which implies y = 6, 13 (mod 14).
Therefore, 39 ^ y = 11, 32 (mod 43).
So 7 ^ x = 3, 24 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 39 ^ y is impossible.
-/
theorem diophantine1_7_8_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 39 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 39 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (39 ^ y % 43) [11, 32]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3, 24]) [
    {prop := List.Mem (39 ^ y % 43) [11, 32], proof := h10},
    {prop := 7 ^ x + 8 = 39 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3, 24], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 39 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 40 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 40 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (40 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 41 of 41 ...
-- Trying prime 241...
-- Trying prime 281...
-- Trying prime 401...
-- Trying prime 521...
-- Trying prime 601...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 41 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 41 ^ y,
if x >= 2, 41 ^ y = 8 (mod 49).
So y = 8 (mod 14), 
which implies y = 1 (mod 7).
Therefore, 41 ^ y = 41 (mod 43).
So 7 ^ x = 33 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 41 ^ y is impossible.
-/
theorem diophantine1_7_8_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 8) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 43) [41]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [33]) [
    {prop := List.Mem (41 ^ y % 43) [41], proof := h10},
    {prop := 7 ^ x + 8 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 41 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 42 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 42 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 43 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 43 ^ y,
if y >= 1, 7 ^ x = 35 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 43 ^ y is impossible.
-/
theorem diophantine1_7_8_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 43 = 35 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 43 = 35, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 44 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 44 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (44 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 45 ...
-- Trying to disprove y >= 1 with prime factor 5 of 45 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 45 ...
-- Trying to disprove y >= 2 with prime factor 5 of 45 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 45 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 45 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 45 ^ y is impossible.
-/
theorem diophantine1_7_8_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (45 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 45 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 46 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 46 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 47 of 47 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 47 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 47 ^ y,
if y >= 1, 7 ^ x = 39 (mod 47).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 47 ^ y is impossible.
-/
theorem diophantine1_7_8_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (47 ^ y % 47 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 47 = 39 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 47 = 39, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 47 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 48 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 48 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (48 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 49 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 49 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 49 ^ y is impossible.
-/
theorem diophantine1_7_8_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (49 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 49 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 50 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 50 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (50 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 51 ...
-- Trying to disprove y >= 1 with prime factor 17 of 51 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove y >= 3 with prime factor 3 of 51 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 51 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 51 ^ y,
if x >= 2, 51 ^ y = 8 (mod 49).
So y = 3 (mod 21), 
which implies y = 3, 10 (mod 14).
Therefore, 51 ^ y = 39, 4 (mod 43).
So 7 ^ x = 31, 39 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 51 ^ y is impossible.
-/
theorem diophantine1_7_8_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 51 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 3) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 51 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (51 ^ y % 43) [39, 4]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [31, 39]) [
    {prop := List.Mem (51 ^ y % 43) [39, 4], proof := h10},
    {prop := 7 ^ x + 8 = 51 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [31, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 51 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 52 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 52 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (52 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 53 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 53 ^ y,
if x >= 2, 53 ^ y = 8 (mod 49).
So y = 12 (mod 21), 
Therefore, 53 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 53 ^ y is impossible.
-/
theorem diophantine1_7_8_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 12) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (53 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 54 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 54 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   7 ^ x + 8 = 55 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 55 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 14, 24, 34 (mod 40).
Therefore, 7 ^ x = 23, 2, 18, 39 (mod 41).
So 55 ^ y = 31, 10, 26, 6 (mod 41), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 55 ^ y is impossible.
-/
theorem diophantine1_7_8_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 41) [23, 2, 18, 39]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (55 ^ y % 41) [31, 10, 26, 6]) [
    {prop := List.Mem (7 ^ x % 41) [23, 2, 18, 39], proof := h10},
    {prop := 7 ^ x + 8 = 55 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (55 ^ y % 41) [31, 10, 26, 6], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 56 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 56 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (56 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 3 of 57 ...
-- Trying to disprove y >= 3 with prime factor 3 of 57 ...
-- Trying to disprove y >= 4 with prime factor 3 of 57 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 57 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 57 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 57 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_7_8_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 57 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (57 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (57 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 57 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (57 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 57 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 58 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 58 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 59 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 59 ^ y,
if x >= 2, 59 ^ y = 8 (mod 49).
So y = 6 (mod 42), 
which implies y = 6 (mod 7).
Therefore, 59 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 59 ^ y is impossible.
-/
theorem diophantine1_7_8_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 6) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (59 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 60 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 60 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (60 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 61 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 61 ^ y,
if x >= 2, 61 ^ y = 8 (mod 49).
So y = 30 (mod 42), 
Therefore, 61 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 61 ^ y is impossible.
-/
theorem diophantine1_7_8_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 61 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 30) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 61 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (61 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (61 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 61 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 61 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 62 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 62 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 63 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 63 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 63 ^ y is impossible.
-/
theorem diophantine1_7_8_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 63 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 64 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 64 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (64 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Trying prime 37...
-- Trying prime 61...
-- Trying prime 73...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 73)   7 ^ x + 8 = 65 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 65 ^ y,
if y >= 1, 7 ^ x = 5 (mod 13).
So x = 3 (mod 12), 
which implies x = 3, 15 (mod 24).
Therefore, 7 ^ x = 51, 22 (mod 73).
So 65 ^ y = 59, 30 (mod 73), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 65 ^ y is impossible.
-/
theorem diophantine1_7_8_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 13 = 5 := by omega
  have h9 := Claim (x % 12 = 3) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 13 = 5, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 73) [51, 22]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 12 = 3, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (65 ^ y % 73) [59, 30]) [
    {prop := List.Mem (7 ^ x % 73) [51, 22], proof := h10},
    {prop := 7 ^ x + 8 = 65 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (65 ^ y % 73) [59, 30], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 66 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 66 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 67 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 67 ^ y,
if x >= 2, 67 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 67 ^ y is impossible.
-/
theorem diophantine1_7_8_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 68 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 68 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (68 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 69 ...
-- Trying to disprove y >= 1 with prime factor 23 of 69 ...
-- Trying prime 67...
-- Trying prime 89...
-- Trying prime 199...
-- Trying prime 331...
-- Trying prime 353...
-- Trying to disprove y >= 3 with prime factor 3 of 69 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Trying prime 71...
-- Trying prime 113...
-- Trying prime 127...
-- Trying to disprove y >= 4 with prime factor 3 of 69 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 271)   7 ^ x + 8 = 69 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 69 ^ y,
if y >= 4, 7 ^ x = 73 (mod 81).
So x = 12 (mod 27), 
which implies x = 12, 39, 66, 93, 120 (mod 135).
Therefore, 7 ^ x = 141, 55, 8, 80, 258 (mod 271).
So 69 ^ y = 149, 63, 16, 88, 266 (mod 271), but this is impossible.
Therefore, y < 4.
Further examination shows that 7 ^ x + 8 = 69 ^ y is impossible.
-/
theorem diophantine1_7_8_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 4
  have h7 := Claim (69 ^ y % 81 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 81 = 73 := by omega
  have h9 := Claim (x % 27 = 12) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 81 = 73, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 27 = 12, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (69 ^ y % 271) [149, 63, 16, 88, 266]) [
    {prop := List.Mem (7 ^ x % 271) [141, 55, 8, 80, 258], proof := h10},
    {prop := 7 ^ x + 8 = 69 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (69 ^ y % 271) [149, 63, 16, 88, 266], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 69 ^ y, proof := h3},
    {prop := y <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 70 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 70 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (70 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Trying prime 211...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 211)   7 ^ x + 8 = 71 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 71 ^ y,
if y >= 1, 7 ^ x = 63 (mod 71).
So x = 53 (mod 70), 
which implies x = 53, 123, 193 (mod 210).
Therefore, 7 ^ x = 41, 18, 152 (mod 211).
So 71 ^ y = 49, 26, 160 (mod 211), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 71 ^ y is impossible.
-/
theorem diophantine1_7_8_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 71 = 63 := by omega
  have h9 := Claim (x % 70 = 53) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 71 = 63, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 211) [41, 18, 152]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 70 = 53, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (71 ^ y % 211) [49, 26, 160]) [
    {prop := List.Mem (7 ^ x % 211) [41, 18, 152], proof := h10},
    {prop := 7 ^ x + 8 = 71 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (71 ^ y % 211) [49, 26, 160], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 72 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 72 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (72 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 73 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 73 ^ y,
if x >= 2, 73 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
Therefore, 73 ^ y = 11 (mod 43).
So 7 ^ x = 3 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 73 ^ y is impossible.
-/
theorem diophantine1_7_8_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 43) [11]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [3]) [
    {prop := List.Mem (73 ^ y % 43) [11], proof := h10},
    {prop := 7 ^ x + 8 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [3], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 74 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 74 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 75 ...
-- Trying to disprove y >= 1 with prime factor 5 of 75 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 75 ...
-- Trying to disprove y >= 2 with prime factor 5 of 75 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 75 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 75 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 75 ^ y is impossible.
-/
theorem diophantine1_7_8_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (75 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 75 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 76 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 76 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (76 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 77 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 77 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 77 ^ y is impossible.
-/
theorem diophantine1_7_8_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (77 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 77 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 78 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 78 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 79 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 79 ^ y,
if x >= 2, 79 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 79 ^ y is impossible.
-/
theorem diophantine1_7_8_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 79 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 80 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 80 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (80 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 81 ...
-- Trying to disprove y >= 3 with prime factor 3 of 81 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 81 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 81 ^ y,
if x >= 2, 81 ^ y = 8 (mod 49).
So y = 9 (mod 21), 
Therefore, 81 ^ y = 21 (mod 43).
So 7 ^ x = 13 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 81 ^ y is impossible.
-/
theorem diophantine1_7_8_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 81 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 21 = 9) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 81 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (81 ^ y % 43) [21]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 21 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [13]) [
    {prop := List.Mem (81 ^ y % 43) [21], proof := h10},
    {prop := 7 ^ x + 8 = 81 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [13], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 81 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 82 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 82 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 29...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 83 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 83 ^ y,
if x >= 2, 83 ^ y = 8 (mod 49).
So y = 4 (mod 14), 
which implies y = 4, 11, 18 (mod 21).
Therefore, 83 ^ y = 38, 13, 35 (mod 43).
So 7 ^ x = 30, 5, 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 83 ^ y is impossible.
-/
theorem diophantine1_7_8_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 14 = 4) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 43) [38, 13, 35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 14 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [30, 5, 27]) [
    {prop := List.Mem (83 ^ y % 43) [38, 13, 35], proof := h10},
    {prop := 7 ^ x + 8 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [30, 5, 27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 84 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 84 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (84 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   7 ^ x + 8 = 85 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 85 ^ y,
if y >= 1, 7 ^ x = 9 (mod 17).
So x = 6 (mod 16), 
which implies x = 6, 22, 38, 54, 70, 86 (mod 96).
Therefore, 7 ^ x = 85, 53, 65, 12, 44, 32 (mod 97).
So 85 ^ y = 93, 61, 73, 20, 52, 40 (mod 97), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 85 ^ y is impossible.
-/
theorem diophantine1_7_8_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (85 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 17 = 9 := by omega
  have h9 := Claim (x % 16 = 6) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 17 = 9, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 6, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 97) [93, 61, 73, 20, 52, 40]) [
    {prop := List.Mem (7 ^ x % 97) [85, 53, 65, 12, 44, 32], proof := h10},
    {prop := 7 ^ x + 8 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 97) [93, 61, 73, 20, 52, 40], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 85 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 86 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 86 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 87 ...
-- Trying to disprove y >= 3 with prime factor 3 of 87 ...
-- Trying to disprove y >= 1 with prime factor 29 of 87 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 87 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 87 ^ y,
if y >= 1, 7 ^ x = 21 (mod 29).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 87 ^ y is impossible.
-/
theorem diophantine1_7_8_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (87 ^ y % 29 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 29 = 21 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 29 = 21, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 87 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 88 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 88 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (88 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 43)   7 ^ x + 8 = 89 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 89 ^ y,
if x >= 2, 89 ^ y = 8 (mod 49).
So y = 18 (mod 42), 
Therefore, 89 ^ y = 35 (mod 43).
So 7 ^ x = 27 (mod 43), but this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 89 ^ y is impossible.
-/
theorem diophantine1_7_8_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 49 = 8 := by omega
  have h9 := Claim (y % 42 = 18) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 43) [35]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 42 = 18, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ x % 43) [27]) [
    {prop := List.Mem (89 ^ y % 43) [35], proof := h10},
    {prop := 7 ^ x + 8 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (7 ^ x % 43) [27], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 90 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 90 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (90 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

/-
(Class I, Type iii)   7 ^ x + 8 = 91 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 91 ^ y,
if x >= 2 and y >= 2,
8 = 0 (mod 49), which is impossible.
Therefore, x < 2 or y < 2.
Further examination shows that 7 ^ x + 8 = 91 ^ y is impossible.
-/
theorem diophantine1_7_8_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 2) (y >= 2)
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (91 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 1) (y <= 1) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 91 ^ y, proof := h3},
    {prop := Or (x <= 1) (y <= 1), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 92 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 92 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (92 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 93 ...
-- Trying to disprove y >= 3 with prime factor 3 of 93 ...
-- Trying to disprove y >= 1 with prime factor 31 of 93 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 93 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 93 ^ y,
if y >= 1, 7 ^ x = 23 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 93 ^ y is impossible.
-/
theorem diophantine1_7_8_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (93 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 31 = 23 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 31 = 23, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 93 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 94 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 94 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 1 with prime factor 19 of 95 ...
-- Trying to disprove y >= 2 with prime factor 5 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   7 ^ x + 8 = 95 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 95 ^ y,
if y >= 2, 7 ^ x = 17 (mod 25).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 7 ^ x + 8 = 95 ^ y is impossible.
-/
theorem diophantine1_7_8_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (95 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 25 = 17 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 25 = 17, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 95 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 96 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 96 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 8).
-/
theorem diophantine1_7_8_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (96 ^ y % 8 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 8 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 8 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 2 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Back Mode, no magic prime)   7 ^ x + 8 = 97 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 97 ^ y,
if x >= 2, 97 ^ y = 8 (mod 49).
However, this is impossible.
Therefore, x < 2.
Further examination shows that 7 ^ x + 8 = 97 ^ y is impossible.
-/
theorem diophantine1_7_8_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (7 ^ x % 49 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 49 = 8 := by omega
  have h9 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 49 = 8, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 98 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 98 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 2).
-/
theorem diophantine1_7_8_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 2 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 2 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Trying to disprove x >= 1 with prime factor 7 of 7 ...
-- Trying to disprove y >= 2 with prime factor 3 of 99 ...
-- Trying to disprove y >= 1 with prime factor 11 of 99 ...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 31)   7 ^ x + 8 = 99 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 99 ^ y,
if y >= 1, 7 ^ x = 3 (mod 11).
So x = 4 (mod 10), 
which implies x = 4, 9, 14 (mod 15).
Therefore, 7 ^ x = 14, 8, 9 (mod 31).
So 99 ^ y = 22, 16, 17 (mod 31), but this is impossible.
Therefore, y < 1.
So 7 ^ x + 8 = 99 ^ y is impossible.
-/
theorem diophantine1_7_8_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (99 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 7 ^ x % 11 = 3 := by omega
  have h9 := Claim (x % 10 = 4) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 11 = 3, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (7 ^ x % 31) [14, 8, 9]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 4, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (99 ^ y % 31) [22, 16, 17]) [
    {prop := List.Mem (7 ^ x % 31) [14, 8, 9], proof := h10},
    {prop := 7 ^ x + 8 = 99 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (99 ^ y % 31) [22, 16, 17], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 7 ^ x + 8 = 99 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type i)   7 ^ x + 8 = 100 ^ y
For positive integers x, y satisfying 7 ^ x + 8 = 100 ^ y,
this is impossible, because it implies that 7 ^ x = 0 (mod 4).
-/
theorem diophantine1_7_8_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 7 ^ x + 8 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  have h6 := Claim (100 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
  ] "pow_mod_eq_zero"
  have h7 : 7 ^ x % 4 = 0 := by omega
  have h8 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 7 ^ x % 4 = 0, proof := h7},
  ] "observe_mod_cycle"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
