-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 9 <= a <= 9
-- 1 <= b <= 1
-- 2 <= c <= 125
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 2 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 2 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 2 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 2 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 2 ^ y is impossible.
-/
theorem diophantine1_9_1_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (2 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 2 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 3 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 3 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 3 ^ y is impossible.
-/
theorem diophantine1_9_1_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 3 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 4 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 4 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 4 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 4 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 4 ^ y is impossible.
-/
theorem diophantine1_9_1_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (4 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 4 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 5 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 5 of 5 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 11)   9 ^ x + 1 = 5 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 5 ^ y,
if y >= 2, 9 ^ x = 24 (mod 25).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 9 ^ x = 1 (mod 11).
So 5 ^ y = 2 (mod 11), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 5 ^ y is impossible.
-/
theorem diophantine1_9_1_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (5 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 11) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (5 ^ y % 11) [2]) [
    {prop := List.Mem (9 ^ x % 11) [1], proof := h10},
    {prop := 9 ^ x + 1 = 5 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (5 ^ y % 11) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 5 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 6 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 6 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 6 ^ y is impossible.
-/
theorem diophantine1_9_1_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 6 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 7 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 7 ^ y,
if y >= 1, 9 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 7 ^ y is impossible.
-/
theorem diophantine1_9_1_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (7 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 7 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 8 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 8 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 8 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 8 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 8 ^ y is impossible.
-/
theorem diophantine1_9_1_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (8 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 8 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 9 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 9 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 9 ^ y is impossible.
-/
theorem diophantine1_9_1_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (9 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 9 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 10 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 10 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 10 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_9_1_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 10 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (10 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 10 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 11 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 11 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 11 ^ y,
if y >= 1, 9 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 11 ^ y is impossible.
-/
theorem diophantine1_9_1_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 11 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (11 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 11 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 12 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 12 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 12 ^ y is impossible.
-/
theorem diophantine1_9_1_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 12 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 13 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 13 ^ y,
if y >= 1, 9 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 13 ^ y is impossible.
-/
theorem diophantine1_9_1_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (13 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 13 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 14 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 14 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 14 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 14 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 14 ^ y is impossible.
-/
theorem diophantine1_9_1_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (14 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 14 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 15 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 15 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 15 ^ y is impossible.
-/
theorem diophantine1_9_1_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 15 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 16 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 16 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 16 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 16 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 16 ^ y is impossible.
-/
theorem diophantine1_9_1_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (16 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 16 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 17 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 17 ^ y,
if x >= 4, 17 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 17 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 1 = 17 ^ y is impossible.
-/
theorem diophantine1_9_1_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (17 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 17 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 18 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 18 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 18 ^ y is impossible.
-/
theorem diophantine1_9_1_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 19 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 19 ^ y,
if y >= 1, 9 ^ x = 18 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 19 ^ y is impossible.
-/
theorem diophantine1_9_1_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 19 = 18 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 20 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 20 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 20 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 20 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 20 ^ y is impossible.
-/
theorem diophantine1_9_1_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (20 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 20 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 21 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 21 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 21 ^ y is impossible.
-/
theorem diophantine1_9_1_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 21 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 22 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 22 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 22 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 22 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 22 ^ y is impossible.
-/
theorem diophantine1_9_1_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (22 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 22 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 23 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 23 ^ y,
if y >= 1, 9 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 23 ^ y is impossible.
-/
theorem diophantine1_9_1_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 24 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 24 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 24 ^ y is impossible.
-/
theorem diophantine1_9_1_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 25 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 5 of 25 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 11)   9 ^ x + 1 = 25 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 25 ^ y,
if y >= 2, 9 ^ x = 24 (mod 25).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 9 ^ x = 1 (mod 11).
So 25 ^ y = 2 (mod 11), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 25 ^ y is impossible.
-/
theorem diophantine1_9_1_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (25 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 11) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (25 ^ y % 11) [2]) [
    {prop := List.Mem (9 ^ x % 11) [1], proof := h10},
    {prop := 9 ^ x + 1 = 25 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (25 ^ y % 11) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 25 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 26 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 26 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 26 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 26 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 26 ^ y is impossible.
-/
theorem diophantine1_9_1_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (26 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 26 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 27 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 27 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 27 ^ y is impossible.
-/
theorem diophantine1_9_1_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (27 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 27 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 28 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 28 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 28 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 28 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 28 ^ y is impossible.
-/
theorem diophantine1_9_1_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (28 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 28 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 29 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 29 ^ y,
if x >= 3, 29 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 29 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 29 ^ y is impossible.
-/
theorem diophantine1_9_1_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (29 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 29 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 30 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 30 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 30 ^ y is impossible.
-/
theorem diophantine1_9_1_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 30 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 31 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 31 ^ y,
if y >= 1, 9 ^ x = 30 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 31 ^ y is impossible.
-/
theorem diophantine1_9_1_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 31 = 30 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 31 = 30, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 32 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 32 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 32 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 32 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 32 ^ y is impossible.
-/
theorem diophantine1_9_1_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (32 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 32 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 33 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 33 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 33 ^ y is impossible.
-/
theorem diophantine1_9_1_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 33 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 34 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 34 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 34 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 34 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 34 ^ y is impossible.
-/
theorem diophantine1_9_1_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (34 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 34 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 35 ...
-- Trying to disprove y >= 1 with prime factor 7 of 35 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 35 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 35 ^ y,
if y >= 1, 9 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 35 ^ y is impossible.
-/
theorem diophantine1_9_1_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (35 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 35 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 36 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 36 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 36 ^ y is impossible.
-/
theorem diophantine1_9_1_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 37 of 37 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 37 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 37 ^ y,
if y >= 1, 9 ^ x = 36 (mod 37).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 37 ^ y is impossible.
-/
theorem diophantine1_9_1_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (37 ^ y % 37 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 37 = 36 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 37 = 36, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 37 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 38 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 38 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 38 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 38 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 38 ^ y is impossible.
-/
theorem diophantine1_9_1_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (38 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 38 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 39 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 39 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 39 ^ y is impossible.
-/
theorem diophantine1_9_1_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 39 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 40 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 40 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 40 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 40 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 40 ^ y is impossible.
-/
theorem diophantine1_9_1_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (40 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 40 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 41 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 41 ^ y,
if x >= 3, 41 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 41 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 41 ^ y is impossible.
-/
theorem diophantine1_9_1_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 41 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 41 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (41 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (41 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 41 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 41 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 42 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 42 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 42 ^ y is impossible.
-/
theorem diophantine1_9_1_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 43 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 43 ^ y,
if y >= 1, 9 ^ x = 42 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 43 ^ y is impossible.
-/
theorem diophantine1_9_1_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 43 = 42 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 43 = 42, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 44 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 44 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 44 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 44 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 44 ^ y is impossible.
-/
theorem diophantine1_9_1_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (44 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 44 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 45 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 45 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 45 ^ y is impossible.
-/
theorem diophantine1_9_1_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 46 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 46 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 46 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 46 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 46 ^ y is impossible.
-/
theorem diophantine1_9_1_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (46 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 46 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 47 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 47 ^ y,
if x >= 3, 47 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 47 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 47 ^ y is impossible.
-/
theorem diophantine1_9_1_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (47 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 47 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 48 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 48 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 48 ^ y is impossible.
-/
theorem diophantine1_9_1_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 49 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 49 ^ y,
if y >= 1, 9 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 49 ^ y is impossible.
-/
theorem diophantine1_9_1_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (49 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 49 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 50 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 50 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 50 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 50 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 50 ^ y is impossible.
-/
theorem diophantine1_9_1_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (50 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 50 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 51 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 51 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 51 ^ y is impossible.
-/
theorem diophantine1_9_1_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 51 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 52 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 52 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 52 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 52 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 52 ^ y is impossible.
-/
theorem diophantine1_9_1_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (52 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 52 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 53 of 53 ...
-- Trying prime 79...
-- Trying prime 131...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 131)   9 ^ x + 1 = 53 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 53 ^ y,
if y >= 1, 9 ^ x = 52 (mod 53).
So x = 13 (mod 26), 
which implies x = 0, 13, 26, 39, 52 (mod 65).
Therefore, 9 ^ x = 1, 58, 89, 53, 61 (mod 131).
So 53 ^ y = 2, 59, 90, 54, 62 (mod 131), but this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 53 ^ y is impossible.
-/
theorem diophantine1_9_1_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (53 ^ y % 53 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 53 = 52 := by omega
  have h9 := Claim (x % 26 = 13) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 53 = 52, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 131) [1, 58, 89, 53, 61]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 26 = 13, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (53 ^ y % 131) [2, 59, 90, 54, 62]) [
    {prop := List.Mem (9 ^ x % 131) [1, 58, 89, 53, 61], proof := h10},
    {prop := 9 ^ x + 1 = 53 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (53 ^ y % 131) [2, 59, 90, 54, 62], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 53 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 54 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 54 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 54 ^ y is impossible.
-/
theorem diophantine1_9_1_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 55 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 55 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 55 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 55 ^ y,
if y >= 1, 9 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 55 ^ y is impossible.
-/
theorem diophantine1_9_1_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (55 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 55 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 56 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 56 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 56 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 56 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 56 ^ y is impossible.
-/
theorem diophantine1_9_1_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (56 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 56 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 57 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 57 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 57 ^ y is impossible.
-/
theorem diophantine1_9_1_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 57 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 58 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 58 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 58 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 58 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 58 ^ y is impossible.
-/
theorem diophantine1_9_1_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (58 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 58 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 59 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 59 ^ y,
if x >= 3, 59 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
Therefore, 59 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 59 ^ y is impossible.
-/
theorem diophantine1_9_1_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (59 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 59 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 60 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 60 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 60 ^ y is impossible.
-/
theorem diophantine1_9_1_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 60 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 61 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 61 ^ y,
if y >= 1, 9 ^ x = 60 (mod 61).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 61 ^ y is impossible.
-/
theorem diophantine1_9_1_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 61 = 60 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 61 = 60, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 62 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 62 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 62 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 62 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 62 ^ y is impossible.
-/
theorem diophantine1_9_1_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (62 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 62 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 63 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 63 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 63 ^ y is impossible.
-/
theorem diophantine1_9_1_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (63 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 63 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 64 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 64 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 64 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 64 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 64 ^ y is impossible.
-/
theorem diophantine1_9_1_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (64 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 64 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 65 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 13 of 65 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 65 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 65 ^ y,
if y >= 1, 9 ^ x = 12 (mod 13).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 65 ^ y is impossible.
-/
theorem diophantine1_9_1_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (65 ^ y % 13 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 13 = 12 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 13 = 12, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 65 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 66 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 66 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 66 ^ y is impossible.
-/
theorem diophantine1_9_1_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 66 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 67 of 67 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 67 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 67 ^ y,
if y >= 1, 9 ^ x = 66 (mod 67).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 67 ^ y is impossible.
-/
theorem diophantine1_9_1_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (67 ^ y % 67 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 67 = 66 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 67 = 66, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 67 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 68 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 68 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 68 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 68 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 68 ^ y is impossible.
-/
theorem diophantine1_9_1_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (68 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 68 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 69 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 69 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 69 ^ y is impossible.
-/
theorem diophantine1_9_1_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 69 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 70 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 70 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 70 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 70 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 70 ^ y is impossible.
-/
theorem diophantine1_9_1_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (70 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 70 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 71 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 71 ^ y,
if y >= 1, 9 ^ x = 70 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 71 ^ y is impossible.
-/
theorem diophantine1_9_1_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 71 = 70 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 71 = 70, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 72 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 72 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 72 ^ y is impossible.
-/
theorem diophantine1_9_1_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 73 of 73 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying to disprove x >= 5 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 1 = 73 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 73 ^ y,
if x >= 5, 73 ^ y = 1 (mod 243).
So y = 0 (mod 27), 
Therefore, 73 ^ y = 1 (mod 109).
So 9 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 5.
Further examination shows that 9 ^ x + 1 = 73 ^ y is impossible.
-/
theorem diophantine1_9_1_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 5
  have h7 := Claim (9 ^ x % 243 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 5, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 243 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 243 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [0]) [
    {prop := List.Mem (73 ^ y % 109) [1], proof := h10},
    {prop := 9 ^ x + 1 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 4 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 73 ^ y, proof := h3},
    {prop := x <= 4, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 74 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 74 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 74 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 74 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 74 ^ y is impossible.
-/
theorem diophantine1_9_1_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (74 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 74 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 75 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 75 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 75 ^ y is impossible.
-/
theorem diophantine1_9_1_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 75 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 76 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 76 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 76 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 76 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 76 ^ y is impossible.
-/
theorem diophantine1_9_1_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (76 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 76 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 77 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 77 ^ y,
if y >= 1, 9 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 77 ^ y is impossible.
-/
theorem diophantine1_9_1_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (77 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 77 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 78 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 78 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 78 ^ y is impossible.
-/
theorem diophantine1_9_1_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 78 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 79 of 79 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 79 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 79 ^ y,
if y >= 1, 9 ^ x = 78 (mod 79).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 79 ^ y is impossible.
-/
theorem diophantine1_9_1_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (79 ^ y % 79 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 79 = 78 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 79 = 78, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 79 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 80 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 80 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 80 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 80 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 80 ^ y is impossible.
-/
theorem diophantine1_9_1_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (80 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 80 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 81 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 81 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 81 ^ y is impossible.
-/
theorem diophantine1_9_1_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (81 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 81 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 2 with prime factor 2 of 82 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 82 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 82 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_9_1_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 82 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (82 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 82 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 83 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 83 ^ y,
if x >= 3, 83 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 3).
Therefore, 83 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 83 ^ y is impossible.
-/
theorem diophantine1_9_1_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (83 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 83 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 84 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 84 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 84 ^ y is impossible.
-/
theorem diophantine1_9_1_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 85 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 17 of 85 ...
-- Trying to disprove y >= 2 with prime factor 5 of 85 ...
-- Trying prime 11...
-- Trying prime 31...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 41)   9 ^ x + 1 = 85 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 85 ^ y,
if y >= 2, 9 ^ x = 24 (mod 25).
So x = 5 (mod 10), 
which implies x = 1, 3 (mod 4).
Therefore, 9 ^ x = 9, 32 (mod 41).
So 85 ^ y = 10, 33 (mod 41), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 85 ^ y is impossible.
-/
theorem diophantine1_9_1_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (85 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 41) [9, 32]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (85 ^ y % 41) [10, 33]) [
    {prop := List.Mem (9 ^ x % 41) [9, 32], proof := h10},
    {prop := 9 ^ x + 1 = 85 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (85 ^ y % 41) [10, 33], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 85 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 86 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 86 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 86 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 86 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 86 ^ y is impossible.
-/
theorem diophantine1_9_1_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (86 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 86 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 87 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 87 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 87 ^ y is impossible.
-/
theorem diophantine1_9_1_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 87 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 88 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 88 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 88 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 88 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 88 ^ y is impossible.
-/
theorem diophantine1_9_1_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (88 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 88 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 89 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 89 ^ y,
if x >= 4, 89 ^ y = 1 (mod 81).
So y = 0 (mod 18), 
Therefore, 89 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 1 = 89 ^ y is impossible.
-/
theorem diophantine1_9_1_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (89 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 89 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 90 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 90 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 90 ^ y is impossible.
-/
theorem diophantine1_9_1_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 90 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 91 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 91 ^ y,
if y >= 1, 9 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 91 ^ y is impossible.
-/
theorem diophantine1_9_1_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (91 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 91 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 92 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 92 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 92 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 92 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 92 ^ y is impossible.
-/
theorem diophantine1_9_1_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (92 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 92 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 93 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 93 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 93 ^ y is impossible.
-/
theorem diophantine1_9_1_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 93 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 94 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 94 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 94 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 94 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 94 ^ y is impossible.
-/
theorem diophantine1_9_1_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (94 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 94 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 95 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 19 of 95 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 95 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 95 ^ y,
if y >= 1, 9 ^ x = 18 (mod 19).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 95 ^ y is impossible.
-/
theorem diophantine1_9_1_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (95 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 19 = 18 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 95 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 96 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 96 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 96 ^ y is impossible.
-/
theorem diophantine1_9_1_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 109)   9 ^ x + 1 = 97 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 97 ^ y,
if x >= 4, 97 ^ y = 1 (mod 81).
So y = 0 (mod 27), 
Therefore, 97 ^ y = 1 (mod 109).
So 9 ^ x = 0 (mod 109), but this is impossible.
Therefore, x < 4.
Further examination shows that 9 ^ x + 1 = 97 ^ y is impossible.
-/
theorem diophantine1_9_1_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 4
  have h7 := Claim (9 ^ x % 81 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 4, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 81 = 1 := by omega
  have h9 := Claim (y % 27 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 81 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 109) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 27 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 109) [0]) [
    {prop := List.Mem (97 ^ y % 109) [1], proof := h10},
    {prop := 9 ^ x + 1 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 109) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 3 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 97 ^ y, proof := h3},
    {prop := x <= 3, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 98 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 98 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 98 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 98 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 98 ^ y is impossible.
-/
theorem diophantine1_9_1_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (98 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 98 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 99 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 99 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 99 ^ y is impossible.
-/
theorem diophantine1_9_1_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (99 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 99 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 100 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 100 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 100 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 100 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 100 ^ y is impossible.
-/
theorem diophantine1_9_1_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (100 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 100 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 101 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 101 ^ y,
if x >= 3, 101 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 9).
Therefore, 101 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 101 ^ y is impossible.
-/
theorem diophantine1_9_1_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 101 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (101 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 101 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 102 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 102 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 102 ^ y is impossible.
-/
theorem diophantine1_9_1_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 102 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying prime 109...
-- Trying prime 163...
-- Trying prime 271...
-- Trying prime 379...
-- Trying prime 433...
-- Trying to disprove y >= 1 with prime factor 103 of 103 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 103 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 103 ^ y,
if y >= 1, 9 ^ x = 102 (mod 103).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 103 ^ y is impossible.
-/
theorem diophantine1_9_1_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (103 ^ y % 103 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 103 = 102 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 103 = 102, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 103 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 104 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 104 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 104 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 104 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 104 ^ y is impossible.
-/
theorem diophantine1_9_1_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (104 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 104 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 105 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 105 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 105 ^ y is impossible.
-/
theorem diophantine1_9_1_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 105 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 106 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 106 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 106 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 106 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 106 ^ y is impossible.
-/
theorem diophantine1_9_1_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (106 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 106 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 107 of 107 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 107 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 107 ^ y,
if y >= 1, 9 ^ x = 106 (mod 107).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 107 ^ y is impossible.
-/
theorem diophantine1_9_1_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (107 ^ y % 107 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 107 = 106 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 107 = 106, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 107 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 108 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 108 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 108 ^ y is impossible.
-/
theorem diophantine1_9_1_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 108 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying to disprove x >= 4 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 109 of 109 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 109 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 109 ^ y,
if y >= 1, 9 ^ x = 108 (mod 109).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 109 ^ y is impossible.
-/
theorem diophantine1_9_1_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (109 ^ y % 109 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 109 = 108 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 109 = 108, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 109 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 110 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 110 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 110 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 110 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 110 ^ y is impossible.
-/
theorem diophantine1_9_1_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (110 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 110 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 111 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 111 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 111 ^ y is impossible.
-/
theorem diophantine1_9_1_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 111 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 112 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 112 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 112 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 112 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 112 ^ y is impossible.
-/
theorem diophantine1_9_1_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (112 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 112 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove x >= 3 with prime factor 3 of 9 ...
-- Trying prime 19...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 19)   9 ^ x + 1 = 113 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 113 ^ y,
if x >= 3, 113 ^ y = 1 (mod 27).
So y = 0 (mod 18), 
which implies y = 0 (mod 2).
Therefore, 113 ^ y = 1 (mod 19).
So 9 ^ x = 0 (mod 19), but this is impossible.
Therefore, x < 3.
Further examination shows that 9 ^ x + 1 = 113 ^ y is impossible.
-/
theorem diophantine1_9_1_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 3
  have h7 := Claim (9 ^ x % 27 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 3, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 27 = 1 := by omega
  have h9 := Claim (y % 18 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 27 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 19) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 18 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (9 ^ x % 19) [0]) [
    {prop := List.Mem (113 ^ y % 19) [1], proof := h10},
    {prop := 9 ^ x + 1 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (9 ^ x % 19) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 2 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 113 ^ y, proof := h3},
    {prop := x <= 2, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 114 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 114 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 114 ^ y is impossible.
-/
theorem diophantine1_9_1_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 114 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 115 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 23 of 115 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 115 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 115 ^ y,
if y >= 1, 9 ^ x = 22 (mod 23).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 115 ^ y is impossible.
-/
theorem diophantine1_9_1_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (115 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 23 = 22 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 115 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 116 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 116 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 116 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 116 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 116 ^ y is impossible.
-/
theorem diophantine1_9_1_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (116 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 116 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 117 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 117 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 9), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 117 ^ y is impossible.
-/
theorem diophantine1_9_1_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 9 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (117 ^ y % 9 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 117 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 118 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 118 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 118 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 118 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 118 ^ y is impossible.
-/
theorem diophantine1_9_1_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (118 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 118 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 119 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 119 ^ y,
if y >= 1, 9 ^ x = 6 (mod 7).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 119 ^ y is impossible.
-/
theorem diophantine1_9_1_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 7 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 7 = 6 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 7 = 6, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 120 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 120 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 120 ^ y is impossible.
-/
theorem diophantine1_9_1_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 120 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 121 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 121 ^ y,
if y >= 1, 9 ^ x = 10 (mod 11).
However, this is impossible.
Therefore, y < 1.
So 9 ^ x + 1 = 121 ^ y is impossible.
-/
theorem diophantine1_9_1_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (121 ^ y % 11 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 11 = 10 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 11 = 10, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 121 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 122 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 122 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 122 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 122 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 122 ^ y is impossible.
-/
theorem diophantine1_9_1_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (122 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 122 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   9 ^ x + 1 = 123 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 123 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 3), which is impossible.
Therefore, x < 1 or y < 1.
So 9 ^ x + 1 = 123 ^ y is impossible.
-/
theorem diophantine1_9_1_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (9 ^ x % 3 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 123 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove y >= 1 with prime factor 2 of 124 ...
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 2 of 124 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   9 ^ x + 1 = 124 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 124 ^ y,
if y >= 2, 9 ^ x = 3 (mod 4).
However, this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 124 ^ y is impossible.
-/
theorem diophantine1_9_1_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (124 ^ y % 4 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 4 = 3 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 4 = 3, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 124 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 3 of 9 ...
-- Trying to disprove y >= 1 with prime factor 5 of 125 ...
-- Trying to disprove x >= 2 with prime factor 3 of 9 ...
-- Trying to disprove y >= 2 with prime factor 5 of 125 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 11)   9 ^ x + 1 = 125 ^ y
For positive integers x, y satisfying 9 ^ x + 1 = 125 ^ y,
if y >= 2, 9 ^ x = 24 (mod 25).
So x = 5 (mod 10), 
which implies x = 0 (mod 5).
Therefore, 9 ^ x = 1 (mod 11).
So 125 ^ y = 2 (mod 11), but this is impossible.
Therefore, y < 2.
Further examination shows that 9 ^ x + 1 = 125 ^ y is impossible.
-/
theorem diophantine1_9_1_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 9 ^ x + 1 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (125 ^ y % 25 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 9 ^ x % 25 = 24 := by omega
  have h9 := Claim (x % 10 = 5) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 9 ^ x % 25 = 24, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (9 ^ x % 11) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 10 = 5, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (125 ^ y % 11) [2]) [
    {prop := List.Mem (9 ^ x % 11) [1], proof := h10},
    {prop := 9 ^ x + 1 = 125 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (125 ^ y % 11) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 9 ^ x + 1 = 125 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
