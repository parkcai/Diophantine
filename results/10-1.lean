-- Generated by Diophantine Solver V1, developed by parkcai, Eureka Lab.
-- Consists of transcendental diophantine equations a ^ x + b = c ^ y, for positive integers x, y.
-- a, b and c range over the following intervals:
-- 10 <= a <= 10
-- 1 <= b <= 1
-- 2 <= c <= 125
-- trivial cases where a, b, c are not pairwise coprime are not skipped.


-- Claim Structure
structure VerifiedFact where
  prop : Prop
  proof : prop

axiom Claim (prop_to_claim : Prop)
  (verified_facts : List VerifiedFact)
  (revalidator : String)
  : prop_to_claim


/-
(Class I, Type iii)   10 ^ x + 1 = 2 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 2 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 2 ^ y is impossible.
-/
theorem diophantine1_10_1_2 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 2 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (2 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 2 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 3 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 3 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 3 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 3 ^ y is impossible.
-/
theorem diophantine1_10_1_3 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 3 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (3 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 3 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 4 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 4 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 4 ^ y is impossible.
-/
theorem diophantine1_10_1_4 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 4 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (4 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 4 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 5 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 5 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 5 ^ y is impossible.
-/
theorem diophantine1_10_1_5 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 5 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (5 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 5 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 6 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 6 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 6 ^ y is impossible.
-/
theorem diophantine1_10_1_6 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 6 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (6 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 6 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 7 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove y >= 2 with prime factor 7 of 7 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   10 ^ x + 1 = 7 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 7 ^ y,
if y >= 2, 10 ^ x = 48 (mod 49).
So x = 21 (mod 42), 
which implies x = 0 (mod 21).
Therefore, 10 ^ x = 1 (mod 43).
So 7 ^ y = 2 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 10 ^ x + 1 = 7 ^ y is impossible.
-/
theorem diophantine1_10_1_7 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 7 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (7 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 43) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (7 ^ y % 43) [2]) [
    {prop := List.Mem (10 ^ x % 43) [1], proof := h10},
    {prop := 10 ^ x + 1 = 7 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (7 ^ y % 43) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 7 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 8 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 8 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 8 ^ y is impossible.
-/
theorem diophantine1_10_1_8 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 8 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (8 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 8 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 9 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 9 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 9 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 9 ^ y is impossible.
-/
theorem diophantine1_10_1_9 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 9 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (9 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 9 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 10 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 10 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 10 ^ y is impossible.
-/
theorem diophantine1_10_1_10 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 10 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (10 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 10 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove x >= 6 with prime factor 2 of 10 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   10 ^ x + 1 = 11 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 11 ^ y,
if x >= 6, 11 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 11 ^ y = 1 (mod 17).
So 10 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (1, 1).
-/
theorem diophantine1_10_1_11 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 11 ^ y) :
  List.Mem (x, y) [(1, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (10 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 11 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 11 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (11 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 17) [0]) [
    {prop := List.Mem (11 ^ y % 17) [1], proof := h10},
    {prop := 10 ^ x + 1 = 11 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(1, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 11 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 12 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 12 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 12 ^ y is impossible.
-/
theorem diophantine1_10_1_12 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 12 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (12 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 12 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 13 of 13 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 13 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 13 ^ y,
if x >= 2, 13 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20 (mod 40).
Therefore, 13 ^ y = 1, 40 (mod 41).
So 10 ^ x = 0, 39 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 13 ^ y is impossible.
-/
theorem diophantine1_10_1_13 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 13 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 13 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 13 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (13 ^ y % 41) [1, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0, 39]) [
    {prop := List.Mem (13 ^ y % 41) [1, 40], proof := h10},
    {prop := 10 ^ x + 1 = 13 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 13 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 14 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 14 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 14 ^ y is impossible.
-/
theorem diophantine1_10_1_14 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 14 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (14 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 14 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 15 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 15 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 15 ^ y is impossible.
-/
theorem diophantine1_10_1_15 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 15 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (15 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 15 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 16 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 16 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 16 ^ y is impossible.
-/
theorem diophantine1_10_1_16 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 16 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (16 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 16 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 17 of 17 ...
-- Trying prime 97...
-- Trying prime 113...
-- Trying prime 193...
-- Trying prime 241...
-- Trying prime 257...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 17 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 17 ^ y,
if x >= 2, 17 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20 (mod 40).
Therefore, 17 ^ y = 1, 40 (mod 41).
So 10 ^ x = 0, 39 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 17 ^ y is impossible.
-/
theorem diophantine1_10_1_17 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 17 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 17 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 17 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (17 ^ y % 41) [1, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0, 39]) [
    {prop := List.Mem (17 ^ y % 41) [1, 40], proof := h10},
    {prop := 10 ^ x + 1 = 17 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 17 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 18 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 18 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 18 ^ y is impossible.
-/
theorem diophantine1_10_1_18 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 18 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (18 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 18 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 19 of 19 ...
-- Trying prime 37...
-- Trying prime 73...
-- Trying prime 109...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   10 ^ x + 1 = 19 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 19 ^ y,
if y >= 1, 10 ^ x = 18 (mod 19).
So x = 9 (mod 18), 
which implies x = 3, 9, 15, 21, 27, 33, 39 (mod 42).
Therefore, 10 ^ x = 111, 95, 63, 126, 125, 123, 119 (mod 127).
So 19 ^ y = 112, 96, 64, 0, 126, 124, 120 (mod 127), but this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 19 ^ y is impossible.
-/
theorem diophantine1_10_1_19 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 19 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (19 ^ y % 19 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 19 = 18 := by omega
  have h9 := Claim (x % 18 = 9) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 19 = 18, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 127) [111, 95, 63, 126, 125, 123, 119]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 18 = 9, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (19 ^ y % 127) [112, 96, 64, 0, 126, 124, 120]) [
    {prop := List.Mem (10 ^ x % 127) [111, 95, 63, 126, 125, 123, 119], proof := h10},
    {prop := 10 ^ x + 1 = 19 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (19 ^ y % 127) [112, 96, 64, 0, 126, 124, 120], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 19 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 20 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 20 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 20 ^ y is impossible.
-/
theorem diophantine1_10_1_20 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 20 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (20 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 20 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 21 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 21 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 21 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 21 ^ y is impossible.
-/
theorem diophantine1_10_1_21 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 21 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (21 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 21 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 22 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 22 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 22 ^ y is impossible.
-/
theorem diophantine1_10_1_22 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 22 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (22 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 22 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 23 of 23 ...
-- Trying prime 67...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 67)   10 ^ x + 1 = 23 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 23 ^ y,
if y >= 1, 10 ^ x = 22 (mod 23).
So x = 11 (mod 22), 
which implies x = 0, 11, 22 (mod 33).
Therefore, 10 ^ x = 1, 29, 37 (mod 67).
So 23 ^ y = 2, 30, 38 (mod 67), but this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 23 ^ y is impossible.
-/
theorem diophantine1_10_1_23 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 23 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (23 ^ y % 23 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 23 = 22 := by omega
  have h9 := Claim (x % 22 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 23 = 22, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 67) [1, 29, 37]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (23 ^ y % 67) [2, 30, 38]) [
    {prop := List.Mem (10 ^ x % 67) [1, 29, 37], proof := h10},
    {prop := 10 ^ x + 1 = 23 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (23 ^ y % 67) [2, 30, 38], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 23 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 24 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 24 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 24 ^ y is impossible.
-/
theorem diophantine1_10_1_24 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 24 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (24 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 24 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 25 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 25 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 25 ^ y is impossible.
-/
theorem diophantine1_10_1_25 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 25 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (25 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 25 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 26 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 26 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 26 ^ y is impossible.
-/
theorem diophantine1_10_1_26 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 26 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (26 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 26 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 27 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 27 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 27 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 27 ^ y is impossible.
-/
theorem diophantine1_10_1_27 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 27 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (27 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 27 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 28 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 28 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 28 ^ y is impossible.
-/
theorem diophantine1_10_1_28 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 28 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (28 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 28 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 1 = 29 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 29 ^ y,
if x >= 2, 29 ^ y = 1 (mod 25).
So y = 0 (mod 10), 
Therefore, 29 ^ y = 1 (mod 11).
So 10 ^ x = 0 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 29 ^ y is impossible.
-/
theorem diophantine1_10_1_29 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 29 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 29 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 29 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (29 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [0]) [
    {prop := List.Mem (29 ^ y % 11) [1], proof := h10},
    {prop := 10 ^ x + 1 = 29 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 29 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 30 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 30 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 30 ^ y is impossible.
-/
theorem diophantine1_10_1_30 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 30 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (30 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 30 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 31 of 31 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 31 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 31 ^ y,
if y >= 1, 10 ^ x = 30 (mod 31).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 31 ^ y is impossible.
-/
theorem diophantine1_10_1_31 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 31 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (31 ^ y % 31 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 31 = 30 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 31 = 30, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 31 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 32 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 32 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 32 ^ y is impossible.
-/
theorem diophantine1_10_1_32 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 32 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (32 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 32 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 33 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 33 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 33 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 33 ^ y is impossible.
-/
theorem diophantine1_10_1_33 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 33 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (33 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 33 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 34 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 34 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 34 ^ y is impossible.
-/
theorem diophantine1_10_1_34 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 34 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (34 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 34 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 35 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 35 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 35 ^ y is impossible.
-/
theorem diophantine1_10_1_35 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 35 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (35 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 35 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 36 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 36 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 36 ^ y is impossible.
-/
theorem diophantine1_10_1_36 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 36 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (36 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 36 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 37 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 37 ^ y,
if x >= 2, 37 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0 (mod 5).
Therefore, 37 ^ y = 1 (mod 41).
So 10 ^ x = 0 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 37 ^ y is impossible.
-/
theorem diophantine1_10_1_37 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 37 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 37 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 37 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (37 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0]) [
    {prop := List.Mem (37 ^ y % 41) [1], proof := h10},
    {prop := 10 ^ x + 1 = 37 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 37 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 38 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 38 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 38 ^ y is impossible.
-/
theorem diophantine1_10_1_38 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 38 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (38 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 38 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 39 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 39 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 39 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 39 ^ y is impossible.
-/
theorem diophantine1_10_1_39 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 39 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (39 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 39 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 40 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 40 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 40 ^ y is impossible.
-/
theorem diophantine1_10_1_40 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 40 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (40 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 40 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 41 of 41 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 41 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 41 ^ y,
if y >= 1, 10 ^ x = 40 (mod 41).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 41 ^ y is impossible.
-/
theorem diophantine1_10_1_41 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 41 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (41 ^ y % 41 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 41 = 40 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 41 = 40, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 41 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 42 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 42 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 42 ^ y is impossible.
-/
theorem diophantine1_10_1_42 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 42 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (42 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 42 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 43 of 43 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 43 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 43 ^ y,
if y >= 1, 10 ^ x = 42 (mod 43).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 43 ^ y is impossible.
-/
theorem diophantine1_10_1_43 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 43 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (43 ^ y % 43 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 43 = 42 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 43 = 42, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 43 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 44 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 44 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 44 ^ y is impossible.
-/
theorem diophantine1_10_1_44 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 44 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (44 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 44 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 45 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 45 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 45 ^ y is impossible.
-/
theorem diophantine1_10_1_45 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 45 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (45 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 45 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 46 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 46 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 46 ^ y is impossible.
-/
theorem diophantine1_10_1_46 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 46 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (46 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 46 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 47 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 47 ^ y,
if x >= 2, 47 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20 (mod 40).
Therefore, 47 ^ y = 1, 40 (mod 41).
So 10 ^ x = 0, 39 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 47 ^ y is impossible.
-/
theorem diophantine1_10_1_47 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 47 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 47 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 47 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (47 ^ y % 41) [1, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0, 39]) [
    {prop := List.Mem (47 ^ y % 41) [1, 40], proof := h10},
    {prop := 10 ^ x + 1 = 47 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 47 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 48 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 48 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 48 ^ y is impossible.
-/
theorem diophantine1_10_1_48 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 48 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (48 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 48 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 49 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove y >= 2 with prime factor 7 of 49 ...
-- Trying prime 43...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 43)   10 ^ x + 1 = 49 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 49 ^ y,
if y >= 2, 10 ^ x = 48 (mod 49).
So x = 21 (mod 42), 
which implies x = 0 (mod 21).
Therefore, 10 ^ x = 1 (mod 43).
So 49 ^ y = 2 (mod 43), but this is impossible.
Therefore, y < 2.
Further examination shows that 10 ^ x + 1 = 49 ^ y is impossible.
-/
theorem diophantine1_10_1_49 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 49 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (49 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 43) [1]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (49 ^ y % 43) [2]) [
    {prop := List.Mem (10 ^ x % 43) [1], proof := h10},
    {prop := 10 ^ x + 1 = 49 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (49 ^ y % 43) [2], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 49 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 50 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 50 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 50 ^ y is impossible.
-/
theorem diophantine1_10_1_50 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 50 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (50 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 50 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 51 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 51 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 51 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 51 ^ y is impossible.
-/
theorem diophantine1_10_1_51 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 51 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (51 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 51 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 52 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 52 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 52 ^ y is impossible.
-/
theorem diophantine1_10_1_52 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 52 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (52 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 52 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 53 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 53 ^ y,
if x >= 2, 53 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20 (mod 40).
Therefore, 53 ^ y = 1, 40 (mod 41).
So 10 ^ x = 0, 39 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 53 ^ y is impossible.
-/
theorem diophantine1_10_1_53 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 53 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 53 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 53 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (53 ^ y % 41) [1, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0, 39]) [
    {prop := List.Mem (53 ^ y % 41) [1, 40], proof := h10},
    {prop := 10 ^ x + 1 = 53 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 53 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 54 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 54 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 54 ^ y is impossible.
-/
theorem diophantine1_10_1_54 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 54 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (54 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 54 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 55 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 55 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 55 ^ y is impossible.
-/
theorem diophantine1_10_1_55 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 55 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (55 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 55 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 56 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 56 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 56 ^ y is impossible.
-/
theorem diophantine1_10_1_56 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 56 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (56 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 56 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 57 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 57 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 57 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 57 ^ y is impossible.
-/
theorem diophantine1_10_1_57 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 57 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (57 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 57 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 58 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 58 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 58 ^ y is impossible.
-/
theorem diophantine1_10_1_58 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 58 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (58 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 58 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 1 = 59 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 59 ^ y,
if x >= 2, 59 ^ y = 1 (mod 25).
So y = 0 (mod 10), 
which implies y = 0 (mod 5).
Therefore, 59 ^ y = 1 (mod 11).
So 10 ^ x = 0 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 59 ^ y is impossible.
-/
theorem diophantine1_10_1_59 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 59 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 59 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 59 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (59 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [0]) [
    {prop := List.Mem (59 ^ y % 11) [1], proof := h10},
    {prop := 10 ^ x + 1 = 59 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 59 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 60 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 60 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 60 ^ y is impossible.
-/
theorem diophantine1_10_1_60 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 60 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (60 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 60 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 61 of 61 ...
-- Trying prime 181...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 181)   10 ^ x + 1 = 61 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 61 ^ y,
if y >= 1, 10 ^ x = 60 (mod 61).
So x = 30 (mod 60), 
which implies x = 30, 90, 150 (mod 180).
Therefore, 10 ^ x = 49, 180, 133 (mod 181).
So 61 ^ y = 50, 0, 134 (mod 181), but this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 61 ^ y is impossible.
-/
theorem diophantine1_10_1_61 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 61 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (61 ^ y % 61 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 61 = 60 := by omega
  have h9 := Claim (x % 60 = 30) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 61 = 60, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 181) [49, 180, 133]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 60 = 30, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (61 ^ y % 181) [50, 0, 134]) [
    {prop := List.Mem (10 ^ x % 181) [49, 180, 133], proof := h10},
    {prop := 10 ^ x + 1 = 61 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (61 ^ y % 181) [50, 0, 134], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 61 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 62 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 62 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 62 ^ y is impossible.
-/
theorem diophantine1_10_1_62 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 62 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (62 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 62 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 63 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 63 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 63 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 63 ^ y is impossible.
-/
theorem diophantine1_10_1_63 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 63 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (63 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 63 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 64 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 64 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 64 ^ y is impossible.
-/
theorem diophantine1_10_1_64 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 64 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (64 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 64 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 65 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 65 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 65 ^ y is impossible.
-/
theorem diophantine1_10_1_65 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 65 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (65 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 65 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 66 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 66 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 66 ^ y is impossible.
-/
theorem diophantine1_10_1_66 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 66 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (66 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 66 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 67 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 67 ^ y,
if x >= 2, 67 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20 (mod 40).
Therefore, 67 ^ y = 1, 40 (mod 41).
So 10 ^ x = 0, 39 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 67 ^ y is impossible.
-/
theorem diophantine1_10_1_67 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 67 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 67 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 67 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (67 ^ y % 41) [1, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0, 39]) [
    {prop := List.Mem (67 ^ y % 41) [1, 40], proof := h10},
    {prop := 10 ^ x + 1 = 67 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 67 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 68 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 68 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 68 ^ y is impossible.
-/
theorem diophantine1_10_1_68 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 68 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (68 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 68 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 69 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 69 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 69 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 69 ^ y is impossible.
-/
theorem diophantine1_10_1_69 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 69 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (69 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 69 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 70 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 70 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 70 ^ y is impossible.
-/
theorem diophantine1_10_1_70 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 70 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (70 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 70 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove x >= 6 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 71 of 71 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 71 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 71 ^ y,
if y >= 1, 10 ^ x = 70 (mod 71).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 71 ^ y is impossible.
-/
theorem diophantine1_10_1_71 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 71 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (71 ^ y % 71 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 71 = 70 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 71 = 70, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 71 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 72 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 72 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 72 ^ y is impossible.
-/
theorem diophantine1_10_1_72 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 72 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (72 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 72 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 73 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 73 ^ y,
if x >= 2, 73 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0 (mod 4).
Therefore, 73 ^ y = 1 (mod 41).
So 10 ^ x = 0 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 73 ^ y is impossible.
-/
theorem diophantine1_10_1_73 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 73 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 73 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 73 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (73 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0]) [
    {prop := List.Mem (73 ^ y % 41) [1], proof := h10},
    {prop := 10 ^ x + 1 = 73 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 73 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 74 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 74 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 74 ^ y is impossible.
-/
theorem diophantine1_10_1_74 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 74 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (74 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 74 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 75 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 75 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 75 ^ y is impossible.
-/
theorem diophantine1_10_1_75 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 75 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (75 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 75 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 76 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 76 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 76 ^ y is impossible.
-/
theorem diophantine1_10_1_76 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 76 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (76 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 76 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 77 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 11 of 77 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 77 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 77 ^ y,
if x >= 2, 77 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
Therefore, 77 ^ y = 1 (mod 41).
So 10 ^ x = 0 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 77 ^ y is impossible.
-/
theorem diophantine1_10_1_77 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 77 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 77 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 77 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (77 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0]) [
    {prop := List.Mem (77 ^ y % 41) [1], proof := h10},
    {prop := 10 ^ x + 1 = 77 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 77 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 78 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 78 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 78 ^ y is impossible.
-/
theorem diophantine1_10_1_78 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 78 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (78 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 78 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 1 = 79 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 79 ^ y,
if x >= 2, 79 ^ y = 1 (mod 25).
So y = 0 (mod 10), 
Therefore, 79 ^ y = 1 (mod 11).
So 10 ^ x = 0 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 79 ^ y is impossible.
-/
theorem diophantine1_10_1_79 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 79 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 79 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 79 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (79 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [0]) [
    {prop := List.Mem (79 ^ y % 11) [1], proof := h10},
    {prop := 10 ^ x + 1 = 79 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 79 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 80 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 80 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 80 ^ y is impossible.
-/
theorem diophantine1_10_1_80 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 80 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (80 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 80 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 81 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 81 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 81 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 81 ^ y is impossible.
-/
theorem diophantine1_10_1_81 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 81 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (81 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 81 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 82 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 82 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 82 ^ y is impossible.
-/
theorem diophantine1_10_1_82 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 82 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (82 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 82 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Trying prime 61...
-- Trying prime 101...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 101)   10 ^ x + 1 = 83 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 83 ^ y,
if x >= 2, 83 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20, 40, 60, 80 (mod 100).
Therefore, 83 ^ y = 1, 84, 87, 36, 95 (mod 101).
So 10 ^ x = 0, 83, 86, 35, 94 (mod 101), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 83 ^ y is impossible.
-/
theorem diophantine1_10_1_83 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 83 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 83 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 83 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (83 ^ y % 101) [1, 84, 87, 36, 95]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 101) [0, 83, 86, 35, 94]) [
    {prop := List.Mem (83 ^ y % 101) [1, 84, 87, 36, 95], proof := h10},
    {prop := 10 ^ x + 1 = 83 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 101) [0, 83, 86, 35, 94], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 83 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 84 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 84 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 84 ^ y is impossible.
-/
theorem diophantine1_10_1_84 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 84 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (84 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 84 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 85 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 85 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 85 ^ y is impossible.
-/
theorem diophantine1_10_1_85 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 85 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (85 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 85 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 86 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 86 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 86 ^ y is impossible.
-/
theorem diophantine1_10_1_86 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 86 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (86 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 86 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 87 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 87 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 87 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 87 ^ y is impossible.
-/
theorem diophantine1_10_1_87 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 87 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (87 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 87 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 88 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 88 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 88 ^ y is impossible.
-/
theorem diophantine1_10_1_88 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 88 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (88 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 88 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Trying prime 31...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 31)   10 ^ x + 1 = 89 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 89 ^ y,
if x >= 2, 89 ^ y = 1 (mod 25).
So y = 0 (mod 10), 
Therefore, 89 ^ y = 1 (mod 31).
So 10 ^ x = 0 (mod 31), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 89 ^ y is impossible.
-/
theorem diophantine1_10_1_89 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 89 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 89 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 89 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (89 ^ y % 31) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 31) [0]) [
    {prop := List.Mem (89 ^ y % 31) [1], proof := h10},
    {prop := 10 ^ x + 1 = 89 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 31) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 89 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 90 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 90 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 90 ^ y is impossible.
-/
theorem diophantine1_10_1_90 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 90 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (90 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 90 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 91 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 13 of 91 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove y >= 2 with prime factor 7 of 91 ...
-- Trying prime 43...
-- Trying prime 127...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 127)   10 ^ x + 1 = 91 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 91 ^ y,
if y >= 2, 10 ^ x = 48 (mod 49).
So x = 21 (mod 42).
Therefore, 10 ^ x = 126 (mod 127).
So 91 ^ y = 0 (mod 127), but this is impossible.
Therefore, y < 2.
Further examination shows that 10 ^ x + 1 = 91 ^ y is impossible.
-/
theorem diophantine1_10_1_91 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 91 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (91 ^ y % 49 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 49 = 48 := by omega
  have h9 := Claim (x % 42 = 21) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 49 = 48, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 127) [126]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 42 = 21, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (91 ^ y % 127) [0]) [
    {prop := List.Mem (10 ^ x % 127) [126], proof := h10},
    {prop := 10 ^ x + 1 = 91 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (91 ^ y % 127) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 91 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 92 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 92 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 92 ^ y is impossible.
-/
theorem diophantine1_10_1_92 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 92 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (92 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 92 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 93 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 93 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 93 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 93 ^ y is impossible.
-/
theorem diophantine1_10_1_93 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 93 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (93 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 93 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 94 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 94 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 94 ^ y is impossible.
-/
theorem diophantine1_10_1_94 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 94 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (94 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 94 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 95 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 95 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 95 ^ y is impossible.
-/
theorem diophantine1_10_1_95 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 95 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (95 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 95 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 96 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 96 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 96 ^ y is impossible.
-/
theorem diophantine1_10_1_96 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 96 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (96 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 96 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 97 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 97 ^ y,
if x >= 2, 97 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0, 20 (mod 40).
Therefore, 97 ^ y = 1, 40 (mod 41).
So 10 ^ x = 0, 39 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 97 ^ y is impossible.
-/
theorem diophantine1_10_1_97 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 97 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 97 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 97 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (97 ^ y % 41) [1, 40]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0, 39]) [
    {prop := List.Mem (97 ^ y % 41) [1, 40], proof := h10},
    {prop := 10 ^ x + 1 = 97 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0, 39], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 97 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 98 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 98 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 98 ^ y is impossible.
-/
theorem diophantine1_10_1_98 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 98 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (98 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 98 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 99 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 99 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 99 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 99 ^ y is impossible.
-/
theorem diophantine1_10_1_99 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 99 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (99 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 99 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 100 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 100 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 100 ^ y is impossible.
-/
theorem diophantine1_10_1_100 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 100 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (100 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 100 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove x >= 6 with prime factor 2 of 10 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   10 ^ x + 1 = 101 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 101 ^ y,
if x >= 6, 101 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
which implies y = 0 (mod 2).
Therefore, 101 ^ y = 1 (mod 17).
So 10 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that (x, y) = (2, 1).
-/
theorem diophantine1_10_1_101 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 101 ^ y) :
  List.Mem (x, y) [(2, 1)]
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (10 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 101 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 101 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (101 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 17) [0]) [
    {prop := List.Mem (101 ^ y % 17) [1], proof := h10},
    {prop := 10 ^ x + 1 = 101 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim (List.Mem (x, y) [(2, 1)]) [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 101 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 102 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 102 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 102 ^ y is impossible.
-/
theorem diophantine1_10_1_102 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 102 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (102 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 102 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 103 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 103 ^ y,
if x >= 2, 103 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
Therefore, 103 ^ y = 1 (mod 41).
So 10 ^ x = 0 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 103 ^ y is impossible.
-/
theorem diophantine1_10_1_103 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 103 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 103 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 103 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (103 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0]) [
    {prop := List.Mem (103 ^ y % 41) [1], proof := h10},
    {prop := 10 ^ x + 1 = 103 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 103 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 104 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 104 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 104 ^ y is impossible.
-/
theorem diophantine1_10_1_104 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 104 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (104 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 104 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 105 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 105 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 105 ^ y is impossible.
-/
theorem diophantine1_10_1_105 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 105 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (105 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 105 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 106 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 106 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 106 ^ y is impossible.
-/
theorem diophantine1_10_1_106 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 106 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (106 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 106 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove x >= 6 with prime factor 2 of 10 ...
-- Trying prime 17...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 17)   10 ^ x + 1 = 107 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 107 ^ y,
if x >= 6, 107 ^ y = 1 (mod 64).
So y = 0 (mod 16), 
Therefore, 107 ^ y = 1 (mod 17).
So 10 ^ x = 0 (mod 17), but this is impossible.
Therefore, x < 6.
Further examination shows that 10 ^ x + 1 = 107 ^ y is impossible.
-/
theorem diophantine1_10_1_107 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 107 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 6
  have h7 := Claim (10 ^ x % 64 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 6, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 107 ^ y % 64 = 1 := by omega
  have h9 := Claim (y % 16 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 107 ^ y % 64 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (107 ^ y % 17) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 16 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 17) [0]) [
    {prop := List.Mem (107 ^ y % 17) [1], proof := h10},
    {prop := 10 ^ x + 1 = 107 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 17) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 5 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 107 ^ y, proof := h3},
    {prop := x <= 5, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 108 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 108 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 108 ^ y is impossible.
-/
theorem diophantine1_10_1_108 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 108 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (108 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 108 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 11...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 11)   10 ^ x + 1 = 109 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 109 ^ y,
if x >= 2, 109 ^ y = 1 (mod 25).
So y = 0 (mod 10), 
which implies y = 0 (mod 2).
Therefore, 109 ^ y = 1 (mod 11).
So 10 ^ x = 0 (mod 11), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 109 ^ y is impossible.
-/
theorem diophantine1_10_1_109 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 109 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 109 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 109 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (109 ^ y % 11) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 10 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 11) [0]) [
    {prop := List.Mem (109 ^ y % 11) [1], proof := h10},
    {prop := 10 ^ x + 1 = 109 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 11) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 109 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 110 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 110 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 110 ^ y is impossible.
-/
theorem diophantine1_10_1_110 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 110 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (110 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 110 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 111 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 111 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 111 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 111 ^ y is impossible.
-/
theorem diophantine1_10_1_111 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 111 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (111 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 111 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 112 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 112 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 112 ^ y is impossible.
-/
theorem diophantine1_10_1_112 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 112 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (112 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 112 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying prime 41...
-- Succeeded.
/-
(Class II, Back Mode, with magic prime 41)   10 ^ x + 1 = 113 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 113 ^ y,
if x >= 2, 113 ^ y = 1 (mod 25).
So y = 0 (mod 20), 
which implies y = 0 (mod 10).
Therefore, 113 ^ y = 1 (mod 41).
So 10 ^ x = 0 (mod 41), but this is impossible.
Therefore, x < 2.
Further examination shows that 10 ^ x + 1 = 113 ^ y is impossible.
-/
theorem diophantine1_10_1_113 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 113 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : x >= 2
  have h7 := Claim (10 ^ x % 25 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 113 ^ y % 25 = 1 := by omega
  have h9 := Claim (y % 20 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := 113 ^ y % 25 = 1, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (113 ^ y % 41) [1]) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := y % 20 = 0, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (10 ^ x % 41) [0]) [
    {prop := List.Mem (113 ^ y % 41) [1], proof := h10},
    {prop := 10 ^ x + 1 = 113 ^ y, proof := h3},
  ] "compute_mod_sub"
  have h12 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := List.Mem (10 ^ x % 41) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : x <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 113 ^ y, proof := h3},
    {prop := x <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 114 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 114 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 114 ^ y is impossible.
-/
theorem diophantine1_10_1_114 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 114 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (114 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 114 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 115 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 115 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 115 ^ y is impossible.
-/
theorem diophantine1_10_1_115 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 115 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (115 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 115 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 116 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 116 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 116 ^ y is impossible.
-/
theorem diophantine1_10_1_116 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 116 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (116 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 116 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 117 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 117 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 117 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 117 ^ y is impossible.
-/
theorem diophantine1_10_1_117 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 117 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (117 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 117 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 118 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 118 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 118 ^ y is impossible.
-/
theorem diophantine1_10_1_118 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 118 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (118 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 118 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove y >= 1 with prime factor 7 of 119 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 17 of 119 ...
-- Trying prime 97...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 97)   10 ^ x + 1 = 119 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 119 ^ y,
if y >= 1, 10 ^ x = 16 (mod 17).
So x = 8 (mod 16), 
which implies x = 8, 24, 40, 56, 72, 88 (mod 96).
Therefore, 10 ^ x = 81, 75, 91, 16, 22, 6 (mod 97).
So 119 ^ y = 82, 76, 92, 17, 23, 7 (mod 97), but this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 119 ^ y is impossible.
-/
theorem diophantine1_10_1_119 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 119 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (119 ^ y % 17 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 17 = 16 := by omega
  have h9 := Claim (x % 16 = 8) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 17 = 16, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 97) [81, 75, 91, 16, 22, 6]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 16 = 8, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (119 ^ y % 97) [82, 76, 92, 17, 23, 7]) [
    {prop := List.Mem (10 ^ x % 97) [81, 75, 91, 16, 22, 6], proof := h10},
    {prop := 10 ^ x + 1 = 119 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (119 ^ y % 97) [82, 76, 92, 17, 23, 7], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 119 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 120 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 120 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 10), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 120 ^ y is impossible.
-/
theorem diophantine1_10_1_120 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 120 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 10 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (120 ^ y % 10 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 120 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 2 of 10 ...
-- Trying to disprove x >= 1 with prime factor 5 of 10 ...
-- Trying to disprove x >= 3 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 11 of 121 ...
-- Trying to disprove x >= 4 with prime factor 2 of 10 ...
-- Trying to disprove x >= 2 with prime factor 5 of 10 ...
-- Trying to disprove x >= 5 with prime factor 2 of 10 ...
-- Trying to disprove x >= 6 with prime factor 2 of 10 ...
-- Trying to disprove y >= 2 with prime factor 11 of 121 ...
-- Trying prime 23...
-- Succeeded.
/-
(Class II, Front Mode, with magic prime 23)   10 ^ x + 1 = 121 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 121 ^ y,
if y >= 2, 10 ^ x = 120 (mod 121).
So x = 11 (mod 22).
Therefore, 10 ^ x = 22 (mod 23).
So 121 ^ y = 0 (mod 23), but this is impossible.
Therefore, y < 2.
Further examination shows that 10 ^ x + 1 = 121 ^ y is impossible.
-/
theorem diophantine1_10_1_121 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 121 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 2
  have h7 := Claim (121 ^ y % 121 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 2, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 121 = 120 := by omega
  have h9 := Claim (x % 22 = 11) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 121 = 120, proof := h8},
  ] "observe_mod_cycle"
  have h10 := Claim (List.Mem (10 ^ x % 23) [22]) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := x % 22 = 11, proof := h9},
  ] "utilize_mod_cycle"
  have h11 := Claim (List.Mem (121 ^ y % 23) [0]) [
    {prop := List.Mem (10 ^ x % 23) [22], proof := h10},
    {prop := 10 ^ x + 1 = 121 ^ y, proof := h3},
  ] "compute_mod_add"
  have h12 := Claim False [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h2},
    {prop := List.Mem (121 ^ y % 23) [0], proof := h11},
  ] "exhaust_mod_cycle"
  apply False.elim h12
  have h7 : y <= 1 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 121 ^ y, proof := h3},
    {prop := y <= 1, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 122 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 122 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 122 ^ y is impossible.
-/
theorem diophantine1_10_1_122 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 122 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (122 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 122 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

-- Verbose mode on.
-- Trying to disprove x >= 1 with prime factor 2 of 10 ...
-- Trying to disprove y >= 1 with prime factor 3 of 123 ...
-- Succeeded.
/-
(Class II, Front Mode, no magic prime)   10 ^ x + 1 = 123 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 123 ^ y,
if y >= 1, 10 ^ x = 2 (mod 3).
However, this is impossible.
Therefore, y < 1.
So 10 ^ x + 1 = 123 ^ y is impossible.
-/
theorem diophantine1_10_1_123 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 123 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : y >= 1
  have h7 := Claim (123 ^ y % 3 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6},
  ] "pow_mod_eq_zero"
  have h8 : 10 ^ x % 3 = 2 := by omega
  have h9 := Claim False [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h1},
    {prop := 10 ^ x % 3 = 2, proof := h8},
  ] "observe_mod_cycle"
  apply False.elim h9
  have h7 : y <= 0 := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 123 ^ y, proof := h3},
    {prop := y <= 0, proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 124 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 124 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 2), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 124 ^ y is impossible.
-/
theorem diophantine1_10_1_124 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 124 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 2 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (124 ^ y % 2 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 124 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

/-
(Class I, Type iii)   10 ^ x + 1 = 125 ^ y
For positive integers x, y satisfying 10 ^ x + 1 = 125 ^ y,
if x >= 1 and y >= 1,
1 = 0 (mod 5), which is impossible.
Therefore, x < 1 or y < 1.
So 10 ^ x + 1 = 125 ^ y is impossible.
-/
theorem diophantine1_10_1_125 (x : Nat) (y : Nat) (h1 : x >= 1) (h2 : y >= 1) (h3 : 10 ^ x + 1 = 125 ^ y) :
  False
  := by
  have h4 : x % 1 = 0 := by omega
  have h5 : y % 1 = 0 := by omega
  by_cases h6 : And (x >= 1) (y >= 1)
  have h7 := Claim (10 ^ x % 5 = 0) [
    {prop := x % 1 = 0, proof := h4},
    {prop := x >= 1, proof := h6.left},
  ] "pow_mod_eq_zero"
  have h8 := Claim (125 ^ y % 5 = 0) [
    {prop := y % 1 = 0, proof := h5},
    {prop := y >= 1, proof := h6.right},
  ] "pow_mod_eq_zero"
  omega
  have h7 : Or (x <= 0) (y <= 0) := by omega
  have h8 := Claim False [
    {prop :=  x % 1 = 0, proof := h4},
    {prop :=  x >= 1, proof := h1},
    {prop :=  y % 1 = 0, proof := h5},
    {prop :=  y >= 1, proof := h2},
    {prop := 10 ^ x + 1 = 125 ^ y, proof := h3},
    {prop := Or (x <= 0) (y <= 0), proof := h7},
  ] "diophantine1_enumeration"
  exact h8

def main : IO Unit :=
  IO.println "Native Lean4 check passed."
